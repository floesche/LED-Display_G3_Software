
panelcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a28c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003b0  00802000  0000a28c  0000a340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004fb  008023b0  008023b0  0000a6f0  2**0
                  ALLOC
  3 .eeprom       00000082  00810000  00810000  0000a6f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00003900  00000000  00000000  0000a774  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000fa8  00000000  00000000  0000e074  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000140  00000000  00000000  0000f01c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000f47  00000000  00000000  0000f15c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000078f3  00000000  00000000  000100a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001407  00000000  00000000  00017996  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005bbd  00000000  00000000  00018d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000990  00000000  00000000  0001e95c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000214d  00000000  00000000  0001f2ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005300  00000000  00000000  00021439  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000775  00000000  00000000  00026739  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000e8  00000000  00000000  00026eae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__ctors_end>
       4:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
       8:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
       c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      10:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      14:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      18:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      1c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      20:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      24:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      28:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      2c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      30:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      34:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__vector_13>
      38:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      3c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      40:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      44:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      48:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      4c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      50:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      54:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      58:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      5c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      60:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      64:	0c 94 e1 37 	jmp	0x6fc2	; 0x6fc2 <__vector_25>
      68:	0c 94 2e 38 	jmp	0x705c	; 0x705c <__vector_26>
      6c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      70:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      74:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      78:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      7c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      80:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      84:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      88:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      8c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      90:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      94:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      98:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      9c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      a0:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      a4:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      a8:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      ac:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      b0:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      b4:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      b8:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__vector_46>
      bc:	0c 94 7f 38 	jmp	0x70fe	; 0x70fe <__vector_47>
      c0:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      c4:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      c8:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      cc:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      d0:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      d4:	0c 94 38 48 	jmp	0x9070	; 0x9070 <__vector_53>
      d8:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      dc:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      e0:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      e4:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      e8:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      ec:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      f0:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      f4:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      f8:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
      fc:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     100:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     104:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     108:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     10c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     110:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     114:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     118:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     11c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     120:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     124:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     128:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     12c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     130:	0c 94 c9 0e 	jmp	0x1d92	; 0x1d92 <__vector_76>
     134:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     138:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     13c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     140:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     144:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     148:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     14c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     150:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     154:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     158:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     15c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     160:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     164:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     168:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     16c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     170:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     174:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     178:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     17c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     180:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     184:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     188:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     18c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     190:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__vector_100>
     194:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     198:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     19c:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1a0:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1a4:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1a8:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1ac:	0c 94 33 0f 	jmp	0x1e66	; 0x1e66 <__vector_107>
     1b0:	0c 94 88 48 	jmp	0x9110	; 0x9110 <__vector_108>
     1b4:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1b8:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1bc:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1c0:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1c4:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1c8:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1cc:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1d0:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1d4:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1d8:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1dc:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1e0:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1e4:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1e8:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1ec:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1f0:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__bad_interrupt>
     1f4:	9b 1c       	adc	r9, r11
     1f6:	9f 1c       	adc	r9, r15
     1f8:	a3 1c       	adc	r10, r3
     1fa:	a6 1c       	adc	r10, r6
     1fc:	a9 1c       	adc	r10, r9
     1fe:	ac 1c       	adc	r10, r12
     200:	b4 1c       	adc	r11, r4
     202:	b7 1c       	adc	r11, r7
     204:	ba 1c       	adc	r11, r10
     206:	d1 1c       	adc	r13, r1
     208:	d1 1c       	adc	r13, r1
     20a:	d1 1c       	adc	r13, r1
     20c:	d1 1c       	adc	r13, r1
     20e:	d1 1c       	adc	r13, r1
     210:	d1 1c       	adc	r13, r1
     212:	bd 1c       	adc	r11, r13
     214:	d0 46       	sbci	r29, 0x60	; 96
     216:	d8 46       	sbci	r29, 0x68	; 104
     218:	3b 47       	sbci	r19, 0x7B	; 123
     21a:	41 47       	sbci	r20, 0x71	; 113
     21c:	02 48       	sbci	r16, 0x82	; 130
     21e:	02 48       	sbci	r16, 0x82	; 130
     220:	02 48       	sbci	r16, 0x82	; 130
     222:	02 48       	sbci	r16, 0x82	; 130
     224:	02 48       	sbci	r16, 0x82	; 130
     226:	02 48       	sbci	r16, 0x82	; 130
     228:	c8 47       	sbci	r28, 0x78	; 120
     22a:	cd 47       	sbci	r28, 0x7D	; 125
     22c:	cf 47       	sbci	r28, 0x7F	; 127
     22e:	db 47       	sbci	r29, 0x7B	; 123
     230:	ef 47       	sbci	r30, 0x7F	; 127

00000232 <__c.5234>:
     232:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
     242:	53 44 49 6e 66 6f 2e 6d 61 74 2e 0a 00              SDInfo.mat...

0000024f <__c.5232>:
     24f:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     25f:	20 72 65 6d 61 69 6e 65 64 20 64 61 74 61 2e 0a      remained data..
	...

00000270 <__c.5227>:
     270:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     280:	20 53 44 49 6e 66 6f 2e 6d 61 74 2e 0a 00            SDInfo.mat...

0000028e <__c.5225>:
     28e:	4f 70 65 6e 69 6e 67 20 25 73 2e 0a 00              Opening %s...

0000029b <__c.5213>:
     29b:	46 75 6e 63 74 69 6f 6e 20 62 75 66 66 65 72 20     Function buffer 
     2ab:	66 6f 72 20 79 20 69 73 20 66 75 6c 6c 2e 0a 00     for y is full...

000002bb <__c.5211>:
     2bb:	45 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 69 6e     Error seeking in
     2cb:	20 66 65 74 63 68 5f 62 6c 6f 63 6b 5f 66 75 6e      fetch_block_fun
     2db:	63 5f 79 28 29 2e 0a 00                             c_y()...

000002e3 <__c.5209>:
     2e3:	66 72 65 73 75 6c 74 20 3d 20 20 25 75 0a 00        fresult =  %u..

000002f2 <__c.5204>:
     2f2:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 69 6e     Error reading in
     302:	20 66 65 74 63 68 5f 62 6c 6f 63 6b 5f 66 75 6e      fetch_block_fun
     312:	63 5f 79 28 29 2e 0a 00                             c_y()...

0000031a <__c.5202>:
     31a:	66 72 65 73 75 6c 74 20 3d 20 20 25 75 0a 00        fresult =  %u..

00000329 <__c.5189>:
     329:	46 75 6e 63 74 69 6f 6e 20 62 75 66 66 65 72 20     Function buffer 
     339:	66 6f 72 20 78 20 69 73 20 66 75 6c 6c 0a 00        for x is full..

00000348 <__c.5187>:
     348:	45 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 69 6e     Error seeking in
     358:	20 66 65 74 63 68 5f 62 6c 6f 63 6b 5f 66 75 6e      fetch_block_fun
     368:	63 5f 78 28 29 2e 0a 00                             c_x()...

00000370 <__c.5185>:
     370:	66 72 65 73 75 6c 74 20 3d 20 20 25 75 0a 00        fresult =  %u..

0000037f <__c.5180>:
     37f:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 69 6e     Error reading in
     38f:	20 66 65 74 63 68 5f 62 6c 6f 63 6b 5f 66 75 6e      fetch_block_fun
     39f:	63 5f 78 28 29 2e 0a 00                             c_x()...

000003a7 <__c.5178>:
     3a7:	66 72 65 73 75 6c 74 20 3d 20 20 25 75 0a 00        fresult =  %u..

000003b6 <__c.5165>:
     3b6:	45 72 72 6f 72 20 69 6e 70 75 74 20 66 6f 72 20     Error input for 
     3c6:	66 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     function channel
     3d6:	2e 0a 00                                            ...

000003d9 <__c.5162>:
     3d9:	45 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 66 69     Error opening fi
     3e9:	6c 65 20 69 6e 20 73 65 74 5f 76 65 6c 5f 66 75     le in set_vel_fu
     3f9:	6e 63 28 29 3a 20 59 2e 0a 00                       nc(): Y...

00000403 <__c.5160>:
     403:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 66 69     Error reading fi
     413:	6c 65 20 69 6e 20 73 65 74 5f 76 65 6c 5f 66 75     le in set_vel_fu
     423:	6e 63 28 29 3a 20 59 2e 0a 00                       nc(): Y...

0000042d <__c.5158>:
     42d:	67 5f 6e 62 6c 6f 63 6b 73 5f 66 75 6e 63 5f 79     g_nblocks_func_y
     43d:	20 3d 20 25 75 0a 00                                 = %u..

00000444 <__c.5156>:
     444:	67 5f 6e 62 79 74 65 73 5f 66 69 6e 61 6c 5f 62     g_nbytes_final_b
     454:	6c 6f 63 6b 5f 79 20 3d 20 25 75 0a 00              lock_y = %u..

00000461 <__c.5154>:
     461:	67 5f 6e 62 79 74 65 73 5f 66 75 6e 63 5f 79 20     g_nbytes_func_y 
     471:	3d 20 25 75 0a 00                                   = %u..

00000477 <__c.5152>:
     477:	53 65 74 20 76 65 6c 6f 63 69 74 79 20 66 75 6e     Set velocity fun
     487:	63 74 69 6f 6e 20 25 75 20 66 6f 72 20 59 0a 00     ction %u for Y..

00000497 <__c.5150>:
     497:	4f 70 65 6e 69 6e 67 20 25 73 2e 0a 00              Opening %s...

000004a4 <__c.5146>:
     4a4:	45 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 66 69     Error opening fi
     4b4:	6c 65 20 69 6e 20 73 65 74 5f 76 65 6c 5f 66 75     le in set_vel_fu
     4c4:	6e 63 28 29 3a 20 58 2e 0a 00                       nc(): X...

000004ce <__c.5144>:
     4ce:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 66 69     Error reading fi
     4de:	6c 65 20 69 6e 20 73 65 74 5f 76 65 6c 5f 66 75     le in set_vel_fu
     4ee:	6e 63 28 29 3a 20 58 2e 0a 00                       nc(): X...

000004f8 <__c.5142>:
     4f8:	67 5f 6e 62 6c 6f 63 6b 73 5f 66 75 6e 63 5f 78     g_nblocks_func_x
     508:	20 3d 20 25 75 0a 00                                 = %u..

0000050f <__c.5140>:
     50f:	67 5f 6e 62 79 74 65 73 5f 66 69 6e 61 6c 5f 62     g_nbytes_final_b
     51f:	6c 6f 63 6b 5f 78 20 3d 20 25 75 0a 00              lock_x = %u..

0000052c <__c.5138>:
     52c:	67 5f 6e 62 79 74 65 73 5f 66 75 6e 63 5f 78 20     g_nbytes_func_x 
     53c:	3d 20 25 75 0a 00                                   = %u..

00000542 <__c.5136>:
     542:	53 65 74 20 76 65 6c 6f 63 69 74 79 20 66 75 6e     Set velocity fun
     552:	63 74 69 6f 6e 20 20 25 75 20 66 6f 72 20 58 0a     ction  %u for X.
	...

00000563 <__c.5134>:
     563:	4f 70 65 6e 69 6e 67 20 25 73 2e 0a 00              Opening %s...

00000570 <__c.5120>:
     570:	45 72 72 6f 72 3a 20 63 68 61 6e 6e 65 6c 20 6d     Error: channel m
     580:	75 73 74 20 62 65 20 31 20 66 6f 72 20 78 2c 20     ust be 1 for x, 
     590:	6f 72 20 32 20 66 6f 72 20 79 2e 0a 00              or 2 for y...

0000059d <__c.5117>:
     59d:	45 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 66 69     Error opening fi
     5ad:	6c 65 20 69 6e 20 73 65 74 5f 70 6f 73 5f 66 75     le in set_pos_fu
     5bd:	6e 63 28 29 3a 20 59 2e 0a 00                       nc(): Y...

000005c7 <__c.5115>:
     5c7:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 66 69     Error reading fi
     5d7:	6c 65 20 69 6e 20 73 65 74 5f 70 6f 73 5f 66 75     le in set_pos_fu
     5e7:	6e 63 28 29 3a 20 59 2e 0a 00                       nc(): Y...

000005f1 <__c.5113>:
     5f1:	67 5f 6e 62 6c 6f 63 6b 73 5f 66 75 6e 63 5f 79     g_nblocks_func_y
     601:	20 3d 20 25 75 0a 00                                 = %u..

00000608 <__c.5111>:
     608:	67 5f 6e 62 79 74 65 73 5f 66 69 6e 61 6c 5f 62     g_nbytes_final_b
     618:	6c 6f 63 6b 5f 79 20 3d 20 25 75 20 0a 00           lock_y = %u ..

00000626 <__c.5109>:
     626:	67 5f 6e 62 79 74 65 73 5f 66 75 6e 63 5f 79 20     g_nbytes_func_y 
     636:	3d 20 25 75 0a 00                                   = %u..

0000063c <__c.5107>:
     63c:	53 65 74 20 70 6f 73 69 74 69 6f 6e 20 66 75 6e     Set position fun
     64c:	63 74 69 6f 6e 20 25 75 20 66 6f 72 20 59 0a 00     ction %u for Y..

0000065c <__c.5105>:
     65c:	4f 70 65 6e 69 6e 67 20 25 73 2e 0a 00              Opening %s...

00000669 <__c.5101>:
     669:	45 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 66 69     Error opening fi
     679:	6c 65 20 69 6e 20 73 65 74 5f 70 6f 73 5f 66 75     le in set_pos_fu
     689:	6e 63 28 29 3a 20 58 2e 0a 00                       nc(): X...

00000693 <__c.5099>:
     693:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 66 69     Error reading fi
     6a3:	6c 65 20 69 6e 20 73 65 74 5f 70 6f 73 5f 66 75     le in set_pos_fu
     6b3:	6e 63 28 29 3a 20 58 0a 00                          nc(): X..

000006bc <__c.5097>:
     6bc:	67 5f 6e 62 6c 6f 63 6b 73 5f 66 75 6e 63 5f 78     g_nblocks_func_x
     6cc:	20 3d 20 25 75 0a 00                                 = %u..

000006d3 <__c.5095>:
     6d3:	67 5f 6e 62 79 74 65 73 5f 66 69 6e 61 6c 5f 62     g_nbytes_final_b
     6e3:	6c 6f 63 6b 5f 78 20 3d 20 25 75 0a 00              lock_x = %u..

000006f0 <__c.5093>:
     6f0:	67 5f 6e 62 79 74 65 73 5f 66 75 6e 63 5f 78 20     g_nbytes_func_x 
     700:	3d 20 25 75 0a 00                                   = %u..

00000706 <__c.5091>:
     706:	53 65 74 20 70 6f 73 69 74 69 6f 6e 20 66 75 6e     Set position fun
     716:	63 74 69 6f 6e 20 25 75 20 66 6f 72 20 58 0a 00     ction %u for X..

00000726 <__c.5089>:
     726:	4f 70 65 6e 69 6e 67 20 25 73 2e 0a 00              Opening %s...

00000733 <__c.5075>:
     733:	46 75 6e 63 74 69 6f 6e 20 63 68 61 6e 6e 65 6c     Function channel
     743:	20 6e 75 6d 62 65 72 20 6d 75 73 74 20 62 65 20      number must be 
     753:	31 20 66 6f 72 20 78 2c 20 6f 72 20 32 20 66 6f     1 for x, or 2 fo
     763:	72 20 79 2e 0a 00                                   r y...

00000769 <__c.5069>:
     769:	53 65 74 74 69 6e 67 20 64 65 66 61 75 6c 74 20     Setting default 
     779:	66 75 6e 63 74 69 6f 6e 20 66 6f 72 20 59 2e 0a     function for Y..
	...

0000078a <__c.5062>:
     78a:	53 65 74 74 69 6e 67 20 64 65 66 61 75 6c 74 20     Setting default 
     79a:	66 75 6e 63 74 69 6f 6e 20 66 6f 72 20 58 2e 0a     function for X..
	...

000007ab <__c.5026>:
     7ab:	20 62 65 6e 63 68 5f 74 69 6d 65 20 3d 20 25 6c      bench_time = %l
     7bb:	75 20 6d 73 2c 20 66 72 61 6d 65 5f 72 61 74 65     u ms, frame_rate
     7cb:	20 3d 20 25 75 0a 00                                 = %u..

000007d2 <__c.5015>:
     7d2:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     7e2:	68 61 72 64 77 61 72 65 20 63 6f 6e 66 69 67 20     hardware config 
     7f2:	66 69 6c 65 20 6f 6e 20 74 68 65 20 53 44 20 63     file on the SD c
     802:	61 72 64 2e 0a 00                                   ard...

00000808 <__c.5013>:
     808:	53 75 63 63 65 73 73 66 75 6c 6c 79 20 6c 6f 61     Successfully loa
     818:	64 20 74 68 65 20 68 61 72 64 77 61 72 65 20 63     d the hardware c
     828:	6f 6e 66 69 67 20 66 69 6c 65 20 74 6f 20 45 45     onfig file to EE
     838:	50 52 4f 4d 0a 00                                   PROM..

0000083e <__c.5008>:
     83e:	4f 70 65 6e 69 6e 67 20 25 73 2e 0a 00              Opening %s...

0000084b <__c.4996>:
     84b:	45 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 70 61     Error opening pa
     85b:	74 74 65 72 6e 20 66 69 6c 65 0a 00                 ttern file..

00000867 <__c.4994>:
     867:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 69 6e     Error reading in
     877:	20 70 61 74 74 65 72 6e 20 66 69 6c 65 0a 00         pattern file..

00000886 <__c.4992>:
     886:	20 20 67 5f 6e 5f 78 20 3d 20 25 75 0a 20 20 67       g_n_x = %u.  g
     896:	5f 6e 5f 79 20 3d 20 25 75 0a 20 20 67 5f 6e 75     _n_y = %u.  g_nu
     8a6:	6d 5f 70 61 6e 65 6c 73 20 3d 20 25 75 0a 20 20     m_panels = %u.  
     8b6:	67 72 61 79 73 63 61 6c 65 20 3d 20 25 75 0a 20     grayscale = %u. 
     8c6:	72 6f 77 5f 63 6f 6d 70 72 65 73 73 69 6f 6e 20     row_compression 
     8d6:	3d 20 25 75 0a 00                                   = %u..

000008dc <__c.4990>:
     8dc:	53 65 74 74 69 6e 67 20 70 61 74 74 65 72 6e 20     Setting pattern 
     8ec:	25 75 3a 0a 00                                      %u:..

000008f1 <__c.4988>:
     8f1:	4f 70 65 6e 69 6e 67 20 25 73 2e 0a 00              Opening %s...

000008fe <__c.4961>:
     8fe:	46 75 6e 63 74 69 6f 6e 20 62 75 66 66 65 72 20     Function buffer 
     90e:	66 6f 72 20 79 20 69 73 20 65 6d 70 74 79 0a 00     for y is empty..

0000091e <__c.4942>:
     91e:	46 75 6e 63 74 69 6f 6e 20 62 75 66 66 65 72 20     Function buffer 
     92e:	66 6f 72 20 78 20 69 73 20 65 6d 70 74 79 0a 00     for x is empty..

0000093e <__c.4883>:
     93e:	66 72 65 73 75 6c 74 20 3d 20 25 75 2c 20 69 6e     fresult = %u, in
     94e:	64 65 78 5f 66 72 61 6d 65 3d 20 25 75 2c 20 6f     dex_frame= %u, o
     95e:	66 66 73 65 74 20 3d 20 25 6c 75 2c 20 70 46 69     ffset = %lu, pFi
     96e:	6c 65 2d 3e 66 73 3d 25 58 2c 20 70 46 69 6c 65     le->fs=%X, pFile
     97e:	2d 3e 66 73 2d 3e 66 73 5f 74 79 70 65 3d 25 58     ->fs->fs_type=%X
     98e:	2c 20 70 46 69 6c 65 2d 3e 66 73 2d 3e 69 64 3d     , pFile->fs->id=
     99e:	25 58 0a 00                                         %X..

000009a2 <__c.4881>:
     9a2:	45 72 72 6f 72 20 73 65 65 6b 69 6e 67 20 69 6e     Error seeking in
     9b2:	20 66 65 74 63 68 5f 61 6e 64 5f 64 69 73 70 6c      fetch_and_displ
     9c2:	61 79 5f 66 72 61 6d 65 21 0a 00                    ay_frame!..

000009cd <__c.4879>:
     9cd:	66 72 65 73 75 6c 74 20 3d 20 25 75 2c 20 69 6e     fresult = %u, in
     9dd:	64 65 78 5f 66 72 61 6d 65 3d 20 25 75 2c 20 6e     dex_frame= %u, n
     9ed:	62 79 74 65 73 5f 72 65 61 64 3d 20 25 75 0a 00     bytes_read= %u..

000009fd <__c.4877>:
     9fd:	45 72 72 6f 72 20 69 6e 20 72 65 61 64 69 6e 67     Error in reading
     a0d:	20 66 69 6c 65 20 69 6e 20 66 65 74 63 68 5f 61      file in fetch_a
     a1d:	6e 64 5f 64 69 73 70 6c 61 79 5f 66 72 61 6d 65     nd_display_frame
     a2d:	21 0a 00                                            !..

00000a30 <__c.4831>:
     a30:	53 75 63 63 65 73 73 20 73 65 74 20 74 68 65 20     Success set the 
     a40:	6e 65 77 20 6c 61 73 65 72 20 70 61 74 74 65 72     new laser patter
     a50:	6e 2e 0a 00                                         n...

00000a54 <__c.4813>:
     a54:	73 65 74 5f 67 61 69 6e 5f 62 69 61 73 3a 20 67     set_gain_bias: g
     a64:	61 69 6e 5f 78 3d 20 25 64 2c 20 20 62 69 61 73     ain_x= %d,  bias
     a74:	5f 78 3d 20 25 64 2c 20 67 61 69 6e 5f 79 3d 20     _x= %d, gain_y= 
     a84:	25 64 2c 20 62 69 61 73 5f 79 3d 25 64 0a 00        %d, bias_y=%d..

00000a93 <__c.4784>:
     a93:	73 65 74 5f 67 61 69 6e 5f 62 69 61 73 3a 20 67     set_gain_bias: g
     aa3:	61 69 6e 5f 78 3d 20 25 64 2c 20 20 62 69 61 73     ain_x= %d,  bias
     ab3:	5f 78 3d 20 25 64 2c 20 67 61 69 6e 5f 79 3d 20     _x= %d, gain_y= 
     ac3:	25 64 2c 20 62 69 61 73 5f 79 3d 25 64 0a 00        %d, bias_y=%d..

00000ad2 <__c.4780>:
     ad2:	73 65 74 5f 70 6f 73 69 74 69 6f 6e 3a 20 67 5f     set_position: g_
     ae2:	78 3d 20 25 75 2c 20 20 67 5f 79 3d 20 25 75 2c     x= %u,  g_y= %u,
     af2:	20 61 6e 64 20 67 5f 69 6e 64 65 78 5f 66 72 61      and g_index_fra
     b02:	6d 65 3d 20 25 75 0a 00                             me= %u..

00000b0a <__c.4763>:
     b0a:	66 75 6e 63 74 69 6f 6e 20 59 20 75 70 64 61 74     function Y updat
     b1a:	65 20 66 72 65 71 75 65 6e 63 79 20 3d 20 25 75     e frequency = %u
     b2a:	2e 0a 00                                            ...

00000b2d <__c.4760>:
     b2d:	66 75 6e 63 74 69 6f 6e 20 58 20 75 70 64 61 74     function X updat
     b3d:	65 20 66 72 65 71 75 65 6e 63 79 20 3d 20 25 75     e frequency = %u
     b4d:	2e 0a 00                                            ...

00000b50 <__c.4720>:
     b50:	41 44 43 5f 76 61 6c 75 65 20 3d 20 20 25 64 3a     ADC_value =  %d:
     b60:	0a 00                                               ..

00000b62 <__c.4702>:
     b62:	72 65 73 6f 6c 75 74 69 6f 6e 5f 79 20 3d 20 20     resolution_y =  
     b72:	25 64 3a 0a 00                                      %d:..

00000b77 <__c.4700>:
     b77:	72 65 73 6f 6c 75 74 69 6f 6e 5f 78 20 3d 20 20     resolution_x =  
     b87:	25 64 3a 0a 00                                      %d:..

00000b8c <__c.4694>:
     b8c:	44 69 73 61 62 6c 65 64 20 49 6e 74 33 20 65 78     Disabled Int3 ex
     b9c:	74 65 72 6e 61 6c 20 74 72 69 67 67 65 72 20 6d     ternal trigger m
     bac:	6f 64 65 21 0a 00                                   ode!..

00000bb2 <__c.4691>:
     bb2:	45 6e 61 62 6c 65 64 20 49 6e 74 33 20 65 78 74     Enabled Int3 ext
     bc2:	65 72 6e 61 6c 20 74 72 69 67 67 65 72 20 6d 6f     ernal trigger mo
     bd2:	64 65 20 69 73 20 6f 6e 21 0a 00                    de is on!..

00000bdd <__c.4688>:
     bdd:	52 65 73 65 74 20 63 6f 6e 74 72 6f 6c 6c 65 72     Reset controller
     bed:	20 74 6f 20 77 6f 72 6b 20 69 6e 20 74 68 65 20      to work in the 
     bfd:	50 43 20 64 75 6d 70 69 6e 67 20 6d 6f 64 65 21     PC dumping mode!
     c0d:	0a 00                                               ..

00000c0f <__c.4685>:
     c0f:	52 65 73 65 74 20 63 6f 6e 74 72 6f 6c 6c 65 72     Reset controller
     c1f:	20 74 6f 20 77 6f 72 6b 20 69 6e 20 74 68 65 20      to work in the 
     c2f:	63 6f 6e 74 72 6f 6c 6c 65 72 20 6d 6f 64 65 21     controller mode!
     c3f:	0a 00                                               ..

00000c41 <__c.4682>:
     c41:	75 70 64 61 74 65 3a 20 25 64 20 25 64 20 25 64     update: %d %d %d
     c51:	20 25 64 20 25 64 20 25 64 20 25 64 20 25 64 3a      %d %d %d %d %d:
     c61:	0a 00                                               ..

00000c63 <__c.4673>:
     c63:	43 75 72 72 65 6e 74 20 76 65 72 73 69 6f 6e 20     Current version 
     c73:	6e 75 6d 62 65 72 20 69 73 20 25 73 2e 0a 00        number is %s...

00000c82 <__c.4612>:
     c82:	43 75 72 72 65 6e 74 20 77 6f 72 6b 69 6e 67 20     Current working 
     c92:	6d 6f 64 65 20 69 73 20 74 68 65 20 50 43 20 64     mode is the PC d
     ca2:	75 6d 70 69 6e 67 20 6d 6f 64 65 21 0a 00           umping mode!..

00000cb0 <__c.4598>:
     cb0:	43 75 72 72 65 6e 74 20 77 6f 72 6b 69 6e 67 20     Current working 
     cc0:	6d 6f 64 65 20 69 73 20 74 68 65 20 43 6f 6e 74     mode is the Cont
     cd0:	72 6f 6c 6c 65 72 20 6d 6f 64 65 21 0a 00           roller mode!..

00000cde <__c.4595>:
     cde:	3f 3f 3f 0a 00                                      ???..

00000ce3 <__c.4592>:
     ce3:	20 4e 4f 54 20 52 45 41 44 59 21 0a 00               NOT READY!..

00000cf0 <__c.4589>:
     cf0:	20 57 52 49 54 45 20 50 52 4f 54 45 43 54 45 44      WRITE PROTECTED
     d00:	21 0a 00                                            !..

00000d03 <__c.4586>:
     d03:	20 45 52 52 4f 52 21 0a 00                           ERROR!..

00000d0c <__c.4582>:
     d0c:	20 46 41 54 20 4f 4b 21 0a 00                        FAT OK!..

00000d16 <__c.4579>:
     d16:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 46 41 54     Initializing FAT
     d26:	20 44 69 73 6b 2e 2e 2e 00                           Disk....

00000d2f <__c.4577>:
     d2f:	3f 3f 3f 0a 00                                      ???..

00000d34 <__c.4574>:
     d34:	53 44 48 43 0a 00                                   SDHC..

00000d3a <__c.4571>:
     d3a:	42 4c 4b 0a 00                                      BLK..

00000d3f <__c.4568>:
     d3f:	53 44 43 0a 00                                      SDC..

00000d44 <__c.4565>:
     d44:	53 44 32 0a 00                                      SD2..

00000d49 <__c.4562>:
     d49:	53 44 0a 00                                         SD..

00000d4d <__c.4558>:
     d4d:	4d 4d 43 0a 00                                      MMC..

00000d52 <__c.4555>:
     d52:	43 61 72 64 20 74 79 70 65 3a 20 00                 Card type: .

00000d5e <__c.4553>:
     d5e:	53 44 20 63 61 72 64 20 69 73 20 69 6e 69 74 69     SD card is initi
     d6e:	61 6c 69 7a 65 64 0a 00                             alized..

00000d76 <__c.4545>:
     d76:	49 6e 69 74 69 61 6c 69 7a 61 74 69 6f 6e 20 66     Initialization f
     d86:	61 69 6c 65 64 21 21 21 0a 00                       ailed!!!..

00000d90 <__c.4540>:
     d90:	53 44 20 63 61 72 64 20 69 73 20 57 72 69 74 65     SD card is Write
     da0:	20 50 72 6f 74 65 63 74 65 64 21 0a 00               Protected!..

00000dad <__c.4535>:
     dad:	49 6e 73 65 72 74 20 53 44 20 63 61 72 64 00        Insert SD card.

00000dbc <__c.4533>:
     dbc:	0a 4d 61 69 6e 20 43 6f 6e 74 72 6f 6c 6c 65 72     .Main Controller
     dcc:	20 57 6f 72 6b 73 0a 00                              Works..

00000dd4 <__c.4501>:
     dd4:	49 4e 54 33 20 63 61 74 63 68 65 73 20 61 20 72     INT3 catches a r
     de4:	69 73 69 6e 67 20 65 64 67 65 20 74 72 69 67 67     ising edge trigg
     df4:	65 72 21 0a 00                                      er!..

00000df9 <__c.4418>:
     df9:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
     e09:	70 61 6e 65 6c 20 25 64 2e 0a 00                    panel %d...

00000e14 <__c.4416>:
     e14:	42 61 64 20 65 78 69 74 20 63 6d 64 2c 20 72 65     Bad exit cmd, re
     e24:	73 75 6c 74 20 3d 20 25 75 0a 00                    sult = %u..

00000e2f <__c.4410>:
     e2f:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     e3f:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     e4f:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     e5f:	64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65 78 0a     d of eeprom.hex.
	...

00000e70 <__c.4408>:
     e70:	0a 00                                               ..

00000e72 <__c.4406>:
     e72:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     e82:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000e8f <__c.4401>:
     e8f:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
     e9f:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

00000eac <__c.4399>:
     eac:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     ebc:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     ecc:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000ed7 <__c.4397>:
     ed7:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     ee7:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     ef7:	20 25 64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65      %d of eeprom.he
     f07:	78 0a 00                                            x..

00000f0a <__c.4391>:
     f0a:	0a 76 65 72 69 66 79 69 6e 67 3a 20 00              .verifying: .

00000f17 <__c.4389>:
     f17:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
     f27:	20 65 65 70 72 6f 6d 2e 68 65 78 2e 0a 00            eeprom.hex...

00000f35 <__c.4386>:
     f35:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
     f45:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
     f55:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
     f65:	64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65 78 2e     d of eeprom.hex.
     f75:	0a 00                                               ..

00000f77 <__c.4381>:
     f77:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
     f87:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
     f97:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

00000fa2 <__c.4379>:
     fa2:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
     fb2:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
     fc2:	20 25 64 20 6f 66 20 65 65 70 72 6f 6d 2e 68 65      %d of eeprom.he
     fd2:	78 2e 0a 00                                         x...

00000fd6 <__c.4373>:
     fd6:	0a 77 72 69 74 69 6e 67 3a 20 20 20 00              .writing:   .

00000fe3 <__c.4371>:
     fe3:	42 61 64 20 70 61 6e 65 6c 20 72 65 73 65 74 2c     Bad panel reset,
     ff3:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

00001001 <__c.4366>:
    1001:	65 65 70 72 6f 6d 20 70 61 6e 65 6c 20 25 75 2e     eeprom panel %u.
    1011:	0a 00                                               ..

00001013 <__c.4364>:
    1013:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
    1023:	65 65 70 72 6f 6d 2e 68 65 78 2e 0a 00              eeprom.hex...

00001030 <__c.4438>:
    1030:	25 53 0a 00                                         %S..

00001034 <str.4424>:
    1034:	4f 4b 00 44 49 53 4b 5f 45 52 52 00 49 4e 54 5f     OK.DISK_ERR.INT_
    1044:	45 52 52 00 4e 4f 54 5f 52 45 41 44 59 00 4e 4f     ERR.NOT_READY.NO
    1054:	5f 46 49 4c 45 00 4e 4f 5f 50 41 54 48 00 49 4e     _FILE.NO_PATH.IN
    1064:	56 41 4c 49 44 5f 4e 41 4d 45 00 44 45 4e 49 45     VALID_NAME.DENIE
    1074:	44 00 45 58 49 53 54 00 49 4e 56 41 4c 49 44 5f     D.EXIST.INVALID_
    1084:	4f 42 4a 45 43 54 00 57 52 49 54 45 5f 50 52 4f     OBJECT.WRITE_PRO
    1094:	54 45 43 54 45 44 00 49 4e 56 41 4c 49 44 5f 44     TECTED.INVALID_D
    10a4:	52 49 56 45 00 4e 4f 54 5f 45 4e 41 42 4c 45 44     RIVE.NOT_ENABLED
    10b4:	00 4e 4f 5f 46 49 4c 45 5f 53 59 53 54 45 4d 00     .NO_FILE_SYSTEM.
    10c4:	4d 4b 46 53 5f 41 42 4f 52 54 45 44 00 54 49 4d     MKFS_ABORTED.TIM
    10d4:	45 4f 55 54 00 00                                   EOUT..

000010da <__c.4336>:
    10da:	43 61 6e 6e 6f 74 20 66 69 6e 64 20 74 68 65 20     Cannot find the 
    10ea:	70 61 6e 65 6c 20 25 64 2e 0a 00                    panel %d...

000010f5 <__c.4334>:
    10f5:	42 61 64 20 65 78 69 74 20 63 6d 64 2c 20 72 65     Bad exit cmd, re
    1105:	73 75 6c 74 20 3d 20 25 75 0a 00                    sult = %u..

00001110 <__c.4328>:
    1110:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
    1120:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
    1130:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
    1140:	64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78 0a 00     d of panel.hex..

00001150 <__c.4326>:
    1150:	0a 00                                               ..

00001152 <__c.4324>:
    1152:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
    1162:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

0000116f <__c.4319>:
    116f:	76 65 72 69 66 79 20 6d 69 73 6d 61 74 63 68 20     verify mismatch 
    117f:	66 6f 72 20 70 61 67 65 20 25 64 0a 00              for page %d..

0000118c <__c.4317>:
    118c:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
    119c:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
    11ac:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

000011b7 <__c.4315>:
    11b7:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
    11c7:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
    11d7:	20 25 64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78      %d of panel.hex
    11e7:	0a 00                                               ..

000011e9 <__c.4309>:
    11e9:	0a 76 65 72 69 66 79 69 6e 67 3a 20 00              .verifying: .

000011f6 <__c.4307>:
    11f6:	45 72 72 6f 72 20 66 5f 6c 73 65 65 6b 20 69 6e     Error f_lseek in
    1206:	20 70 61 6e 65 6c 2e 68 65 78 2e 0a 00               panel.hex...

00001213 <__c.4304>:
    1213:	64 6f 6e 27 74 20 6b 6e 6f 77 20 68 6f 77 20 74     don't know how t
    1223:	6f 20 64 65 61 6c 20 77 69 74 68 20 72 65 63 74     o deal with rect
    1233:	79 70 65 3d 25 64 20 61 74 20 6c 69 6e 65 20 25     ype=%d at line %
    1243:	64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78 0a 00     d of panel.hex..

00001253 <__c.4299>:
    1253:	63 68 65 63 6b 73 75 6d 3d 30 78 25 30 32 78 2c     checksum=0x%02x,
    1263:	20 63 6f 6d 70 75 74 65 64 20 63 68 65 63 6b 73      computed checks
    1273:	75 6d 3d 30 78 25 30 32 78 0a 00                    um=0x%02x..

0000127e <__c.4297>:
    127e:	45 52 52 4f 52 3a 20 63 68 65 63 6b 73 75 6d 20     ERROR: checksum 
    128e:	6d 69 73 6d 61 74 63 68 20 61 74 20 6c 69 6e 65     mismatch at line
    129e:	20 25 64 20 6f 66 20 70 61 6e 65 6c 2e 68 65 78      %d of panel.hex
    12ae:	2e 0a 00                                            ...

000012b1 <__c.4291>:
    12b1:	0a 77 72 69 74 69 6e 67 3a 20 20 20 00              .writing:   .

000012be <__c.4289>:
    12be:	42 61 64 20 70 61 6e 65 6c 20 72 65 73 65 74 2c     Bad panel reset,
    12ce:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

000012dc <__c.4284>:
    12dc:	66 6c 61 73 68 20 70 61 6e 65 6c 20 25 75 2e 0a     flash panel %u..
	...

000012ed <__c.4282>:
    12ed:	45 72 72 6f 72 20 66 5f 6f 70 65 6e 20 69 6e 20     Error f_open in 
    12fd:	70 61 6e 65 6c 2e 68 65 78 2e 0a 00                 panel.hex...

00001309 <__c.4251>:
    1309:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    1319:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00001326 <__c.4246>:
    1326:	23 00                                               #.

00001328 <__c.4233>:
    1328:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    1338:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00001345 <__c.4228>:
    1345:	23 00                                               #.

00001347 <__c.4219>:
    1347:	42 61 64 20 65 65 70 72 6f 6d 20 77 72 69 74 65     Bad eeprom write
    1357:	2c 20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00        , result = %u..

00001366 <__c.4214>:
    1366:	23 00                                               #.

00001368 <__c.4203>:
    1368:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    1378:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

00001385 <__c.4198>:
    1385:	23 00                                               #.

00001387 <__c.4185>:
    1387:	42 61 64 20 66 6c 61 73 68 20 72 65 61 64 2c 20     Bad flash read, 
    1397:	72 65 73 75 6c 74 20 3d 20 25 75 0a 00              result = %u..

000013a4 <__c.4180>:
    13a4:	23 00                                               #.

000013a6 <__c.4171>:
    13a6:	42 61 64 20 66 6c 61 73 68 20 77 72 69 74 65 2c     Bad flash write,
    13b6:	20 72 65 73 75 6c 74 20 3d 20 25 75 0a 00            result = %u..

000013c4 <__c.4166>:
    13c4:	23 00                                               #.

000013c6 <__ctors_end>:
    13c6:	11 24       	eor	r1, r1
    13c8:	1f be       	out	0x3f, r1	; 63
    13ca:	cf ef       	ldi	r28, 0xFF	; 255
    13cc:	df e3       	ldi	r29, 0x3F	; 63
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	cd bf       	out	0x3d, r28	; 61
    13d2:	00 e0       	ldi	r16, 0x00	; 0
    13d4:	0c bf       	out	0x3c, r16	; 60
    13d6:	18 be       	out	0x38, r1	; 56
    13d8:	19 be       	out	0x39, r1	; 57
    13da:	1a be       	out	0x3a, r1	; 58
    13dc:	1b be       	out	0x3b, r1	; 59

000013de <__do_copy_data>:
    13de:	13 e2       	ldi	r17, 0x23	; 35
    13e0:	a0 e0       	ldi	r26, 0x00	; 0
    13e2:	b0 e2       	ldi	r27, 0x20	; 32
    13e4:	ec e8       	ldi	r30, 0x8C	; 140
    13e6:	f2 ea       	ldi	r31, 0xA2	; 162
    13e8:	00 e0       	ldi	r16, 0x00	; 0
    13ea:	0b bf       	out	0x3b, r16	; 59
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <__do_copy_data+0x14>
    13ee:	07 90       	elpm	r0, Z+
    13f0:	0d 92       	st	X+, r0
    13f2:	a0 3b       	cpi	r26, 0xB0	; 176
    13f4:	b1 07       	cpc	r27, r17
    13f6:	d9 f7       	brne	.-10     	; 0x13ee <__do_copy_data+0x10>

000013f8 <__do_clear_bss>:
    13f8:	18 e2       	ldi	r17, 0x28	; 40
    13fa:	a0 eb       	ldi	r26, 0xB0	; 176
    13fc:	b3 e2       	ldi	r27, 0x23	; 35
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <.do_clear_bss_start>

00001400 <.do_clear_bss_loop>:
    1400:	1d 92       	st	X+, r1

00001402 <.do_clear_bss_start>:
    1402:	ab 3a       	cpi	r26, 0xAB	; 171
    1404:	b1 07       	cpc	r27, r17
    1406:	e1 f7       	brne	.-8      	; 0x1400 <.do_clear_bss_loop>
    1408:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <main>
    140c:	0c 94 44 51 	jmp	0xa288	; 0xa288 <_exit>

00001410 <__bad_interrupt>:
    1410:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001414 <increment_index_x>:


void increment_index_x(void)
{
    
    g_x++;
    1414:	80 91 bc 23 	lds	r24, 0x23BC
    1418:	90 91 bd 23 	lds	r25, 0x23BD
    141c:	01 96       	adiw	r24, 0x01	; 1
    141e:	80 93 bc 23 	sts	0x23BC, r24
    1422:	90 93 bd 23 	sts	0x23BD, r25
    g_x %= g_n_x;
    1426:	80 91 bc 23 	lds	r24, 0x23BC
    142a:	90 91 bd 23 	lds	r25, 0x23BD
    142e:	20 91 39 20 	lds	r18, 0x2039
    1432:	30 91 3a 20 	lds	r19, 0x203A
    1436:	b9 01       	movw	r22, r18
    1438:	0e 94 56 4b 	call	0x96ac	; 0x96ac <__udivmodhi4>
    143c:	80 93 bc 23 	sts	0x23BC, r24
    1440:	90 93 bd 23 	sts	0x23BD, r25
    
    g_index_frame = FRAMEFROMXY(g_x, g_y);
    1444:	60 91 be 23 	lds	r22, 0x23BE
    1448:	70 91 bf 23 	lds	r23, 0x23BF
    144c:	40 91 bc 23 	lds	r20, 0x23BC
    1450:	50 91 bd 23 	lds	r21, 0x23BD
    1454:	62 9f       	mul	r22, r18
    1456:	c0 01       	movw	r24, r0
    1458:	63 9f       	mul	r22, r19
    145a:	90 0d       	add	r25, r0
    145c:	72 9f       	mul	r23, r18
    145e:	90 0d       	add	r25, r0
    1460:	11 24       	eor	r1, r1
    1462:	84 0f       	add	r24, r20
    1464:	95 1f       	adc	r25, r21
    1466:	80 93 b6 23 	sts	0x23B6, r24
    146a:	90 93 b7 23 	sts	0x23B7, r25
    
    if (g_b_xrate_greater_yrate)
    146e:	80 91 f4 23 	lds	r24, 0x23F4
    1472:	88 23       	and	r24, r24
    1474:	29 f0       	breq	.+10     	; 0x1480 <increment_index_x+0x6c>
    	g_display_count++;
    1476:	80 91 b2 23 	lds	r24, 0x23B2
    147a:	8f 5f       	subi	r24, 0xFF	; 255
    147c:	80 93 b2 23 	sts	0x23B2, r24
    1480:	08 95       	ret

00001482 <increment_index_y>:
}


void increment_index_y(void)
{
    g_y++;
    1482:	80 91 be 23 	lds	r24, 0x23BE
    1486:	90 91 bf 23 	lds	r25, 0x23BF
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	80 93 be 23 	sts	0x23BE, r24
    1490:	90 93 bf 23 	sts	0x23BF, r25
    g_y %= g_n_y;
    1494:	80 91 be 23 	lds	r24, 0x23BE
    1498:	90 91 bf 23 	lds	r25, 0x23BF
    149c:	60 91 3b 20 	lds	r22, 0x203B
    14a0:	70 91 3c 20 	lds	r23, 0x203C
    14a4:	0e 94 56 4b 	call	0x96ac	; 0x96ac <__udivmodhi4>
    14a8:	80 93 be 23 	sts	0x23BE, r24
    14ac:	90 93 bf 23 	sts	0x23BF, r25
    
    g_index_frame = FRAMEFROMXY(g_x, g_y);
    14b0:	60 91 be 23 	lds	r22, 0x23BE
    14b4:	70 91 bf 23 	lds	r23, 0x23BF
    14b8:	20 91 bc 23 	lds	r18, 0x23BC
    14bc:	30 91 bd 23 	lds	r19, 0x23BD
    14c0:	40 91 39 20 	lds	r20, 0x2039
    14c4:	50 91 3a 20 	lds	r21, 0x203A
    14c8:	64 9f       	mul	r22, r20
    14ca:	c0 01       	movw	r24, r0
    14cc:	65 9f       	mul	r22, r21
    14ce:	90 0d       	add	r25, r0
    14d0:	74 9f       	mul	r23, r20
    14d2:	90 0d       	add	r25, r0
    14d4:	11 24       	eor	r1, r1
    14d6:	82 0f       	add	r24, r18
    14d8:	93 1f       	adc	r25, r19
    14da:	80 93 b6 23 	sts	0x23B6, r24
    14de:	90 93 b7 23 	sts	0x23B7, r25
    
    if (!g_b_xrate_greater_yrate)
    14e2:	80 91 f4 23 	lds	r24, 0x23F4
    14e6:	88 23       	and	r24, r24
    14e8:	29 f4       	brne	.+10     	; 0x14f4 <increment_index_y+0x72>
    	g_display_count++;
    14ea:	80 91 b2 23 	lds	r24, 0x23B2
    14ee:	8f 5f       	subi	r24, 0xFF	; 255
    14f0:	80 93 b2 23 	sts	0x23B2, r24
    14f4:	08 95       	ret

000014f6 <decrement_index_x>:


void decrement_index_x(void)
{
    
    if (g_x <= 0)    //just to be safe, use less than
    14f6:	80 91 bc 23 	lds	r24, 0x23BC
    14fa:	90 91 bd 23 	lds	r25, 0x23BD
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	29 f4       	brne	.+10     	; 0x150c <decrement_index_x+0x16>
        g_x = g_n_x - 1;    //but these are unsigned
    1502:	80 91 39 20 	lds	r24, 0x2039
    1506:	90 91 3a 20 	lds	r25, 0x203A
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <decrement_index_x+0x1e>
    else
        g_x--;
    150c:	80 91 bc 23 	lds	r24, 0x23BC
    1510:	90 91 bd 23 	lds	r25, 0x23BD
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	80 93 bc 23 	sts	0x23BC, r24
    151a:	90 93 bd 23 	sts	0x23BD, r25
    
    g_index_frame = FRAMEFROMXY(g_x, g_y);
    151e:	60 91 be 23 	lds	r22, 0x23BE
    1522:	70 91 bf 23 	lds	r23, 0x23BF
    1526:	20 91 bc 23 	lds	r18, 0x23BC
    152a:	30 91 bd 23 	lds	r19, 0x23BD
    152e:	40 91 39 20 	lds	r20, 0x2039
    1532:	50 91 3a 20 	lds	r21, 0x203A
    1536:	64 9f       	mul	r22, r20
    1538:	c0 01       	movw	r24, r0
    153a:	65 9f       	mul	r22, r21
    153c:	90 0d       	add	r25, r0
    153e:	74 9f       	mul	r23, r20
    1540:	90 0d       	add	r25, r0
    1542:	11 24       	eor	r1, r1
    1544:	82 0f       	add	r24, r18
    1546:	93 1f       	adc	r25, r19
    1548:	80 93 b6 23 	sts	0x23B6, r24
    154c:	90 93 b7 23 	sts	0x23B7, r25
    if (g_b_xrate_greater_yrate)
    1550:	80 91 f4 23 	lds	r24, 0x23F4
    1554:	88 23       	and	r24, r24
    1556:	29 f0       	breq	.+10     	; 0x1562 <decrement_index_x+0x6c>
    	g_display_count++;
    1558:	80 91 b2 23 	lds	r24, 0x23B2
    155c:	8f 5f       	subi	r24, 0xFF	; 255
    155e:	80 93 b2 23 	sts	0x23B2, r24
    1562:	08 95       	ret

00001564 <decrement_index_y>:
}


void decrement_index_y(void)
{
    if (g_y <= 0)    //just to be safe, use less than
    1564:	80 91 be 23 	lds	r24, 0x23BE
    1568:	90 91 bf 23 	lds	r25, 0x23BF
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	29 f4       	brne	.+10     	; 0x157a <decrement_index_y+0x16>
        g_y = g_n_y - 1;    //but these are unsigned
    1570:	80 91 3b 20 	lds	r24, 0x203B
    1574:	90 91 3c 20 	lds	r25, 0x203C
    1578:	04 c0       	rjmp	.+8      	; 0x1582 <decrement_index_y+0x1e>
    else
        g_y--;
    157a:	80 91 be 23 	lds	r24, 0x23BE
    157e:	90 91 bf 23 	lds	r25, 0x23BF
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	80 93 be 23 	sts	0x23BE, r24
    1588:	90 93 bf 23 	sts	0x23BF, r25
    
    g_index_frame = FRAMEFROMXY(g_x, g_y);
    158c:	60 91 be 23 	lds	r22, 0x23BE
    1590:	70 91 bf 23 	lds	r23, 0x23BF
    1594:	20 91 bc 23 	lds	r18, 0x23BC
    1598:	30 91 bd 23 	lds	r19, 0x23BD
    159c:	40 91 39 20 	lds	r20, 0x2039
    15a0:	50 91 3a 20 	lds	r21, 0x203A
    15a4:	64 9f       	mul	r22, r20
    15a6:	c0 01       	movw	r24, r0
    15a8:	65 9f       	mul	r22, r21
    15aa:	90 0d       	add	r25, r0
    15ac:	74 9f       	mul	r23, r20
    15ae:	90 0d       	add	r25, r0
    15b0:	11 24       	eor	r1, r1
    15b2:	82 0f       	add	r24, r18
    15b4:	93 1f       	adc	r25, r19
    15b6:	80 93 b6 23 	sts	0x23B6, r24
    15ba:	90 93 b7 23 	sts	0x23B7, r25
    if (!g_b_xrate_greater_yrate)
    15be:	80 91 f4 23 	lds	r24, 0x23F4
    15c2:	88 23       	and	r24, r24
    15c4:	29 f4       	brne	.+10     	; 0x15d0 <decrement_index_y+0x6c>
    	g_display_count++;
    15c6:	80 91 b2 23 	lds	r24, 0x23B2
    15ca:	8f 5f       	subi	r24, 0xFF	; 255
    15cc:	80 93 b2 23 	sts	0x23B2, r24
    15d0:	08 95       	ret

000015d2 <toggle_trigger>:
}


void toggle_trigger(void)
{
    digitalToggle(3); //toggle digital 3 to trigger camera
    15d2:	83 e0       	ldi	r24, 0x03	; 3
    15d4:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <digitalToggle>
}
    15d8:	08 95       	ret

000015da <calculate_and_set_position_y>:

// calculate_and_set_position_y()
// Calculates and sets the x position.
//
void calculate_and_set_position_y(void)
{
    15da:	a6 e1       	ldi	r26, 0x16	; 22
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e3 ef       	ldi	r30, 0xF3	; 243
    15e0:	fa e0       	ldi	r31, 0x0A	; 10
    15e2:	0c 94 ba 4b 	jmp	0x9774	; 0x9774 <__prologue_saves__>
	int8_t   i;
    int32_t  adc[4]={0,0,0,0};
    15e6:	fe 01       	movw	r30, r28
    15e8:	31 96       	adiw	r30, 0x01	; 1
    15ea:	80 e1       	ldi	r24, 0x10	; 16
    15ec:	df 01       	movw	r26, r30
    15ee:	1d 92       	st	X+, r1
    15f0:	8a 95       	dec	r24
    15f2:	e9 f7       	brne	.-6      	; 0x15ee <calculate_and_set_position_y+0x14>
    int16_t  y_tmp;
    int32_t  y;
    int32_t  adc_y;


    if (g_filllevel_buf_func_y)
    15f4:	80 91 e3 23 	lds	r24, 0x23E3
    15f8:	88 23       	and	r24, r24
    15fa:	09 f4       	brne	.+2      	; 0x15fe <calculate_and_set_position_y+0x24>
    15fc:	a6 c1       	rjmp	.+844    	; 0x194a <calculate_and_set_position_y+0x370>
    {
        g_index_func_y_read++;
    15fe:	80 91 df 23 	lds	r24, 0x23DF
    1602:	8f 5f       	subi	r24, 0xFF	; 255
    1604:	80 93 df 23 	sts	0x23DF, r24
        g_index_func_y_read %= RINGBUFFER_LENGTH;
    1608:	80 91 df 23 	lds	r24, 0x23DF
    160c:	64 e6       	ldi	r22, 0x64	; 100
    160e:	0e 94 4a 4b 	call	0x9694	; 0x9694 <__udivmodqi4>
    1612:	90 93 df 23 	sts	0x23DF, r25

        if (!g_b_default_func_y)
    1616:	80 91 4c 20 	lds	r24, 0x204C
    161a:	88 23       	and	r24, r24
    161c:	29 f4       	brne	.+10     	; 0x1628 <calculate_and_set_position_y+0x4e>
        	g_filllevel_buf_func_y--;
    161e:	80 91 e3 23 	lds	r24, 0x23E3
    1622:	81 50       	subi	r24, 0x01	; 1
    1624:	80 93 e3 23 	sts	0x23E3, r24

        switch(g_mode_y)
    1628:	80 91 c5 23 	lds	r24, 0x23C5
    162c:	84 30       	cpi	r24, 0x04	; 4
    162e:	21 f1       	breq	.+72     	; 0x1678 <calculate_and_set_position_y+0x9e>
    1630:	85 30       	cpi	r24, 0x05	; 5
    1632:	20 f4       	brcc	.+8      	; 0x163c <calculate_and_set_position_y+0x62>
    1634:	83 30       	cpi	r24, 0x03	; 3
    1636:	09 f0       	breq	.+2      	; 0x163a <calculate_and_set_position_y+0x60>
    1638:	8c c1       	rjmp	.+792    	; 0x1952 <calculate_and_set_position_y+0x378>
    163a:	07 c0       	rjmp	.+14     	; 0x164a <calculate_and_set_position_y+0x70>
    163c:	85 30       	cpi	r24, 0x05	; 5
    163e:	09 f4       	brne	.+2      	; 0x1642 <calculate_and_set_position_y+0x68>
    1640:	46 c0       	rjmp	.+140    	; 0x16ce <calculate_and_set_position_y+0xf4>
    1642:	82 36       	cpi	r24, 0x62	; 98
    1644:	09 f0       	breq	.+2      	; 0x1648 <calculate_and_set_position_y+0x6e>
    1646:	85 c1       	rjmp	.+778    	; 0x1952 <calculate_and_set_position_y+0x378>
    1648:	57 c0       	rjmp	.+174    	; 0x16f8 <calculate_and_set_position_y+0x11e>
        {
            case MODE_POS_ADC:
                adc[3] = analogRead(3);
    164a:	83 e0       	ldi	r24, 0x03	; 3
    164c:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <analogRead>
    1650:	bc 01       	movw	r22, r24
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
                g_y = (uint32_t)adc[3] * (uint32_t)g_n_y / (uint32_t)g_y_adc_max; // Change the scale from (0,adcmax) to (0,ymax).
    1656:	20 91 3b 20 	lds	r18, 0x203B
    165a:	30 91 3c 20 	lds	r19, 0x203C
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	50 e0       	ldi	r21, 0x00	; 0
    1662:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    1666:	20 91 37 20 	lds	r18, 0x2037
    166a:	30 91 38 20 	lds	r19, 0x2038
    166e:	40 e0       	ldi	r20, 0x00	; 0
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    1676:	26 c0       	rjmp	.+76     	; 0x16c4 <calculate_and_set_position_y+0xea>
                g_index_frame = FRAMEFROMXY(g_x, g_y);
                break;

            case MODE_POS_FUNCTION:
                y_tmp = (g_y_initial + g_buf_func_y[g_index_func_y_read]);
    1678:	e0 91 df 23 	lds	r30, 0x23DF
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	ee 0f       	add	r30, r30
    1680:	ff 1f       	adc	r31, r31
    1682:	e3 52       	subi	r30, 0x23	; 35
    1684:	f9 4d       	sbci	r31, 0xD9	; 217
    1686:	80 81       	ld	r24, Z
    1688:	91 81       	ldd	r25, Z+1	; 0x01
    168a:	20 91 c2 23 	lds	r18, 0x23C2
    168e:	30 91 c3 23 	lds	r19, 0x23C3
    1692:	82 0f       	add	r24, r18
    1694:	93 1f       	adc	r25, r19
    1696:	60 91 3b 20 	lds	r22, 0x203B
    169a:	70 91 3c 20 	lds	r23, 0x203C

                // Wrap around if necessary.
                if (y_tmp >= 0)
    169e:	97 fd       	sbrc	r25, 7
    16a0:	07 c0       	rjmp	.+14     	; 0x16b0 <calculate_and_set_position_y+0xd6>
                    g_y = y_tmp%g_n_y;
    16a2:	0e 94 56 4b 	call	0x96ac	; 0x96ac <__udivmodhi4>
    16a6:	80 93 be 23 	sts	0x23BE, r24
    16aa:	90 93 bf 23 	sts	0x23BF, r25
    16ae:	33 c1       	rjmp	.+614    	; 0x1916 <calculate_and_set_position_y+0x33c>
                else
                	g_y = g_n_y - ((abs(y_tmp))%g_n_y) - 1;
    16b0:	9b 01       	movw	r18, r22
    16b2:	21 50       	subi	r18, 0x01	; 1
    16b4:	30 40       	sbci	r19, 0x00	; 0
    16b6:	90 95       	com	r25
    16b8:	81 95       	neg	r24
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	0e 94 56 4b 	call	0x96ac	; 0x96ac <__udivmodhi4>
    16c0:	28 1b       	sub	r18, r24
    16c2:	39 0b       	sbc	r19, r25
    16c4:	20 93 be 23 	sts	0x23BE, r18
    16c8:	30 93 bf 23 	sts	0x23BF, r19
    16cc:	24 c1       	rjmp	.+584    	; 0x1916 <calculate_and_set_position_y+0x33c>
                g_index_frame = FRAMEFROMXY(g_x, g_y);
                break;

            case MODE_POS_DEBUG:   // in function DBG mode - show the function gen
                //3277 is converted to 1V by DAC, we amplify function value so value 100 is about 1V
                dac_y = g_buf_func_y[g_index_func_y_read]*33;
    16ce:	e0 91 df 23 	lds	r30, 0x23DF
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	ee 0f       	add	r30, r30
    16d6:	ff 1f       	adc	r31, r31
    16d8:	e3 52       	subi	r30, 0x23	; 35
    16da:	f9 4d       	sbci	r31, 0xD9	; 217
    16dc:	80 81       	ld	r24, Z
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	bc 01       	movw	r22, r24
    16e2:	e5 e0       	ldi	r30, 0x05	; 5
    16e4:	66 0f       	add	r22, r22
    16e6:	77 1f       	adc	r23, r23
    16e8:	ea 95       	dec	r30
    16ea:	e1 f7       	brne	.-8      	; 0x16e4 <calculate_and_set_position_y+0x10a>
    16ec:	68 0f       	add	r22, r24
    16ee:	79 1f       	adc	r23, r25
                analogWrite(1, dac_y); // make it a value in the range -32767 - 32767 (-10V - 10V)
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <analogWrite>
                break;
    16f6:	2d c1       	rjmp	.+602    	; 0x1952 <calculate_and_set_position_y+0x378>
    16f8:	62 ed       	ldi	r22, 0xD2	; 210
    16fa:	e6 2e       	mov	r14, r22
    16fc:	63 e2       	ldi	r22, 0x23	; 35
    16fe:	f6 2e       	mov	r15, r22
    1700:	8e 01       	movw	r16, r28
    1702:	0f 5f       	subi	r16, 0xFF	; 255
    1704:	1f 4f       	sbci	r17, 0xFF	; 255
            	// Read the ADC's if necessary.
            	for (i=0; i<4; i++)
            		if (g_custom_a_y[i])
            			adc[i] = (int32_t)analogRead(0);
            		else
            			adc[i] = (DAQRESOLUTION+1)/2;
    1706:	a1 2c       	mov	r10, r1
    1708:	50 e1       	ldi	r21, 0x10	; 16
    170a:	b5 2e       	mov	r11, r21
    170c:	c1 2c       	mov	r12, r1
    170e:	d1 2c       	mov	r13, r1
                break;

            case MODE_POS_CUSTOM:  // Custom position mode.
            	// Read the ADC's if necessary.
            	for (i=0; i<4; i++)
            		if (g_custom_a_y[i])
    1710:	f7 01       	movw	r30, r14
    1712:	81 91       	ld	r24, Z+
    1714:	91 91       	ld	r25, Z+
    1716:	7f 01       	movw	r14, r30
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	59 f0       	breq	.+22     	; 0x1732 <calculate_and_set_position_y+0x158>
            			adc[i] = (int32_t)analogRead(0);
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <analogRead>
    1722:	a0 e0       	ldi	r26, 0x00	; 0
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	f8 01       	movw	r30, r16
    1728:	80 83       	st	Z, r24
    172a:	91 83       	std	Z+1, r25	; 0x01
    172c:	a2 83       	std	Z+2, r26	; 0x02
    172e:	b3 83       	std	Z+3, r27	; 0x03
    1730:	06 c0       	rjmp	.+12     	; 0x173e <calculate_and_set_position_y+0x164>
            		else
            			adc[i] = (DAQRESOLUTION+1)/2;
    1732:	d8 01       	movw	r26, r16
    1734:	ad 92       	st	X+, r10
    1736:	bd 92       	st	X+, r11
    1738:	cd 92       	st	X+, r12
    173a:	dc 92       	st	X, r13
    173c:	13 97       	sbiw	r26, 0x03	; 3
    173e:	0c 5f       	subi	r16, 0xFC	; 252
    1740:	1f 4f       	sbci	r17, 0xFF	; 255
                analogWrite(1, dac_y); // make it a value in the range -32767 - 32767 (-10V - 10V)
                break;

            case MODE_POS_CUSTOM:  // Custom position mode.
            	// Read the ADC's if necessary.
            	for (i=0; i<4; i++)
    1742:	ba ed       	ldi	r27, 0xDA	; 218
    1744:	eb 16       	cp	r14, r27
    1746:	b3 e2       	ldi	r27, 0x23	; 35
    1748:	fb 06       	cpc	r15, r27
    174a:	11 f7       	brne	.-60     	; 0x1710 <calculate_and_set_position_y+0x136>
            		if (g_custom_a_y[i])
            			adc[i] = (int32_t)analogRead(0);
            		else
            			adc[i] = (DAQRESOLUTION+1)/2;

            	adc_y = (int32_t)g_custom_a_y[0] * (adc[0] - (int32_t)g_y_adc_max/2) / 10 +
    174c:	e0 91 37 20 	lds	r30, 0x2037
    1750:	f0 91 38 20 	lds	r31, 0x2038
    1754:	ed 8b       	std	Y+21, r30	; 0x15
    1756:	fe 8b       	std	Y+22, r31	; 0x16
    1758:	1f 01       	movw	r2, r30
    175a:	36 94       	lsr	r3
    175c:	27 94       	ror	r2
    175e:	44 24       	eor	r4, r4
    1760:	55 24       	eor	r5, r5
   	                    (int32_t)g_custom_a_y[1] * (adc[1] - (int32_t)g_y_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_y[2] * (adc[2] - (int32_t)g_y_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_y[3] * (adc[3] - (int32_t)g_y_adc_max/2) / 10;

            	 // Change the scale from (-adcmax/2,+adcmax/2) to (0,ymax).
                y = (((int32_t)adc_y * (int32_t)g_n_y / (int32_t)g_y_adc_max) + (int32_t)g_n_y);
    1762:	80 91 3b 20 	lds	r24, 0x203B
    1766:	90 91 3c 20 	lds	r25, 0x203C
    176a:	9c 01       	movw	r18, r24
    176c:	40 e0       	ldi	r20, 0x00	; 0
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	29 8b       	std	Y+17, r18	; 0x11
    1772:	3a 8b       	std	Y+18, r19	; 0x12
    1774:	4b 8b       	std	Y+19, r20	; 0x13
    1776:	5c 8b       	std	Y+20, r21	; 0x14

                // Add the functions.
                y += (int32_t)g_custom_a_y[4] * (int32_t)g_buf_func_x[g_index_func_x_read] / 10;
    1778:	e0 91 de 23 	lds	r30, 0x23DE
                y += (int32_t)g_custom_a_y[5] * (int32_t)g_buf_func_y[g_index_func_y_read] / 10;
    177c:	00 91 df 23 	lds	r16, 0x23DF

            	 // Change the scale from (-adcmax/2,+adcmax/2) to (0,ymax).
                y = (((int32_t)adc_y * (int32_t)g_n_y / (int32_t)g_y_adc_max) + (int32_t)g_n_y);

                // Add the functions.
                y += (int32_t)g_custom_a_y[4] * (int32_t)g_buf_func_x[g_index_func_x_read] / 10;
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	ee 0f       	add	r30, r30
    1784:	ff 1f       	adc	r31, r31
    1786:	e5 50       	subi	r30, 0x05	; 5
    1788:	fa 4d       	sbci	r31, 0xDA	; 218
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	88 27       	eor	r24, r24
    1790:	77 fd       	sbrc	r23, 7
    1792:	80 95       	com	r24
    1794:	98 2f       	mov	r25, r24
    1796:	20 91 da 23 	lds	r18, 0x23DA
    179a:	30 91 db 23 	lds	r19, 0x23DB
    179e:	44 27       	eor	r20, r20
    17a0:	37 fd       	sbrc	r19, 7
    17a2:	40 95       	com	r20
    17a4:	54 2f       	mov	r21, r20
    17a6:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    17aa:	2a e0       	ldi	r18, 0x0A	; 10
    17ac:	a2 2e       	mov	r10, r18
    17ae:	b1 2c       	mov	r11, r1
    17b0:	c1 2c       	mov	r12, r1
    17b2:	d1 2c       	mov	r13, r1
    17b4:	a6 01       	movw	r20, r12
    17b6:	95 01       	movw	r18, r10
    17b8:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    17bc:	39 01       	movw	r6, r18
    17be:	4a 01       	movw	r8, r20
                y += (int32_t)g_custom_a_y[5] * (int32_t)g_buf_func_y[g_index_func_y_read] / 10;
    17c0:	e0 2f       	mov	r30, r16
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	ee 0f       	add	r30, r30
    17c6:	ff 1f       	adc	r31, r31
    17c8:	e3 52       	subi	r30, 0x23	; 35
    17ca:	f9 4d       	sbci	r31, 0xD9	; 217
    17cc:	60 81       	ld	r22, Z
    17ce:	71 81       	ldd	r23, Z+1	; 0x01
    17d0:	88 27       	eor	r24, r24
    17d2:	77 fd       	sbrc	r23, 7
    17d4:	80 95       	com	r24
    17d6:	98 2f       	mov	r25, r24
    17d8:	20 91 dc 23 	lds	r18, 0x23DC
    17dc:	30 91 dd 23 	lds	r19, 0x23DD
    17e0:	44 27       	eor	r20, r20
    17e2:	37 fd       	sbrc	r19, 7
    17e4:	40 95       	com	r20
    17e6:	54 2f       	mov	r21, r20
    17e8:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    17ec:	a6 01       	movw	r20, r12
    17ee:	95 01       	movw	r18, r10
    17f0:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
   	                    (int32_t)g_custom_a_y[1] * (adc[1] - (int32_t)g_y_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_y[2] * (adc[2] - (int32_t)g_y_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_y[3] * (adc[3] - (int32_t)g_y_adc_max/2) / 10;

            	 // Change the scale from (-adcmax/2,+adcmax/2) to (0,ymax).
                y = (((int32_t)adc_y * (int32_t)g_n_y / (int32_t)g_y_adc_max) + (int32_t)g_n_y);
    17f4:	62 0e       	add	r6, r18
    17f6:	73 1e       	adc	r7, r19
    17f8:	84 1e       	adc	r8, r20
    17fa:	95 1e       	adc	r9, r21

                // Add the functions.
                y += (int32_t)g_custom_a_y[4] * (int32_t)g_buf_func_x[g_index_func_x_read] / 10;
    17fc:	89 89       	ldd	r24, Y+17	; 0x11
    17fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1800:	ab 89       	ldd	r26, Y+19	; 0x13
    1802:	bc 89       	ldd	r27, Y+20	; 0x14
    1804:	68 0e       	add	r6, r24
    1806:	79 1e       	adc	r7, r25
    1808:	8a 1e       	adc	r8, r26
    180a:	9b 1e       	adc	r9, r27
            			adc[i] = (int32_t)analogRead(0);
            		else
            			adc[i] = (DAQRESOLUTION+1)/2;

            	adc_y = (int32_t)g_custom_a_y[0] * (adc[0] - (int32_t)g_y_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_y[1] * (adc[1] - (int32_t)g_y_adc_max/2) / 10 +
    180c:	6d 81       	ldd	r22, Y+5	; 0x05
    180e:	7e 81       	ldd	r23, Y+6	; 0x06
    1810:	8f 81       	ldd	r24, Y+7	; 0x07
    1812:	98 85       	ldd	r25, Y+8	; 0x08
    1814:	62 19       	sub	r22, r2
    1816:	73 09       	sbc	r23, r3
    1818:	84 09       	sbc	r24, r4
    181a:	95 09       	sbc	r25, r5
    181c:	20 91 d4 23 	lds	r18, 0x23D4
    1820:	30 91 d5 23 	lds	r19, 0x23D5
    1824:	44 27       	eor	r20, r20
    1826:	37 fd       	sbrc	r19, 7
    1828:	40 95       	com	r20
    182a:	54 2f       	mov	r21, r20
    182c:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    1830:	a6 01       	movw	r20, r12
    1832:	95 01       	movw	r18, r10
    1834:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    1838:	79 01       	movw	r14, r18
    183a:	8a 01       	movw	r16, r20
            		if (g_custom_a_y[i])
            			adc[i] = (int32_t)analogRead(0);
            		else
            			adc[i] = (DAQRESOLUTION+1)/2;

            	adc_y = (int32_t)g_custom_a_y[0] * (adc[0] - (int32_t)g_y_adc_max/2) / 10 +
    183c:	69 81       	ldd	r22, Y+1	; 0x01
    183e:	7a 81       	ldd	r23, Y+2	; 0x02
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	62 19       	sub	r22, r2
    1846:	73 09       	sbc	r23, r3
    1848:	84 09       	sbc	r24, r4
    184a:	95 09       	sbc	r25, r5
    184c:	20 91 d2 23 	lds	r18, 0x23D2
    1850:	30 91 d3 23 	lds	r19, 0x23D3
    1854:	44 27       	eor	r20, r20
    1856:	37 fd       	sbrc	r19, 7
    1858:	40 95       	com	r20
    185a:	54 2f       	mov	r21, r20
    185c:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    1860:	a6 01       	movw	r20, r12
    1862:	95 01       	movw	r18, r10
    1864:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    1868:	e2 0e       	add	r14, r18
    186a:	f3 1e       	adc	r15, r19
    186c:	04 1f       	adc	r16, r20
    186e:	15 1f       	adc	r17, r21
   	                    (int32_t)g_custom_a_y[1] * (adc[1] - (int32_t)g_y_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_y[2] * (adc[2] - (int32_t)g_y_adc_max/2) / 10 +
    1870:	69 85       	ldd	r22, Y+9	; 0x09
    1872:	7a 85       	ldd	r23, Y+10	; 0x0a
    1874:	8b 85       	ldd	r24, Y+11	; 0x0b
    1876:	9c 85       	ldd	r25, Y+12	; 0x0c
    1878:	62 19       	sub	r22, r2
    187a:	73 09       	sbc	r23, r3
    187c:	84 09       	sbc	r24, r4
    187e:	95 09       	sbc	r25, r5
    1880:	20 91 d6 23 	lds	r18, 0x23D6
    1884:	30 91 d7 23 	lds	r19, 0x23D7
    1888:	44 27       	eor	r20, r20
    188a:	37 fd       	sbrc	r19, 7
    188c:	40 95       	com	r20
    188e:	54 2f       	mov	r21, r20
    1890:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    1894:	a6 01       	movw	r20, r12
    1896:	95 01       	movw	r18, r10
    1898:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
            			adc[i] = (int32_t)analogRead(0);
            		else
            			adc[i] = (DAQRESOLUTION+1)/2;

            	adc_y = (int32_t)g_custom_a_y[0] * (adc[0] - (int32_t)g_y_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_y[1] * (adc[1] - (int32_t)g_y_adc_max/2) / 10 +
    189c:	e2 0e       	add	r14, r18
    189e:	f3 1e       	adc	r15, r19
    18a0:	04 1f       	adc	r16, r20
    18a2:	15 1f       	adc	r17, r21
   	                    (int32_t)g_custom_a_y[2] * (adc[2] - (int32_t)g_y_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_y[3] * (adc[3] - (int32_t)g_y_adc_max/2) / 10;
    18a4:	6d 85       	ldd	r22, Y+13	; 0x0d
    18a6:	7e 85       	ldd	r23, Y+14	; 0x0e
    18a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18aa:	98 89       	ldd	r25, Y+16	; 0x10
    18ac:	62 19       	sub	r22, r2
    18ae:	73 09       	sbc	r23, r3
    18b0:	84 09       	sbc	r24, r4
    18b2:	95 09       	sbc	r25, r5
    18b4:	20 91 d8 23 	lds	r18, 0x23D8
    18b8:	30 91 d9 23 	lds	r19, 0x23D9
    18bc:	44 27       	eor	r20, r20
    18be:	37 fd       	sbrc	r19, 7
    18c0:	40 95       	com	r20
    18c2:	54 2f       	mov	r21, r20
    18c4:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    18c8:	a6 01       	movw	r20, r12
    18ca:	95 01       	movw	r18, r10
    18cc:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
            		if (g_custom_a_y[i])
            			adc[i] = (int32_t)analogRead(0);
            		else
            			adc[i] = (DAQRESOLUTION+1)/2;

            	adc_y = (int32_t)g_custom_a_y[0] * (adc[0] - (int32_t)g_y_adc_max/2) / 10 +
    18d0:	e2 0e       	add	r14, r18
    18d2:	f3 1e       	adc	r15, r19
    18d4:	04 1f       	adc	r16, r20
    18d6:	15 1f       	adc	r17, r21
   	                    (int32_t)g_custom_a_y[1] * (adc[1] - (int32_t)g_y_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_y[2] * (adc[2] - (int32_t)g_y_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_y[3] * (adc[3] - (int32_t)g_y_adc_max/2) / 10;

            	 // Change the scale from (-adcmax/2,+adcmax/2) to (0,ymax).
                y = (((int32_t)adc_y * (int32_t)g_n_y / (int32_t)g_y_adc_max) + (int32_t)g_n_y);
    18d8:	c8 01       	movw	r24, r16
    18da:	b7 01       	movw	r22, r14
    18dc:	29 89       	ldd	r18, Y+17	; 0x11
    18de:	3a 89       	ldd	r19, Y+18	; 0x12
    18e0:	4b 89       	ldd	r20, Y+19	; 0x13
    18e2:	5c 89       	ldd	r21, Y+20	; 0x14
    18e4:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    18e8:	ad 89       	ldd	r26, Y+21	; 0x15
    18ea:	be 89       	ldd	r27, Y+22	; 0x16
    18ec:	9d 01       	movw	r18, r26
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>

                // Add the functions.
                y += (int32_t)g_custom_a_y[4] * (int32_t)g_buf_func_x[g_index_func_x_read] / 10;
                y += (int32_t)g_custom_a_y[5] * (int32_t)g_buf_func_y[g_index_func_y_read] / 10;
    18f6:	62 0e       	add	r6, r18
    18f8:	73 1e       	adc	r7, r19
    18fa:	84 1e       	adc	r8, r20
    18fc:	95 1e       	adc	r9, r21

                // Output.
                g_y = (uint16_t)((y % (int32_t)g_n_y) & 0xFFFF);
    18fe:	c4 01       	movw	r24, r8
    1900:	b3 01       	movw	r22, r6
    1902:	29 89       	ldd	r18, Y+17	; 0x11
    1904:	3a 89       	ldd	r19, Y+18	; 0x12
    1906:	4b 89       	ldd	r20, Y+19	; 0x13
    1908:	5c 89       	ldd	r21, Y+20	; 0x14
    190a:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    190e:	60 93 be 23 	sts	0x23BE, r22
    1912:	70 93 bf 23 	sts	0x23BF, r23
                g_index_frame = FRAMEFROMXY(g_x, g_y);
    1916:	60 91 be 23 	lds	r22, 0x23BE
    191a:	70 91 bf 23 	lds	r23, 0x23BF
    191e:	20 91 bc 23 	lds	r18, 0x23BC
    1922:	30 91 bd 23 	lds	r19, 0x23BD
    1926:	40 91 39 20 	lds	r20, 0x2039
    192a:	50 91 3a 20 	lds	r21, 0x203A
    192e:	64 9f       	mul	r22, r20
    1930:	c0 01       	movw	r24, r0
    1932:	65 9f       	mul	r22, r21
    1934:	90 0d       	add	r25, r0
    1936:	74 9f       	mul	r23, r20
    1938:	90 0d       	add	r25, r0
    193a:	11 24       	eor	r1, r1
    193c:	82 0f       	add	r24, r18
    193e:	93 1f       	adc	r25, r19
    1940:	80 93 b6 23 	sts	0x23B6, r24
    1944:	90 93 b7 23 	sts	0x23B7, r25
                break;
    1948:	04 c0       	rjmp	.+8      	; 0x1952 <calculate_and_set_position_y+0x378>

        }
    }
    else
        xputs(PSTR("Function buffer for y is empty\n"));
    194a:	8e ef       	ldi	r24, 0xFE	; 254
    194c:	98 e0       	ldi	r25, 0x08	; 8
    194e:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>

} // calculate_and_set_position_y()
    1952:	66 96       	adiw	r28, 0x16	; 22
    1954:	e2 e1       	ldi	r30, 0x12	; 18
    1956:	0c 94 d3 4b 	jmp	0x97a6	; 0x97a6 <__epilogue_restores__>

0000195a <calculate_and_set_position_x>:

// calculate_and_set_position_x()
// Calculates and sets the x position.
//
void calculate_and_set_position_x(void)
{
    195a:	a8 e1       	ldi	r26, 0x18	; 24
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e3 eb       	ldi	r30, 0xB3	; 179
    1960:	fc e0       	ldi	r31, 0x0C	; 12
    1962:	0c 94 ba 4b 	jmp	0x9774	; 0x9774 <__prologue_saves__>
	int8_t   i;
    int32_t  adc[4]={0,0,0,0};
    1966:	fe 01       	movw	r30, r28
    1968:	31 96       	adiw	r30, 0x01	; 1
    196a:	80 e1       	ldi	r24, 0x10	; 16
    196c:	df 01       	movw	r26, r30
    196e:	1d 92       	st	X+, r1
    1970:	8a 95       	dec	r24
    1972:	e9 f7       	brne	.-6      	; 0x196e <calculate_and_set_position_x+0x14>
    int16_t  x_tmp;
    int32_t  x;
    int32_t  adc_x;


    if (g_filllevel_buf_func_x)
    1974:	80 91 e2 23 	lds	r24, 0x23E2
    1978:	88 23       	and	r24, r24
    197a:	09 f4       	brne	.+2      	; 0x197e <calculate_and_set_position_x+0x24>
    197c:	cd c1       	rjmp	.+922    	; 0x1d18 <calculate_and_set_position_x+0x3be>
    {
        g_index_func_x_read++;
    197e:	80 91 de 23 	lds	r24, 0x23DE
    1982:	8f 5f       	subi	r24, 0xFF	; 255
    1984:	80 93 de 23 	sts	0x23DE, r24
        g_index_func_x_read %= RINGBUFFER_LENGTH;
    1988:	80 91 de 23 	lds	r24, 0x23DE
    198c:	64 e6       	ldi	r22, 0x64	; 100
    198e:	0e 94 4a 4b 	call	0x9694	; 0x9694 <__udivmodqi4>
    1992:	90 93 de 23 	sts	0x23DE, r25

        if (!g_b_default_func_x)
    1996:	80 91 4b 20 	lds	r24, 0x204B
    199a:	88 23       	and	r24, r24
    199c:	29 f4       	brne	.+10     	; 0x19a8 <calculate_and_set_position_x+0x4e>
        	g_filllevel_buf_func_x--;
    199e:	80 91 e2 23 	lds	r24, 0x23E2
    19a2:	81 50       	subi	r24, 0x01	; 1
    19a4:	80 93 e2 23 	sts	0x23E2, r24

        switch(g_mode_x)
    19a8:	80 91 c4 23 	lds	r24, 0x23C4
    19ac:	84 30       	cpi	r24, 0x04	; 4
    19ae:	c1 f1       	breq	.+112    	; 0x1a20 <calculate_and_set_position_x+0xc6>
    19b0:	85 30       	cpi	r24, 0x05	; 5
    19b2:	20 f4       	brcc	.+8      	; 0x19bc <calculate_and_set_position_x+0x62>
    19b4:	83 30       	cpi	r24, 0x03	; 3
    19b6:	09 f0       	breq	.+2      	; 0x19ba <calculate_and_set_position_x+0x60>
    19b8:	b3 c1       	rjmp	.+870    	; 0x1d20 <calculate_and_set_position_x+0x3c6>
    19ba:	07 c0       	rjmp	.+14     	; 0x19ca <calculate_and_set_position_x+0x70>
    19bc:	85 30       	cpi	r24, 0x05	; 5
    19be:	09 f4       	brne	.+2      	; 0x19c2 <calculate_and_set_position_x+0x68>
    19c0:	73 c0       	rjmp	.+230    	; 0x1aa8 <calculate_and_set_position_x+0x14e>
    19c2:	82 36       	cpi	r24, 0x62	; 98
    19c4:	09 f0       	breq	.+2      	; 0x19c8 <calculate_and_set_position_x+0x6e>
    19c6:	ac c1       	rjmp	.+856    	; 0x1d20 <calculate_and_set_position_x+0x3c6>
    19c8:	84 c0       	rjmp	.+264    	; 0x1ad2 <calculate_and_set_position_x+0x178>
        {
            case MODE_POS_ADC:
                adc[2] = analogRead(2);
    19ca:	82 e0       	ldi	r24, 0x02	; 2
    19cc:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <analogRead>
                g_x = (uint32_t)adc[2] * (uint32_t)g_n_x / (uint32_t)g_x_adc_max; // Change the scale from (0,adcmax) to (0,xmax).
    19d0:	00 91 39 20 	lds	r16, 0x2039
    19d4:	10 91 3a 20 	lds	r17, 0x203A
        	g_filllevel_buf_func_x--;

        switch(g_mode_x)
        {
            case MODE_POS_ADC:
                adc[2] = analogRead(2);
    19d8:	bc 01       	movw	r22, r24
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	90 e0       	ldi	r25, 0x00	; 0
                g_x = (uint32_t)adc[2] * (uint32_t)g_n_x / (uint32_t)g_x_adc_max; // Change the scale from (0,adcmax) to (0,xmax).
    19de:	98 01       	movw	r18, r16
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    19e8:	20 91 35 20 	lds	r18, 0x2035
    19ec:	30 91 36 20 	lds	r19, 0x2036
    19f0:	40 e0       	ldi	r20, 0x00	; 0
    19f2:	50 e0       	ldi	r21, 0x00	; 0
    19f4:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    19f8:	20 93 bc 23 	sts	0x23BC, r18
    19fc:	30 93 bd 23 	sts	0x23BD, r19
                g_index_frame = FRAMEFROMXY(g_x, g_y);
    1a00:	40 91 be 23 	lds	r20, 0x23BE
    1a04:	50 91 bf 23 	lds	r21, 0x23BF
    1a08:	20 91 bc 23 	lds	r18, 0x23BC
    1a0c:	30 91 bd 23 	lds	r19, 0x23BD
    1a10:	40 9f       	mul	r20, r16
    1a12:	c0 01       	movw	r24, r0
    1a14:	41 9f       	mul	r20, r17
    1a16:	90 0d       	add	r25, r0
    1a18:	50 9f       	mul	r21, r16
    1a1a:	90 0d       	add	r25, r0
    1a1c:	11 24       	eor	r1, r1
    1a1e:	3d c0       	rjmp	.+122    	; 0x1a9a <calculate_and_set_position_x+0x140>
                break;

            case MODE_POS_FUNCTION:
                x_tmp = g_x_initial + g_buf_func_x[g_index_func_x_read];
    1a20:	e0 91 de 23 	lds	r30, 0x23DE
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	ee 0f       	add	r30, r30
    1a28:	ff 1f       	adc	r31, r31
    1a2a:	e5 50       	subi	r30, 0x05	; 5
    1a2c:	fa 4d       	sbci	r31, 0xDA	; 218
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	20 91 c0 23 	lds	r18, 0x23C0
    1a36:	30 91 c1 23 	lds	r19, 0x23C1
    1a3a:	82 0f       	add	r24, r18
    1a3c:	93 1f       	adc	r25, r19
    1a3e:	60 91 39 20 	lds	r22, 0x2039
    1a42:	70 91 3a 20 	lds	r23, 0x203A

                // Wrap around if necessary.
                if (x_tmp >= 0)
    1a46:	97 fd       	sbrc	r25, 7
    1a48:	07 c0       	rjmp	.+14     	; 0x1a58 <calculate_and_set_position_x+0xfe>
                    g_x = x_tmp%g_n_x;
    1a4a:	0e 94 56 4b 	call	0x96ac	; 0x96ac <__udivmodhi4>
    1a4e:	80 93 bc 23 	sts	0x23BC, r24
    1a52:	90 93 bd 23 	sts	0x23BD, r25
    1a56:	0e c0       	rjmp	.+28     	; 0x1a74 <calculate_and_set_position_x+0x11a>
                else
                    g_x = g_n_x - ((abs(x_tmp))%g_n_x) - 1;
    1a58:	9b 01       	movw	r18, r22
    1a5a:	21 50       	subi	r18, 0x01	; 1
    1a5c:	30 40       	sbci	r19, 0x00	; 0
    1a5e:	90 95       	com	r25
    1a60:	81 95       	neg	r24
    1a62:	9f 4f       	sbci	r25, 0xFF	; 255
    1a64:	0e 94 56 4b 	call	0x96ac	; 0x96ac <__udivmodhi4>
    1a68:	28 1b       	sub	r18, r24
    1a6a:	39 0b       	sbc	r19, r25
    1a6c:	20 93 bc 23 	sts	0x23BC, r18
    1a70:	30 93 bd 23 	sts	0x23BD, r19

                g_index_frame = FRAMEFROMXY(g_x, g_y);
    1a74:	60 91 be 23 	lds	r22, 0x23BE
    1a78:	70 91 bf 23 	lds	r23, 0x23BF
    1a7c:	20 91 bc 23 	lds	r18, 0x23BC
    1a80:	30 91 bd 23 	lds	r19, 0x23BD
    1a84:	40 91 39 20 	lds	r20, 0x2039
    1a88:	50 91 3a 20 	lds	r21, 0x203A
    1a8c:	64 9f       	mul	r22, r20
    1a8e:	c0 01       	movw	r24, r0
    1a90:	65 9f       	mul	r22, r21
    1a92:	90 0d       	add	r25, r0
    1a94:	74 9f       	mul	r23, r20
    1a96:	90 0d       	add	r25, r0
    1a98:	11 24       	eor	r1, r1
    1a9a:	82 0f       	add	r24, r18
    1a9c:	93 1f       	adc	r25, r19
    1a9e:	80 93 b6 23 	sts	0x23B6, r24
    1aa2:	90 93 b7 23 	sts	0x23B7, r25
                break;
    1aa6:	3c c1       	rjmp	.+632    	; 0x1d20 <calculate_and_set_position_x+0x3c6>

            case MODE_POS_DEBUG:   // in function DBG mode - show the function gen
                //3277 is converted to 1V by DAC, we amplify function value so value 100 is about 1V
                dac_x = g_buf_func_x[g_index_func_x_read]*33;
    1aa8:	e0 91 de 23 	lds	r30, 0x23DE
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	ee 0f       	add	r30, r30
    1ab0:	ff 1f       	adc	r31, r31
    1ab2:	e5 50       	subi	r30, 0x05	; 5
    1ab4:	fa 4d       	sbci	r31, 0xDA	; 218
    1ab6:	80 81       	ld	r24, Z
    1ab8:	91 81       	ldd	r25, Z+1	; 0x01
    1aba:	bc 01       	movw	r22, r24
    1abc:	e5 e0       	ldi	r30, 0x05	; 5
    1abe:	66 0f       	add	r22, r22
    1ac0:	77 1f       	adc	r23, r23
    1ac2:	ea 95       	dec	r30
    1ac4:	e1 f7       	brne	.-8      	; 0x1abe <calculate_and_set_position_x+0x164>
    1ac6:	68 0f       	add	r22, r24
    1ac8:	79 1f       	adc	r23, r25
                analogWrite(0, dac_x); // make it a value in the range -32767 - 32767 (-10V - 10V)
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <analogWrite>
                break;
    1ad0:	27 c1       	rjmp	.+590    	; 0x1d20 <calculate_and_set_position_x+0x3c6>
    1ad2:	66 ec       	ldi	r22, 0xC6	; 198
    1ad4:	e6 2e       	mov	r14, r22
    1ad6:	63 e2       	ldi	r22, 0x23	; 35
    1ad8:	f6 2e       	mov	r15, r22
    1ada:	8e 01       	movw	r16, r28
    1adc:	0f 5f       	subi	r16, 0xFF	; 255
    1ade:	1f 4f       	sbci	r17, 0xFF	; 255
            	// Read the ADC's if necessary.
            	for (i=0; i<4; i++)
            		if (g_custom_a_x[i])
            			adc[i] = (int32_t)analogRead(0);
            		else
            			adc[i] = (DAQRESOLUTION+1)/2;
    1ae0:	a1 2c       	mov	r10, r1
    1ae2:	50 e1       	ldi	r21, 0x10	; 16
    1ae4:	b5 2e       	mov	r11, r21
    1ae6:	c1 2c       	mov	r12, r1
    1ae8:	d1 2c       	mov	r13, r1
                break;

            case MODE_POS_CUSTOM:  // Custom position mode.
            	// Read the ADC's if necessary.
            	for (i=0; i<4; i++)
            		if (g_custom_a_x[i])
    1aea:	f7 01       	movw	r30, r14
    1aec:	81 91       	ld	r24, Z+
    1aee:	91 91       	ld	r25, Z+
    1af0:	7f 01       	movw	r14, r30
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	59 f0       	breq	.+22     	; 0x1b0c <calculate_and_set_position_x+0x1b2>
            			adc[i] = (int32_t)analogRead(0);
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <analogRead>
    1afc:	a0 e0       	ldi	r26, 0x00	; 0
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	f8 01       	movw	r30, r16
    1b02:	80 83       	st	Z, r24
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	a2 83       	std	Z+2, r26	; 0x02
    1b08:	b3 83       	std	Z+3, r27	; 0x03
    1b0a:	06 c0       	rjmp	.+12     	; 0x1b18 <calculate_and_set_position_x+0x1be>
            		else
            			adc[i] = (DAQRESOLUTION+1)/2;
    1b0c:	d8 01       	movw	r26, r16
    1b0e:	ad 92       	st	X+, r10
    1b10:	bd 92       	st	X+, r11
    1b12:	cd 92       	st	X+, r12
    1b14:	dc 92       	st	X, r13
    1b16:	13 97       	sbiw	r26, 0x03	; 3
    1b18:	0c 5f       	subi	r16, 0xFC	; 252
    1b1a:	1f 4f       	sbci	r17, 0xFF	; 255
                analogWrite(0, dac_x); // make it a value in the range -32767 - 32767 (-10V - 10V)
                break;

            case MODE_POS_CUSTOM:  // Custom position mode.
            	// Read the ADC's if necessary.
            	for (i=0; i<4; i++)
    1b1c:	be ec       	ldi	r27, 0xCE	; 206
    1b1e:	eb 16       	cp	r14, r27
    1b20:	b3 e2       	ldi	r27, 0x23	; 35
    1b22:	fb 06       	cpc	r15, r27
    1b24:	11 f7       	brne	.-60     	; 0x1aea <calculate_and_set_position_x+0x190>
            		if (g_custom_a_x[i])
            			adc[i] = (int32_t)analogRead(0);
            		else
            			adc[i] = (DAQRESOLUTION+1)/2;

            	adc_x = (int32_t)g_custom_a_x[0] * (adc[0] - (int32_t)g_x_adc_max/2) / 10 +
    1b26:	e0 91 35 20 	lds	r30, 0x2035
    1b2a:	f0 91 36 20 	lds	r31, 0x2036
    1b2e:	ed 8b       	std	Y+21, r30	; 0x15
    1b30:	fe 8b       	std	Y+22, r31	; 0x16
    1b32:	1f 01       	movw	r2, r30
    1b34:	36 94       	lsr	r3
    1b36:	27 94       	ror	r2
    1b38:	44 24       	eor	r4, r4
    1b3a:	55 24       	eor	r5, r5
   	                    (int32_t)g_custom_a_x[1] * (adc[1] - (int32_t)g_x_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_x[2] * (adc[2] - (int32_t)g_x_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_x[3] * (adc[3] - (int32_t)g_x_adc_max/2) / 10;

            	 // Change the scale from (-adcmax/2,+adcmax/2) to (0,xmax).
                x = (((int32_t)adc_x * (int32_t)g_n_x / (int32_t)g_x_adc_max) + (int32_t)g_n_x);
    1b3c:	60 91 39 20 	lds	r22, 0x2039
    1b40:	70 91 3a 20 	lds	r23, 0x203A
    1b44:	6f 8b       	std	Y+23, r22	; 0x17
    1b46:	78 8f       	std	Y+24, r23	; 0x18
    1b48:	cb 01       	movw	r24, r22
    1b4a:	a0 e0       	ldi	r26, 0x00	; 0
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	89 8b       	std	Y+17, r24	; 0x11
    1b50:	9a 8b       	std	Y+18, r25	; 0x12
    1b52:	ab 8b       	std	Y+19, r26	; 0x13
    1b54:	bc 8b       	std	Y+20, r27	; 0x14

                // Add the functions.
                x += (int32_t)g_custom_a_x[4] * (int32_t)g_buf_func_x[g_index_func_x_read] / 10;
    1b56:	e0 91 de 23 	lds	r30, 0x23DE
                x += (int32_t)g_custom_a_x[5] * (int32_t)g_buf_func_y[g_index_func_y_read] / 10;
    1b5a:	00 91 df 23 	lds	r16, 0x23DF

            	 // Change the scale from (-adcmax/2,+adcmax/2) to (0,xmax).
                x = (((int32_t)adc_x * (int32_t)g_n_x / (int32_t)g_x_adc_max) + (int32_t)g_n_x);

                // Add the functions.
                x += (int32_t)g_custom_a_x[4] * (int32_t)g_buf_func_x[g_index_func_x_read] / 10;
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	ee 0f       	add	r30, r30
    1b62:	ff 1f       	adc	r31, r31
    1b64:	e5 50       	subi	r30, 0x05	; 5
    1b66:	fa 4d       	sbci	r31, 0xDA	; 218
    1b68:	60 81       	ld	r22, Z
    1b6a:	71 81       	ldd	r23, Z+1	; 0x01
    1b6c:	88 27       	eor	r24, r24
    1b6e:	77 fd       	sbrc	r23, 7
    1b70:	80 95       	com	r24
    1b72:	98 2f       	mov	r25, r24
    1b74:	20 91 ce 23 	lds	r18, 0x23CE
    1b78:	30 91 cf 23 	lds	r19, 0x23CF
    1b7c:	44 27       	eor	r20, r20
    1b7e:	37 fd       	sbrc	r19, 7
    1b80:	40 95       	com	r20
    1b82:	54 2f       	mov	r21, r20
    1b84:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    1b88:	2a e0       	ldi	r18, 0x0A	; 10
    1b8a:	a2 2e       	mov	r10, r18
    1b8c:	b1 2c       	mov	r11, r1
    1b8e:	c1 2c       	mov	r12, r1
    1b90:	d1 2c       	mov	r13, r1
    1b92:	a6 01       	movw	r20, r12
    1b94:	95 01       	movw	r18, r10
    1b96:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    1b9a:	39 01       	movw	r6, r18
    1b9c:	4a 01       	movw	r8, r20
                x += (int32_t)g_custom_a_x[5] * (int32_t)g_buf_func_y[g_index_func_y_read] / 10;
    1b9e:	e0 2f       	mov	r30, r16
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	ee 0f       	add	r30, r30
    1ba4:	ff 1f       	adc	r31, r31
    1ba6:	e3 52       	subi	r30, 0x23	; 35
    1ba8:	f9 4d       	sbci	r31, 0xD9	; 217
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	88 27       	eor	r24, r24
    1bb0:	77 fd       	sbrc	r23, 7
    1bb2:	80 95       	com	r24
    1bb4:	98 2f       	mov	r25, r24
    1bb6:	20 91 d0 23 	lds	r18, 0x23D0
    1bba:	30 91 d1 23 	lds	r19, 0x23D1
    1bbe:	44 27       	eor	r20, r20
    1bc0:	37 fd       	sbrc	r19, 7
    1bc2:	40 95       	com	r20
    1bc4:	54 2f       	mov	r21, r20
    1bc6:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    1bca:	a6 01       	movw	r20, r12
    1bcc:	95 01       	movw	r18, r10
    1bce:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
   	                    (int32_t)g_custom_a_x[1] * (adc[1] - (int32_t)g_x_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_x[2] * (adc[2] - (int32_t)g_x_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_x[3] * (adc[3] - (int32_t)g_x_adc_max/2) / 10;

            	 // Change the scale from (-adcmax/2,+adcmax/2) to (0,xmax).
                x = (((int32_t)adc_x * (int32_t)g_n_x / (int32_t)g_x_adc_max) + (int32_t)g_n_x);
    1bd2:	62 0e       	add	r6, r18
    1bd4:	73 1e       	adc	r7, r19
    1bd6:	84 1e       	adc	r8, r20
    1bd8:	95 1e       	adc	r9, r21

                // Add the functions.
                x += (int32_t)g_custom_a_x[4] * (int32_t)g_buf_func_x[g_index_func_x_read] / 10;
    1bda:	69 89       	ldd	r22, Y+17	; 0x11
    1bdc:	7a 89       	ldd	r23, Y+18	; 0x12
    1bde:	8b 89       	ldd	r24, Y+19	; 0x13
    1be0:	9c 89       	ldd	r25, Y+20	; 0x14
    1be2:	66 0e       	add	r6, r22
    1be4:	77 1e       	adc	r7, r23
    1be6:	88 1e       	adc	r8, r24
    1be8:	99 1e       	adc	r9, r25
            			adc[i] = (int32_t)analogRead(0);
            		else
            			adc[i] = (DAQRESOLUTION+1)/2;

            	adc_x = (int32_t)g_custom_a_x[0] * (adc[0] - (int32_t)g_x_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_x[1] * (adc[1] - (int32_t)g_x_adc_max/2) / 10 +
    1bea:	6d 81       	ldd	r22, Y+5	; 0x05
    1bec:	7e 81       	ldd	r23, Y+6	; 0x06
    1bee:	8f 81       	ldd	r24, Y+7	; 0x07
    1bf0:	98 85       	ldd	r25, Y+8	; 0x08
    1bf2:	62 19       	sub	r22, r2
    1bf4:	73 09       	sbc	r23, r3
    1bf6:	84 09       	sbc	r24, r4
    1bf8:	95 09       	sbc	r25, r5
    1bfa:	20 91 c8 23 	lds	r18, 0x23C8
    1bfe:	30 91 c9 23 	lds	r19, 0x23C9
    1c02:	44 27       	eor	r20, r20
    1c04:	37 fd       	sbrc	r19, 7
    1c06:	40 95       	com	r20
    1c08:	54 2f       	mov	r21, r20
    1c0a:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    1c0e:	a6 01       	movw	r20, r12
    1c10:	95 01       	movw	r18, r10
    1c12:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    1c16:	79 01       	movw	r14, r18
    1c18:	8a 01       	movw	r16, r20
            		if (g_custom_a_x[i])
            			adc[i] = (int32_t)analogRead(0);
            		else
            			adc[i] = (DAQRESOLUTION+1)/2;

            	adc_x = (int32_t)g_custom_a_x[0] * (adc[0] - (int32_t)g_x_adc_max/2) / 10 +
    1c1a:	69 81       	ldd	r22, Y+1	; 0x01
    1c1c:	7a 81       	ldd	r23, Y+2	; 0x02
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	62 19       	sub	r22, r2
    1c24:	73 09       	sbc	r23, r3
    1c26:	84 09       	sbc	r24, r4
    1c28:	95 09       	sbc	r25, r5
    1c2a:	20 91 c6 23 	lds	r18, 0x23C6
    1c2e:	30 91 c7 23 	lds	r19, 0x23C7
    1c32:	44 27       	eor	r20, r20
    1c34:	37 fd       	sbrc	r19, 7
    1c36:	40 95       	com	r20
    1c38:	54 2f       	mov	r21, r20
    1c3a:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    1c3e:	a6 01       	movw	r20, r12
    1c40:	95 01       	movw	r18, r10
    1c42:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    1c46:	e2 0e       	add	r14, r18
    1c48:	f3 1e       	adc	r15, r19
    1c4a:	04 1f       	adc	r16, r20
    1c4c:	15 1f       	adc	r17, r21
   	                    (int32_t)g_custom_a_x[1] * (adc[1] - (int32_t)g_x_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_x[2] * (adc[2] - (int32_t)g_x_adc_max/2) / 10 +
    1c4e:	69 85       	ldd	r22, Y+9	; 0x09
    1c50:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c52:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c54:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c56:	62 19       	sub	r22, r2
    1c58:	73 09       	sbc	r23, r3
    1c5a:	84 09       	sbc	r24, r4
    1c5c:	95 09       	sbc	r25, r5
    1c5e:	20 91 ca 23 	lds	r18, 0x23CA
    1c62:	30 91 cb 23 	lds	r19, 0x23CB
    1c66:	44 27       	eor	r20, r20
    1c68:	37 fd       	sbrc	r19, 7
    1c6a:	40 95       	com	r20
    1c6c:	54 2f       	mov	r21, r20
    1c6e:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    1c72:	a6 01       	movw	r20, r12
    1c74:	95 01       	movw	r18, r10
    1c76:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
            			adc[i] = (int32_t)analogRead(0);
            		else
            			adc[i] = (DAQRESOLUTION+1)/2;

            	adc_x = (int32_t)g_custom_a_x[0] * (adc[0] - (int32_t)g_x_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_x[1] * (adc[1] - (int32_t)g_x_adc_max/2) / 10 +
    1c7a:	e2 0e       	add	r14, r18
    1c7c:	f3 1e       	adc	r15, r19
    1c7e:	04 1f       	adc	r16, r20
    1c80:	15 1f       	adc	r17, r21
   	                    (int32_t)g_custom_a_x[2] * (adc[2] - (int32_t)g_x_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_x[3] * (adc[3] - (int32_t)g_x_adc_max/2) / 10;
    1c82:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c84:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c88:	98 89       	ldd	r25, Y+16	; 0x10
    1c8a:	62 19       	sub	r22, r2
    1c8c:	73 09       	sbc	r23, r3
    1c8e:	84 09       	sbc	r24, r4
    1c90:	95 09       	sbc	r25, r5
    1c92:	20 91 cc 23 	lds	r18, 0x23CC
    1c96:	30 91 cd 23 	lds	r19, 0x23CD
    1c9a:	44 27       	eor	r20, r20
    1c9c:	37 fd       	sbrc	r19, 7
    1c9e:	40 95       	com	r20
    1ca0:	54 2f       	mov	r21, r20
    1ca2:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    1ca6:	a6 01       	movw	r20, r12
    1ca8:	95 01       	movw	r18, r10
    1caa:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
            		if (g_custom_a_x[i])
            			adc[i] = (int32_t)analogRead(0);
            		else
            			adc[i] = (DAQRESOLUTION+1)/2;

            	adc_x = (int32_t)g_custom_a_x[0] * (adc[0] - (int32_t)g_x_adc_max/2) / 10 +
    1cae:	e2 0e       	add	r14, r18
    1cb0:	f3 1e       	adc	r15, r19
    1cb2:	04 1f       	adc	r16, r20
    1cb4:	15 1f       	adc	r17, r21
   	                    (int32_t)g_custom_a_x[1] * (adc[1] - (int32_t)g_x_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_x[2] * (adc[2] - (int32_t)g_x_adc_max/2) / 10 +
   	                    (int32_t)g_custom_a_x[3] * (adc[3] - (int32_t)g_x_adc_max/2) / 10;

            	 // Change the scale from (-adcmax/2,+adcmax/2) to (0,xmax).
                x = (((int32_t)adc_x * (int32_t)g_n_x / (int32_t)g_x_adc_max) + (int32_t)g_n_x);
    1cb6:	c8 01       	movw	r24, r16
    1cb8:	b7 01       	movw	r22, r14
    1cba:	29 89       	ldd	r18, Y+17	; 0x11
    1cbc:	3a 89       	ldd	r19, Y+18	; 0x12
    1cbe:	4b 89       	ldd	r20, Y+19	; 0x13
    1cc0:	5c 89       	ldd	r21, Y+20	; 0x14
    1cc2:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    1cc6:	ad 89       	ldd	r26, Y+21	; 0x15
    1cc8:	be 89       	ldd	r27, Y+22	; 0x16
    1cca:	9d 01       	movw	r18, r26
    1ccc:	40 e0       	ldi	r20, 0x00	; 0
    1cce:	50 e0       	ldi	r21, 0x00	; 0
    1cd0:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>

                // Add the functions.
                x += (int32_t)g_custom_a_x[4] * (int32_t)g_buf_func_x[g_index_func_x_read] / 10;
                x += (int32_t)g_custom_a_x[5] * (int32_t)g_buf_func_y[g_index_func_y_read] / 10;
    1cd4:	62 0e       	add	r6, r18
    1cd6:	73 1e       	adc	r7, r19
    1cd8:	84 1e       	adc	r8, r20
    1cda:	95 1e       	adc	r9, r21

                // Output.
                g_x = (uint16_t)((x % (int32_t)g_n_x) & 0xFFFF);
    1cdc:	c4 01       	movw	r24, r8
    1cde:	b3 01       	movw	r22, r6
    1ce0:	29 89       	ldd	r18, Y+17	; 0x11
    1ce2:	3a 89       	ldd	r19, Y+18	; 0x12
    1ce4:	4b 89       	ldd	r20, Y+19	; 0x13
    1ce6:	5c 89       	ldd	r21, Y+20	; 0x14
    1ce8:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    1cec:	60 93 bc 23 	sts	0x23BC, r22
    1cf0:	70 93 bd 23 	sts	0x23BD, r23
                g_index_frame = FRAMEFROMXY(g_x, g_y);
    1cf4:	40 91 be 23 	lds	r20, 0x23BE
    1cf8:	50 91 bf 23 	lds	r21, 0x23BF
    1cfc:	20 91 bc 23 	lds	r18, 0x23BC
    1d00:	30 91 bd 23 	lds	r19, 0x23BD
    1d04:	ef 89       	ldd	r30, Y+23	; 0x17
    1d06:	f8 8d       	ldd	r31, Y+24	; 0x18
    1d08:	4e 9f       	mul	r20, r30
    1d0a:	c0 01       	movw	r24, r0
    1d0c:	4f 9f       	mul	r20, r31
    1d0e:	90 0d       	add	r25, r0
    1d10:	5e 9f       	mul	r21, r30
    1d12:	90 0d       	add	r25, r0
    1d14:	11 24       	eor	r1, r1
    1d16:	c1 ce       	rjmp	.-638    	; 0x1a9a <calculate_and_set_position_x+0x140>
            	break;

        }
    }
    else
        xputs(PSTR("Function buffer for x is empty\n"));
    1d18:	8e e1       	ldi	r24, 0x1E	; 30
    1d1a:	99 e0       	ldi	r25, 0x09	; 9
    1d1c:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>

} // calculate_and_set_position_x()
    1d20:	68 96       	adiw	r28, 0x18	; 24
    1d22:	e2 e1       	ldi	r30, 0x12	; 18
    1d24:	0c 94 d3 4b 	jmp	0x97a6	; 0x97a6 <__epilogue_restores__>

00001d28 <__vector_13>:
/*---------------------------------------------------------*/
/* TWIC Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIC_TWIM_vect)
{
    1d28:	1f 92       	push	r1
    1d2a:	0f 92       	push	r0
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	0f 92       	push	r0
    1d30:	08 b6       	in	r0, 0x38	; 56
    1d32:	0f 92       	push	r0
    1d34:	09 b6       	in	r0, 0x39	; 57
    1d36:	0f 92       	push	r0
    1d38:	0b b6       	in	r0, 0x3b	; 59
    1d3a:	0f 92       	push	r0
    1d3c:	11 24       	eor	r1, r1
    1d3e:	18 be       	out	0x38, r1	; 56
    1d40:	19 be       	out	0x39, r1	; 57
    1d42:	1b be       	out	0x3b, r1	; 59
    1d44:	2f 93       	push	r18
    1d46:	3f 93       	push	r19
    1d48:	4f 93       	push	r20
    1d4a:	5f 93       	push	r21
    1d4c:	6f 93       	push	r22
    1d4e:	7f 93       	push	r23
    1d50:	8f 93       	push	r24
    1d52:	9f 93       	push	r25
    1d54:	af 93       	push	r26
    1d56:	bf 93       	push	r27
    1d58:	ef 93       	push	r30
    1d5a:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi1);
    1d5c:	82 e0       	ldi	r24, 0x02	; 2
    1d5e:	98 e2       	ldi	r25, 0x28	; 40
    1d60:	0e 94 6d 3a 	call	0x74da	; 0x74da <TWI_MasterInterruptHandler>
}
    1d64:	ff 91       	pop	r31
    1d66:	ef 91       	pop	r30
    1d68:	bf 91       	pop	r27
    1d6a:	af 91       	pop	r26
    1d6c:	9f 91       	pop	r25
    1d6e:	8f 91       	pop	r24
    1d70:	7f 91       	pop	r23
    1d72:	6f 91       	pop	r22
    1d74:	5f 91       	pop	r21
    1d76:	4f 91       	pop	r20
    1d78:	3f 91       	pop	r19
    1d7a:	2f 91       	pop	r18
    1d7c:	0f 90       	pop	r0
    1d7e:	0b be       	out	0x3b, r0	; 59
    1d80:	0f 90       	pop	r0
    1d82:	09 be       	out	0x39, r0	; 57
    1d84:	0f 90       	pop	r0
    1d86:	08 be       	out	0x38, r0	; 56
    1d88:	0f 90       	pop	r0
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	0f 90       	pop	r0
    1d8e:	1f 90       	pop	r1
    1d90:	18 95       	reti

00001d92 <__vector_76>:
/*---------------------------------------------------------*/
/* TWID Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWID_TWIM_vect)
{
    1d92:	1f 92       	push	r1
    1d94:	0f 92       	push	r0
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	0f 92       	push	r0
    1d9a:	08 b6       	in	r0, 0x38	; 56
    1d9c:	0f 92       	push	r0
    1d9e:	09 b6       	in	r0, 0x39	; 57
    1da0:	0f 92       	push	r0
    1da2:	0b b6       	in	r0, 0x3b	; 59
    1da4:	0f 92       	push	r0
    1da6:	11 24       	eor	r1, r1
    1da8:	18 be       	out	0x38, r1	; 56
    1daa:	19 be       	out	0x39, r1	; 57
    1dac:	1b be       	out	0x3b, r1	; 59
    1dae:	2f 93       	push	r18
    1db0:	3f 93       	push	r19
    1db2:	4f 93       	push	r20
    1db4:	5f 93       	push	r21
    1db6:	6f 93       	push	r22
    1db8:	7f 93       	push	r23
    1dba:	8f 93       	push	r24
    1dbc:	9f 93       	push	r25
    1dbe:	af 93       	push	r26
    1dc0:	bf 93       	push	r27
    1dc2:	ef 93       	push	r30
    1dc4:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi2);
    1dc6:	84 e5       	ldi	r24, 0x54	; 84
    1dc8:	98 e2       	ldi	r25, 0x28	; 40
    1dca:	0e 94 6d 3a 	call	0x74da	; 0x74da <TWI_MasterInterruptHandler>
}
    1dce:	ff 91       	pop	r31
    1dd0:	ef 91       	pop	r30
    1dd2:	bf 91       	pop	r27
    1dd4:	af 91       	pop	r26
    1dd6:	9f 91       	pop	r25
    1dd8:	8f 91       	pop	r24
    1dda:	7f 91       	pop	r23
    1ddc:	6f 91       	pop	r22
    1dde:	5f 91       	pop	r21
    1de0:	4f 91       	pop	r20
    1de2:	3f 91       	pop	r19
    1de4:	2f 91       	pop	r18
    1de6:	0f 90       	pop	r0
    1de8:	0b be       	out	0x3b, r0	; 59
    1dea:	0f 90       	pop	r0
    1dec:	09 be       	out	0x39, r0	; 57
    1dee:	0f 90       	pop	r0
    1df0:	08 be       	out	0x38, r0	; 56
    1df2:	0f 90       	pop	r0
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	0f 90       	pop	r0
    1df8:	1f 90       	pop	r1
    1dfa:	18 95       	reti

00001dfc <__vector_46>:
/*---------------------------------------------------------*/
/* TWIE Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIE_TWIM_vect)
{
    1dfc:	1f 92       	push	r1
    1dfe:	0f 92       	push	r0
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	0f 92       	push	r0
    1e04:	08 b6       	in	r0, 0x38	; 56
    1e06:	0f 92       	push	r0
    1e08:	09 b6       	in	r0, 0x39	; 57
    1e0a:	0f 92       	push	r0
    1e0c:	0b b6       	in	r0, 0x3b	; 59
    1e0e:	0f 92       	push	r0
    1e10:	11 24       	eor	r1, r1
    1e12:	18 be       	out	0x38, r1	; 56
    1e14:	19 be       	out	0x39, r1	; 57
    1e16:	1b be       	out	0x3b, r1	; 59
    1e18:	2f 93       	push	r18
    1e1a:	3f 93       	push	r19
    1e1c:	4f 93       	push	r20
    1e1e:	5f 93       	push	r21
    1e20:	6f 93       	push	r22
    1e22:	7f 93       	push	r23
    1e24:	8f 93       	push	r24
    1e26:	9f 93       	push	r25
    1e28:	af 93       	push	r26
    1e2a:	bf 93       	push	r27
    1e2c:	ef 93       	push	r30
    1e2e:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi3);
    1e30:	81 e1       	ldi	r24, 0x11	; 17
    1e32:	98 e2       	ldi	r25, 0x28	; 40
    1e34:	0e 94 6d 3a 	call	0x74da	; 0x74da <TWI_MasterInterruptHandler>
}
    1e38:	ff 91       	pop	r31
    1e3a:	ef 91       	pop	r30
    1e3c:	bf 91       	pop	r27
    1e3e:	af 91       	pop	r26
    1e40:	9f 91       	pop	r25
    1e42:	8f 91       	pop	r24
    1e44:	7f 91       	pop	r23
    1e46:	6f 91       	pop	r22
    1e48:	5f 91       	pop	r21
    1e4a:	4f 91       	pop	r20
    1e4c:	3f 91       	pop	r19
    1e4e:	2f 91       	pop	r18
    1e50:	0f 90       	pop	r0
    1e52:	0b be       	out	0x3b, r0	; 59
    1e54:	0f 90       	pop	r0
    1e56:	09 be       	out	0x39, r0	; 57
    1e58:	0f 90       	pop	r0
    1e5a:	08 be       	out	0x38, r0	; 56
    1e5c:	0f 90       	pop	r0
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	0f 90       	pop	r0
    1e62:	1f 90       	pop	r1
    1e64:	18 95       	reti

00001e66 <__vector_107>:
/*---------------------------------------------------------*/
/* TWIF Master Interrupt vector.                           */
/*---------------------------------------------------------*/

ISR(TWIF_TWIM_vect)
{
    1e66:	1f 92       	push	r1
    1e68:	0f 92       	push	r0
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	0f 92       	push	r0
    1e6e:	08 b6       	in	r0, 0x38	; 56
    1e70:	0f 92       	push	r0
    1e72:	09 b6       	in	r0, 0x39	; 57
    1e74:	0f 92       	push	r0
    1e76:	0b b6       	in	r0, 0x3b	; 59
    1e78:	0f 92       	push	r0
    1e7a:	11 24       	eor	r1, r1
    1e7c:	18 be       	out	0x38, r1	; 56
    1e7e:	19 be       	out	0x39, r1	; 57
    1e80:	1b be       	out	0x3b, r1	; 59
    1e82:	2f 93       	push	r18
    1e84:	3f 93       	push	r19
    1e86:	4f 93       	push	r20
    1e88:	5f 93       	push	r21
    1e8a:	6f 93       	push	r22
    1e8c:	7f 93       	push	r23
    1e8e:	8f 93       	push	r24
    1e90:	9f 93       	push	r25
    1e92:	af 93       	push	r26
    1e94:	bf 93       	push	r27
    1e96:	ef 93       	push	r30
    1e98:	ff 93       	push	r31
    TWI_MasterInterruptHandler(&twi4);
    1e9a:	83 ef       	ldi	r24, 0xF3	; 243
    1e9c:	97 e2       	ldi	r25, 0x27	; 39
    1e9e:	0e 94 6d 3a 	call	0x74da	; 0x74da <TWI_MasterInterruptHandler>
}
    1ea2:	ff 91       	pop	r31
    1ea4:	ef 91       	pop	r30
    1ea6:	bf 91       	pop	r27
    1ea8:	af 91       	pop	r26
    1eaa:	9f 91       	pop	r25
    1eac:	8f 91       	pop	r24
    1eae:	7f 91       	pop	r23
    1eb0:	6f 91       	pop	r22
    1eb2:	5f 91       	pop	r21
    1eb4:	4f 91       	pop	r20
    1eb6:	3f 91       	pop	r19
    1eb8:	2f 91       	pop	r18
    1eba:	0f 90       	pop	r0
    1ebc:	0b be       	out	0x3b, r0	; 59
    1ebe:	0f 90       	pop	r0
    1ec0:	09 be       	out	0x39, r0	; 57
    1ec2:	0f 90       	pop	r0
    1ec4:	08 be       	out	0x38, r0	; 56
    1ec6:	0f 90       	pop	r0
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	0f 90       	pop	r0
    1ecc:	1f 90       	pop	r1
    1ece:	18 95       	reti

00001ed0 <__vector_100>:


//  External trigger mode for int2 to start playing pattern
ISR(PORTK_INT0_vect)
{
    1ed0:	1f 92       	push	r1
    1ed2:	0f 92       	push	r0
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	0f 92       	push	r0
    1ed8:	08 b6       	in	r0, 0x38	; 56
    1eda:	0f 92       	push	r0
    1edc:	09 b6       	in	r0, 0x39	; 57
    1ede:	0f 92       	push	r0
    1ee0:	0b b6       	in	r0, 0x3b	; 59
    1ee2:	0f 92       	push	r0
    1ee4:	11 24       	eor	r1, r1
    1ee6:	18 be       	out	0x38, r1	; 56
    1ee8:	19 be       	out	0x39, r1	; 57
    1eea:	1b be       	out	0x3b, r1	; 59
    1eec:	0f 93       	push	r16
    1eee:	2f 93       	push	r18
    1ef0:	3f 93       	push	r19
    1ef2:	4f 93       	push	r20
    1ef4:	5f 93       	push	r21
    1ef6:	6f 93       	push	r22
    1ef8:	7f 93       	push	r23
    1efa:	8f 93       	push	r24
    1efc:	9f 93       	push	r25
    1efe:	af 93       	push	r26
    1f00:	bf 93       	push	r27
    1f02:	ef 93       	push	r30
    1f04:	ff 93       	push	r31
	//set these to zero so that we start at beginning of function - useful for putting in a set amount of expansion.
	g_index_func_x_read = 0;
    1f06:	10 92 de 23 	sts	0x23DE, r1
	g_index_func_y_read = 0;
    1f0a:	10 92 df 23 	sts	0x23DF, r1
	g_b_running = TRUE;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	80 93 b0 23 	sts	0x23B0, r24
	g_display_count = 0;
    1f14:	10 92 b2 23 	sts	0x23B2, r1

	Reg_Handler(calculate_and_set_velocity,       UPDATE_PERIOD,   ISR_UPDATE_DISPLAY,    TRUE);
    1f18:	83 e4       	ldi	r24, 0x43	; 67
    1f1a:	91 e1       	ldi	r25, 0x11	; 17
    1f1c:	4e e4       	ldi	r20, 0x4E	; 78
    1f1e:	50 e0       	ldi	r21, 0x00	; 0
    1f20:	60 e0       	ldi	r22, 0x00	; 0
    1f22:	70 e0       	ldi	r23, 0x00	; 0
    1f24:	21 e0       	ldi	r18, 0x01	; 1
    1f26:	01 e0       	ldi	r16, 0x01	; 1
    1f28:	0e 94 07 39 	call	0x720e	; 0x720e <Reg_Handler>
	Reg_Handler(increment_index_x,              UPDATE_PERIOD,   ISR_INCREMENT_INDEX_X, FALSE); // Initialize ISRs to a fast rate so that the countdown is fast until the
    1f2c:	8a e0       	ldi	r24, 0x0A	; 10
    1f2e:	9a e0       	ldi	r25, 0x0A	; 10
    1f30:	4e e4       	ldi	r20, 0x4E	; 78
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	70 e0       	ldi	r23, 0x00	; 0
    1f38:	22 e0       	ldi	r18, 0x02	; 2
    1f3a:	00 e0       	ldi	r16, 0x00	; 0
    1f3c:	0e 94 07 39 	call	0x720e	; 0x720e <Reg_Handler>
	Reg_Handler(increment_index_y,              UPDATE_PERIOD,   ISR_INCREMENT_INDEX_Y, FALSE); // setting of the next rate by the calculate_and_set_velocity interrupt.
    1f40:	81 e4       	ldi	r24, 0x41	; 65
    1f42:	9a e0       	ldi	r25, 0x0A	; 10
    1f44:	4e e4       	ldi	r20, 0x4E	; 78
    1f46:	50 e0       	ldi	r21, 0x00	; 0
    1f48:	60 e0       	ldi	r22, 0x00	; 0
    1f4a:	70 e0       	ldi	r23, 0x00	; 0
    1f4c:	23 e0       	ldi	r18, 0x03	; 3
    1f4e:	0e 94 07 39 	call	0x720e	; 0x720e <Reg_Handler>

	calculate_and_set_position_x(); // So the function is output without delay
    1f52:	0e 94 ad 0c 	call	0x195a	; 0x195a <calculate_and_set_position_x>
   	Reg_Handler(calculate_and_set_position_x, g_period_func_x, ISR_INCREMENT_FUNC_X, TRUE);
    1f56:	40 91 4d 20 	lds	r20, 0x204D
    1f5a:	50 91 4e 20 	lds	r21, 0x204E
    1f5e:	60 e0       	ldi	r22, 0x00	; 0
    1f60:	70 e0       	ldi	r23, 0x00	; 0
    1f62:	8d ea       	ldi	r24, 0xAD	; 173
    1f64:	9c e0       	ldi	r25, 0x0C	; 12
    1f66:	24 e0       	ldi	r18, 0x04	; 4
    1f68:	01 e0       	ldi	r16, 0x01	; 1
    1f6a:	0e 94 07 39 	call	0x720e	; 0x720e <Reg_Handler>
   	calculate_and_set_position_y(); // So the function is output without delay
    1f6e:	0e 94 ed 0a 	call	0x15da	; 0x15da <calculate_and_set_position_y>
   	Reg_Handler(calculate_and_set_position_y, g_period_func_y, ISR_INCREMENT_FUNC_Y, TRUE);
    1f72:	40 91 4f 20 	lds	r20, 0x204F
    1f76:	50 91 50 20 	lds	r21, 0x2050
    1f7a:	60 e0       	ldi	r22, 0x00	; 0
    1f7c:	70 e0       	ldi	r23, 0x00	; 0
    1f7e:	8d ee       	ldi	r24, 0xED	; 237
    1f80:	9a e0       	ldi	r25, 0x0A	; 10
    1f82:	25 e0       	ldi	r18, 0x05	; 5
    1f84:	0e 94 07 39 	call	0x720e	; 0x720e <Reg_Handler>


	xputs(PSTR("INT3 catches a rising edge trigger!\n"));
    1f88:	84 ed       	ldi	r24, 0xD4	; 212
    1f8a:	9d e0       	ldi	r25, 0x0D	; 13
    1f8c:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
}
    1f90:	ff 91       	pop	r31
    1f92:	ef 91       	pop	r30
    1f94:	bf 91       	pop	r27
    1f96:	af 91       	pop	r26
    1f98:	9f 91       	pop	r25
    1f9a:	8f 91       	pop	r24
    1f9c:	7f 91       	pop	r23
    1f9e:	6f 91       	pop	r22
    1fa0:	5f 91       	pop	r21
    1fa2:	4f 91       	pop	r20
    1fa4:	3f 91       	pop	r19
    1fa6:	2f 91       	pop	r18
    1fa8:	0f 91       	pop	r16
    1faa:	0f 90       	pop	r0
    1fac:	0b be       	out	0x3b, r0	; 59
    1fae:	0f 90       	pop	r0
    1fb0:	09 be       	out	0x39, r0	; 57
    1fb2:	0f 90       	pop	r0
    1fb4:	08 be       	out	0x38, r0	; 56
    1fb6:	0f 90       	pop	r0
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	0f 90       	pop	r0
    1fbc:	1f 90       	pop	r1
    1fbe:	18 95       	reti

00001fc0 <start_running>:
} // main()


// Starts the pattern running.
void start_running(void)
{
    1fc0:	0f 93       	push	r16
    g_b_running = TRUE;
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	80 93 b0 23 	sts	0x23B0, r24

    // Set indices to the beginning of the function - useful for putting in a set amount of expansion.
    g_index_func_x_read = 0;
    1fc8:	10 92 de 23 	sts	0x23DE, r1
    g_index_func_y_read = 0;
    1fcc:	10 92 df 23 	sts	0x23DF, r1
    g_iblock_func_x = 1;
    1fd0:	80 93 45 20 	sts	0x2045, r24
    g_iblock_func_y = 1;
    1fd4:	80 93 46 20 	sts	0x2046, r24
    g_display_count = 0;  //clear the display count
    1fd8:	10 92 b2 23 	sts	0x23B2, r1

    Reg_Handler(calculate_and_set_velocity, UPDATE_PERIOD, ISR_UPDATE_DISPLAY, TRUE);
    1fdc:	83 e4       	ldi	r24, 0x43	; 67
    1fde:	91 e1       	ldi	r25, 0x11	; 17
    1fe0:	4e e4       	ldi	r20, 0x4E	; 78
    1fe2:	50 e0       	ldi	r21, 0x00	; 0
    1fe4:	60 e0       	ldi	r22, 0x00	; 0
    1fe6:	70 e0       	ldi	r23, 0x00	; 0
    1fe8:	21 e0       	ldi	r18, 0x01	; 1
    1fea:	01 e0       	ldi	r16, 0x01	; 1
    1fec:	0e 94 07 39 	call	0x720e	; 0x720e <Reg_Handler>
    Reg_Handler(increment_index_x,        UPDATE_PERIOD, ISR_INCREMENT_INDEX_X, FALSE); // Initialize the 2 and 3 priority interupts to a fast rate so that
    1ff0:	8a e0       	ldi	r24, 0x0A	; 10
    1ff2:	9a e0       	ldi	r25, 0x0A	; 10
    1ff4:	4e e4       	ldi	r20, 0x4E	; 78
    1ff6:	50 e0       	ldi	r21, 0x00	; 0
    1ff8:	60 e0       	ldi	r22, 0x00	; 0
    1ffa:	70 e0       	ldi	r23, 0x00	; 0
    1ffc:	22 e0       	ldi	r18, 0x02	; 2
    1ffe:	00 e0       	ldi	r16, 0x00	; 0
    2000:	0e 94 07 39 	call	0x720e	; 0x720e <Reg_Handler>
    Reg_Handler(increment_index_y,        UPDATE_PERIOD, ISR_INCREMENT_INDEX_Y, FALSE); // the countdown is fast until the setting of the next rate
    2004:	81 e4       	ldi	r24, 0x41	; 65
    2006:	9a e0       	ldi	r25, 0x0A	; 10
    2008:	4e e4       	ldi	r20, 0x4E	; 78
    200a:	50 e0       	ldi	r21, 0x00	; 0
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	70 e0       	ldi	r23, 0x00	; 0
    2010:	23 e0       	ldi	r18, 0x03	; 3
    2012:	0e 94 07 39 	call	0x720e	; 0x720e <Reg_Handler>
                                                                                        // by the calculate_and_set_velocity interupt.
	calculate_and_set_position_x();
    2016:	0e 94 ad 0c 	call	0x195a	; 0x195a <calculate_and_set_position_x>
	Reg_Handler(calculate_and_set_position_x, g_period_func_x, ISR_INCREMENT_FUNC_X, TRUE);
    201a:	40 91 4d 20 	lds	r20, 0x204D
    201e:	50 91 4e 20 	lds	r21, 0x204E
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	8d ea       	ldi	r24, 0xAD	; 173
    2028:	9c e0       	ldi	r25, 0x0C	; 12
    202a:	24 e0       	ldi	r18, 0x04	; 4
    202c:	01 e0       	ldi	r16, 0x01	; 1
    202e:	0e 94 07 39 	call	0x720e	; 0x720e <Reg_Handler>
	calculate_and_set_position_y();
    2032:	0e 94 ed 0a 	call	0x15da	; 0x15da <calculate_and_set_position_y>
	Reg_Handler(calculate_and_set_position_y, g_period_func_y, ISR_INCREMENT_FUNC_Y, TRUE);
    2036:	40 91 4f 20 	lds	r20, 0x204F
    203a:	50 91 50 20 	lds	r21, 0x2050
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	70 e0       	ldi	r23, 0x00	; 0
    2042:	8d ee       	ldi	r24, 0xED	; 237
    2044:	9a e0       	ldi	r25, 0x0A	; 10
    2046:	25 e0       	ldi	r18, 0x05	; 5
    2048:	0e 94 07 39 	call	0x720e	; 0x720e <Reg_Handler>

} // start_running()
    204c:	0f 91       	pop	r16
    204e:	08 95       	ret

00002050 <stop_running>:


void stop_running(void)
{
    2050:	0f 93       	push	r16
    g_b_running = FALSE;
    2052:	10 92 b0 23 	sts	0x23B0, r1
    //turn off the interupts
    Reg_Handler(calculate_and_set_velocity,      UPDATE_PERIOD,   ISR_UPDATE_DISPLAY, FALSE);
    2056:	83 e4       	ldi	r24, 0x43	; 67
    2058:	91 e1       	ldi	r25, 0x11	; 17
    205a:	4e e4       	ldi	r20, 0x4E	; 78
    205c:	50 e0       	ldi	r21, 0x00	; 0
    205e:	60 e0       	ldi	r22, 0x00	; 0
    2060:	70 e0       	ldi	r23, 0x00	; 0
    2062:	21 e0       	ldi	r18, 0x01	; 1
    2064:	00 e0       	ldi	r16, 0x00	; 0
    2066:	0e 94 07 39 	call	0x720e	; 0x720e <Reg_Handler>
    Reg_Handler(increment_index_x,             UPDATE_PERIOD,   ISR_INCREMENT_INDEX_X, FALSE);
    206a:	8a e0       	ldi	r24, 0x0A	; 10
    206c:	9a e0       	ldi	r25, 0x0A	; 10
    206e:	4e e4       	ldi	r20, 0x4E	; 78
    2070:	50 e0       	ldi	r21, 0x00	; 0
    2072:	60 e0       	ldi	r22, 0x00	; 0
    2074:	70 e0       	ldi	r23, 0x00	; 0
    2076:	22 e0       	ldi	r18, 0x02	; 2
    2078:	0e 94 07 39 	call	0x720e	; 0x720e <Reg_Handler>
    Reg_Handler(increment_index_y,             UPDATE_PERIOD,   ISR_INCREMENT_INDEX_Y, FALSE);
    207c:	81 e4       	ldi	r24, 0x41	; 65
    207e:	9a e0       	ldi	r25, 0x0A	; 10
    2080:	4e e4       	ldi	r20, 0x4E	; 78
    2082:	50 e0       	ldi	r21, 0x00	; 0
    2084:	60 e0       	ldi	r22, 0x00	; 0
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	23 e0       	ldi	r18, 0x03	; 3
    208a:	0e 94 07 39 	call	0x720e	; 0x720e <Reg_Handler>
    Reg_Handler(calculate_and_set_position_x, g_period_func_x, ISR_INCREMENT_FUNC_X, FALSE);
    208e:	40 91 4d 20 	lds	r20, 0x204D
    2092:	50 91 4e 20 	lds	r21, 0x204E
    2096:	60 e0       	ldi	r22, 0x00	; 0
    2098:	70 e0       	ldi	r23, 0x00	; 0
    209a:	8d ea       	ldi	r24, 0xAD	; 173
    209c:	9c e0       	ldi	r25, 0x0C	; 12
    209e:	24 e0       	ldi	r18, 0x04	; 4
    20a0:	0e 94 07 39 	call	0x720e	; 0x720e <Reg_Handler>
    Reg_Handler(calculate_and_set_position_y, g_period_func_y, ISR_INCREMENT_FUNC_Y, FALSE);
    20a4:	40 91 4f 20 	lds	r20, 0x204F
    20a8:	50 91 50 20 	lds	r21, 0x2050
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	8d ee       	ldi	r24, 0xED	; 237
    20b2:	9a e0       	ldi	r25, 0x0A	; 10
    20b4:	25 e0       	ldi	r18, 0x05	; 5
    20b6:	0e 94 07 39 	call	0x720e	; 0x720e <Reg_Handler>
}
    20ba:	0f 91       	pop	r16
    20bc:	08 95       	ret

000020be <handle_message_length_7>:

void handle_message_length_7(uint8_t *msg_buffer)
{
	int i;

    switch(msg_buffer[0])
    20be:	fc 01       	movw	r30, r24
    20c0:	20 81       	ld	r18, Z
    20c2:	24 36       	cpi	r18, 0x64	; 100
    20c4:	f1 f0       	breq	.+60     	; 0x2102 <handle_message_length_7+0x44>
    20c6:	25 36       	cpi	r18, 0x65	; 101
    20c8:	20 f4       	brcc	.+8      	; 0x20d2 <handle_message_length_7+0x14>
    20ca:	23 36       	cpi	r18, 0x63	; 99
    20cc:	09 f0       	breq	.+2      	; 0x20d0 <handle_message_length_7+0x12>
    20ce:	4e c0       	rjmp	.+156    	; 0x216c <handle_message_length_7+0xae>
    20d0:	06 c0       	rjmp	.+12     	; 0x20de <handle_message_length_7+0x20>
    20d2:	25 36       	cpi	r18, 0x65	; 101
    20d4:	41 f1       	breq	.+80     	; 0x2126 <handle_message_length_7+0x68>
    20d6:	26 36       	cpi	r18, 0x66	; 102
    20d8:	09 f0       	breq	.+2      	; 0x20dc <handle_message_length_7+0x1e>
    20da:	48 c0       	rjmp	.+144    	; 0x216c <handle_message_length_7+0xae>
    20dc:	36 c0       	rjmp	.+108    	; 0x214a <handle_message_length_7+0x8c>
	    //      set_mode_vel_custom_x(10, 0, 0, 0, 100, 0) means that xrate = adc0 + 10*fx(t)


		// set_mode_pos_custom_x(a0, a1, a2, a3, a4, a5), Set coefficients on input sources for x positions.  xpos =  a0*adc0 + a1*adc1 + a2*adc2 + a3*adc3 + a4*funcx + a5*funcy; a's valid on [-128,+127].
		case MSG_7_SET_MODE_POS_CUSTOM_X:
			g_mode_x = MODE_POS_CUSTOM;
    20de:	22 e6       	ldi	r18, 0x62	; 98
    20e0:	20 93 c4 23 	sts	0x23C4, r18
            
    }
} // handle_message_length_5()


void handle_message_length_7(uint8_t *msg_buffer)
    20e4:	dc 01       	movw	r26, r24
    20e6:	11 96       	adiw	r26, 0x01	; 1
	    //      set_mode_vel_custom_x(10, 0, 0, 0, 100, 0) means that xrate = adc0 + 10*fx(t)


		// set_mode_pos_custom_x(a0, a1, a2, a3, a4, a5), Set coefficients on input sources for x positions.  xpos =  a0*adc0 + a1*adc1 + a2*adc2 + a3*adc3 + a4*funcx + a5*funcy; a's valid on [-128,+127].
		case MSG_7_SET_MODE_POS_CUSTOM_X:
			g_mode_x = MODE_POS_CUSTOM;
    20e8:	e6 ec       	ldi	r30, 0xC6	; 198
    20ea:	f3 e2       	ldi	r31, 0x23	; 35
			for (i=0; i<6; i++)
				g_custom_a_x[i] = (int16_t)(int8_t)msg_buffer[i+1];
    20ec:	8d 91       	ld	r24, X+
    20ee:	99 27       	eor	r25, r25
    20f0:	87 fd       	sbrc	r24, 7
    20f2:	90 95       	com	r25
    20f4:	81 93       	st	Z+, r24
    20f6:	91 93       	st	Z+, r25


		// set_mode_pos_custom_x(a0, a1, a2, a3, a4, a5), Set coefficients on input sources for x positions.  xpos =  a0*adc0 + a1*adc1 + a2*adc2 + a3*adc3 + a4*funcx + a5*funcy; a's valid on [-128,+127].
		case MSG_7_SET_MODE_POS_CUSTOM_X:
			g_mode_x = MODE_POS_CUSTOM;
			for (i=0; i<6; i++)
    20f8:	83 e2       	ldi	r24, 0x23	; 35
    20fa:	e2 3d       	cpi	r30, 0xD2	; 210
    20fc:	f8 07       	cpc	r31, r24
    20fe:	b1 f7       	brne	.-20     	; 0x20ec <handle_message_length_7+0x2e>
    2100:	08 95       	ret
				g_custom_a_x[i] = (int16_t)(int8_t)msg_buffer[i+1];
			break;

		// set_mode_pos_custom_y(a0, a1, a2, a3, a4, a5), Set coefficients on input sources for y positions.  ypos = a0*adc0 + a1*adc1 + a2*adc2 + a3*adc3 + a4*funcx + a5*funcy; a's valid on [-128,+127].
		case MSG_7_SET_MODE_POS_CUSTOM_Y:
			g_mode_y = MODE_POS_CUSTOM;
    2102:	22 e6       	ldi	r18, 0x62	; 98
    2104:	20 93 c5 23 	sts	0x23C5, r18
            
    }
} // handle_message_length_5()


void handle_message_length_7(uint8_t *msg_buffer)
    2108:	dc 01       	movw	r26, r24
    210a:	11 96       	adiw	r26, 0x01	; 1
				g_custom_a_x[i] = (int16_t)(int8_t)msg_buffer[i+1];
			break;

		// set_mode_pos_custom_y(a0, a1, a2, a3, a4, a5), Set coefficients on input sources for y positions.  ypos = a0*adc0 + a1*adc1 + a2*adc2 + a3*adc3 + a4*funcx + a5*funcy; a's valid on [-128,+127].
		case MSG_7_SET_MODE_POS_CUSTOM_Y:
			g_mode_y = MODE_POS_CUSTOM;
    210c:	e2 ed       	ldi	r30, 0xD2	; 210
    210e:	f3 e2       	ldi	r31, 0x23	; 35
			for (i=0; i<6; i++)
				g_custom_a_y[i] = (int16_t)(int8_t)msg_buffer[i+1];
    2110:	8d 91       	ld	r24, X+
    2112:	99 27       	eor	r25, r25
    2114:	87 fd       	sbrc	r24, 7
    2116:	90 95       	com	r25
    2118:	81 93       	st	Z+, r24
    211a:	91 93       	st	Z+, r25
			break;

		// set_mode_pos_custom_y(a0, a1, a2, a3, a4, a5), Set coefficients on input sources for y positions.  ypos = a0*adc0 + a1*adc1 + a2*adc2 + a3*adc3 + a4*funcx + a5*funcy; a's valid on [-128,+127].
		case MSG_7_SET_MODE_POS_CUSTOM_Y:
			g_mode_y = MODE_POS_CUSTOM;
			for (i=0; i<6; i++)
    211c:	83 e2       	ldi	r24, 0x23	; 35
    211e:	ee 3d       	cpi	r30, 0xDE	; 222
    2120:	f8 07       	cpc	r31, r24
    2122:	b1 f7       	brne	.-20     	; 0x2110 <handle_message_length_7+0x52>
    2124:	08 95       	ret
				g_custom_a_y[i] = (int16_t)(int8_t)msg_buffer[i+1];
			break;

		// set_mode_vel_custom_x(a0, a1, a2, a3, a4, a5), Set coefficients on input sources for x rates.  xrate = a0*adc0 + a1*adc1 + a2*adc2 + a3*adc3 + a4*funcx + a5*funcy; a's valid on [-128,+127].
		case MSG_7_SET_MODE_VEL_CUSTOM_X:
			g_mode_x = MODE_VEL_CUSTOM;
    2126:	21 e6       	ldi	r18, 0x61	; 97
    2128:	20 93 c4 23 	sts	0x23C4, r18
            
    }
} // handle_message_length_5()


void handle_message_length_7(uint8_t *msg_buffer)
    212c:	dc 01       	movw	r26, r24
    212e:	11 96       	adiw	r26, 0x01	; 1
				g_custom_a_y[i] = (int16_t)(int8_t)msg_buffer[i+1];
			break;

		// set_mode_vel_custom_x(a0, a1, a2, a3, a4, a5), Set coefficients on input sources for x rates.  xrate = a0*adc0 + a1*adc1 + a2*adc2 + a3*adc3 + a4*funcx + a5*funcy; a's valid on [-128,+127].
		case MSG_7_SET_MODE_VEL_CUSTOM_X:
			g_mode_x = MODE_VEL_CUSTOM;
    2130:	e6 ec       	ldi	r30, 0xC6	; 198
    2132:	f3 e2       	ldi	r31, 0x23	; 35
			for (i=0; i<6; i++)
				g_custom_a_x[i] = (int16_t)(int8_t)msg_buffer[i+1];
    2134:	8d 91       	ld	r24, X+
    2136:	99 27       	eor	r25, r25
    2138:	87 fd       	sbrc	r24, 7
    213a:	90 95       	com	r25
    213c:	81 93       	st	Z+, r24
    213e:	91 93       	st	Z+, r25
			break;

		// set_mode_vel_custom_x(a0, a1, a2, a3, a4, a5), Set coefficients on input sources for x rates.  xrate = a0*adc0 + a1*adc1 + a2*adc2 + a3*adc3 + a4*funcx + a5*funcy; a's valid on [-128,+127].
		case MSG_7_SET_MODE_VEL_CUSTOM_X:
			g_mode_x = MODE_VEL_CUSTOM;
			for (i=0; i<6; i++)
    2140:	83 e2       	ldi	r24, 0x23	; 35
    2142:	e2 3d       	cpi	r30, 0xD2	; 210
    2144:	f8 07       	cpc	r31, r24
    2146:	b1 f7       	brne	.-20     	; 0x2134 <handle_message_length_7+0x76>
    2148:	08 95       	ret
				g_custom_a_x[i] = (int16_t)(int8_t)msg_buffer[i+1];
			break;

		// set_mode_vel_custom_y(a0, a1, a2, a3, a4, a5), Set coefficients on input sources for y rates.  yrate = a0*adc0 + a1*adc1 + a2*adc2 + a3*adc3 + a4*funcx + a5*funcy; a's valid on [-128,+127].
		case MSG_7_SET_MODE_VEL_CUSTOM_Y:
			g_mode_y = MODE_VEL_CUSTOM;
    214a:	21 e6       	ldi	r18, 0x61	; 97
    214c:	20 93 c5 23 	sts	0x23C5, r18
            
    }
} // handle_message_length_5()


void handle_message_length_7(uint8_t *msg_buffer)
    2150:	dc 01       	movw	r26, r24
    2152:	11 96       	adiw	r26, 0x01	; 1
				g_custom_a_x[i] = (int16_t)(int8_t)msg_buffer[i+1];
			break;

		// set_mode_vel_custom_y(a0, a1, a2, a3, a4, a5), Set coefficients on input sources for y rates.  yrate = a0*adc0 + a1*adc1 + a2*adc2 + a3*adc3 + a4*funcx + a5*funcy; a's valid on [-128,+127].
		case MSG_7_SET_MODE_VEL_CUSTOM_Y:
			g_mode_y = MODE_VEL_CUSTOM;
    2154:	e2 ed       	ldi	r30, 0xD2	; 210
    2156:	f3 e2       	ldi	r31, 0x23	; 35
			for (i=0; i<6; i++)
				g_custom_a_y[i] = (int16_t)(int8_t)msg_buffer[i+1];
    2158:	8d 91       	ld	r24, X+
    215a:	99 27       	eor	r25, r25
    215c:	87 fd       	sbrc	r24, 7
    215e:	90 95       	com	r25
    2160:	81 93       	st	Z+, r24
    2162:	91 93       	st	Z+, r25
			break;

		// set_mode_vel_custom_y(a0, a1, a2, a3, a4, a5), Set coefficients on input sources for y rates.  yrate = a0*adc0 + a1*adc1 + a2*adc2 + a3*adc3 + a4*funcx + a5*funcy; a's valid on [-128,+127].
		case MSG_7_SET_MODE_VEL_CUSTOM_Y:
			g_mode_y = MODE_VEL_CUSTOM;
			for (i=0; i<6; i++)
    2164:	83 e2       	ldi	r24, 0x23	; 35
    2166:	ee 3d       	cpi	r30, 0xDE	; 222
    2168:	f8 07       	cpc	r31, r24
    216a:	b1 f7       	brne	.-20     	; 0x2158 <handle_message_length_7+0x9a>
    216c:	08 95       	ret

0000216e <handle_message_length_62>:
//load laser trigger pattern first 62 byte data. Laser pattern has 128 bytes, but since
//the value is either 0 or 1, we can combined them in 12 bytes to 
//save serial communicaiton time

void handle_message_length_62(uint8_t *msg_buffer)
{   
    216e:	28 2f       	mov	r18, r24
    2170:	39 2f       	mov	r19, r25
    2172:	d9 01       	movw	r26, r18
    2174:	eb e7       	ldi	r30, 0x7B	; 123
    2176:	f4 e2       	ldi	r31, 0x24	; 36
    uint8_t i;

    for (i = 0; i<62; i++)
    {
        g_laserpattern[i] = msg_buffer[i];
    2178:	8d 91       	ld	r24, X+
    217a:	81 93       	st	Z+, r24

void handle_message_length_62(uint8_t *msg_buffer)
{   
    uint8_t i;

    for (i = 0; i<62; i++)
    217c:	84 e2       	ldi	r24, 0x24	; 36
    217e:	e9 3b       	cpi	r30, 0xB9	; 185
    2180:	f8 07       	cpc	r31, r24
    2182:	d1 f7       	brne	.-12     	; 0x2178 <handle_message_length_62+0xa>
    {
        g_laserpattern[i] = msg_buffer[i];
    }

} // handle_message_length_62()
    2184:	08 95       	ret

00002186 <handle_message_length_63>:
//load laser trigger pattern second 63 byte data. Laser pattern has 128 bytes, but since
//the value is either 0 or 1, we can combined them in 12 bytes to 
//save serial communicaiton time

void handle_message_length_63(uint8_t *msg_buffer)
{   
    2186:	28 2f       	mov	r18, r24
    2188:	39 2f       	mov	r19, r25
    218a:	d9 01       	movw	r26, r18
    218c:	e9 eb       	ldi	r30, 0xB9	; 185
    218e:	f4 e2       	ldi	r31, 0x24	; 36
    uint8_t i;
    
    for (i = 0; i<63; i++)
    {
        g_laserpattern[62 + i] = msg_buffer[i];
    2190:	8d 91       	ld	r24, X+
    2192:	81 93       	st	Z+, r24

void handle_message_length_63(uint8_t *msg_buffer)
{   
    uint8_t i;
    
    for (i = 0; i<63; i++)
    2194:	84 e2       	ldi	r24, 0x24	; 36
    2196:	e8 3f       	cpi	r30, 0xF8	; 248
    2198:	f8 07       	cpc	r31, r24
    219a:	d1 f7       	brne	.-12     	; 0x2190 <handle_message_length_63+0xa>
    {
        g_laserpattern[62 + i] = msg_buffer[i];
    }
    
    
    if (!g_b_quiet_mode)
    219c:	80 91 34 20 	lds	r24, 0x2034
    21a0:	88 23       	and	r24, r24
    21a2:	21 f4       	brne	.+8      	; 0x21ac <handle_message_length_63+0x26>
        xputs(PSTR("Success set the new laser pattern.\n"));
    21a4:	80 e3       	ldi	r24, 0x30	; 48
    21a6:	9a e0       	ldi	r25, 0x0A	; 10
    21a8:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
    21ac:	08 95       	ret

000021ae <set_isr_rates>:

// set_isr_rates()
// Set an ISR to perform vx and vy.
//
void set_isr_rates(int16_t xRate, int16_t yRate)
{
    21ae:	0f 93       	push	r16
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	eb 01       	movw	r28, r22
    if (xRate > 0)
    21b6:	18 16       	cp	r1, r24
    21b8:	19 06       	cpc	r1, r25
    21ba:	74 f4       	brge	.+28     	; 0x21d8 <set_isr_rates+0x2a>
        Update_Reg_Handler(increment_index_x, (uint32_t)OVERFLOW_PERIOD/abs(xRate), ISR_INCREMENT_INDEX_X, TRUE);
    21bc:	9c 01       	movw	r18, r24
    21be:	44 27       	eor	r20, r20
    21c0:	37 fd       	sbrc	r19, 7
    21c2:	40 95       	com	r20
    21c4:	54 2f       	mov	r21, r20
    21c6:	62 e1       	ldi	r22, 0x12	; 18
    21c8:	7a e7       	ldi	r23, 0x7A	; 122
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    21d2:	8a e0       	ldi	r24, 0x0A	; 10
    21d4:	9a e0       	ldi	r25, 0x0A	; 10
    21d6:	12 c0       	rjmp	.+36     	; 0x21fc <set_isr_rates+0x4e>
    else if (xRate < 0)
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	a9 f0       	breq	.+42     	; 0x2206 <set_isr_rates+0x58>
        Update_Reg_Handler(decrement_index_x, (uint32_t)OVERFLOW_PERIOD/abs(xRate), ISR_INCREMENT_INDEX_X, TRUE);
    21dc:	22 27       	eor	r18, r18
    21de:	33 27       	eor	r19, r19
    21e0:	28 1b       	sub	r18, r24
    21e2:	39 0b       	sbc	r19, r25
    21e4:	44 27       	eor	r20, r20
    21e6:	37 fd       	sbrc	r19, 7
    21e8:	40 95       	com	r20
    21ea:	54 2f       	mov	r21, r20
    21ec:	62 e1       	ldi	r22, 0x12	; 18
    21ee:	7a e7       	ldi	r23, 0x7A	; 122
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    21f8:	8b e7       	ldi	r24, 0x7B	; 123
    21fa:	9a e0       	ldi	r25, 0x0A	; 10
    21fc:	ba 01       	movw	r22, r20
    21fe:	a9 01       	movw	r20, r18
    2200:	22 e0       	ldi	r18, 0x02	; 2
    2202:	01 e0       	ldi	r16, 0x01	; 1
    2204:	08 c0       	rjmp	.+16     	; 0x2216 <set_isr_rates+0x68>
    else // xRate == 0
        Update_Reg_Handler(decrement_index_x, UPDATE_PERIOD, ISR_INCREMENT_INDEX_X, FALSE);
    2206:	8b e7       	ldi	r24, 0x7B	; 123
    2208:	9a e0       	ldi	r25, 0x0A	; 10
    220a:	4e e4       	ldi	r20, 0x4E	; 78
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	70 e0       	ldi	r23, 0x00	; 0
    2212:	22 e0       	ldi	r18, 0x02	; 2
    2214:	00 e0       	ldi	r16, 0x00	; 0
    2216:	0e 94 29 39 	call	0x7252	; 0x7252 <Update_Reg_Handler>


    if (yRate > 0)
    221a:	1c 16       	cp	r1, r28
    221c:	1d 06       	cpc	r1, r29
    221e:	74 f4       	brge	.+28     	; 0x223c <set_isr_rates+0x8e>
        Update_Reg_Handler(increment_index_y, (uint32_t)OVERFLOW_PERIOD/abs(yRate), ISR_INCREMENT_INDEX_Y, TRUE);
    2220:	9e 01       	movw	r18, r28
    2222:	44 27       	eor	r20, r20
    2224:	37 fd       	sbrc	r19, 7
    2226:	40 95       	com	r20
    2228:	54 2f       	mov	r21, r20
    222a:	62 e1       	ldi	r22, 0x12	; 18
    222c:	7a e7       	ldi	r23, 0x7A	; 122
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    2236:	81 e4       	ldi	r24, 0x41	; 65
    2238:	9a e0       	ldi	r25, 0x0A	; 10
    223a:	12 c0       	rjmp	.+36     	; 0x2260 <set_isr_rates+0xb2>
    else if (yRate < 0)
    223c:	20 97       	sbiw	r28, 0x00	; 0
    223e:	a9 f0       	breq	.+42     	; 0x226a <set_isr_rates+0xbc>
        Update_Reg_Handler(decrement_index_y, (uint32_t)OVERFLOW_PERIOD/abs(yRate), ISR_INCREMENT_INDEX_Y, TRUE);
    2240:	d0 95       	com	r29
    2242:	c1 95       	neg	r28
    2244:	df 4f       	sbci	r29, 0xFF	; 255
    2246:	9e 01       	movw	r18, r28
    2248:	44 27       	eor	r20, r20
    224a:	37 fd       	sbrc	r19, 7
    224c:	40 95       	com	r20
    224e:	54 2f       	mov	r21, r20
    2250:	62 e1       	ldi	r22, 0x12	; 18
    2252:	7a e7       	ldi	r23, 0x7A	; 122
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    225c:	82 eb       	ldi	r24, 0xB2	; 178
    225e:	9a e0       	ldi	r25, 0x0A	; 10
    2260:	ba 01       	movw	r22, r20
    2262:	a9 01       	movw	r20, r18
    2264:	23 e0       	ldi	r18, 0x03	; 3
    2266:	01 e0       	ldi	r16, 0x01	; 1
    2268:	08 c0       	rjmp	.+16     	; 0x227a <set_isr_rates+0xcc>
    else // yRate == 0
        Update_Reg_Handler(decrement_index_y, UPDATE_PERIOD, ISR_INCREMENT_INDEX_Y, FALSE);
    226a:	82 eb       	ldi	r24, 0xB2	; 178
    226c:	9a e0       	ldi	r25, 0x0A	; 10
    226e:	4e e4       	ldi	r20, 0x4E	; 78
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	60 e0       	ldi	r22, 0x00	; 0
    2274:	70 e0       	ldi	r23, 0x00	; 0
    2276:	23 e0       	ldi	r18, 0x03	; 3
    2278:	00 e0       	ldi	r16, 0x00	; 0
    227a:	0e 94 29 39 	call	0x7252	; 0x7252 <Update_Reg_Handler>

} // set_isr_rates()
    227e:	df 91       	pop	r29
    2280:	cf 91       	pop	r28
    2282:	0f 91       	pop	r16
    2284:	08 95       	ret

00002286 <calculate_and_set_velocity>:

// calculate_and_set_velocity()
// This function calculates and sets the x,y rates.
//
void calculate_and_set_velocity(void)
{
    2286:	a6 e1       	ldi	r26, 0x16	; 22
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e9 e4       	ldi	r30, 0x49	; 73
    228c:	f1 e1       	ldi	r31, 0x11	; 17
    228e:	0c 94 ba 4b 	jmp	0x9774	; 0x9774 <__prologue_saves__>
    int16_t        src;
    static int32_t srcx_filtered=0;
    static int32_t srcy_filtered=0;
    int32_t        srcx_filtered_prev;
    int32_t        srcy_filtered_prev;
    int32_t        adc[4]={0,0,0,0};
    2292:	fe 01       	movw	r30, r28
    2294:	31 96       	adiw	r30, 0x01	; 1
    2296:	80 e1       	ldi	r24, 0x10	; 16
    2298:	df 01       	movw	r26, r30
    229a:	1d 92       	st	X+, r1
    229c:	8a 95       	dec	r24
    229e:	e9 f7       	brne	.-6      	; 0x229a <calculate_and_set_velocity+0x14>
    // 4 - Function mode:        x=x0+fx(t), y=y0+fy(t), xRate=0,                      yRate=0
    // 5 - function DBG mode
    // 0x61 custom vel                                   xRate=a0*adc0 + a1*adc1 + a2*adc2 + a3*adc3 + a4*fx(t) + a5*fy(t), where a's can be {-128,+127}
    // 0x62 custom pos           x=a0*adc0 + a1*adc1 + a2*adc2 + a3*adc3 + a4*fx(t) + a5*fy(t),                             where a's can be {-128,+127}

    switch(g_mode_x)
    22a0:	80 91 c4 23 	lds	r24, 0x23C4
    22a4:	81 30       	cpi	r24, 0x01	; 1
    22a6:	29 f1       	breq	.+74     	; 0x22f2 <calculate_and_set_velocity+0x6c>
    22a8:	81 30       	cpi	r24, 0x01	; 1
    22aa:	38 f0       	brcs	.+14     	; 0x22ba <calculate_and_set_velocity+0x34>
    22ac:	82 30       	cpi	r24, 0x02	; 2
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <calculate_and_set_velocity+0x2c>
    22b0:	90 c0       	rjmp	.+288    	; 0x23d2 <calculate_and_set_velocity+0x14c>
    22b2:	81 36       	cpi	r24, 0x61	; 97
    22b4:	09 f0       	breq	.+2      	; 0x22b8 <calculate_and_set_velocity+0x32>
    22b6:	0c c2       	rjmp	.+1048   	; 0x26d0 <calculate_and_set_velocity+0x44a>
    22b8:	ff c0       	rjmp	.+510    	; 0x24b8 <calculate_and_set_velocity+0x232>
    {
        case MODE_VEL_OPENLOOP:   // Open loop - use function generator to set x rate
            src = g_buf_func_x[g_index_func_x_read];
    22ba:	e0 91 de 23 	lds	r30, 0x23DE
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	ee 0f       	add	r30, r30
    22c2:	ff 1f       	adc	r31, r31
    22c4:	e5 50       	subi	r30, 0x05	; 5
    22c6:	fa 4d       	sbci	r31, 0xDA	; 218
            xRate = (int16_t)((int32_t)g_gain_x*(int32_t)src/10) + 5*g_bias_x/2;
    22c8:	60 81       	ld	r22, Z
    22ca:	71 81       	ldd	r23, Z+1	; 0x01
    22cc:	88 27       	eor	r24, r24
    22ce:	77 fd       	sbrc	r23, 7
    22d0:	80 95       	com	r24
    22d2:	98 2f       	mov	r25, r24
    22d4:	20 91 ec 23 	lds	r18, 0x23EC
    22d8:	30 91 ed 23 	lds	r19, 0x23ED
    22dc:	44 27       	eor	r20, r20
    22de:	37 fd       	sbrc	r19, 7
    22e0:	40 95       	com	r20
    22e2:	54 2f       	mov	r21, r20
    22e4:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    22e8:	2a e0       	ldi	r18, 0x0A	; 10
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	50 e0       	ldi	r21, 0x00	; 0
    22f0:	59 c0       	rjmp	.+178    	; 0x23a4 <calculate_and_set_velocity+0x11e>
            break;

        case MODE_VEL_CLOSEDLOOP: // Closed loop, use CH0 to set x rate.
        	srcx_filtered_prev = srcx_filtered; //the previous value
    22f2:	a0 90 11 24 	lds	r10, 0x2411
    22f6:	b0 90 12 24 	lds	r11, 0x2412
    22fa:	c0 90 13 24 	lds	r12, 0x2413
    22fe:	d0 90 14 24 	lds	r13, 0x2414
            src = analogRead(0);  // 0 to 8191; on -5/+5 or 0/+10 scales, 1 volt = 819 values.  src/8.191 to get 100.0 frames/sec.  So 1volt==100fps.
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <analogRead>
            srcx_filtered = (6*srcx_filtered_prev + 4*(int32_t)src)/10;   // A fast exponentially weighted moving average.
    2308:	7c 01       	movw	r14, r24
    230a:	00 27       	eor	r16, r16
    230c:	f7 fc       	sbrc	r15, 7
    230e:	00 95       	com	r16
    2310:	10 2f       	mov	r17, r16
    2312:	b2 e0       	ldi	r27, 0x02	; 2
    2314:	ee 0c       	add	r14, r14
    2316:	ff 1c       	adc	r15, r15
    2318:	00 1f       	adc	r16, r16
    231a:	11 1f       	adc	r17, r17
    231c:	ba 95       	dec	r27
    231e:	d1 f7       	brne	.-12     	; 0x2314 <calculate_and_set_velocity+0x8e>
    2320:	c6 01       	movw	r24, r12
    2322:	b5 01       	movw	r22, r10
    2324:	26 e0       	ldi	r18, 0x06	; 6
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e0       	ldi	r20, 0x00	; 0
    232a:	50 e0       	ldi	r21, 0x00	; 0
    232c:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    2330:	e6 0e       	add	r14, r22
    2332:	f7 1e       	adc	r15, r23
    2334:	08 1f       	adc	r16, r24
    2336:	19 1f       	adc	r17, r25
    2338:	aa e0       	ldi	r26, 0x0A	; 10
    233a:	aa 2e       	mov	r10, r26
    233c:	b1 2c       	mov	r11, r1
    233e:	c1 2c       	mov	r12, r1
    2340:	d1 2c       	mov	r13, r1
    2342:	c8 01       	movw	r24, r16
    2344:	b7 01       	movw	r22, r14
    2346:	a6 01       	movw	r20, r12
    2348:	95 01       	movw	r18, r10
    234a:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    234e:	f9 01       	movw	r30, r18
    2350:	20 93 11 24 	sts	0x2411, r18
    2354:	f0 93 12 24 	sts	0x2412, r31
    2358:	40 93 13 24 	sts	0x2413, r20
    235c:	50 93 14 24 	sts	0x2414, r21
            xRate = (int16_t)((int32_t)g_gain_x * HzFromAdc(srcx_filtered)/10) + 5*g_bias_x/2;
    2360:	b9 01       	movw	r22, r18
    2362:	ca 01       	movw	r24, r20
    2364:	28 ee       	ldi	r18, 0xE8	; 232
    2366:	33 e0       	ldi	r19, 0x03	; 3
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	50 e0       	ldi	r21, 0x00	; 0
    236c:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    2370:	60 50       	subi	r22, 0x00	; 0
    2372:	70 48       	sbci	r23, 0x80	; 128
    2374:	8e 43       	sbci	r24, 0x3E	; 62
    2376:	90 40       	sbci	r25, 0x00	; 0
    2378:	2f ef       	ldi	r18, 0xFF	; 255
    237a:	3f e1       	ldi	r19, 0x1F	; 31
    237c:	40 e0       	ldi	r20, 0x00	; 0
    237e:	50 e0       	ldi	r21, 0x00	; 0
    2380:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    2384:	79 01       	movw	r14, r18
    2386:	8a 01       	movw	r16, r20
    2388:	20 91 ec 23 	lds	r18, 0x23EC
    238c:	30 91 ed 23 	lds	r19, 0x23ED
    2390:	44 27       	eor	r20, r20
    2392:	37 fd       	sbrc	r19, 7
    2394:	40 95       	com	r20
    2396:	54 2f       	mov	r21, r20
    2398:	c8 01       	movw	r24, r16
    239a:	b7 01       	movw	r22, r14
    239c:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    23a0:	a6 01       	movw	r20, r12
    23a2:	95 01       	movw	r18, r10
    23a4:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    23a8:	89 01       	movw	r16, r18
    23aa:	9a 01       	movw	r18, r20
    23ac:	40 91 f0 23 	lds	r20, 0x23F0
    23b0:	50 91 f1 23 	lds	r21, 0x23F1
    23b4:	ca 01       	movw	r24, r20
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	84 0f       	add	r24, r20
    23c0:	95 1f       	adc	r25, r21
    23c2:	62 e0       	ldi	r22, 0x02	; 2
    23c4:	70 e0       	ldi	r23, 0x00	; 0
    23c6:	0e 94 6a 4b 	call	0x96d4	; 0x96d4 <__divmodhi4>
    23ca:	5b 01       	movw	r10, r22
    23cc:	a0 0e       	add	r10, r16
    23ce:	b1 1e       	adc	r11, r17
            // xRate = CLIP(xRate, -256, 256);
            break;
    23d0:	81 c1       	rjmp	.+770    	; 0x26d4 <calculate_and_set_velocity+0x44e>

        case MODE_VEL_CLOSEDLOOP_FUNCTION: // Closed loop w bias - use CH0 + function to set x rate:  xRate = m*adc0 + b + f(t)
            srcx_filtered_prev = srcx_filtered; //the previous value
    23d2:	a0 90 11 24 	lds	r10, 0x2411
    23d6:	b0 90 12 24 	lds	r11, 0x2412
    23da:	c0 90 13 24 	lds	r12, 0x2413
    23de:	d0 90 14 24 	lds	r13, 0x2414
            src = analogRead(0);
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <analogRead>
            srcx_filtered = (6*srcx_filtered_prev + 4*src)/10;   // A fast exponentially weighted moving average.
    23e8:	7c 01       	movw	r14, r24
    23ea:	ee 0c       	add	r14, r14
    23ec:	ff 1c       	adc	r15, r15
    23ee:	ee 0c       	add	r14, r14
    23f0:	ff 1c       	adc	r15, r15
    23f2:	00 27       	eor	r16, r16
    23f4:	f7 fc       	sbrc	r15, 7
    23f6:	00 95       	com	r16
    23f8:	10 2f       	mov	r17, r16
    23fa:	c6 01       	movw	r24, r12
    23fc:	b5 01       	movw	r22, r10
    23fe:	26 e0       	ldi	r18, 0x06	; 6
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e0       	ldi	r20, 0x00	; 0
    2404:	50 e0       	ldi	r21, 0x00	; 0
    2406:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    240a:	e6 0e       	add	r14, r22
    240c:	f7 1e       	adc	r15, r23
    240e:	08 1f       	adc	r16, r24
    2410:	19 1f       	adc	r17, r25
    2412:	7a e0       	ldi	r23, 0x0A	; 10
    2414:	67 2e       	mov	r6, r23
    2416:	71 2c       	mov	r7, r1
    2418:	81 2c       	mov	r8, r1
    241a:	91 2c       	mov	r9, r1
    241c:	c8 01       	movw	r24, r16
    241e:	b7 01       	movw	r22, r14
    2420:	a4 01       	movw	r20, r8
    2422:	93 01       	movw	r18, r6
    2424:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    2428:	05 2f       	mov	r16, r21
    242a:	20 93 11 24 	sts	0x2411, r18
    242e:	30 93 12 24 	sts	0x2412, r19
    2432:	40 93 13 24 	sts	0x2413, r20
    2436:	50 93 14 24 	sts	0x2414, r21
            xRate = (int16_t)((int32_t)g_gain_x * HzFromAdc(srcx_filtered)/10) + 5*g_bias_x/2 + g_buf_func_x[g_index_func_x_read];
    243a:	e0 91 de 23 	lds	r30, 0x23DE
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	ee 0f       	add	r30, r30
    2442:	ff 1f       	adc	r31, r31
    2444:	e5 50       	subi	r30, 0x05	; 5
    2446:	fa 4d       	sbci	r31, 0xDA	; 218
    2448:	60 91 f0 23 	lds	r22, 0x23F0
    244c:	70 91 f1 23 	lds	r23, 0x23F1
    2450:	cb 01       	movw	r24, r22
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	86 0f       	add	r24, r22
    245c:	97 1f       	adc	r25, r23
    245e:	62 e0       	ldi	r22, 0x02	; 2
    2460:	70 e0       	ldi	r23, 0x00	; 0
    2462:	0e 94 6a 4b 	call	0x96d4	; 0x96d4 <__divmodhi4>
    2466:	5b 01       	movw	r10, r22
    2468:	80 81       	ld	r24, Z
    246a:	91 81       	ldd	r25, Z+1	; 0x01
    246c:	a8 0e       	add	r10, r24
    246e:	b9 1e       	adc	r11, r25
    2470:	b9 01       	movw	r22, r18
    2472:	84 2f       	mov	r24, r20
    2474:	90 2f       	mov	r25, r16
    2476:	28 ee       	ldi	r18, 0xE8	; 232
    2478:	33 e0       	ldi	r19, 0x03	; 3
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    2482:	60 50       	subi	r22, 0x00	; 0
    2484:	70 48       	sbci	r23, 0x80	; 128
    2486:	8e 43       	sbci	r24, 0x3E	; 62
    2488:	90 40       	sbci	r25, 0x00	; 0
    248a:	2f ef       	ldi	r18, 0xFF	; 255
    248c:	3f e1       	ldi	r19, 0x1F	; 31
    248e:	40 e0       	ldi	r20, 0x00	; 0
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    2496:	79 01       	movw	r14, r18
    2498:	8a 01       	movw	r16, r20
    249a:	20 91 ec 23 	lds	r18, 0x23EC
    249e:	30 91 ed 23 	lds	r19, 0x23ED
    24a2:	44 27       	eor	r20, r20
    24a4:	37 fd       	sbrc	r19, 7
    24a6:	40 95       	com	r20
    24a8:	54 2f       	mov	r21, r20
    24aa:	c8 01       	movw	r24, r16
    24ac:	b7 01       	movw	r22, r14
    24ae:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    24b2:	a4 01       	movw	r20, r8
    24b4:	93 01       	movw	r18, r6
    24b6:	07 c1       	rjmp	.+526    	; 0x26c6 <calculate_and_set_velocity+0x440>
            break;
    24b8:	96 ec       	ldi	r25, 0xC6	; 198
    24ba:	e9 2e       	mov	r14, r25
    24bc:	93 e2       	ldi	r25, 0x23	; 35
    24be:	f9 2e       	mov	r15, r25
    24c0:	8f 01       	movw	r16, r30
        	// Read the ADC's if necessary.
        	for (i=0; i<4; i++)
        		if (g_custom_a_x[i])
        			adc[i] = (int32_t)analogRead(0);
        		else
        			adc[i] = (DAQRESOLUTION+1)/2;
    24c2:	a1 2c       	mov	r10, r1
    24c4:	80 e1       	ldi	r24, 0x10	; 16
    24c6:	b8 2e       	mov	r11, r24
    24c8:	c1 2c       	mov	r12, r1
    24ca:	d1 2c       	mov	r13, r1
            break;

        case MODE_VEL_CUSTOM: // Custom velocity mode.
        	// Read the ADC's if necessary.
        	for (i=0; i<4; i++)
        		if (g_custom_a_x[i])
    24cc:	f7 01       	movw	r30, r14
    24ce:	81 91       	ld	r24, Z+
    24d0:	91 91       	ld	r25, Z+
    24d2:	7f 01       	movw	r14, r30
    24d4:	00 97       	sbiw	r24, 0x00	; 0
    24d6:	59 f0       	breq	.+22     	; 0x24ee <calculate_and_set_velocity+0x268>
        			adc[i] = (int32_t)analogRead(0);
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <analogRead>
    24de:	a0 e0       	ldi	r26, 0x00	; 0
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	f8 01       	movw	r30, r16
    24e4:	80 83       	st	Z, r24
    24e6:	91 83       	std	Z+1, r25	; 0x01
    24e8:	a2 83       	std	Z+2, r26	; 0x02
    24ea:	b3 83       	std	Z+3, r27	; 0x03
    24ec:	06 c0       	rjmp	.+12     	; 0x24fa <calculate_and_set_velocity+0x274>
        		else
        			adc[i] = (DAQRESOLUTION+1)/2;
    24ee:	d8 01       	movw	r26, r16
    24f0:	ad 92       	st	X+, r10
    24f2:	bd 92       	st	X+, r11
    24f4:	cd 92       	st	X+, r12
    24f6:	dc 92       	st	X, r13
    24f8:	13 97       	sbiw	r26, 0x03	; 3
    24fa:	0c 5f       	subi	r16, 0xFC	; 252
    24fc:	1f 4f       	sbci	r17, 0xFF	; 255
            xRate = (int16_t)((int32_t)g_gain_x * HzFromAdc(srcx_filtered)/10) + 5*g_bias_x/2 + g_buf_func_x[g_index_func_x_read];
            break;

        case MODE_VEL_CUSTOM: // Custom velocity mode.
        	// Read the ADC's if necessary.
        	for (i=0; i<4; i++)
    24fe:	be ec       	ldi	r27, 0xCE	; 206
    2500:	eb 16       	cp	r14, r27
    2502:	b3 e2       	ldi	r27, 0x23	; 35
    2504:	fb 06       	cpc	r15, r27
    2506:	11 f7       	brne	.-60     	; 0x24cc <calculate_and_set_velocity+0x246>
        	// Put the center of the adc range to be zero vel, and combine the adc's according to coefficients.
        	xRate = (int32_t)g_custom_a_x[0] * HzFromAdc(adc[0]) / 10 +
                    (int32_t)g_custom_a_x[1] * HzFromAdc(adc[1]) / 10 +
                    (int32_t)g_custom_a_x[2] * HzFromAdc(adc[2]) / 10 +
                    (int32_t)g_custom_a_x[3] * HzFromAdc(adc[3]) / 10 +
                    (int32_t)g_custom_a_x[4] * (int32_t)g_buf_func_x[g_index_func_x_read] / 10 +
    2508:	e0 91 de 23 	lds	r30, 0x23DE
    250c:	e9 8b       	std	Y+17, r30	; 0x11
                    (int32_t)g_custom_a_x[5] * (int32_t)g_buf_func_y[g_index_func_y_read] / 10;
    250e:	f0 91 df 23 	lds	r31, 0x23DF
    2512:	fa 8b       	std	Y+18, r31	; 0x12
        		else
        			adc[i] = (DAQRESOLUTION+1)/2;

        	// Put the center of the adc range to be zero vel, and combine the adc's according to coefficients.
        	xRate = (int32_t)g_custom_a_x[0] * HzFromAdc(adc[0]) / 10 +
                    (int32_t)g_custom_a_x[1] * HzFromAdc(adc[1]) / 10 +
    2514:	6d 81       	ldd	r22, Y+5	; 0x05
    2516:	7e 81       	ldd	r23, Y+6	; 0x06
    2518:	8f 81       	ldd	r24, Y+7	; 0x07
    251a:	98 85       	ldd	r25, Y+8	; 0x08
    251c:	28 ee       	ldi	r18, 0xE8	; 232
    251e:	33 e0       	ldi	r19, 0x03	; 3
    2520:	40 e0       	ldi	r20, 0x00	; 0
    2522:	50 e0       	ldi	r21, 0x00	; 0
    2524:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    2528:	60 50       	subi	r22, 0x00	; 0
    252a:	70 48       	sbci	r23, 0x80	; 128
    252c:	8e 43       	sbci	r24, 0x3E	; 62
    252e:	90 40       	sbci	r25, 0x00	; 0
    2530:	0f ef       	ldi	r16, 0xFF	; 255
    2532:	60 2e       	mov	r6, r16
    2534:	0f e1       	ldi	r16, 0x1F	; 31
    2536:	70 2e       	mov	r7, r16
    2538:	81 2c       	mov	r8, r1
    253a:	91 2c       	mov	r9, r1
    253c:	a4 01       	movw	r20, r8
    253e:	93 01       	movw	r18, r6
    2540:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    2544:	79 01       	movw	r14, r18
    2546:	8a 01       	movw	r16, r20
    2548:	20 91 c8 23 	lds	r18, 0x23C8
    254c:	30 91 c9 23 	lds	r19, 0x23C9
    2550:	44 27       	eor	r20, r20
    2552:	37 fd       	sbrc	r19, 7
    2554:	40 95       	com	r20
    2556:	54 2f       	mov	r21, r20
    2558:	c8 01       	movw	r24, r16
    255a:	b7 01       	movw	r22, r14
    255c:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    2560:	1a e0       	ldi	r17, 0x0A	; 10
    2562:	21 2e       	mov	r2, r17
    2564:	31 2c       	mov	r3, r1
    2566:	41 2c       	mov	r4, r1
    2568:	51 2c       	mov	r5, r1
    256a:	a2 01       	movw	r20, r4
    256c:	91 01       	movw	r18, r2
    256e:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    2572:	59 01       	movw	r10, r18
    2574:	6a 01       	movw	r12, r20
        			adc[i] = (int32_t)analogRead(0);
        		else
        			adc[i] = (DAQRESOLUTION+1)/2;

        	// Put the center of the adc range to be zero vel, and combine the adc's according to coefficients.
        	xRate = (int32_t)g_custom_a_x[0] * HzFromAdc(adc[0]) / 10 +
    2576:	69 81       	ldd	r22, Y+1	; 0x01
    2578:	7a 81       	ldd	r23, Y+2	; 0x02
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
    257c:	9c 81       	ldd	r25, Y+4	; 0x04
    257e:	28 ee       	ldi	r18, 0xE8	; 232
    2580:	33 e0       	ldi	r19, 0x03	; 3
    2582:	40 e0       	ldi	r20, 0x00	; 0
    2584:	50 e0       	ldi	r21, 0x00	; 0
    2586:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    258a:	60 50       	subi	r22, 0x00	; 0
    258c:	70 48       	sbci	r23, 0x80	; 128
    258e:	8e 43       	sbci	r24, 0x3E	; 62
    2590:	90 40       	sbci	r25, 0x00	; 0
    2592:	a4 01       	movw	r20, r8
    2594:	93 01       	movw	r18, r6
    2596:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    259a:	79 01       	movw	r14, r18
    259c:	8a 01       	movw	r16, r20
    259e:	20 91 c6 23 	lds	r18, 0x23C6
    25a2:	30 91 c7 23 	lds	r19, 0x23C7
    25a6:	44 27       	eor	r20, r20
    25a8:	37 fd       	sbrc	r19, 7
    25aa:	40 95       	com	r20
    25ac:	54 2f       	mov	r21, r20
    25ae:	c8 01       	movw	r24, r16
    25b0:	b7 01       	movw	r22, r14
    25b2:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    25b6:	a2 01       	movw	r20, r4
    25b8:	91 01       	movw	r18, r2
    25ba:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    25be:	a2 0e       	add	r10, r18
    25c0:	b3 1e       	adc	r11, r19
                    (int32_t)g_custom_a_x[1] * HzFromAdc(adc[1]) / 10 +
                    (int32_t)g_custom_a_x[2] * HzFromAdc(adc[2]) / 10 +
    25c2:	69 85       	ldd	r22, Y+9	; 0x09
    25c4:	7a 85       	ldd	r23, Y+10	; 0x0a
    25c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    25c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    25ca:	28 ee       	ldi	r18, 0xE8	; 232
    25cc:	33 e0       	ldi	r19, 0x03	; 3
    25ce:	40 e0       	ldi	r20, 0x00	; 0
    25d0:	50 e0       	ldi	r21, 0x00	; 0
    25d2:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    25d6:	60 50       	subi	r22, 0x00	; 0
    25d8:	70 48       	sbci	r23, 0x80	; 128
    25da:	8e 43       	sbci	r24, 0x3E	; 62
    25dc:	90 40       	sbci	r25, 0x00	; 0
    25de:	a4 01       	movw	r20, r8
    25e0:	93 01       	movw	r18, r6
    25e2:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    25e6:	79 01       	movw	r14, r18
    25e8:	8a 01       	movw	r16, r20
    25ea:	20 91 ca 23 	lds	r18, 0x23CA
    25ee:	30 91 cb 23 	lds	r19, 0x23CB
    25f2:	44 27       	eor	r20, r20
    25f4:	37 fd       	sbrc	r19, 7
    25f6:	40 95       	com	r20
    25f8:	54 2f       	mov	r21, r20
    25fa:	c8 01       	movw	r24, r16
    25fc:	b7 01       	movw	r22, r14
    25fe:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    2602:	a2 01       	movw	r20, r4
    2604:	91 01       	movw	r18, r2
    2606:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
        			adc[i] = (int32_t)analogRead(0);
        		else
        			adc[i] = (DAQRESOLUTION+1)/2;

        	// Put the center of the adc range to be zero vel, and combine the adc's according to coefficients.
        	xRate = (int32_t)g_custom_a_x[0] * HzFromAdc(adc[0]) / 10 +
    260a:	a2 0e       	add	r10, r18
    260c:	b3 1e       	adc	r11, r19
                    (int32_t)g_custom_a_x[1] * HzFromAdc(adc[1]) / 10 +
                    (int32_t)g_custom_a_x[2] * HzFromAdc(adc[2]) / 10 +
                    (int32_t)g_custom_a_x[3] * HzFromAdc(adc[3]) / 10 +
    260e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2610:	7e 85       	ldd	r23, Y+14	; 0x0e
    2612:	8f 85       	ldd	r24, Y+15	; 0x0f
    2614:	98 89       	ldd	r25, Y+16	; 0x10
    2616:	28 ee       	ldi	r18, 0xE8	; 232
    2618:	33 e0       	ldi	r19, 0x03	; 3
    261a:	40 e0       	ldi	r20, 0x00	; 0
    261c:	50 e0       	ldi	r21, 0x00	; 0
    261e:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    2622:	60 50       	subi	r22, 0x00	; 0
    2624:	70 48       	sbci	r23, 0x80	; 128
    2626:	8e 43       	sbci	r24, 0x3E	; 62
    2628:	90 40       	sbci	r25, 0x00	; 0
    262a:	a4 01       	movw	r20, r8
    262c:	93 01       	movw	r18, r6
    262e:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    2632:	79 01       	movw	r14, r18
    2634:	8a 01       	movw	r16, r20
    2636:	20 91 cc 23 	lds	r18, 0x23CC
    263a:	30 91 cd 23 	lds	r19, 0x23CD
    263e:	44 27       	eor	r20, r20
    2640:	37 fd       	sbrc	r19, 7
    2642:	40 95       	com	r20
    2644:	54 2f       	mov	r21, r20
    2646:	c8 01       	movw	r24, r16
    2648:	b7 01       	movw	r22, r14
    264a:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    264e:	a2 01       	movw	r20, r4
    2650:	91 01       	movw	r18, r2
    2652:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
        			adc[i] = (int32_t)analogRead(0);
        		else
        			adc[i] = (DAQRESOLUTION+1)/2;

        	// Put the center of the adc range to be zero vel, and combine the adc's according to coefficients.
        	xRate = (int32_t)g_custom_a_x[0] * HzFromAdc(adc[0]) / 10 +
    2656:	a2 0e       	add	r10, r18
    2658:	b3 1e       	adc	r11, r19
                    (int32_t)g_custom_a_x[1] * HzFromAdc(adc[1]) / 10 +
                    (int32_t)g_custom_a_x[2] * HzFromAdc(adc[2]) / 10 +
                    (int32_t)g_custom_a_x[3] * HzFromAdc(adc[3]) / 10 +
                    (int32_t)g_custom_a_x[4] * (int32_t)g_buf_func_x[g_index_func_x_read] / 10 +
    265a:	89 89       	ldd	r24, Y+17	; 0x11
    265c:	e8 2f       	mov	r30, r24
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	ee 0f       	add	r30, r30
    2662:	ff 1f       	adc	r31, r31
    2664:	e5 50       	subi	r30, 0x05	; 5
    2666:	fa 4d       	sbci	r31, 0xDA	; 218
    2668:	60 81       	ld	r22, Z
    266a:	71 81       	ldd	r23, Z+1	; 0x01
    266c:	88 27       	eor	r24, r24
    266e:	77 fd       	sbrc	r23, 7
    2670:	80 95       	com	r24
    2672:	98 2f       	mov	r25, r24
    2674:	20 91 ce 23 	lds	r18, 0x23CE
    2678:	30 91 cf 23 	lds	r19, 0x23CF
    267c:	44 27       	eor	r20, r20
    267e:	37 fd       	sbrc	r19, 7
    2680:	40 95       	com	r20
    2682:	54 2f       	mov	r21, r20
    2684:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    2688:	a2 01       	movw	r20, r4
    268a:	91 01       	movw	r18, r2
    268c:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
        			adc[i] = (int32_t)analogRead(0);
        		else
        			adc[i] = (DAQRESOLUTION+1)/2;

        	// Put the center of the adc range to be zero vel, and combine the adc's according to coefficients.
        	xRate = (int32_t)g_custom_a_x[0] * HzFromAdc(adc[0]) / 10 +
    2690:	a2 0e       	add	r10, r18
    2692:	b3 1e       	adc	r11, r19
                    (int32_t)g_custom_a_x[1] * HzFromAdc(adc[1]) / 10 +
                    (int32_t)g_custom_a_x[2] * HzFromAdc(adc[2]) / 10 +
                    (int32_t)g_custom_a_x[3] * HzFromAdc(adc[3]) / 10 +
                    (int32_t)g_custom_a_x[4] * (int32_t)g_buf_func_x[g_index_func_x_read] / 10 +
                    (int32_t)g_custom_a_x[5] * (int32_t)g_buf_func_y[g_index_func_y_read] / 10;
    2694:	aa 89       	ldd	r26, Y+18	; 0x12
    2696:	ea 2f       	mov	r30, r26
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	ee 0f       	add	r30, r30
    269c:	ff 1f       	adc	r31, r31
    269e:	e3 52       	subi	r30, 0x23	; 35
    26a0:	f9 4d       	sbci	r31, 0xD9	; 217
    26a2:	60 81       	ld	r22, Z
    26a4:	71 81       	ldd	r23, Z+1	; 0x01
    26a6:	88 27       	eor	r24, r24
    26a8:	77 fd       	sbrc	r23, 7
    26aa:	80 95       	com	r24
    26ac:	98 2f       	mov	r25, r24
    26ae:	20 91 d0 23 	lds	r18, 0x23D0
    26b2:	30 91 d1 23 	lds	r19, 0x23D1
    26b6:	44 27       	eor	r20, r20
    26b8:	37 fd       	sbrc	r19, 7
    26ba:	40 95       	com	r20
    26bc:	54 2f       	mov	r21, r20
    26be:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    26c2:	a2 01       	movw	r20, r4
    26c4:	91 01       	movw	r18, r2
    26c6:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
        			adc[i] = (int32_t)analogRead(0);
        		else
        			adc[i] = (DAQRESOLUTION+1)/2;

        	// Put the center of the adc range to be zero vel, and combine the adc's according to coefficients.
        	xRate = (int32_t)g_custom_a_x[0] * HzFromAdc(adc[0]) / 10 +
    26ca:	a2 0e       	add	r10, r18
    26cc:	b3 1e       	adc	r11, r19
                    (int32_t)g_custom_a_x[2] * HzFromAdc(adc[2]) / 10 +
                    (int32_t)g_custom_a_x[3] * HzFromAdc(adc[3]) / 10 +
                    (int32_t)g_custom_a_x[4] * (int32_t)g_buf_func_x[g_index_func_x_read] / 10 +
                    (int32_t)g_custom_a_x[5] * (int32_t)g_buf_func_y[g_index_func_y_read] / 10;

            break;
    26ce:	02 c0       	rjmp	.+4      	; 0x26d4 <calculate_and_set_velocity+0x44e>
// This function calculates and sets the x,y rates.
//
void calculate_and_set_velocity(void)
{
	int8_t         i;
    int16_t        xRate = 0;
    26d0:	aa 24       	eor	r10, r10
    26d2:	bb 24       	eor	r11, r11
        	xRate = 0;
    }

    
    
    switch(g_mode_y)
    26d4:	80 91 c5 23 	lds	r24, 0x23C5
    26d8:	81 30       	cpi	r24, 0x01	; 1
    26da:	29 f1       	breq	.+74     	; 0x2726 <calculate_and_set_velocity+0x4a0>
    26dc:	81 30       	cpi	r24, 0x01	; 1
    26de:	38 f0       	brcs	.+14     	; 0x26ee <calculate_and_set_velocity+0x468>
    26e0:	82 30       	cpi	r24, 0x02	; 2
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <calculate_and_set_velocity+0x460>
    26e4:	8d c0       	rjmp	.+282    	; 0x2800 <calculate_and_set_velocity+0x57a>
    26e6:	81 36       	cpi	r24, 0x61	; 97
    26e8:	09 f0       	breq	.+2      	; 0x26ec <calculate_and_set_velocity+0x466>
    26ea:	0b c2       	rjmp	.+1046   	; 0x2b02 <calculate_and_set_velocity+0x87c>
    26ec:	f8 c0       	rjmp	.+496    	; 0x28de <calculate_and_set_velocity+0x658>
    {
        case MODE_VEL_OPENLOOP:   // open loop - use function generator to set y rate
            src = g_buf_func_y[g_index_func_y_read];
    26ee:	e0 91 df 23 	lds	r30, 0x23DF
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	ee 0f       	add	r30, r30
    26f6:	ff 1f       	adc	r31, r31
    26f8:	e3 52       	subi	r30, 0x23	; 35
    26fa:	f9 4d       	sbci	r31, 0xD9	; 217
            yRate = (int16_t)((int32_t)g_gain_y*(int32_t)src/10) + 5*g_bias_y/2;
    26fc:	60 81       	ld	r22, Z
    26fe:	71 81       	ldd	r23, Z+1	; 0x01
    2700:	88 27       	eor	r24, r24
    2702:	77 fd       	sbrc	r23, 7
    2704:	80 95       	com	r24
    2706:	98 2f       	mov	r25, r24
    2708:	20 91 ee 23 	lds	r18, 0x23EE
    270c:	30 91 ef 23 	lds	r19, 0x23EF
    2710:	44 27       	eor	r20, r20
    2712:	37 fd       	sbrc	r19, 7
    2714:	40 95       	com	r20
    2716:	54 2f       	mov	r21, r20
    2718:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    271c:	2a e0       	ldi	r18, 0x0A	; 10
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e0       	ldi	r20, 0x00	; 0
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	56 c0       	rjmp	.+172    	; 0x27d2 <calculate_and_set_velocity+0x54c>
            break;


        case MODE_VEL_CLOSEDLOOP: //closed loop, use CH1 to set y rate
        	srcy_filtered_prev = srcy_filtered; //the previous value
    2726:	60 90 0d 24 	lds	r6, 0x240D
    272a:	70 90 0e 24 	lds	r7, 0x240E
    272e:	80 90 0f 24 	lds	r8, 0x240F
    2732:	90 90 10 24 	lds	r9, 0x2410
            src = analogRead(1);  // 0 to 8191; on -5/+5 or 0/+10 scales, 1 volt = 819 values.  adc/8.191 to get 100.0 frames/sec
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <analogRead>
            srcy_filtered = (6*srcy_filtered_prev + 4*src)/10;   // A fast exponentially weighted moving average.
    273c:	7c 01       	movw	r14, r24
    273e:	ee 0c       	add	r14, r14
    2740:	ff 1c       	adc	r15, r15
    2742:	ee 0c       	add	r14, r14
    2744:	ff 1c       	adc	r15, r15
    2746:	00 27       	eor	r16, r16
    2748:	f7 fc       	sbrc	r15, 7
    274a:	00 95       	com	r16
    274c:	10 2f       	mov	r17, r16
    274e:	c4 01       	movw	r24, r8
    2750:	b3 01       	movw	r22, r6
    2752:	26 e0       	ldi	r18, 0x06	; 6
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e0       	ldi	r20, 0x00	; 0
    2758:	50 e0       	ldi	r21, 0x00	; 0
    275a:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    275e:	e6 0e       	add	r14, r22
    2760:	f7 1e       	adc	r15, r23
    2762:	08 1f       	adc	r16, r24
    2764:	19 1f       	adc	r17, r25
    2766:	5a e0       	ldi	r21, 0x0A	; 10
    2768:	65 2e       	mov	r6, r21
    276a:	71 2c       	mov	r7, r1
    276c:	81 2c       	mov	r8, r1
    276e:	91 2c       	mov	r9, r1
    2770:	c8 01       	movw	r24, r16
    2772:	b7 01       	movw	r22, r14
    2774:	a4 01       	movw	r20, r8
    2776:	93 01       	movw	r18, r6
    2778:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    277c:	f9 01       	movw	r30, r18
    277e:	20 93 0d 24 	sts	0x240D, r18
    2782:	f0 93 0e 24 	sts	0x240E, r31
    2786:	40 93 0f 24 	sts	0x240F, r20
    278a:	50 93 10 24 	sts	0x2410, r21
            yRate = (int16_t)((int32_t)g_gain_y * HzFromAdc(srcy_filtered)/10) + 5*g_bias_y/2;
    278e:	b9 01       	movw	r22, r18
    2790:	ca 01       	movw	r24, r20
    2792:	28 ee       	ldi	r18, 0xE8	; 232
    2794:	33 e0       	ldi	r19, 0x03	; 3
    2796:	40 e0       	ldi	r20, 0x00	; 0
    2798:	50 e0       	ldi	r21, 0x00	; 0
    279a:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    279e:	60 50       	subi	r22, 0x00	; 0
    27a0:	70 48       	sbci	r23, 0x80	; 128
    27a2:	8e 43       	sbci	r24, 0x3E	; 62
    27a4:	90 40       	sbci	r25, 0x00	; 0
    27a6:	2f ef       	ldi	r18, 0xFF	; 255
    27a8:	3f e1       	ldi	r19, 0x1F	; 31
    27aa:	40 e0       	ldi	r20, 0x00	; 0
    27ac:	50 e0       	ldi	r21, 0x00	; 0
    27ae:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    27b2:	79 01       	movw	r14, r18
    27b4:	8a 01       	movw	r16, r20
    27b6:	20 91 ee 23 	lds	r18, 0x23EE
    27ba:	30 91 ef 23 	lds	r19, 0x23EF
    27be:	44 27       	eor	r20, r20
    27c0:	37 fd       	sbrc	r19, 7
    27c2:	40 95       	com	r20
    27c4:	54 2f       	mov	r21, r20
    27c6:	c8 01       	movw	r24, r16
    27c8:	b7 01       	movw	r22, r14
    27ca:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    27ce:	a4 01       	movw	r20, r8
    27d0:	93 01       	movw	r18, r6
    27d2:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    27d6:	69 01       	movw	r12, r18
    27d8:	7a 01       	movw	r14, r20
    27da:	20 91 f2 23 	lds	r18, 0x23F2
    27de:	30 91 f3 23 	lds	r19, 0x23F3
    27e2:	c9 01       	movw	r24, r18
    27e4:	88 0f       	add	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	88 0f       	add	r24, r24
    27ea:	99 1f       	adc	r25, r25
    27ec:	82 0f       	add	r24, r18
    27ee:	93 1f       	adc	r25, r19
    27f0:	62 e0       	ldi	r22, 0x02	; 2
    27f2:	70 e0       	ldi	r23, 0x00	; 0
    27f4:	0e 94 6a 4b 	call	0x96d4	; 0x96d4 <__divmodhi4>
    27f8:	8b 01       	movw	r16, r22
    27fa:	0c 0d       	add	r16, r12
    27fc:	1d 1d       	adc	r17, r13
            // yRate = CLIP(yRate, -256, 256);
            break;
    27fe:	83 c1       	rjmp	.+774    	; 0x2b06 <calculate_and_set_velocity+0x880>

        case MODE_VEL_CLOSEDLOOP_FUNCTION: //closed loop w bias - use CH2 - CH3, and function gen. to set y rate
        	srcy_filtered_prev = srcy_filtered; //the previous value
    2800:	60 90 0d 24 	lds	r6, 0x240D
    2804:	70 90 0e 24 	lds	r7, 0x240E
    2808:	80 90 0f 24 	lds	r8, 0x240F
    280c:	90 90 10 24 	lds	r9, 0x2410
        	src = analogRead(1); // 1 volt = 102
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <analogRead>
        	srcy_filtered = (6*srcy_filtered_prev + 4*src)/10;   //this is a 60% old value, 40% new value smoother
    2816:	7c 01       	movw	r14, r24
    2818:	ee 0c       	add	r14, r14
    281a:	ff 1c       	adc	r15, r15
    281c:	ee 0c       	add	r14, r14
    281e:	ff 1c       	adc	r15, r15
    2820:	00 27       	eor	r16, r16
    2822:	f7 fc       	sbrc	r15, 7
    2824:	00 95       	com	r16
    2826:	10 2f       	mov	r17, r16
    2828:	c4 01       	movw	r24, r8
    282a:	b3 01       	movw	r22, r6
    282c:	26 e0       	ldi	r18, 0x06	; 6
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	40 e0       	ldi	r20, 0x00	; 0
    2832:	50 e0       	ldi	r21, 0x00	; 0
    2834:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    2838:	e6 0e       	add	r14, r22
    283a:	f7 1e       	adc	r15, r23
    283c:	08 1f       	adc	r16, r24
    283e:	19 1f       	adc	r17, r25
    2840:	8a e0       	ldi	r24, 0x0A	; 10
    2842:	68 2e       	mov	r6, r24
    2844:	71 2c       	mov	r7, r1
    2846:	81 2c       	mov	r8, r1
    2848:	91 2c       	mov	r9, r1
    284a:	c8 01       	movw	r24, r16
    284c:	b7 01       	movw	r22, r14
    284e:	a4 01       	movw	r20, r8
    2850:	93 01       	movw	r18, r6
    2852:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    2856:	e5 2e       	mov	r14, r21
    2858:	20 93 0d 24 	sts	0x240D, r18
    285c:	30 93 0e 24 	sts	0x240E, r19
    2860:	40 93 0f 24 	sts	0x240F, r20
    2864:	50 93 10 24 	sts	0x2410, r21
            yRate = (int16_t)((int32_t)g_gain_y * HzFromAdc(srcy_filtered)/10) + 5*g_bias_y/2 + g_buf_func_y[g_index_func_y_read];
    2868:	e0 91 df 23 	lds	r30, 0x23DF
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	ee 0f       	add	r30, r30
    2870:	ff 1f       	adc	r31, r31
    2872:	e3 52       	subi	r30, 0x23	; 35
    2874:	f9 4d       	sbci	r31, 0xD9	; 217
    2876:	60 91 f2 23 	lds	r22, 0x23F2
    287a:	70 91 f3 23 	lds	r23, 0x23F3
    287e:	cb 01       	movw	r24, r22
    2880:	88 0f       	add	r24, r24
    2882:	99 1f       	adc	r25, r25
    2884:	88 0f       	add	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	86 0f       	add	r24, r22
    288a:	97 1f       	adc	r25, r23
    288c:	62 e0       	ldi	r22, 0x02	; 2
    288e:	70 e0       	ldi	r23, 0x00	; 0
    2890:	0e 94 6a 4b 	call	0x96d4	; 0x96d4 <__divmodhi4>
    2894:	8b 01       	movw	r16, r22
    2896:	80 81       	ld	r24, Z
    2898:	91 81       	ldd	r25, Z+1	; 0x01
    289a:	08 0f       	add	r16, r24
    289c:	19 1f       	adc	r17, r25
    289e:	b9 01       	movw	r22, r18
    28a0:	84 2f       	mov	r24, r20
    28a2:	9e 2d       	mov	r25, r14
    28a4:	28 ee       	ldi	r18, 0xE8	; 232
    28a6:	33 e0       	ldi	r19, 0x03	; 3
    28a8:	40 e0       	ldi	r20, 0x00	; 0
    28aa:	50 e0       	ldi	r21, 0x00	; 0
    28ac:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    28b0:	60 50       	subi	r22, 0x00	; 0
    28b2:	70 48       	sbci	r23, 0x80	; 128
    28b4:	8e 43       	sbci	r24, 0x3E	; 62
    28b6:	90 40       	sbci	r25, 0x00	; 0
    28b8:	2f ef       	ldi	r18, 0xFF	; 255
    28ba:	3f e1       	ldi	r19, 0x1F	; 31
    28bc:	40 e0       	ldi	r20, 0x00	; 0
    28be:	50 e0       	ldi	r21, 0x00	; 0
    28c0:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    28c4:	69 01       	movw	r12, r18
    28c6:	7a 01       	movw	r14, r20
    28c8:	20 91 ee 23 	lds	r18, 0x23EE
    28cc:	30 91 ef 23 	lds	r19, 0x23EF
    28d0:	44 27       	eor	r20, r20
    28d2:	37 fd       	sbrc	r19, 7
    28d4:	40 95       	com	r20
    28d6:	54 2f       	mov	r21, r20
    28d8:	c7 01       	movw	r24, r14
    28da:	b6 01       	movw	r22, r12
    28dc:	09 c1       	rjmp	.+530    	; 0x2af0 <calculate_and_set_velocity+0x86a>
            break;
    28de:	56 ec       	ldi	r21, 0xC6	; 198
    28e0:	e5 2e       	mov	r14, r21
    28e2:	53 e2       	ldi	r21, 0x23	; 35
    28e4:	f5 2e       	mov	r15, r21
    28e6:	8e 01       	movw	r16, r28
    28e8:	0f 5f       	subi	r16, 0xFF	; 255
    28ea:	1f 4f       	sbci	r17, 0xFF	; 255
        	// Read the ADC's if necessary.
        	for (i=0; i<4; i++)
        		if (g_custom_a_x[i])
        			adc[i] = (int32_t)analogRead(0);
        		else
        			adc[i] = (DAQRESOLUTION+1)/2;
    28ec:	61 2c       	mov	r6, r1
    28ee:	40 e1       	ldi	r20, 0x10	; 16
    28f0:	74 2e       	mov	r7, r20
    28f2:	81 2c       	mov	r8, r1
    28f4:	91 2c       	mov	r9, r1
            break;

        case MODE_VEL_CUSTOM: // Custom velocity mode.
        	// Read the ADC's if necessary.
        	for (i=0; i<4; i++)
        		if (g_custom_a_x[i])
    28f6:	f7 01       	movw	r30, r14
    28f8:	81 91       	ld	r24, Z+
    28fa:	91 91       	ld	r25, Z+
    28fc:	7f 01       	movw	r14, r30
    28fe:	00 97       	sbiw	r24, 0x00	; 0
    2900:	59 f0       	breq	.+22     	; 0x2918 <calculate_and_set_velocity+0x692>
        			adc[i] = (int32_t)analogRead(0);
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <analogRead>
    2908:	a0 e0       	ldi	r26, 0x00	; 0
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	f8 01       	movw	r30, r16
    290e:	80 83       	st	Z, r24
    2910:	91 83       	std	Z+1, r25	; 0x01
    2912:	a2 83       	std	Z+2, r26	; 0x02
    2914:	b3 83       	std	Z+3, r27	; 0x03
    2916:	06 c0       	rjmp	.+12     	; 0x2924 <calculate_and_set_velocity+0x69e>
        		else
        			adc[i] = (DAQRESOLUTION+1)/2;
    2918:	d8 01       	movw	r26, r16
    291a:	6d 92       	st	X+, r6
    291c:	7d 92       	st	X+, r7
    291e:	8d 92       	st	X+, r8
    2920:	9c 92       	st	X, r9
    2922:	13 97       	sbiw	r26, 0x03	; 3
    2924:	0c 5f       	subi	r16, 0xFC	; 252
    2926:	1f 4f       	sbci	r17, 0xFF	; 255
            yRate = (int16_t)((int32_t)g_gain_y * HzFromAdc(srcy_filtered)/10) + 5*g_bias_y/2 + g_buf_func_y[g_index_func_y_read];
            break;

        case MODE_VEL_CUSTOM: // Custom velocity mode.
        	// Read the ADC's if necessary.
        	for (i=0; i<4; i++)
    2928:	be ec       	ldi	r27, 0xCE	; 206
    292a:	eb 16       	cp	r14, r27
    292c:	b3 e2       	ldi	r27, 0x23	; 35
    292e:	fb 06       	cpc	r15, r27
    2930:	11 f7       	brne	.-60     	; 0x28f6 <calculate_and_set_velocity+0x670>

        	yRate = (int32_t)g_custom_a_y[0] * HzFromAdc(adc[0]) / 10 +
                    (int32_t)g_custom_a_y[1] * HzFromAdc(adc[1]) / 10 +
                    (int32_t)g_custom_a_y[2] * HzFromAdc(adc[2]) / 10 +
                    (int32_t)g_custom_a_y[3] * HzFromAdc(adc[3]) / 10 +
                    (int32_t)g_custom_a_y[4] * (int32_t)g_buf_func_x[g_index_func_x_read] / 10 +
    2932:	e0 91 de 23 	lds	r30, 0x23DE
    2936:	e9 8b       	std	Y+17, r30	; 0x11
                    (int32_t)g_custom_a_y[5] * (int32_t)g_buf_func_y[g_index_func_y_read] / 10;
    2938:	f0 91 df 23 	lds	r31, 0x23DF
    293c:	fa 8b       	std	Y+18, r31	; 0x12
        			adc[i] = (int32_t)analogRead(0);
        		else
        			adc[i] = (DAQRESOLUTION+1)/2;

        	yRate = (int32_t)g_custom_a_y[0] * HzFromAdc(adc[0]) / 10 +
                    (int32_t)g_custom_a_y[1] * HzFromAdc(adc[1]) / 10 +
    293e:	6d 81       	ldd	r22, Y+5	; 0x05
    2940:	7e 81       	ldd	r23, Y+6	; 0x06
    2942:	8f 81       	ldd	r24, Y+7	; 0x07
    2944:	98 85       	ldd	r25, Y+8	; 0x08
    2946:	28 ee       	ldi	r18, 0xE8	; 232
    2948:	33 e0       	ldi	r19, 0x03	; 3
    294a:	40 e0       	ldi	r20, 0x00	; 0
    294c:	50 e0       	ldi	r21, 0x00	; 0
    294e:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    2952:	60 50       	subi	r22, 0x00	; 0
    2954:	70 48       	sbci	r23, 0x80	; 128
    2956:	8e 43       	sbci	r24, 0x3E	; 62
    2958:	90 40       	sbci	r25, 0x00	; 0
    295a:	3f ef       	ldi	r19, 0xFF	; 255
    295c:	23 2e       	mov	r2, r19
    295e:	3f e1       	ldi	r19, 0x1F	; 31
    2960:	33 2e       	mov	r3, r19
    2962:	41 2c       	mov	r4, r1
    2964:	51 2c       	mov	r5, r1
    2966:	a2 01       	movw	r20, r4
    2968:	91 01       	movw	r18, r2
    296a:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    296e:	79 01       	movw	r14, r18
    2970:	8a 01       	movw	r16, r20
    2972:	20 91 d4 23 	lds	r18, 0x23D4
    2976:	30 91 d5 23 	lds	r19, 0x23D5
    297a:	44 27       	eor	r20, r20
    297c:	37 fd       	sbrc	r19, 7
    297e:	40 95       	com	r20
    2980:	54 2f       	mov	r21, r20
    2982:	c8 01       	movw	r24, r16
    2984:	b7 01       	movw	r22, r14
    2986:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    298a:	2a e0       	ldi	r18, 0x0A	; 10
    298c:	62 2e       	mov	r6, r18
    298e:	71 2c       	mov	r7, r1
    2990:	81 2c       	mov	r8, r1
    2992:	91 2c       	mov	r9, r1
    2994:	a4 01       	movw	r20, r8
    2996:	93 01       	movw	r18, r6
    2998:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    299c:	2b 8b       	std	Y+19, r18	; 0x13
    299e:	3c 8b       	std	Y+20, r19	; 0x14
    29a0:	4d 8b       	std	Y+21, r20	; 0x15
    29a2:	5e 8b       	std	Y+22, r21	; 0x16
        		if (g_custom_a_x[i])
        			adc[i] = (int32_t)analogRead(0);
        		else
        			adc[i] = (DAQRESOLUTION+1)/2;

        	yRate = (int32_t)g_custom_a_y[0] * HzFromAdc(adc[0]) / 10 +
    29a4:	69 81       	ldd	r22, Y+1	; 0x01
    29a6:	7a 81       	ldd	r23, Y+2	; 0x02
    29a8:	8b 81       	ldd	r24, Y+3	; 0x03
    29aa:	9c 81       	ldd	r25, Y+4	; 0x04
    29ac:	28 ee       	ldi	r18, 0xE8	; 232
    29ae:	33 e0       	ldi	r19, 0x03	; 3
    29b0:	40 e0       	ldi	r20, 0x00	; 0
    29b2:	50 e0       	ldi	r21, 0x00	; 0
    29b4:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    29b8:	60 50       	subi	r22, 0x00	; 0
    29ba:	70 48       	sbci	r23, 0x80	; 128
    29bc:	8e 43       	sbci	r24, 0x3E	; 62
    29be:	90 40       	sbci	r25, 0x00	; 0
    29c0:	a2 01       	movw	r20, r4
    29c2:	91 01       	movw	r18, r2
    29c4:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    29c8:	79 01       	movw	r14, r18
    29ca:	8a 01       	movw	r16, r20
    29cc:	20 91 d2 23 	lds	r18, 0x23D2
    29d0:	30 91 d3 23 	lds	r19, 0x23D3
    29d4:	44 27       	eor	r20, r20
    29d6:	37 fd       	sbrc	r19, 7
    29d8:	40 95       	com	r20
    29da:	54 2f       	mov	r21, r20
    29dc:	c8 01       	movw	r24, r16
    29de:	b7 01       	movw	r22, r14
    29e0:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    29e4:	a4 01       	movw	r20, r8
    29e6:	93 01       	movw	r18, r6
    29e8:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    29ec:	0b 89       	ldd	r16, Y+19	; 0x13
    29ee:	1c 89       	ldd	r17, Y+20	; 0x14
    29f0:	02 0f       	add	r16, r18
    29f2:	13 1f       	adc	r17, r19
                    (int32_t)g_custom_a_y[1] * HzFromAdc(adc[1]) / 10 +
                    (int32_t)g_custom_a_y[2] * HzFromAdc(adc[2]) / 10 +
    29f4:	69 85       	ldd	r22, Y+9	; 0x09
    29f6:	7a 85       	ldd	r23, Y+10	; 0x0a
    29f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    29fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    29fc:	28 ee       	ldi	r18, 0xE8	; 232
    29fe:	33 e0       	ldi	r19, 0x03	; 3
    2a00:	40 e0       	ldi	r20, 0x00	; 0
    2a02:	50 e0       	ldi	r21, 0x00	; 0
    2a04:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    2a08:	60 50       	subi	r22, 0x00	; 0
    2a0a:	70 48       	sbci	r23, 0x80	; 128
    2a0c:	8e 43       	sbci	r24, 0x3E	; 62
    2a0e:	90 40       	sbci	r25, 0x00	; 0
    2a10:	a2 01       	movw	r20, r4
    2a12:	91 01       	movw	r18, r2
    2a14:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    2a18:	69 01       	movw	r12, r18
    2a1a:	7a 01       	movw	r14, r20
    2a1c:	20 91 d6 23 	lds	r18, 0x23D6
    2a20:	30 91 d7 23 	lds	r19, 0x23D7
    2a24:	44 27       	eor	r20, r20
    2a26:	37 fd       	sbrc	r19, 7
    2a28:	40 95       	com	r20
    2a2a:	54 2f       	mov	r21, r20
    2a2c:	c7 01       	movw	r24, r14
    2a2e:	b6 01       	movw	r22, r12
    2a30:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    2a34:	a4 01       	movw	r20, r8
    2a36:	93 01       	movw	r18, r6
    2a38:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
        		if (g_custom_a_x[i])
        			adc[i] = (int32_t)analogRead(0);
        		else
        			adc[i] = (DAQRESOLUTION+1)/2;

        	yRate = (int32_t)g_custom_a_y[0] * HzFromAdc(adc[0]) / 10 +
    2a3c:	02 0f       	add	r16, r18
    2a3e:	13 1f       	adc	r17, r19
                    (int32_t)g_custom_a_y[1] * HzFromAdc(adc[1]) / 10 +
                    (int32_t)g_custom_a_y[2] * HzFromAdc(adc[2]) / 10 +
                    (int32_t)g_custom_a_y[3] * HzFromAdc(adc[3]) / 10 +
    2a40:	6d 85       	ldd	r22, Y+13	; 0x0d
    2a42:	7e 85       	ldd	r23, Y+14	; 0x0e
    2a44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a46:	98 89       	ldd	r25, Y+16	; 0x10
    2a48:	28 ee       	ldi	r18, 0xE8	; 232
    2a4a:	33 e0       	ldi	r19, 0x03	; 3
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	50 e0       	ldi	r21, 0x00	; 0
    2a50:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    2a54:	60 50       	subi	r22, 0x00	; 0
    2a56:	70 48       	sbci	r23, 0x80	; 128
    2a58:	8e 43       	sbci	r24, 0x3E	; 62
    2a5a:	90 40       	sbci	r25, 0x00	; 0
    2a5c:	a2 01       	movw	r20, r4
    2a5e:	91 01       	movw	r18, r2
    2a60:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    2a64:	69 01       	movw	r12, r18
    2a66:	7a 01       	movw	r14, r20
    2a68:	20 91 d8 23 	lds	r18, 0x23D8
    2a6c:	30 91 d9 23 	lds	r19, 0x23D9
    2a70:	44 27       	eor	r20, r20
    2a72:	37 fd       	sbrc	r19, 7
    2a74:	40 95       	com	r20
    2a76:	54 2f       	mov	r21, r20
    2a78:	c7 01       	movw	r24, r14
    2a7a:	b6 01       	movw	r22, r12
    2a7c:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    2a80:	a4 01       	movw	r20, r8
    2a82:	93 01       	movw	r18, r6
    2a84:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
        		if (g_custom_a_x[i])
        			adc[i] = (int32_t)analogRead(0);
        		else
        			adc[i] = (DAQRESOLUTION+1)/2;

        	yRate = (int32_t)g_custom_a_y[0] * HzFromAdc(adc[0]) / 10 +
    2a88:	02 0f       	add	r16, r18
    2a8a:	13 1f       	adc	r17, r19
                    (int32_t)g_custom_a_y[1] * HzFromAdc(adc[1]) / 10 +
                    (int32_t)g_custom_a_y[2] * HzFromAdc(adc[2]) / 10 +
                    (int32_t)g_custom_a_y[3] * HzFromAdc(adc[3]) / 10 +
                    (int32_t)g_custom_a_y[4] * (int32_t)g_buf_func_x[g_index_func_x_read] / 10 +
    2a8c:	89 89       	ldd	r24, Y+17	; 0x11
    2a8e:	e8 2f       	mov	r30, r24
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	ee 0f       	add	r30, r30
    2a94:	ff 1f       	adc	r31, r31
    2a96:	e5 50       	subi	r30, 0x05	; 5
    2a98:	fa 4d       	sbci	r31, 0xDA	; 218
    2a9a:	60 81       	ld	r22, Z
    2a9c:	71 81       	ldd	r23, Z+1	; 0x01
    2a9e:	88 27       	eor	r24, r24
    2aa0:	77 fd       	sbrc	r23, 7
    2aa2:	80 95       	com	r24
    2aa4:	98 2f       	mov	r25, r24
    2aa6:	20 91 da 23 	lds	r18, 0x23DA
    2aaa:	30 91 db 23 	lds	r19, 0x23DB
    2aae:	44 27       	eor	r20, r20
    2ab0:	37 fd       	sbrc	r19, 7
    2ab2:	40 95       	com	r20
    2ab4:	54 2f       	mov	r21, r20
    2ab6:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    2aba:	a4 01       	movw	r20, r8
    2abc:	93 01       	movw	r18, r6
    2abe:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
        		if (g_custom_a_x[i])
        			adc[i] = (int32_t)analogRead(0);
        		else
        			adc[i] = (DAQRESOLUTION+1)/2;

        	yRate = (int32_t)g_custom_a_y[0] * HzFromAdc(adc[0]) / 10 +
    2ac2:	02 0f       	add	r16, r18
    2ac4:	13 1f       	adc	r17, r19
                    (int32_t)g_custom_a_y[1] * HzFromAdc(adc[1]) / 10 +
                    (int32_t)g_custom_a_y[2] * HzFromAdc(adc[2]) / 10 +
                    (int32_t)g_custom_a_y[3] * HzFromAdc(adc[3]) / 10 +
                    (int32_t)g_custom_a_y[4] * (int32_t)g_buf_func_x[g_index_func_x_read] / 10 +
                    (int32_t)g_custom_a_y[5] * (int32_t)g_buf_func_y[g_index_func_y_read] / 10;
    2ac6:	aa 89       	ldd	r26, Y+18	; 0x12
    2ac8:	ea 2f       	mov	r30, r26
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	ee 0f       	add	r30, r30
    2ace:	ff 1f       	adc	r31, r31
    2ad0:	e3 52       	subi	r30, 0x23	; 35
    2ad2:	f9 4d       	sbci	r31, 0xD9	; 217
    2ad4:	60 81       	ld	r22, Z
    2ad6:	71 81       	ldd	r23, Z+1	; 0x01
    2ad8:	88 27       	eor	r24, r24
    2ada:	77 fd       	sbrc	r23, 7
    2adc:	80 95       	com	r24
    2ade:	98 2f       	mov	r25, r24
    2ae0:	20 91 dc 23 	lds	r18, 0x23DC
    2ae4:	30 91 dd 23 	lds	r19, 0x23DD
    2ae8:	44 27       	eor	r20, r20
    2aea:	37 fd       	sbrc	r19, 7
    2aec:	40 95       	com	r20
    2aee:	54 2f       	mov	r21, r20
    2af0:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    2af4:	a4 01       	movw	r20, r8
    2af6:	93 01       	movw	r18, r6
    2af8:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
        		if (g_custom_a_x[i])
        			adc[i] = (int32_t)analogRead(0);
        		else
        			adc[i] = (DAQRESOLUTION+1)/2;

        	yRate = (int32_t)g_custom_a_y[0] * HzFromAdc(adc[0]) / 10 +
    2afc:	02 0f       	add	r16, r18
    2afe:	13 1f       	adc	r17, r19
                    (int32_t)g_custom_a_y[1] * HzFromAdc(adc[1]) / 10 +
                    (int32_t)g_custom_a_y[2] * HzFromAdc(adc[2]) / 10 +
                    (int32_t)g_custom_a_y[3] * HzFromAdc(adc[3]) / 10 +
                    (int32_t)g_custom_a_y[4] * (int32_t)g_buf_func_x[g_index_func_x_read] / 10 +
                    (int32_t)g_custom_a_y[5] * (int32_t)g_buf_func_y[g_index_func_y_read] / 10;
        	break;
    2b00:	02 c0       	rjmp	.+4      	; 0x2b06 <calculate_and_set_velocity+0x880>
//
void calculate_and_set_velocity(void)
{
	int8_t         i;
    int16_t        xRate = 0;
    int16_t        yRate = 0;
    2b02:	00 e0       	ldi	r16, 0x00	; 0
    2b04:	10 e0       	ldi	r17, 0x00	; 0
    //in the above x,y_val computation, there is a div by 10 to take away gain scaling
    //so g_gain_x of 10 is 1X gain, g_gain_x of 20 = 2X ...
    
    //here the 2* the rate is because we want 20 = 1V to correspond to 10 fps. could probably do without,
    // and just divide the a2dConvert output by 4, and not scale function_x,y by 2
    if (!g_b_running)
    2b06:	80 91 b0 23 	lds	r24, 0x23B0
    2b0a:	88 23       	and	r24, r24
    2b0c:	21 f4       	brne	.+8      	; 0x2b16 <calculate_and_set_velocity+0x890>
        xRate = yRate = 0;
    2b0e:	00 e0       	ldi	r16, 0x00	; 0
    2b10:	10 e0       	ldi	r17, 0x00	; 0
    2b12:	aa 24       	eor	r10, r10
    2b14:	bb 24       	eor	r11, r11
    
    g_b_xrate_greater_yrate = (xRate >= yRate);
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	a0 16       	cp	r10, r16
    2b1a:	b1 06       	cpc	r11, r17
    2b1c:	0c f4       	brge	.+2      	; 0x2b20 <calculate_and_set_velocity+0x89a>
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	80 93 f4 23 	sts	0x23F4, r24
    set_isr_rates(xRate, yRate);
    2b24:	c5 01       	movw	r24, r10
    2b26:	b8 01       	movw	r22, r16
    2b28:	0e 94 d7 10 	call	0x21ae	; 0x21ae <set_isr_rates>
} // calculate_and_set_velocity()
    2b2c:	66 96       	adiw	r28, 0x16	; 22
    2b2e:	e2 e1       	ldi	r30, 0x12	; 18
    2b30:	0c 94 d3 4b 	jmp	0x97a6	; 0x97a6 <__epilogue_restores__>

00002b34 <set_hwConfig>:
	usePreloadedPattern = 0;
} // set_pattern()


void set_hwConfig(uint8_t config_num)
{
    2b34:	a2 e8       	ldi	r26, 0x82	; 130
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	e0 ea       	ldi	r30, 0xA0	; 160
    2b3a:	f5 e1       	ldi	r31, 0x15	; 21
    2b3c:	0c 94 c4 4b 	jmp	0x9788	; 0x9788 <__prologue_saves__+0x14>
    uint8_t res, b1;
    uint8_t  bufTemp[128];
    uint16_t nbytes_read;
        
    if (config_num < 1000)
        sprintf(str, "cfg%04d.cfg\0", config_num);
    2b40:	05 ef       	ldi	r16, 0xF5	; 245
    2b42:	13 e2       	ldi	r17, 0x23	; 35
    2b44:	00 d0       	rcall	.+0      	; 0x2b46 <set_hwConfig+0x12>
    2b46:	00 d0       	rcall	.+0      	; 0x2b48 <set_hwConfig+0x14>
    2b48:	ed b7       	in	r30, 0x3d	; 61
    2b4a:	fe b7       	in	r31, 0x3e	; 62
    2b4c:	31 96       	adiw	r30, 0x01	; 1
    2b4e:	ad b7       	in	r26, 0x3d	; 61
    2b50:	be b7       	in	r27, 0x3e	; 62
    2b52:	11 96       	adiw	r26, 0x01	; 1
    2b54:	0d 93       	st	X+, r16
    2b56:	1c 93       	st	X, r17
    2b58:	12 97       	sbiw	r26, 0x02	; 2
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e2       	ldi	r19, 0x20	; 32
    2b5e:	22 83       	std	Z+2, r18	; 0x02
    2b60:	33 83       	std	Z+3, r19	; 0x03
    2b62:	84 83       	std	Z+4, r24	; 0x04
    2b64:	15 82       	std	Z+5, r1	; 0x05
    2b66:	0e 94 3a 4e 	call	0x9c74	; 0x9c74 <sprintf>
    else
        xputs(PSTR("config_num is too big.\n"));
            
    if (!g_b_quiet_mode)
    2b6a:	ed b7       	in	r30, 0x3d	; 61
    2b6c:	fe b7       	in	r31, 0x3e	; 62
    2b6e:	36 96       	adiw	r30, 0x06	; 6
    2b70:	ed bf       	out	0x3d, r30	; 61
    2b72:	fe bf       	out	0x3e, r31	; 62
    2b74:	80 91 34 20 	lds	r24, 0x2034
    2b78:	88 23       	and	r24, r24
    2b7a:	a1 f4       	brne	.+40     	; 0x2ba4 <set_hwConfig+0x70>
    	xprintf(PSTR("Opening %s.\n"),str);
    2b7c:	00 d0       	rcall	.+0      	; 0x2b7e <set_hwConfig+0x4a>
    2b7e:	0f 92       	push	r0
    2b80:	8e e3       	ldi	r24, 0x3E	; 62
    2b82:	98 e0       	ldi	r25, 0x08	; 8
    2b84:	ad b7       	in	r26, 0x3d	; 61
    2b86:	be b7       	in	r27, 0x3e	; 62
    2b88:	11 96       	adiw	r26, 0x01	; 1
    2b8a:	8d 93       	st	X+, r24
    2b8c:	9c 93       	st	X, r25
    2b8e:	12 97       	sbiw	r26, 0x02	; 2
    2b90:	13 96       	adiw	r26, 0x03	; 3
    2b92:	0d 93       	st	X+, r16
    2b94:	1c 93       	st	X, r17
    2b96:	14 97       	sbiw	r26, 0x04	; 4
    2b98:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    2b9c:	0f 90       	pop	r0
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	0f 90       	pop	r0
    res = f_open(&g_file_arenaconfig, str, FA_OPEN_EXISTING | FA_READ);
    2ba4:	83 ec       	ldi	r24, 0xC3	; 195
    2ba6:	96 e2       	ldi	r25, 0x26	; 38
    2ba8:	65 ef       	ldi	r22, 0xF5	; 245
    2baa:	73 e2       	ldi	r23, 0x23	; 35
    2bac:	41 e0       	ldi	r20, 0x01	; 1
    2bae:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <f_open>
    if (res == FR_OK)
    2bb2:	88 23       	and	r24, r24
    2bb4:	b9 f5       	brne	.+110    	; 0x2c24 <set_hwConfig+0xf0>
    {
        // looks good, read in the 128 byte panel mapping info
        res = f_read(&g_file_arenaconfig, bufTemp, 128, &nbytes_read);
    2bb6:	8e 01       	movw	r16, r28
    2bb8:	0d 5f       	subi	r16, 0xFD	; 253
    2bba:	1f 4f       	sbci	r17, 0xFF	; 255
    2bbc:	83 ec       	ldi	r24, 0xC3	; 195
    2bbe:	96 e2       	ldi	r25, 0x26	; 38
    2bc0:	b8 01       	movw	r22, r16
    2bc2:	40 e8       	ldi	r20, 0x80	; 128
    2bc4:	50 e0       	ldi	r21, 0x00	; 0
    2bc6:	9e 01       	movw	r18, r28
    2bc8:	2f 5f       	subi	r18, 0xFF	; 255
    2bca:	3f 4f       	sbci	r19, 0xFF	; 255
    2bcc:	0e 94 eb 41 	call	0x83d6	; 0x83d6 <f_read>
        if ((res == FR_OK) && (nbytes_read == 128))
    2bd0:	88 23       	and	r24, r24
    2bd2:	09 f5       	brne	.+66     	; 0x2c16 <set_hwConfig+0xe2>
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd8:	80 38       	cpi	r24, 0x80	; 128
    2bda:	91 05       	cpc	r25, r1
    2bdc:	e1 f4       	brne	.+56     	; 0x2c16 <set_hwConfig+0xe2>
    2bde:	78 01       	movw	r14, r16
    2be0:	09 ef       	ldi	r16, 0xF9	; 249
    2be2:	c0 2e       	mov	r12, r16
    2be4:	04 e2       	ldi	r16, 0x24	; 36
    2be6:	d0 2e       	mov	r13, r16
    2be8:	00 e0       	ldi	r16, 0x00	; 0
    2bea:	10 e0       	ldi	r17, 0x00	; 0
        {
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++)
            {
                g_ch_from_panel[b1] = bufTemp[b1-1]; // panel 0 doesn't exist
    2bec:	f7 01       	movw	r30, r14
    2bee:	61 91       	ld	r22, Z+
    2bf0:	7f 01       	movw	r14, r30
    2bf2:	0f 5f       	subi	r16, 0xFF	; 255
    2bf4:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf6:	d6 01       	movw	r26, r12
    2bf8:	6d 93       	st	X+, r22
    2bfa:	6d 01       	movw	r12, r26
                eeprom_write_byte(arena_config + b1, bufTemp[b1-1]);
    2bfc:	c8 01       	movw	r24, r16
    2bfe:	8f 5f       	subi	r24, 0xFF	; 255
    2c00:	9f 4f       	sbci	r25, 0xFF	; 255
    2c02:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <__eewr_byte_x128a1>
        // looks good, read in the 128 byte panel mapping info
        res = f_read(&g_file_arenaconfig, bufTemp, 128, &nbytes_read);
        if ((res == FR_OK) && (nbytes_read == 128))
        {
            //copy to the mapping tables
            for (b1 = 1; b1 <= 128; b1++)
    2c06:	00 38       	cpi	r16, 0x80	; 128
    2c08:	11 05       	cpc	r17, r1
    2c0a:	81 f7       	brne	.-32     	; 0x2bec <set_hwConfig+0xb8>
            {
                g_ch_from_panel[b1] = bufTemp[b1-1]; // panel 0 doesn't exist
                eeprom_write_byte(arena_config + b1, bufTemp[b1-1]);
            }
            eeprom_write_byte(arena_config, 0x00); //Mark arena configuration file in EEPROM
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	60 e0       	ldi	r22, 0x00	; 0
    2c12:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <__eewr_byte_x128a1>
        }
        f_close(&g_file_arenaconfig);
    2c16:	83 ec       	ldi	r24, 0xC3	; 195
    2c18:	96 e2       	ldi	r25, 0x26	; 38
    2c1a:	0e 94 2b 43 	call	0x8656	; 0x8656 <f_close>
        xputs(PSTR("Successfully load the hardware config file to EEPROM\n"));
    2c1e:	88 e0       	ldi	r24, 0x08	; 8
    2c20:	98 e0       	ldi	r25, 0x08	; 8
    2c22:	02 c0       	rjmp	.+4      	; 0x2c28 <set_hwConfig+0xf4>
    }
    else
    {
        xputs(PSTR("Cannot find the hardware config file on the SD card.\n"));
    2c24:	82 ed       	ldi	r24, 0xD2	; 210
    2c26:	97 e0       	ldi	r25, 0x07	; 7
    2c28:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
    }
} // set_hwConfig()
    2c2c:	ce 57       	subi	r28, 0x7E	; 126
    2c2e:	df 4f       	sbci	r29, 0xFF	; 255
    2c30:	e8 e0       	ldi	r30, 0x08	; 8
    2c32:	0c 94 dd 4b 	jmp	0x97ba	; 0x97ba <__epilogue_restores__+0x14>

00002c36 <i2cMasterSend>:
	g_y=0;
} // benchmark_pattern()


void i2cMasterSend(uint8_t panel, uint8_t len, uint8_t *data)
{
    2c36:	1f 93       	push	r17
    2c38:	cf 93       	push	r28
    2c3a:	df 93       	push	r29
    2c3c:	16 2f       	mov	r17, r22
    2c3e:	ea 01       	movw	r28, r20
    uint8_t ch;
    uint8_t addr;
    TWI_Master_t *twi;
    
    if (panel == 0)
    2c40:	88 23       	and	r24, r24
    2c42:	49 f5       	brne	.+82     	; 0x2c96 <i2cMasterSend+0x60>
    {
        while (twi1.status != TWIM_STATUS_READY)
    2c44:	80 91 0f 28 	lds	r24, 0x280F
    2c48:	88 23       	and	r24, r24
    2c4a:	e1 f7       	brne	.-8      	; 0x2c44 <i2cMasterSend+0xe>
            ; // Do nothing.
        TWI_MasterWrite(&twi1, 0, data, len);
    2c4c:	82 e0       	ldi	r24, 0x02	; 2
    2c4e:	98 e2       	ldi	r25, 0x28	; 40
    2c50:	60 e0       	ldi	r22, 0x00	; 0
    2c52:	ae 01       	movw	r20, r28
    2c54:	21 2f       	mov	r18, r17
    2c56:	0e 94 f4 39 	call	0x73e8	; 0x73e8 <TWI_MasterWrite>
        while (twi2.status != TWIM_STATUS_READY)
    2c5a:	80 91 61 28 	lds	r24, 0x2861
    2c5e:	88 23       	and	r24, r24
    2c60:	e1 f7       	brne	.-8      	; 0x2c5a <i2cMasterSend+0x24>
            ; // Do nothing.
        TWI_MasterWrite(&twi2, 0, data, len);
    2c62:	84 e5       	ldi	r24, 0x54	; 84
    2c64:	98 e2       	ldi	r25, 0x28	; 40
    2c66:	60 e0       	ldi	r22, 0x00	; 0
    2c68:	ae 01       	movw	r20, r28
    2c6a:	21 2f       	mov	r18, r17
    2c6c:	0e 94 f4 39 	call	0x73e8	; 0x73e8 <TWI_MasterWrite>
        while (twi3.status != TWIM_STATUS_READY)
    2c70:	80 91 1e 28 	lds	r24, 0x281E
    2c74:	88 23       	and	r24, r24
    2c76:	e1 f7       	brne	.-8      	; 0x2c70 <i2cMasterSend+0x3a>
            ; // Do nothing.
        TWI_MasterWrite(&twi3, 0, data, len);
    2c78:	81 e1       	ldi	r24, 0x11	; 17
    2c7a:	98 e2       	ldi	r25, 0x28	; 40
    2c7c:	60 e0       	ldi	r22, 0x00	; 0
    2c7e:	ae 01       	movw	r20, r28
    2c80:	21 2f       	mov	r18, r17
    2c82:	0e 94 f4 39 	call	0x73e8	; 0x73e8 <TWI_MasterWrite>
        while (twi4.status != TWIM_STATUS_READY)
    2c86:	80 91 00 28 	lds	r24, 0x2800
    2c8a:	88 23       	and	r24, r24
    2c8c:	e1 f7       	brne	.-8      	; 0x2c86 <i2cMasterSend+0x50>
            ; // Do nothing.
        TWI_MasterWrite(&twi4, 0, data, len);
    2c8e:	83 ef       	ldi	r24, 0xF3	; 243
    2c90:	97 e2       	ldi	r25, 0x27	; 39
    2c92:	60 e0       	ldi	r22, 0x00	; 0
    2c94:	1c c0       	rjmp	.+56     	; 0x2cce <i2cMasterSend+0x98>
    }
    else
    {
        // look up the actual panel address and channel
        ch = g_ch_from_panel[panel];
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	fc 01       	movw	r30, r24
    2c9a:	e8 50       	subi	r30, 0x08	; 8
    2c9c:	fb 4d       	sbci	r31, 0xDB	; 219
    2c9e:	e0 81       	ld	r30, Z
        addr = g_adr_from_panel[panel];
    2ca0:	87 58       	subi	r24, 0x87	; 135
    2ca2:	9a 4d       	sbci	r25, 0xDA	; 218
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	6c 91       	ld	r22, X
        if (ch != 0)
    2ca8:	ee 23       	and	r30, r30
    2caa:	a9 f0       	breq	.+42     	; 0x2cd6 <i2cMasterSend+0xa0>
    2cac:	e1 50       	subi	r30, 0x01	; 1
    2cae:	e4 30       	cpi	r30, 0x04	; 4
    2cb0:	40 f4       	brcc	.+16     	; 0x2cc2 <i2cMasterSend+0x8c>
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	ee 0f       	add	r30, r30
    2cb6:	ff 1f       	adc	r31, r31
    2cb8:	e4 59       	subi	r30, 0x94	; 148
    2cba:	fc 4d       	sbci	r31, 0xDC	; 220
    2cbc:	80 81       	ld	r24, Z
    2cbe:	91 81       	ldd	r25, Z+1	; 0x01
    2cc0:	02 c0       	rjmp	.+4      	; 0x2cc6 <i2cMasterSend+0x90>
    2cc2:	82 e0       	ldi	r24, 0x02	; 2
    2cc4:	98 e2       	ldi	r25, 0x28	; 40
                default: // send to twi1
                    twi = &twi1;
                    break;
            }
            
            while (twi->status != TWIM_STATUS_READY)
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	25 85       	ldd	r18, Z+13	; 0x0d
    2cca:	22 23       	and	r18, r18
    2ccc:	e1 f7       	brne	.-8      	; 0x2cc6 <i2cMasterSend+0x90>
                ; // Do nothing.
            TWI_MasterWrite(twi, addr, data, len);
    2cce:	ae 01       	movw	r20, r28
    2cd0:	21 2f       	mov	r18, r17
    2cd2:	0e 94 f4 39 	call	0x73e8	; 0x73e8 <TWI_MasterWrite>
        }
    }
} // i2cMasterSend()
    2cd6:	df 91       	pop	r29
    2cd8:	cf 91       	pop	r28
    2cda:	1f 91       	pop	r17
    2cdc:	08 95       	ret

00002cde <fetch_and_display_frame>:

// fetch_and_display_frame()
//   Fetch the current frame from the SD-card and display it.
//
void fetch_and_display_frame(FIL *pFile, uint16_t x, uint16_t y)
{
    2cde:	ac e0       	ldi	r26, 0x0C	; 12
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	e5 e7       	ldi	r30, 0x75	; 117
    2ce4:	f6 e1       	ldi	r31, 0x16	; 22
    2ce6:	0c 94 ba 4b 	jmp	0x9774	; 0x9774 <__prologue_saves__>
    2cea:	5c 01       	movw	r10, r24
    2cec:	1b 01       	movw	r2, r22
    2cee:	4f 83       	std	Y+7, r20	; 0x07
    2cf0:	58 87       	std	Y+8, r21	; 0x08
		digitalWrite(DIO_FRAMEBUSY, LOW); // set line low at end of frame write
    }
    else
    	ledToggle(3); // Frame index is invalid, i.e. out of range.
    
} // fetch_and_display_frame()
    2cf2:	ed b6       	in	r14, 0x3d	; 61
    2cf4:	fe b6       	in	r15, 0x3e	; 62
    2cf6:	e9 86       	std	Y+9, r14	; 0x09
    2cf8:	fa 86       	std	Y+10, r15	; 0x0a
    uint8_t   tempVal;
    uint8_t   bitIndex;
    uint8_t   arrayIndex;
    

    index_frame = FRAMEFROMXY(x, y);
    2cfa:	80 91 39 20 	lds	r24, 0x2039
    2cfe:	90 91 3a 20 	lds	r25, 0x203A
    2d02:	48 9f       	mul	r20, r24
    2d04:	60 01       	movw	r12, r0
    2d06:	49 9f       	mul	r20, r25
    2d08:	d0 0c       	add	r13, r0
    2d0a:	58 9f       	mul	r21, r24
    2d0c:	d0 0c       	add	r13, r0
    2d0e:	11 24       	eor	r1, r1
    2d10:	c6 0e       	add	r12, r22
    2d12:	d7 1e       	adc	r13, r23
    if (index_frame < g_n_frames)
    2d14:	80 91 b8 23 	lds	r24, 0x23B8
    2d18:	90 91 b9 23 	lds	r25, 0x23B9
    2d1c:	c8 16       	cp	r12, r24
    2d1e:	d9 06       	cpc	r13, r25
    2d20:	08 f0       	brcs	.+2      	; 0x2d24 <fetch_and_display_frame+0x46>
    2d22:	96 c2       	rjmp	.+1324   	; 0x3250 <fetch_and_display_frame+0x572>
    2d24:	eb 86       	std	Y+11, r14	; 0x0b
    2d26:	fc 86       	std	Y+12, r15	; 0x0c
    {
		digitalWrite(DIO_FRAMEBUSY, HIGH); // Set line high at start of frame write
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	61 e0       	ldi	r22, 0x01	; 1
    2d2c:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <digitalWrite>
		// If count gets bigger than 1 -> frame skipped
		if (g_display_count > 1)
    2d30:	80 91 b2 23 	lds	r24, 0x23B2
    2d34:	82 30       	cpi	r24, 0x02	; 2
    2d36:	18 f0       	brcs	.+6      	; 0x2d3e <fetch_and_display_frame+0x60>
			ledToggle(1);
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	0e 94 2b 2c 	call	0x5856	; 0x5856 <ledToggle>
		g_display_count = 0;
    2d3e:	10 92 b2 23 	sts	0x23B2, r1
		nbytes_per_frame = g_num_panels * g_bytes_per_panel;
    2d42:	90 91 fa 25 	lds	r25, 0x25FA
    2d46:	80 91 b5 23 	lds	r24, 0x23B5
    2d4a:	98 9f       	mul	r25, r24
    2d4c:	30 01       	movw	r6, r0
    2d4e:	11 24       	eor	r1, r1

		if (nbytes_per_frame%512 != 0)
    2d50:	c3 01       	movw	r24, r6
    2d52:	91 70       	andi	r25, 0x01	; 1
    2d54:	67 2d       	mov	r22, r7
    2d56:	66 95       	lsr	r22
    2d58:	00 97       	sbiw	r24, 0x00	; 0
    2d5a:	09 f0       	breq	.+2      	; 0x2d5e <fetch_and_display_frame+0x80>
			block_per_frame = nbytes_per_frame/512 + 1;
    2d5c:	6f 5f       	subi	r22, 0xFF	; 255
		else
			block_per_frame = nbytes_per_frame/512;  //for gs=4 and rc=0


		uint8_t  frameBuff[nbytes_per_frame];
    2d5e:	8d b7       	in	r24, 0x3d	; 61
    2d60:	9e b7       	in	r25, 0x3e	; 62
    2d62:	86 19       	sub	r24, r6
    2d64:	97 09       	sbc	r25, r7
    2d66:	8d bf       	out	0x3d, r24	; 61
    2d68:	9e bf       	out	0x3e, r25	; 62
    2d6a:	4d b6       	in	r4, 0x3d	; 61
    2d6c:	5e b6       	in	r5, 0x3e	; 62
    2d6e:	08 94       	sec
    2d70:	41 1c       	adc	r4, r1
    2d72:	51 1c       	adc	r5, r1
		offset = NBYTES_HEADER + (uint32_t)index_frame * 512 * block_per_frame;
    2d74:	70 e0       	ldi	r23, 0x00	; 0
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	96 01       	movw	r18, r12
    2d7c:	40 e0       	ldi	r20, 0x00	; 0
    2d7e:	50 e0       	ldi	r21, 0x00	; 0
    2d80:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    2d84:	7b 01       	movw	r14, r22
    2d86:	8c 01       	movw	r16, r24
    2d88:	08 94       	sec
    2d8a:	e1 1c       	adc	r14, r1
    2d8c:	f1 1c       	adc	r15, r1
    2d8e:	01 1d       	adc	r16, r1
    2d90:	11 1d       	adc	r17, r1
    2d92:	49 e0       	ldi	r20, 0x09	; 9
    2d94:	ee 0c       	add	r14, r14
    2d96:	ff 1c       	adc	r15, r15
    2d98:	00 1f       	adc	r16, r16
    2d9a:	11 1f       	adc	r17, r17
    2d9c:	4a 95       	dec	r20
    2d9e:	d1 f7       	brne	.-12     	; 0x2d94 <fetch_and_display_frame+0xb6>

		fresult = f_lseek(pFile, offset);
    2da0:	c5 01       	movw	r24, r10
    2da2:	b8 01       	movw	r22, r16
    2da4:	a7 01       	movw	r20, r14
    2da6:	0e 94 39 43 	call	0x8672	; 0x8672 <f_lseek>
    2daa:	4c 01       	movw	r8, r24
		if ((fresult == FR_OK) && (pFile->fptr == offset))
    2dac:	00 97       	sbiw	r24, 0x00	; 0
    2dae:	09 f0       	breq	.+2      	; 0x2db2 <fetch_and_display_frame+0xd4>
    2db0:	ac c1       	rjmp	.+856    	; 0x310a <fetch_and_display_frame+0x42c>
    2db2:	f5 01       	movw	r30, r10
    2db4:	86 81       	ldd	r24, Z+6	; 0x06
    2db6:	97 81       	ldd	r25, Z+7	; 0x07
    2db8:	a0 85       	ldd	r26, Z+8	; 0x08
    2dba:	b1 85       	ldd	r27, Z+9	; 0x09
    2dbc:	8e 15       	cp	r24, r14
    2dbe:	9f 05       	cpc	r25, r15
    2dc0:	a0 07       	cpc	r26, r16
    2dc2:	b1 07       	cpc	r27, r17
    2dc4:	09 f0       	breq	.+2      	; 0x2dc8 <fetch_and_display_frame+0xea>
    2dc6:	a1 c1       	rjmp	.+834    	; 0x310a <fetch_and_display_frame+0x42c>
		{
			fresult = f_read(pFile, frameBuff, nbytes_per_frame, &nbytes_read);
    2dc8:	c5 01       	movw	r24, r10
    2dca:	b2 01       	movw	r22, r4
    2dcc:	a3 01       	movw	r20, r6
    2dce:	9e 01       	movw	r18, r28
    2dd0:	2f 5f       	subi	r18, 0xFF	; 255
    2dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd4:	0e 94 eb 41 	call	0x83d6	; 0x83d6 <f_read>
    2dd8:	8c 01       	movw	r16, r24
			if ((fresult == FR_OK) && (nbytes_read == nbytes_per_frame))
    2dda:	00 97       	sbiw	r24, 0x00	; 0
    2ddc:	09 f0       	breq	.+2      	; 0x2de0 <fetch_and_display_frame+0x102>
    2dde:	6d c1       	rjmp	.+730    	; 0x30ba <fetch_and_display_frame+0x3dc>
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	9a 81       	ldd	r25, Y+2	; 0x02
    2de4:	86 15       	cp	r24, r6
    2de6:	97 05       	cpc	r25, r7
    2de8:	09 f0       	breq	.+2      	; 0x2dec <fetch_and_display_frame+0x10e>
    2dea:	67 c1       	rjmp	.+718    	; 0x30ba <fetch_and_display_frame+0x3dc>
    2dec:	aa 24       	eor	r10, r10
    2dee:	a3 94       	inc	r10
														if( (FLASH[24+1] == FLASH[24+2])&&(FLASH[24+3] == FLASH[24+4])&&(FLASH[24+5] == FLASH[24+6]) ){
															grayscale[0] = FLASH[0];
															grayscale[1] = FLASH[8];
															grayscale[2] = FLASH[16];
															grayscale[3] = FLASH[24];
															i2cMasterSend(panel_index, 4, &grayscale[0]); //send a 4 byte packet with the correct row_compressed value.
    2df0:	33 e0       	ldi	r19, 0x03	; 3
    2df2:	c3 2e       	mov	r12, r19
    2df4:	d1 2c       	mov	r13, r1
    2df6:	cc 0e       	add	r12, r28
    2df8:	dd 1e       	adc	r13, r29
    2dfa:	59 c1       	rjmp	.+690    	; 0x30ae <fetch_and_display_frame+0x3d0>
			if ((fresult == FR_OK) && (nbytes_read == nbytes_per_frame))
			{

				for (panel_index=1; panel_index <= g_num_panels; panel_index++)
				{
					FLASH = &frameBuff[(panel_index-1)*g_bytes_per_panel]; // Point to the proper data.
    2dfc:	40 91 fa 25 	lds	r20, 0x25FA
    2e00:	8a 2d       	mov	r24, r10
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	24 2f       	mov	r18, r20
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	82 9f       	mul	r24, r18
    2e0c:	70 01       	movw	r14, r0
    2e0e:	83 9f       	mul	r24, r19
    2e10:	f0 0c       	add	r15, r0
    2e12:	92 9f       	mul	r25, r18
    2e14:	f0 0c       	add	r15, r0
    2e16:	11 24       	eor	r1, r1
    2e18:	82 01       	movw	r16, r4
    2e1a:	0e 0d       	add	r16, r14
    2e1c:	1f 1d       	adc	r17, r15

					packet_sent = FALSE; //used with compression to simplify conditionals.
					if (g_ident_compress)
    2e1e:	80 91 b4 23 	lds	r24, 0x23B4
    2e22:	88 23       	and	r24, r24
    2e24:	09 f4       	brne	.+2      	; 0x2e28 <fetch_and_display_frame+0x14a>
    2e26:	3c c1       	rjmp	.+632    	; 0x30a0 <fetch_and_display_frame+0x3c2>
					{
						if (g_bytes_per_panel == 8)
    2e28:	48 30       	cpi	r20, 0x08	; 8
    2e2a:	61 f5       	brne	.+88     	; 0x2e84 <fetch_and_display_frame+0x1a6>
						{
							if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) )
    2e2c:	d8 01       	movw	r26, r16
    2e2e:	8c 91       	ld	r24, X
    2e30:	11 96       	adiw	r26, 0x01	; 1
    2e32:	9c 91       	ld	r25, X
    2e34:	11 97       	sbiw	r26, 0x01	; 1
    2e36:	89 17       	cp	r24, r25
    2e38:	29 f5       	brne	.+74     	; 0x2e84 <fetch_and_display_frame+0x1a6>
    2e3a:	12 96       	adiw	r26, 0x02	; 2
    2e3c:	3c 91       	ld	r19, X
    2e3e:	12 97       	sbiw	r26, 0x02	; 2
    2e40:	13 96       	adiw	r26, 0x03	; 3
    2e42:	9c 91       	ld	r25, X
    2e44:	13 97       	sbiw	r26, 0x03	; 3
    2e46:	39 17       	cp	r19, r25
    2e48:	e9 f4       	brne	.+58     	; 0x2e84 <fetch_and_display_frame+0x1a6>
    2e4a:	14 96       	adiw	r26, 0x04	; 4
    2e4c:	2c 91       	ld	r18, X
    2e4e:	14 97       	sbiw	r26, 0x04	; 4
    2e50:	15 96       	adiw	r26, 0x05	; 5
    2e52:	9c 91       	ld	r25, X
    2e54:	15 97       	sbiw	r26, 0x05	; 5
    2e56:	29 17       	cp	r18, r25
    2e58:	a9 f4       	brne	.+42     	; 0x2e84 <fetch_and_display_frame+0x1a6>
    2e5a:	16 96       	adiw	r26, 0x06	; 6
    2e5c:	9c 91       	ld	r25, X
    2e5e:	16 97       	sbiw	r26, 0x06	; 6
    2e60:	17 96       	adiw	r26, 0x07	; 7
    2e62:	4c 91       	ld	r20, X
    2e64:	17 97       	sbiw	r26, 0x07	; 7
    2e66:	94 17       	cp	r25, r20
    2e68:	69 f4       	brne	.+26     	; 0x2e84 <fetch_and_display_frame+0x1a6>
							{
								if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) )
    2e6a:	83 17       	cp	r24, r19
    2e6c:	59 f4       	brne	.+22     	; 0x2e84 <fetch_and_display_frame+0x1a6>
    2e6e:	82 17       	cp	r24, r18
    2e70:	49 f4       	brne	.+18     	; 0x2e84 <fetch_and_display_frame+0x1a6>
    2e72:	89 17       	cp	r24, r25
    2e74:	39 f4       	brne	.+14     	; 0x2e84 <fetch_and_display_frame+0x1a6>
								{
									i2cMasterSend(panel_index, 1, &FLASH[0]); //send a 1 byte packet with the correct row_compressed value.
    2e76:	8a 2d       	mov	r24, r10
    2e78:	61 e0       	ldi	r22, 0x01	; 1
    2e7a:	a8 01       	movw	r20, r16
    2e7c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <i2cMasterSend>
									packet_sent = TRUE;
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	01 c0       	rjmp	.+2      	; 0x2e86 <fetch_and_display_frame+0x1a8>

				for (panel_index=1; panel_index <= g_num_panels; panel_index++)
				{
					FLASH = &frameBuff[(panel_index-1)*g_bytes_per_panel]; // Point to the proper data.

					packet_sent = FALSE; //used with compression to simplify conditionals.
    2e84:	80 e0       	ldi	r24, 0x00	; 0
									packet_sent = TRUE;
								} //end of second round of comparisons
							} //end of first round of byte comparisons
						} // end of check if g_bytes_per_panel is 8

						if (g_bytes_per_panel == 24)
    2e86:	90 91 fa 25 	lds	r25, 0x25FA
    2e8a:	98 31       	cpi	r25, 0x18	; 24
    2e8c:	09 f0       	breq	.+2      	; 0x2e90 <fetch_and_display_frame+0x1b2>
    2e8e:	52 c0       	rjmp	.+164    	; 0x2f34 <fetch_and_display_frame+0x256>
						{
							if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    2e90:	f2 01       	movw	r30, r4
    2e92:	ee 0d       	add	r30, r14
    2e94:	ff 1d       	adc	r31, r15
    2e96:	30 81       	ld	r19, Z
    2e98:	f8 01       	movw	r30, r16
    2e9a:	91 81       	ldd	r25, Z+1	; 0x01
    2e9c:	39 17       	cp	r19, r25
    2e9e:	09 f0       	breq	.+2      	; 0x2ea2 <fetch_and_display_frame+0x1c4>
    2ea0:	49 c0       	rjmp	.+146    	; 0x2f34 <fetch_and_display_frame+0x256>
    2ea2:	42 81       	ldd	r20, Z+2	; 0x02
    2ea4:	93 81       	ldd	r25, Z+3	; 0x03
    2ea6:	49 17       	cp	r20, r25
    2ea8:	09 f0       	breq	.+2      	; 0x2eac <fetch_and_display_frame+0x1ce>
    2eaa:	44 c0       	rjmp	.+136    	; 0x2f34 <fetch_and_display_frame+0x256>
    2eac:	24 81       	ldd	r18, Z+4	; 0x04
    2eae:	95 81       	ldd	r25, Z+5	; 0x05
    2eb0:	29 17       	cp	r18, r25
    2eb2:	09 f0       	breq	.+2      	; 0x2eb6 <fetch_and_display_frame+0x1d8>
    2eb4:	3f c0       	rjmp	.+126    	; 0x2f34 <fetch_and_display_frame+0x256>
    2eb6:	96 81       	ldd	r25, Z+6	; 0x06
    2eb8:	57 81       	ldd	r21, Z+7	; 0x07
    2eba:	95 17       	cp	r25, r21
    2ebc:	d9 f5       	brne	.+118    	; 0x2f34 <fetch_and_display_frame+0x256>
								if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    2ebe:	34 17       	cp	r19, r20
    2ec0:	c9 f5       	brne	.+114    	; 0x2f34 <fetch_and_display_frame+0x256>
    2ec2:	32 17       	cp	r19, r18
    2ec4:	b9 f5       	brne	.+110    	; 0x2f34 <fetch_and_display_frame+0x256>
    2ec6:	39 17       	cp	r19, r25
    2ec8:	a9 f5       	brne	.+106    	; 0x2f34 <fetch_and_display_frame+0x256>
									if( (FLASH[8+0] == FLASH[8+1])&&(FLASH[8+2] == FLASH[8+3])&&(FLASH[8+4] == FLASH[8+5])&&(FLASH[8+6] == FLASH[8+7]) ){
    2eca:	20 85       	ldd	r18, Z+8	; 0x08
    2ecc:	91 85       	ldd	r25, Z+9	; 0x09
    2ece:	29 17       	cp	r18, r25
    2ed0:	89 f5       	brne	.+98     	; 0x2f34 <fetch_and_display_frame+0x256>
    2ed2:	52 85       	ldd	r21, Z+10	; 0x0a
    2ed4:	93 85       	ldd	r25, Z+11	; 0x0b
    2ed6:	59 17       	cp	r21, r25
    2ed8:	69 f5       	brne	.+90     	; 0x2f34 <fetch_and_display_frame+0x256>
    2eda:	44 85       	ldd	r20, Z+12	; 0x0c
    2edc:	95 85       	ldd	r25, Z+13	; 0x0d
    2ede:	49 17       	cp	r20, r25
    2ee0:	49 f5       	brne	.+82     	; 0x2f34 <fetch_and_display_frame+0x256>
    2ee2:	96 85       	ldd	r25, Z+14	; 0x0e
    2ee4:	67 85       	ldd	r22, Z+15	; 0x0f
    2ee6:	96 17       	cp	r25, r22
    2ee8:	29 f5       	brne	.+74     	; 0x2f34 <fetch_and_display_frame+0x256>
										if( (FLASH[8+1] == FLASH[8+2])&&(FLASH[8+3] == FLASH[8+4])&&(FLASH[8+5] == FLASH[8+6]) ){
    2eea:	25 17       	cp	r18, r21
    2eec:	19 f5       	brne	.+70     	; 0x2f34 <fetch_and_display_frame+0x256>
    2eee:	24 17       	cp	r18, r20
    2ef0:	09 f5       	brne	.+66     	; 0x2f34 <fetch_and_display_frame+0x256>
    2ef2:	29 17       	cp	r18, r25
    2ef4:	f9 f4       	brne	.+62     	; 0x2f34 <fetch_and_display_frame+0x256>
											if( (FLASH[16+0] == FLASH[16+1])&&(FLASH[16+2] == FLASH[16+3])&&(FLASH[16+4] == FLASH[16+5])&&(FLASH[16+6] == FLASH[16+7]) ){
    2ef6:	90 89       	ldd	r25, Z+16	; 0x10
    2ef8:	41 89       	ldd	r20, Z+17	; 0x11
    2efa:	94 17       	cp	r25, r20
    2efc:	d9 f4       	brne	.+54     	; 0x2f34 <fetch_and_display_frame+0x256>
    2efe:	62 89       	ldd	r22, Z+18	; 0x12
    2f00:	43 89       	ldd	r20, Z+19	; 0x13
    2f02:	64 17       	cp	r22, r20
    2f04:	b9 f4       	brne	.+46     	; 0x2f34 <fetch_and_display_frame+0x256>
    2f06:	54 89       	ldd	r21, Z+20	; 0x14
    2f08:	45 89       	ldd	r20, Z+21	; 0x15
    2f0a:	54 17       	cp	r21, r20
    2f0c:	99 f4       	brne	.+38     	; 0x2f34 <fetch_and_display_frame+0x256>
    2f0e:	46 89       	ldd	r20, Z+22	; 0x16
    2f10:	77 89       	ldd	r23, Z+23	; 0x17
    2f12:	47 17       	cp	r20, r23
    2f14:	79 f4       	brne	.+30     	; 0x2f34 <fetch_and_display_frame+0x256>
												if( (FLASH[16+1] == FLASH[16+2])&&(FLASH[16+3] == FLASH[16+4])&&(FLASH[16+5] == FLASH[16+6]) ){
    2f16:	96 17       	cp	r25, r22
    2f18:	69 f4       	brne	.+26     	; 0x2f34 <fetch_and_display_frame+0x256>
    2f1a:	95 17       	cp	r25, r21
    2f1c:	59 f4       	brne	.+22     	; 0x2f34 <fetch_and_display_frame+0x256>
    2f1e:	94 17       	cp	r25, r20
    2f20:	49 f4       	brne	.+18     	; 0x2f34 <fetch_and_display_frame+0x256>
													grayscale[0] = FLASH[0];
    2f22:	3b 83       	std	Y+3, r19	; 0x03
													grayscale[1] = FLASH[8];
    2f24:	2c 83       	std	Y+4, r18	; 0x04
													grayscale[2] = FLASH[16];
    2f26:	9d 83       	std	Y+5, r25	; 0x05
													i2cMasterSend(panel_index, 3, &grayscale[0]); //send a 3 byte packet with the correct row_compressed value.
    2f28:	8a 2d       	mov	r24, r10
    2f2a:	63 e0       	ldi	r22, 0x03	; 3
    2f2c:	a6 01       	movw	r20, r12
    2f2e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <i2cMasterSend>
													packet_sent = TRUE;
    2f32:	81 e0       	ldi	r24, 0x01	; 1
									} //end of third round of comparisons
								} //end of second round of comparisons
							} //end of first round of byte comparisons
						} // end of check if g_bytes_per_panel is 24

						if (g_bytes_per_panel == 32){
    2f34:	90 91 fa 25 	lds	r25, 0x25FA
    2f38:	90 32       	cpi	r25, 0x20	; 32
    2f3a:	09 f0       	breq	.+2      	; 0x2f3e <fetch_and_display_frame+0x260>
    2f3c:	af c0       	rjmp	.+350    	; 0x309c <fetch_and_display_frame+0x3be>
							if( (FLASH[0] == FLASH[1])&&(FLASH[2] == FLASH[3])&&(FLASH[4] == FLASH[5])&&(FLASH[6] == FLASH[7]) ){
    2f3e:	f2 01       	movw	r30, r4
    2f40:	ee 0d       	add	r30, r14
    2f42:	ff 1d       	adc	r31, r15
    2f44:	40 81       	ld	r20, Z
    2f46:	d8 01       	movw	r26, r16
    2f48:	11 96       	adiw	r26, 0x01	; 1
    2f4a:	9c 91       	ld	r25, X
    2f4c:	11 97       	sbiw	r26, 0x01	; 1
    2f4e:	49 17       	cp	r20, r25
    2f50:	09 f0       	breq	.+2      	; 0x2f54 <fetch_and_display_frame+0x276>
    2f52:	a4 c0       	rjmp	.+328    	; 0x309c <fetch_and_display_frame+0x3be>
    2f54:	12 96       	adiw	r26, 0x02	; 2
    2f56:	3c 91       	ld	r19, X
    2f58:	12 97       	sbiw	r26, 0x02	; 2
    2f5a:	13 96       	adiw	r26, 0x03	; 3
    2f5c:	9c 91       	ld	r25, X
    2f5e:	13 97       	sbiw	r26, 0x03	; 3
    2f60:	39 17       	cp	r19, r25
    2f62:	09 f0       	breq	.+2      	; 0x2f66 <fetch_and_display_frame+0x288>
    2f64:	9b c0       	rjmp	.+310    	; 0x309c <fetch_and_display_frame+0x3be>
    2f66:	14 96       	adiw	r26, 0x04	; 4
    2f68:	2c 91       	ld	r18, X
    2f6a:	14 97       	sbiw	r26, 0x04	; 4
    2f6c:	15 96       	adiw	r26, 0x05	; 5
    2f6e:	9c 91       	ld	r25, X
    2f70:	15 97       	sbiw	r26, 0x05	; 5
    2f72:	29 17       	cp	r18, r25
    2f74:	09 f0       	breq	.+2      	; 0x2f78 <fetch_and_display_frame+0x29a>
    2f76:	92 c0       	rjmp	.+292    	; 0x309c <fetch_and_display_frame+0x3be>
    2f78:	16 96       	adiw	r26, 0x06	; 6
    2f7a:	9c 91       	ld	r25, X
    2f7c:	16 97       	sbiw	r26, 0x06	; 6
    2f7e:	17 96       	adiw	r26, 0x07	; 7
    2f80:	5c 91       	ld	r21, X
    2f82:	17 97       	sbiw	r26, 0x07	; 7
    2f84:	95 17       	cp	r25, r21
    2f86:	09 f0       	breq	.+2      	; 0x2f8a <fetch_and_display_frame+0x2ac>
    2f88:	89 c0       	rjmp	.+274    	; 0x309c <fetch_and_display_frame+0x3be>
								if( (FLASH[1] == FLASH[2])&&(FLASH[3] == FLASH[4])&&(FLASH[5] == FLASH[6]) ){
    2f8a:	43 17       	cp	r20, r19
    2f8c:	09 f0       	breq	.+2      	; 0x2f90 <fetch_and_display_frame+0x2b2>
    2f8e:	86 c0       	rjmp	.+268    	; 0x309c <fetch_and_display_frame+0x3be>
    2f90:	42 17       	cp	r20, r18
    2f92:	09 f0       	breq	.+2      	; 0x2f96 <fetch_and_display_frame+0x2b8>
    2f94:	83 c0       	rjmp	.+262    	; 0x309c <fetch_and_display_frame+0x3be>
    2f96:	49 17       	cp	r20, r25
    2f98:	09 f0       	breq	.+2      	; 0x2f9c <fetch_and_display_frame+0x2be>
    2f9a:	80 c0       	rjmp	.+256    	; 0x309c <fetch_and_display_frame+0x3be>
									if( (FLASH[8+0] == FLASH[8+1])&&(FLASH[8+2] == FLASH[8+3])&&(FLASH[8+4] == FLASH[8+5])&&(FLASH[8+6] == FLASH[8+7]) ){
    2f9c:	18 96       	adiw	r26, 0x08	; 8
    2f9e:	3c 91       	ld	r19, X
    2fa0:	18 97       	sbiw	r26, 0x08	; 8
    2fa2:	19 96       	adiw	r26, 0x09	; 9
    2fa4:	9c 91       	ld	r25, X
    2fa6:	19 97       	sbiw	r26, 0x09	; 9
    2fa8:	39 17       	cp	r19, r25
    2faa:	09 f0       	breq	.+2      	; 0x2fae <fetch_and_display_frame+0x2d0>
    2fac:	77 c0       	rjmp	.+238    	; 0x309c <fetch_and_display_frame+0x3be>
    2fae:	1a 96       	adiw	r26, 0x0a	; 10
    2fb0:	5c 91       	ld	r21, X
    2fb2:	1a 97       	sbiw	r26, 0x0a	; 10
    2fb4:	1b 96       	adiw	r26, 0x0b	; 11
    2fb6:	9c 91       	ld	r25, X
    2fb8:	1b 97       	sbiw	r26, 0x0b	; 11
    2fba:	59 17       	cp	r21, r25
    2fbc:	09 f0       	breq	.+2      	; 0x2fc0 <fetch_and_display_frame+0x2e2>
    2fbe:	6e c0       	rjmp	.+220    	; 0x309c <fetch_and_display_frame+0x3be>
    2fc0:	1c 96       	adiw	r26, 0x0c	; 12
    2fc2:	2c 91       	ld	r18, X
    2fc4:	1c 97       	sbiw	r26, 0x0c	; 12
    2fc6:	1d 96       	adiw	r26, 0x0d	; 13
    2fc8:	9c 91       	ld	r25, X
    2fca:	1d 97       	sbiw	r26, 0x0d	; 13
    2fcc:	29 17       	cp	r18, r25
    2fce:	09 f0       	breq	.+2      	; 0x2fd2 <fetch_and_display_frame+0x2f4>
    2fd0:	65 c0       	rjmp	.+202    	; 0x309c <fetch_and_display_frame+0x3be>
    2fd2:	1e 96       	adiw	r26, 0x0e	; 14
    2fd4:	9c 91       	ld	r25, X
    2fd6:	1e 97       	sbiw	r26, 0x0e	; 14
    2fd8:	1f 96       	adiw	r26, 0x0f	; 15
    2fda:	6c 91       	ld	r22, X
    2fdc:	1f 97       	sbiw	r26, 0x0f	; 15
    2fde:	96 17       	cp	r25, r22
    2fe0:	09 f0       	breq	.+2      	; 0x2fe4 <fetch_and_display_frame+0x306>
    2fe2:	5c c0       	rjmp	.+184    	; 0x309c <fetch_and_display_frame+0x3be>
										if( (FLASH[8+1] == FLASH[8+2])&&(FLASH[8+3] == FLASH[8+4])&&(FLASH[8+5] == FLASH[8+6]) ){
    2fe4:	35 17       	cp	r19, r21
    2fe6:	09 f0       	breq	.+2      	; 0x2fea <fetch_and_display_frame+0x30c>
    2fe8:	59 c0       	rjmp	.+178    	; 0x309c <fetch_and_display_frame+0x3be>
    2fea:	32 17       	cp	r19, r18
    2fec:	09 f0       	breq	.+2      	; 0x2ff0 <fetch_and_display_frame+0x312>
    2fee:	56 c0       	rjmp	.+172    	; 0x309c <fetch_and_display_frame+0x3be>
    2ff0:	39 17       	cp	r19, r25
    2ff2:	09 f0       	breq	.+2      	; 0x2ff6 <fetch_and_display_frame+0x318>
    2ff4:	53 c0       	rjmp	.+166    	; 0x309c <fetch_and_display_frame+0x3be>
											if( (FLASH[16+0] == FLASH[16+1])&&(FLASH[16+2] == FLASH[16+3])&&(FLASH[16+4] == FLASH[16+5])&&(FLASH[16+6] == FLASH[16+7]) ){
    2ff6:	50 96       	adiw	r26, 0x10	; 16
    2ff8:	2c 91       	ld	r18, X
    2ffa:	50 97       	sbiw	r26, 0x10	; 16
    2ffc:	51 96       	adiw	r26, 0x11	; 17
    2ffe:	9c 91       	ld	r25, X
    3000:	51 97       	sbiw	r26, 0x11	; 17
    3002:	29 17       	cp	r18, r25
    3004:	09 f0       	breq	.+2      	; 0x3008 <fetch_and_display_frame+0x32a>
    3006:	4a c0       	rjmp	.+148    	; 0x309c <fetch_and_display_frame+0x3be>
    3008:	52 96       	adiw	r26, 0x12	; 18
    300a:	6c 91       	ld	r22, X
    300c:	52 97       	sbiw	r26, 0x12	; 18
    300e:	53 96       	adiw	r26, 0x13	; 19
    3010:	9c 91       	ld	r25, X
    3012:	53 97       	sbiw	r26, 0x13	; 19
    3014:	69 17       	cp	r22, r25
    3016:	09 f0       	breq	.+2      	; 0x301a <fetch_and_display_frame+0x33c>
    3018:	41 c0       	rjmp	.+130    	; 0x309c <fetch_and_display_frame+0x3be>
    301a:	54 96       	adiw	r26, 0x14	; 20
    301c:	5c 91       	ld	r21, X
    301e:	54 97       	sbiw	r26, 0x14	; 20
    3020:	55 96       	adiw	r26, 0x15	; 21
    3022:	9c 91       	ld	r25, X
    3024:	55 97       	sbiw	r26, 0x15	; 21
    3026:	59 17       	cp	r21, r25
    3028:	c9 f5       	brne	.+114    	; 0x309c <fetch_and_display_frame+0x3be>
    302a:	56 96       	adiw	r26, 0x16	; 22
    302c:	9c 91       	ld	r25, X
    302e:	56 97       	sbiw	r26, 0x16	; 22
    3030:	57 96       	adiw	r26, 0x17	; 23
    3032:	7c 91       	ld	r23, X
    3034:	57 97       	sbiw	r26, 0x17	; 23
    3036:	97 17       	cp	r25, r23
    3038:	89 f5       	brne	.+98     	; 0x309c <fetch_and_display_frame+0x3be>
												if( (FLASH[16+1] == FLASH[16+2])&&(FLASH[16+3] == FLASH[16+4])&&(FLASH[16+5] == FLASH[16+6]) ){
    303a:	26 17       	cp	r18, r22
    303c:	79 f5       	brne	.+94     	; 0x309c <fetch_and_display_frame+0x3be>
    303e:	25 17       	cp	r18, r21
    3040:	69 f5       	brne	.+90     	; 0x309c <fetch_and_display_frame+0x3be>
    3042:	29 17       	cp	r18, r25
    3044:	59 f5       	brne	.+86     	; 0x309c <fetch_and_display_frame+0x3be>
													if( (FLASH[24+0] == FLASH[24+1])&&(FLASH[24+2] == FLASH[24+3])&&(FLASH[24+4] == FLASH[24+5])&&(FLASH[24+6] == FLASH[24+7]) ){
    3046:	58 96       	adiw	r26, 0x18	; 24
    3048:	9c 91       	ld	r25, X
    304a:	58 97       	sbiw	r26, 0x18	; 24
    304c:	59 96       	adiw	r26, 0x19	; 25
    304e:	5c 91       	ld	r21, X
    3050:	59 97       	sbiw	r26, 0x19	; 25
    3052:	95 17       	cp	r25, r21
    3054:	19 f5       	brne	.+70     	; 0x309c <fetch_and_display_frame+0x3be>
    3056:	5a 96       	adiw	r26, 0x1a	; 26
    3058:	7c 91       	ld	r23, X
    305a:	5a 97       	sbiw	r26, 0x1a	; 26
    305c:	5b 96       	adiw	r26, 0x1b	; 27
    305e:	5c 91       	ld	r21, X
    3060:	5b 97       	sbiw	r26, 0x1b	; 27
    3062:	75 17       	cp	r23, r21
    3064:	d9 f4       	brne	.+54     	; 0x309c <fetch_and_display_frame+0x3be>
    3066:	5c 96       	adiw	r26, 0x1c	; 28
    3068:	6c 91       	ld	r22, X
    306a:	5c 97       	sbiw	r26, 0x1c	; 28
    306c:	5d 96       	adiw	r26, 0x1d	; 29
    306e:	5c 91       	ld	r21, X
    3070:	5d 97       	sbiw	r26, 0x1d	; 29
    3072:	65 17       	cp	r22, r21
    3074:	99 f4       	brne	.+38     	; 0x309c <fetch_and_display_frame+0x3be>
    3076:	f8 01       	movw	r30, r16
    3078:	56 8d       	ldd	r21, Z+30	; 0x1e
    307a:	e7 8d       	ldd	r30, Z+31	; 0x1f
    307c:	5e 17       	cp	r21, r30
    307e:	71 f4       	brne	.+28     	; 0x309c <fetch_and_display_frame+0x3be>
														if( (FLASH[24+1] == FLASH[24+2])&&(FLASH[24+3] == FLASH[24+4])&&(FLASH[24+5] == FLASH[24+6]) ){
    3080:	97 17       	cp	r25, r23
    3082:	61 f4       	brne	.+24     	; 0x309c <fetch_and_display_frame+0x3be>
    3084:	96 17       	cp	r25, r22
    3086:	51 f4       	brne	.+20     	; 0x309c <fetch_and_display_frame+0x3be>
    3088:	95 17       	cp	r25, r21
    308a:	41 f4       	brne	.+16     	; 0x309c <fetch_and_display_frame+0x3be>
															grayscale[0] = FLASH[0];
    308c:	4b 83       	std	Y+3, r20	; 0x03
															grayscale[1] = FLASH[8];
    308e:	3c 83       	std	Y+4, r19	; 0x04
															grayscale[2] = FLASH[16];
    3090:	2d 83       	std	Y+5, r18	; 0x05
															grayscale[3] = FLASH[24];
    3092:	9e 83       	std	Y+6, r25	; 0x06
															i2cMasterSend(panel_index, 4, &grayscale[0]); //send a 4 byte packet with the correct row_compressed value.
    3094:	8a 2d       	mov	r24, r10
    3096:	64 e0       	ldi	r22, 0x04	; 4
    3098:	a6 01       	movw	r20, r12
    309a:	06 c0       	rjmp	.+12     	; 0x30a8 <fetch_and_display_frame+0x3ca>
							} //end of first round of byte comparisons
						} // end of check if g_bytes_per_panel is 32
					} //end of if g_ident_compress

					//above conditionals rejected sending a simple pattern patch
					if (!packet_sent)
    309c:	88 23       	and	r24, r24
    309e:	31 f4       	brne	.+12     	; 0x30ac <fetch_and_display_frame+0x3ce>
						i2cMasterSend(panel_index, g_bytes_per_panel, &FLASH[0]);
    30a0:	8a 2d       	mov	r24, r10
    30a2:	60 91 fa 25 	lds	r22, 0x25FA
    30a6:	a8 01       	movw	r20, r16
    30a8:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <i2cMasterSend>
		{
			fresult = f_read(pFile, frameBuff, nbytes_per_frame, &nbytes_read);
			if ((fresult == FR_OK) && (nbytes_read == nbytes_per_frame))
			{

				for (panel_index=1; panel_index <= g_num_panels; panel_index++)
    30ac:	a3 94       	inc	r10
    30ae:	80 91 b5 23 	lds	r24, 0x23B5
    30b2:	8a 15       	cp	r24, r10
    30b4:	08 f0       	brcs	.+2      	; 0x30b8 <fetch_and_display_frame+0x3da>
    30b6:	a2 ce       	rjmp	.-700    	; 0x2dfc <fetch_and_display_frame+0x11e>
    30b8:	5c c0       	rjmp	.+184    	; 0x3172 <fetch_and_display_frame+0x494>

				} //end of for all panels loop
			}
			else
			{
				if (!g_b_quiet_mode)
    30ba:	80 91 34 20 	lds	r24, 0x2034
    30be:	88 23       	and	r24, r24
    30c0:	09 f0       	breq	.+2      	; 0x30c4 <fetch_and_display_frame+0x3e6>
    30c2:	57 c0       	rjmp	.+174    	; 0x3172 <fetch_and_display_frame+0x494>
				{
					xputs(PSTR("Error in reading file in fetch_and_display_frame!\n"));
    30c4:	8d ef       	ldi	r24, 0xFD	; 253
    30c6:	99 e0       	ldi	r25, 0x09	; 9
    30c8:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
					xprintf(PSTR("fresult = %u, index_frame= %u, nbytes_read= %u\n"), fresult, index_frame, nbytes_read);
    30cc:	2d b7       	in	r18, 0x3d	; 61
    30ce:	3e b7       	in	r19, 0x3e	; 62
    30d0:	28 50       	subi	r18, 0x08	; 8
    30d2:	30 40       	sbci	r19, 0x00	; 0
    30d4:	2d bf       	out	0x3d, r18	; 61
    30d6:	3e bf       	out	0x3e, r19	; 62
    30d8:	ed b7       	in	r30, 0x3d	; 61
    30da:	fe b7       	in	r31, 0x3e	; 62
    30dc:	31 96       	adiw	r30, 0x01	; 1
    30de:	8d ec       	ldi	r24, 0xCD	; 205
    30e0:	99 e0       	ldi	r25, 0x09	; 9
    30e2:	ad b7       	in	r26, 0x3d	; 61
    30e4:	be b7       	in	r27, 0x3e	; 62
    30e6:	11 96       	adiw	r26, 0x01	; 1
    30e8:	8d 93       	st	X+, r24
    30ea:	9c 93       	st	X, r25
    30ec:	12 97       	sbiw	r26, 0x02	; 2
    30ee:	02 83       	std	Z+2, r16	; 0x02
    30f0:	13 83       	std	Z+3, r17	; 0x03
    30f2:	c4 82       	std	Z+4, r12	; 0x04
    30f4:	d5 82       	std	Z+5, r13	; 0x05
    30f6:	89 81       	ldd	r24, Y+1	; 0x01
    30f8:	9a 81       	ldd	r25, Y+2	; 0x02
    30fa:	86 83       	std	Z+6, r24	; 0x06
    30fc:	97 83       	std	Z+7, r25	; 0x07
    30fe:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    3102:	ed b7       	in	r30, 0x3d	; 61
    3104:	fe b7       	in	r31, 0x3e	; 62
    3106:	38 96       	adiw	r30, 0x08	; 8
    3108:	32 c0       	rjmp	.+100    	; 0x316e <fetch_and_display_frame+0x490>
				}
			}
		}
		else
		{
			if (!g_b_quiet_mode)
    310a:	80 91 34 20 	lds	r24, 0x2034
    310e:	88 23       	and	r24, r24
    3110:	81 f5       	brne	.+96     	; 0x3172 <fetch_and_display_frame+0x494>
			{
				xputs(PSTR("Error seeking in fetch_and_display_frame!\n"));
    3112:	82 ea       	ldi	r24, 0xA2	; 162
    3114:	99 e0       	ldi	r25, 0x09	; 9
    3116:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
				xprintf(PSTR("fresult = %u, index_frame= %u, offset = %lu, pFile->fs=%X, pFile->fs->fs_type=%X, pFile->fs->id=%X\n"), fresult, index_frame, offset, pFile->fs, pFile->fs->fs_type, pFile->fs->id);
    311a:	d5 01       	movw	r26, r10
    311c:	2d 91       	ld	r18, X+
    311e:	3c 91       	ld	r19, X
    3120:	ed b7       	in	r30, 0x3d	; 61
    3122:	fe b7       	in	r31, 0x3e	; 62
    3124:	70 97       	sbiw	r30, 0x10	; 16
    3126:	ed bf       	out	0x3d, r30	; 61
    3128:	fe bf       	out	0x3e, r31	; 62
    312a:	31 96       	adiw	r30, 0x01	; 1
    312c:	8e e3       	ldi	r24, 0x3E	; 62
    312e:	99 e0       	ldi	r25, 0x09	; 9
    3130:	ad b7       	in	r26, 0x3d	; 61
    3132:	be b7       	in	r27, 0x3e	; 62
    3134:	11 96       	adiw	r26, 0x01	; 1
    3136:	8d 93       	st	X+, r24
    3138:	9c 93       	st	X, r25
    313a:	12 97       	sbiw	r26, 0x02	; 2
    313c:	82 82       	std	Z+2, r8	; 0x02
    313e:	93 82       	std	Z+3, r9	; 0x03
    3140:	c4 82       	std	Z+4, r12	; 0x04
    3142:	d5 82       	std	Z+5, r13	; 0x05
    3144:	e6 82       	std	Z+6, r14	; 0x06
    3146:	f7 82       	std	Z+7, r15	; 0x07
    3148:	00 87       	std	Z+8, r16	; 0x08
    314a:	11 87       	std	Z+9, r17	; 0x09
    314c:	22 87       	std	Z+10, r18	; 0x0a
    314e:	33 87       	std	Z+11, r19	; 0x0b
    3150:	d9 01       	movw	r26, r18
    3152:	8c 91       	ld	r24, X
    3154:	84 87       	std	Z+12, r24	; 0x0c
    3156:	15 86       	std	Z+13, r1	; 0x0d
    3158:	16 96       	adiw	r26, 0x06	; 6
    315a:	8d 91       	ld	r24, X+
    315c:	9c 91       	ld	r25, X
    315e:	17 97       	sbiw	r26, 0x07	; 7
    3160:	86 87       	std	Z+14, r24	; 0x0e
    3162:	97 87       	std	Z+15, r25	; 0x0f
    3164:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    3168:	ed b7       	in	r30, 0x3d	; 61
    316a:	fe b7       	in	r31, 0x3e	; 62
    316c:	70 96       	adiw	r30, 0x10	; 16
    316e:	ed bf       	out	0x3d, r30	; 61
    3170:	fe bf       	out	0x3e, r31	; 62
			}
		}

		// Update analog outs
		if (g_mode_x != MODE_POS_DEBUG)
    3172:	80 91 c4 23 	lds	r24, 0x23C4
    3176:	85 30       	cpi	r24, 0x05	; 5
    3178:	c9 f0       	breq	.+50     	; 0x31ac <fetch_and_display_frame+0x4ce>
		{
			dac_x = ((uint32_t)x + 1)*32767/g_n_x;
    317a:	b1 01       	movw	r22, r2
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	6f 5f       	subi	r22, 0xFF	; 255
    3182:	7f 4f       	sbci	r23, 0xFF	; 255
    3184:	8f 4f       	sbci	r24, 0xFF	; 255
    3186:	9f 4f       	sbci	r25, 0xFF	; 255
    3188:	2f ef       	ldi	r18, 0xFF	; 255
    318a:	3f e7       	ldi	r19, 0x7F	; 127
    318c:	40 e0       	ldi	r20, 0x00	; 0
    318e:	50 e0       	ldi	r21, 0x00	; 0
    3190:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    3194:	20 91 39 20 	lds	r18, 0x2039
    3198:	30 91 3a 20 	lds	r19, 0x203A
    319c:	40 e0       	ldi	r20, 0x00	; 0
    319e:	50 e0       	ldi	r21, 0x00	; 0
    31a0:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
			analogWrite(0, dac_x); // make it a value in the range 0 - 32767 (0 - 10V)
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	b9 01       	movw	r22, r18
    31a8:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <analogWrite>
		}
		if (g_mode_y != MODE_POS_DEBUG)
    31ac:	80 91 c5 23 	lds	r24, 0x23C5
    31b0:	85 30       	cpi	r24, 0x05	; 5
    31b2:	d9 f0       	breq	.+54     	; 0x31ea <fetch_and_display_frame+0x50c>
		{
			dac_y = ((uint32_t)y + 1)*32767/g_n_y;
    31b4:	ef 80       	ldd	r14, Y+7	; 0x07
    31b6:	f8 84       	ldd	r15, Y+8	; 0x08
    31b8:	b7 01       	movw	r22, r14
    31ba:	80 e0       	ldi	r24, 0x00	; 0
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	6f 5f       	subi	r22, 0xFF	; 255
    31c0:	7f 4f       	sbci	r23, 0xFF	; 255
    31c2:	8f 4f       	sbci	r24, 0xFF	; 255
    31c4:	9f 4f       	sbci	r25, 0xFF	; 255
    31c6:	2f ef       	ldi	r18, 0xFF	; 255
    31c8:	3f e7       	ldi	r19, 0x7F	; 127
    31ca:	40 e0       	ldi	r20, 0x00	; 0
    31cc:	50 e0       	ldi	r21, 0x00	; 0
    31ce:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    31d2:	20 91 3b 20 	lds	r18, 0x203B
    31d6:	30 91 3c 20 	lds	r19, 0x203C
    31da:	40 e0       	ldi	r20, 0x00	; 0
    31dc:	50 e0       	ldi	r21, 0x00	; 0
    31de:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
			analogWrite(1, dac_y); // make it a value in the range 0 - 32767 (0 - 10V)
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	b9 01       	movw	r22, r18
    31e6:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <analogWrite>
		}


		// Update the output lines for quadrant-type learning patterns.
		if (g_b_laseractive)
    31ea:	80 91 b1 23 	lds	r24, 0x23B1
    31ee:	88 23       	and	r24, r24
    31f0:	21 f1       	breq	.+72     	; 0x323a <fetch_and_display_frame+0x55c>
		{
			arrayIndex = x/8;  // find the index in g_laserpattern array for x
    31f2:	c1 01       	movw	r24, r2
    31f4:	23 e0       	ldi	r18, 0x03	; 3
    31f6:	96 95       	lsr	r25
    31f8:	87 95       	ror	r24
    31fa:	2a 95       	dec	r18
    31fc:	e1 f7       	brne	.-8      	; 0x31f6 <fetch_and_display_frame+0x518>
    31fe:	28 2f       	mov	r18, r24
			bitIndex = x - arrayIndex*8;  // find the bit index in a g_laserpattern byte for x

			tempVal = g_laserpattern[arrayIndex];
    3200:	e8 2f       	mov	r30, r24
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	e5 58       	subi	r30, 0x85	; 133
    3206:	fb 4d       	sbci	r31, 0xDB	; 219

			if ((tempVal & (1<<(7-bitIndex))) == 0)
    3208:	80 81       	ld	r24, Z
    320a:	90 e0       	ldi	r25, 0x00	; 0

		// Update the output lines for quadrant-type learning patterns.
		if (g_b_laseractive)
		{
			arrayIndex = x/8;  // find the index in g_laserpattern array for x
			bitIndex = x - arrayIndex*8;  // find the bit index in a g_laserpattern byte for x
    320c:	48 ef       	ldi	r20, 0xF8	; 248
    320e:	24 9f       	mul	r18, r20
    3210:	40 2d       	mov	r20, r0
    3212:	11 24       	eor	r1, r1
    3214:	42 0d       	add	r20, r2

			tempVal = g_laserpattern[arrayIndex];

			if ((tempVal & (1<<(7-bitIndex))) == 0)
    3216:	27 e0       	ldi	r18, 0x07	; 7
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	24 1b       	sub	r18, r20
    321c:	31 09       	sbc	r19, r1
    321e:	02 c0       	rjmp	.+4      	; 0x3224 <fetch_and_display_frame+0x546>
    3220:	95 95       	asr	r25
    3222:	87 95       	ror	r24
    3224:	2a 95       	dec	r18
    3226:	e2 f7       	brpl	.-8      	; 0x3220 <fetch_and_display_frame+0x542>
    3228:	80 fd       	sbrc	r24, 0
    322a:	03 c0       	rjmp	.+6      	; 0x3232 <fetch_and_display_frame+0x554>
				digitalWrite(DIO_LASER, LOW);  // turn off laser
    322c:	80 e0       	ldi	r24, 0x00	; 0
    322e:	60 e0       	ldi	r22, 0x00	; 0
    3230:	02 c0       	rjmp	.+4      	; 0x3236 <fetch_and_display_frame+0x558>
			else
				digitalWrite(DIO_LASER, HIGH);   // turn on laser
    3232:	80 e0       	ldi	r24, 0x00	; 0
    3234:	61 e0       	ldi	r22, 0x01	; 1
    3236:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <digitalWrite>
		}

		digitalWrite(DIO_FRAMEBUSY, LOW); // set line low at end of frame write
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	60 e0       	ldi	r22, 0x00	; 0
    323e:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <digitalWrite>
    3242:	3b 85       	ldd	r19, Y+11	; 0x0b
    3244:	2c 85       	ldd	r18, Y+12	; 0x0c
    3246:	83 2f       	mov	r24, r19
    3248:	92 2f       	mov	r25, r18
    324a:	8d bf       	out	0x3d, r24	; 61
    324c:	9e bf       	out	0x3e, r25	; 62
    324e:	03 c0       	rjmp	.+6      	; 0x3256 <fetch_and_display_frame+0x578>
    }
    else
    	ledToggle(3); // Frame index is invalid, i.e. out of range.
    3250:	83 e0       	ldi	r24, 0x03	; 3
    3252:	0e 94 2b 2c 	call	0x5856	; 0x5856 <ledToggle>
    
} // fetch_and_display_frame()
    3256:	29 85       	ldd	r18, Y+9	; 0x09
    3258:	3a 85       	ldd	r19, Y+10	; 0x0a
    325a:	2d bf       	out	0x3d, r18	; 61
    325c:	3e bf       	out	0x3e, r19	; 62
    325e:	2c 96       	adiw	r28, 0x0c	; 12
    3260:	e2 e1       	ldi	r30, 0x12	; 18
    3262:	0c 94 d3 4b 	jmp	0x97a6	; 0x97a6 <__epilogue_restores__>

00003266 <benchmark_pattern>:
} // set_hwConfig()


// this function assumes that a pattern has been set
void benchmark_pattern(void)
{
    3266:	ef 92       	push	r14
    3268:	ff 92       	push	r15
    326a:	0f 93       	push	r16
    326c:	1f 93       	push	r17
    326e:	cf 93       	push	r28
    3270:	df 93       	push	r29
    uint16_t frame_ind;
    uint32_t bench_time;
    uint16_t frame_rate;
    
    g_b_running = FALSE;
    3272:	10 92 b0 23 	sts	0x23B0, r1
    
    timer_coarse_tic();
    3276:	0e 94 fe 48 	call	0x91fc	; 0x91fc <timer_coarse_tic>
    
    for(frame_ind = 0; frame_ind < g_n_frames; frame_ind++)
    327a:	c0 e0       	ldi	r28, 0x00	; 0
    327c:	d0 e0       	ldi	r29, 0x00	; 0
    327e:	0d c0       	rjmp	.+26     	; 0x329a <benchmark_pattern+0x34>
        fetch_and_display_frame(&g_file_pattern, g_x, g_y);
    3280:	60 91 bc 23 	lds	r22, 0x23BC
    3284:	70 91 bd 23 	lds	r23, 0x23BD
    3288:	40 91 be 23 	lds	r20, 0x23BE
    328c:	50 91 bf 23 	lds	r21, 0x23BF
    3290:	89 ed       	ldi	r24, 0xD9	; 217
    3292:	97 e2       	ldi	r25, 0x27	; 39
    3294:	0e 94 6f 16 	call	0x2cde	; 0x2cde <fetch_and_display_frame>
    
    g_b_running = FALSE;
    
    timer_coarse_tic();
    
    for(frame_ind = 0; frame_ind < g_n_frames; frame_ind++)
    3298:	21 96       	adiw	r28, 0x01	; 1
    329a:	80 91 b8 23 	lds	r24, 0x23B8
    329e:	90 91 b9 23 	lds	r25, 0x23B9
    32a2:	c8 17       	cp	r28, r24
    32a4:	d9 07       	cpc	r29, r25
    32a6:	60 f3       	brcs	.-40     	; 0x3280 <benchmark_pattern+0x1a>
        fetch_and_display_frame(&g_file_pattern, g_x, g_y);
    
    bench_time = timer_coarse_toc();
    32a8:	0e 94 13 49 	call	0x9226	; 0x9226 <timer_coarse_toc>
    32ac:	7b 01       	movw	r14, r22
    32ae:	8c 01       	movw	r16, r24
    frame_rate = ((uint32_t)g_n_frames*1000)/bench_time;
    xprintf(PSTR(" bench_time = %lu ms, frame_rate = %u\n"), bench_time, frame_rate);
    32b0:	8d b7       	in	r24, 0x3d	; 61
    32b2:	9e b7       	in	r25, 0x3e	; 62
    32b4:	08 97       	sbiw	r24, 0x08	; 8
    32b6:	8d bf       	out	0x3d, r24	; 61
    32b8:	9e bf       	out	0x3e, r25	; 62
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
    32be:	21 96       	adiw	r28, 0x01	; 1
    32c0:	8b ea       	ldi	r24, 0xAB	; 171
    32c2:	97 e0       	ldi	r25, 0x07	; 7
    32c4:	ed b7       	in	r30, 0x3d	; 61
    32c6:	fe b7       	in	r31, 0x3e	; 62
    32c8:	81 83       	std	Z+1, r24	; 0x01
    32ca:	92 83       	std	Z+2, r25	; 0x02
    32cc:	ea 82       	std	Y+2, r14	; 0x02
    32ce:	fb 82       	std	Y+3, r15	; 0x03
    32d0:	0c 83       	std	Y+4, r16	; 0x04
    32d2:	1d 83       	std	Y+5, r17	; 0x05
    
    for(frame_ind = 0; frame_ind < g_n_frames; frame_ind++)
        fetch_and_display_frame(&g_file_pattern, g_x, g_y);
    
    bench_time = timer_coarse_toc();
    frame_rate = ((uint32_t)g_n_frames*1000)/bench_time;
    32d4:	60 91 b8 23 	lds	r22, 0x23B8
    32d8:	70 91 b9 23 	lds	r23, 0x23B9
    32dc:	80 e0       	ldi	r24, 0x00	; 0
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	28 ee       	ldi	r18, 0xE8	; 232
    32e2:	33 e0       	ldi	r19, 0x03	; 3
    32e4:	40 e0       	ldi	r20, 0x00	; 0
    32e6:	50 e0       	ldi	r21, 0x00	; 0
    32e8:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    32ec:	a8 01       	movw	r20, r16
    32ee:	97 01       	movw	r18, r14
    32f0:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    32f4:	2e 83       	std	Y+6, r18	; 0x06
    32f6:	3f 83       	std	Y+7, r19	; 0x07
    xprintf(PSTR(" bench_time = %lu ms, frame_rate = %u\n"), bench_time, frame_rate);
    32f8:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
	//reset index_x and g_y
	g_x=0;
    32fc:	10 92 bc 23 	sts	0x23BC, r1
    3300:	10 92 bd 23 	sts	0x23BD, r1
	g_y=0;
    3304:	10 92 be 23 	sts	0x23BE, r1
    3308:	10 92 bf 23 	sts	0x23BF, r1
    330c:	8d b7       	in	r24, 0x3d	; 61
    330e:	9e b7       	in	r25, 0x3e	; 62
    3310:	08 96       	adiw	r24, 0x08	; 8
    3312:	8d bf       	out	0x3d, r24	; 61
    3314:	9e bf       	out	0x3e, r25	; 62
} // benchmark_pattern()
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	e6 e0       	ldi	r30, 0x06	; 6
    331c:	0c 94 df 4b 	jmp	0x97be	; 0x97be <__epilogue_restores__+0x18>

00003320 <set_pattern>:
    digitalToggle(3); //toggle digital 3 to trigger camera
}


void set_pattern(uint8_t pat_num)
{
    3320:	a2 e0       	ldi	r26, 0x02	; 2
    3322:	b2 e0       	ldi	r27, 0x02	; 2
    3324:	e6 e9       	ldi	r30, 0x96	; 150
    3326:	f9 e1       	ldi	r31, 0x19	; 25
    3328:	0c 94 c7 4b 	jmp	0x978e	; 0x978e <__prologue_saves__+0x1a>
    332c:	f8 2e       	mov	r15, r24
    uint8_t        bufHeader[NBYTES_HEADER];
    uint8_t        res;
    uint8_t        grayscale;
    
    if (pat_num < 1000)
        sprintf(str, "pat%04d.pat\0", pat_num);
    332e:	01 e0       	ldi	r16, 0x01	; 1
    3330:	14 e2       	ldi	r17, 0x24	; 36
    3332:	00 d0       	rcall	.+0      	; 0x3334 <set_pattern+0x14>
    3334:	00 d0       	rcall	.+0      	; 0x3336 <set_pattern+0x16>
    3336:	ed b7       	in	r30, 0x3d	; 61
    3338:	fe b7       	in	r31, 0x3e	; 62
    333a:	31 96       	adiw	r30, 0x01	; 1
    333c:	ad b7       	in	r26, 0x3d	; 61
    333e:	be b7       	in	r27, 0x3e	; 62
    3340:	11 96       	adiw	r26, 0x01	; 1
    3342:	0d 93       	st	X+, r16
    3344:	1c 93       	st	X, r17
    3346:	12 97       	sbiw	r26, 0x02	; 2
    3348:	8d e0       	ldi	r24, 0x0D	; 13
    334a:	90 e2       	ldi	r25, 0x20	; 32
    334c:	82 83       	std	Z+2, r24	; 0x02
    334e:	93 83       	std	Z+3, r25	; 0x03
    3350:	f4 82       	std	Z+4, r15	; 0x04
    3352:	15 82       	std	Z+5, r1	; 0x05
    3354:	0e 94 3a 4e 	call	0x9c74	; 0x9c74 <sprintf>
    else
        xputs(PSTR("pat_num is too big.\n"));
   
    
    f_close(&g_file_pattern);
    3358:	ed b7       	in	r30, 0x3d	; 61
    335a:	fe b7       	in	r31, 0x3e	; 62
    335c:	36 96       	adiw	r30, 0x06	; 6
    335e:	ed bf       	out	0x3d, r30	; 61
    3360:	fe bf       	out	0x3e, r31	; 62
    3362:	89 ed       	ldi	r24, 0xD9	; 217
    3364:	97 e2       	ldi	r25, 0x27	; 39
    3366:	0e 94 2b 43 	call	0x8656	; 0x8656 <f_close>
    if (!g_b_quiet_mode)
    336a:	80 91 34 20 	lds	r24, 0x2034
    336e:	88 23       	and	r24, r24
    3370:	a1 f4       	brne	.+40     	; 0x339a <set_pattern+0x7a>
    	xprintf(PSTR("Opening %s.\n"),str);
    3372:	00 d0       	rcall	.+0      	; 0x3374 <set_pattern+0x54>
    3374:	0f 92       	push	r0
    3376:	81 ef       	ldi	r24, 0xF1	; 241
    3378:	98 e0       	ldi	r25, 0x08	; 8
    337a:	ad b7       	in	r26, 0x3d	; 61
    337c:	be b7       	in	r27, 0x3e	; 62
    337e:	11 96       	adiw	r26, 0x01	; 1
    3380:	8d 93       	st	X+, r24
    3382:	9c 93       	st	X, r25
    3384:	12 97       	sbiw	r26, 0x02	; 2
    3386:	13 96       	adiw	r26, 0x03	; 3
    3388:	0d 93       	st	X+, r16
    338a:	1c 93       	st	X, r17
    338c:	14 97       	sbiw	r26, 0x04	; 4
    338e:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    3392:	0f 90       	pop	r0
    3394:	0f 90       	pop	r0
    3396:	0f 90       	pop	r0
    3398:	0f 90       	pop	r0
    res = f_open(&g_file_pattern, str, FA_OPEN_EXISTING | FA_READ); // The file stays open after this function returns.
    339a:	89 ed       	ldi	r24, 0xD9	; 217
    339c:	97 e2       	ldi	r25, 0x27	; 39
    339e:	61 e0       	ldi	r22, 0x01	; 1
    33a0:	74 e2       	ldi	r23, 0x24	; 36
    33a2:	41 e0       	ldi	r20, 0x01	; 1
    33a4:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <f_open>
    if (res == FR_OK)
    33a8:	88 23       	and	r24, r24
    33aa:	09 f0       	breq	.+2      	; 0x33ae <set_pattern+0x8e>
    33ac:	b0 c0       	rjmp	.+352    	; 0x350e <set_pattern+0x1ee>
    {
        res = f_read(&g_file_pattern, bufHeader, NBYTES_HEADER, &nbytes_read); // Read the 512 byte header info block
    33ae:	89 ed       	ldi	r24, 0xD9	; 217
    33b0:	97 e2       	ldi	r25, 0x27	; 39
    33b2:	be 01       	movw	r22, r28
    33b4:	6d 5f       	subi	r22, 0xFD	; 253
    33b6:	7f 4f       	sbci	r23, 0xFF	; 255
    33b8:	40 e0       	ldi	r20, 0x00	; 0
    33ba:	52 e0       	ldi	r21, 0x02	; 2
    33bc:	9e 01       	movw	r18, r28
    33be:	2f 5f       	subi	r18, 0xFF	; 255
    33c0:	3f 4f       	sbci	r19, 0xFF	; 255
    33c2:	0e 94 eb 41 	call	0x83d6	; 0x83d6 <f_read>
        if ((res == FR_OK) && (nbytes_read == NBYTES_HEADER))
    33c6:	88 23       	and	r24, r24
    33c8:	09 f0       	breq	.+2      	; 0x33cc <set_pattern+0xac>
    33ca:	9e c0       	rjmp	.+316    	; 0x3508 <set_pattern+0x1e8>
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
    33ce:	9a 81       	ldd	r25, Y+2	; 0x02
    33d0:	b2 e0       	ldi	r27, 0x02	; 2
    33d2:	80 30       	cpi	r24, 0x00	; 0
    33d4:	9b 07       	cpc	r25, r27
    33d6:	09 f0       	breq	.+2      	; 0x33da <set_pattern+0xba>
    33d8:	97 c0       	rjmp	.+302    	; 0x3508 <set_pattern+0x1e8>
        {
            // get the header info
            ((uint8_t*)&g_n_x)[0] = bufHeader[0];
    33da:	8b 81       	ldd	r24, Y+3	; 0x03
    33dc:	80 93 39 20 	sts	0x2039, r24
            ((uint8_t*)&g_n_x)[1] = bufHeader[1];
    33e0:	8c 81       	ldd	r24, Y+4	; 0x04
    33e2:	80 93 3a 20 	sts	0x203A, r24
            ((uint8_t*)&g_n_y)[0] = bufHeader[2];
    33e6:	8d 81       	ldd	r24, Y+5	; 0x05
    33e8:	80 93 3b 20 	sts	0x203B, r24
            ((uint8_t*)&g_n_y)[1] = bufHeader[3];
    33ec:	8e 81       	ldd	r24, Y+6	; 0x06
    33ee:	80 93 3c 20 	sts	0x203C, r24
            g_num_panels = bufHeader[4];
    33f2:	8f 81       	ldd	r24, Y+7	; 0x07
    33f4:	80 93 b5 23 	sts	0x23B5, r24
            grayscale = bufHeader[5];   //11, 12, 13, or 14 means use row compression
    33f8:	08 85       	ldd	r16, Y+8	; 0x08

            g_n_frames = g_n_x * g_n_y;
    33fa:	40 91 3b 20 	lds	r20, 0x203B
    33fe:	50 91 3c 20 	lds	r21, 0x203C
    3402:	20 91 39 20 	lds	r18, 0x2039
    3406:	30 91 3a 20 	lds	r19, 0x203A
    340a:	42 9f       	mul	r20, r18
    340c:	c0 01       	movw	r24, r0
    340e:	43 9f       	mul	r20, r19
    3410:	90 0d       	add	r25, r0
    3412:	52 9f       	mul	r21, r18
    3414:	90 0d       	add	r25, r0
    3416:	11 24       	eor	r1, r1
    3418:	80 93 b8 23 	sts	0x23B8, r24
    341c:	90 93 b9 23 	sts	0x23B9, r25
            if ((grayscale >= 11) & (grayscale <= 14))
    3420:	80 2f       	mov	r24, r16
    3422:	8b 50       	subi	r24, 0x0B	; 11
    3424:	84 30       	cpi	r24, 0x04	; 4
    3426:	38 f4       	brcc	.+14     	; 0x3436 <set_pattern+0x116>
            {
            	grayscale = grayscale - 10;
    3428:	0a 50       	subi	r16, 0x0A	; 10
                g_row_compress = TRUE;
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	80 93 b3 23 	sts	0x23B3, r24
                g_bytes_per_panel = grayscale;
    3430:	00 93 fa 25 	sts	0x25FA, r16
    3434:	08 c0       	rjmp	.+16     	; 0x3446 <set_pattern+0x126>
            }
            else
            {
                g_row_compress = FALSE;
    3436:	10 92 b3 23 	sts	0x23B3, r1
                g_bytes_per_panel = grayscale * 8;
    343a:	80 2f       	mov	r24, r16
    343c:	88 0f       	add	r24, r24
    343e:	88 0f       	add	r24, r24
    3440:	88 0f       	add	r24, r24
    3442:	80 93 fa 25 	sts	0x25FA, r24
            }
            g_x = g_y = 0;
    3446:	10 92 be 23 	sts	0x23BE, r1
    344a:	10 92 bf 23 	sts	0x23BF, r1
    344e:	80 91 be 23 	lds	r24, 0x23BE
    3452:	90 91 bf 23 	lds	r25, 0x23BF
    3456:	80 93 bc 23 	sts	0x23BC, r24
    345a:	90 93 bd 23 	sts	0x23BD, r25
            g_index_frame = 0;
    345e:	10 92 b6 23 	sts	0x23B6, r1
    3462:	10 92 b7 23 	sts	0x23B7, r1
            g_b_running = FALSE;
    3466:	10 92 b0 23 	sts	0x23B0, r1
            g_display_count = 0;  //clear the display count
    346a:	10 92 b2 23 	sts	0x23B2, r1
            if (!g_b_quiet_mode)
    346e:	80 91 34 20 	lds	r24, 0x2034
    3472:	88 23       	and	r24, r24
    3474:	e1 f5       	brne	.+120    	; 0x34ee <set_pattern+0x1ce>
            {
                xprintf(PSTR("Setting pattern %u:\n"), pat_num);
    3476:	00 d0       	rcall	.+0      	; 0x3478 <set_pattern+0x158>
    3478:	0f 92       	push	r0
    347a:	ed b7       	in	r30, 0x3d	; 61
    347c:	fe b7       	in	r31, 0x3e	; 62
    347e:	31 96       	adiw	r30, 0x01	; 1
    3480:	8c ed       	ldi	r24, 0xDC	; 220
    3482:	98 e0       	ldi	r25, 0x08	; 8
    3484:	ad b7       	in	r26, 0x3d	; 61
    3486:	be b7       	in	r27, 0x3e	; 62
    3488:	11 96       	adiw	r26, 0x01	; 1
    348a:	8d 93       	st	X+, r24
    348c:	9c 93       	st	X, r25
    348e:	12 97       	sbiw	r26, 0x02	; 2
    3490:	f2 82       	std	Z+2, r15	; 0x02
    3492:	13 82       	std	Z+3, r1	; 0x03
    3494:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                xprintf(PSTR("  g_n_x = %u\n  g_n_y = %u\n  g_num_panels = %u\n  grayscale = %u\n row_compression = %u\n"),
    3498:	ed b7       	in	r30, 0x3d	; 61
    349a:	fe b7       	in	r31, 0x3e	; 62
    349c:	38 97       	sbiw	r30, 0x08	; 8
    349e:	ed bf       	out	0x3d, r30	; 61
    34a0:	fe bf       	out	0x3e, r31	; 62
    34a2:	31 96       	adiw	r30, 0x01	; 1
    34a4:	86 e8       	ldi	r24, 0x86	; 134
    34a6:	98 e0       	ldi	r25, 0x08	; 8
    34a8:	ad b7       	in	r26, 0x3d	; 61
    34aa:	be b7       	in	r27, 0x3e	; 62
    34ac:	11 96       	adiw	r26, 0x01	; 1
    34ae:	8d 93       	st	X+, r24
    34b0:	9c 93       	st	X, r25
    34b2:	12 97       	sbiw	r26, 0x02	; 2
    34b4:	80 91 39 20 	lds	r24, 0x2039
    34b8:	90 91 3a 20 	lds	r25, 0x203A
    34bc:	82 83       	std	Z+2, r24	; 0x02
    34be:	93 83       	std	Z+3, r25	; 0x03
    34c0:	80 91 3b 20 	lds	r24, 0x203B
    34c4:	90 91 3c 20 	lds	r25, 0x203C
    34c8:	84 83       	std	Z+4, r24	; 0x04
    34ca:	95 83       	std	Z+5, r25	; 0x05
    34cc:	80 91 b5 23 	lds	r24, 0x23B5
    34d0:	86 83       	std	Z+6, r24	; 0x06
    34d2:	17 82       	std	Z+7, r1	; 0x07
    34d4:	00 87       	std	Z+8, r16	; 0x08
    34d6:	11 86       	std	Z+9, r1	; 0x09
    34d8:	80 91 b3 23 	lds	r24, 0x23B3
    34dc:	82 87       	std	Z+10, r24	; 0x0a
    34de:	13 86       	std	Z+11, r1	; 0x0b
    34e0:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    34e4:	ed b7       	in	r30, 0x3d	; 61
    34e6:	fe b7       	in	r31, 0x3e	; 62
    34e8:	3c 96       	adiw	r30, 0x0c	; 12
    34ea:	ed bf       	out	0x3d, r30	; 61
    34ec:	fe bf       	out	0x3e, r31	; 62
                        g_n_x, g_n_y, g_num_panels, grayscale, g_row_compress);
            }
            fetch_and_display_frame(&g_file_pattern, g_x, g_y);
    34ee:	60 91 bc 23 	lds	r22, 0x23BC
    34f2:	70 91 bd 23 	lds	r23, 0x23BD
    34f6:	40 91 be 23 	lds	r20, 0x23BE
    34fa:	50 91 bf 23 	lds	r21, 0x23BF
    34fe:	89 ed       	ldi	r24, 0xD9	; 217
    3500:	97 e2       	ldi	r25, 0x27	; 39
    3502:	0e 94 6f 16 	call	0x2cde	; 0x2cde <fetch_and_display_frame>
    3506:	07 c0       	rjmp	.+14     	; 0x3516 <set_pattern+0x1f6>
        }
        else
        	xputs(PSTR("Error reading in pattern file\n"));
    3508:	87 e6       	ldi	r24, 0x67	; 103
    350a:	98 e0       	ldi	r25, 0x08	; 8
    350c:	02 c0       	rjmp	.+4      	; 0x3512 <set_pattern+0x1f2>
    }
    else
    	xputs(PSTR("Error opening pattern file\n"));
    350e:	8b e4       	ldi	r24, 0x4B	; 75
    3510:	98 e0       	ldi	r25, 0x08	; 8
    3512:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>

	usePreloadedPattern = 0;
    3516:	10 92 bb 23 	sts	0x23BB, r1
} // set_pattern()
    351a:	ce 5f       	subi	r28, 0xFE	; 254
    351c:	dd 4f       	sbci	r29, 0xFD	; 253
    351e:	e5 e0       	ldi	r30, 0x05	; 5
    3520:	0c 94 e0 4b 	jmp	0x97c0	; 0x97c0 <__epilogue_restores__+0x1a>

00003524 <display_preload_frame>:
    digitalWrite(DIO_FRAMEBUSY, LOW); // set line low at end of frame write
} // display_dumped_frame()


void display_preload_frame(uint16_t index_frame, uint16_t Xindex, uint16_t Yindex)
{
    3524:	a4 e0       	ldi	r26, 0x04	; 4
    3526:	b0 e0       	ldi	r27, 0x00	; 0
    3528:	e8 e9       	ldi	r30, 0x98	; 152
    352a:	fa e1       	ldi	r31, 0x1A	; 26
    352c:	0c 94 c6 4b 	jmp	0x978c	; 0x978c <__prologue_saves__+0x18>
    3530:	8b 83       	std	Y+3, r24	; 0x03
    3532:	9c 83       	std	Y+4, r25	; 0x04
    3534:	8b 01       	movw	r16, r22
    3536:	7a 01       	movw	r14, r20
	uint8_t CMD[2];

	//when preload pattern to panels (super fast mode), we update frame and analog output in this function in stead of
	//in fetch_display_frame because this fuction is ISR and has a higher priority than fetch_display_frame called by 
	//main funciton. In this way, we can keep update frame during f_read to in order to update function data 
	digitalWrite(1, HIGH); 
    3538:	81 e0       	ldi	r24, 0x01	; 1
    353a:	61 e0       	ldi	r22, 0x01	; 1
    353c:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <digitalWrite>
	//ask all panels to load f_num
	CMD[0] = *((uint8_t *)&index_frame + 1) | 0xf0;  // this is the high byte
    3540:	8c 81       	ldd	r24, Y+4	; 0x04
    3542:	80 6f       	ori	r24, 0xF0	; 240
    3544:	89 83       	std	Y+1, r24	; 0x01
	CMD[1] = *(uint8_t *)&index_frame; //this is the low byte
    3546:	8b 81       	ldd	r24, Y+3	; 0x03
    3548:	8a 83       	std	Y+2, r24	; 0x02
		
	i2cMasterSend(0, 2, CMD); 	//use 2 to follow the old protocol temporarily
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	62 e0       	ldi	r22, 0x02	; 2
    354e:	ae 01       	movw	r20, r28
    3550:	4f 5f       	subi	r20, 0xFF	; 255
    3552:	5f 4f       	sbci	r21, 0xFF	; 255
    3554:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <i2cMasterSend>
		
	//update analog output after updating frames 		
	X_dac_val = ((uint32_t)Xindex + 1)*32767/g_n_x;
    3558:	b8 01       	movw	r22, r16
    355a:	80 e0       	ldi	r24, 0x00	; 0
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	6f 5f       	subi	r22, 0xFF	; 255
    3560:	7f 4f       	sbci	r23, 0xFF	; 255
    3562:	8f 4f       	sbci	r24, 0xFF	; 255
    3564:	9f 4f       	sbci	r25, 0xFF	; 255
    3566:	2f ef       	ldi	r18, 0xFF	; 255
    3568:	3f e7       	ldi	r19, 0x7F	; 127
    356a:	40 e0       	ldi	r20, 0x00	; 0
    356c:	50 e0       	ldi	r21, 0x00	; 0
    356e:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    3572:	20 91 39 20 	lds	r18, 0x2039
    3576:	30 91 3a 20 	lds	r19, 0x203A
    357a:	40 e0       	ldi	r20, 0x00	; 0
    357c:	50 e0       	ldi	r21, 0x00	; 0
    357e:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
	analogWrite(0, X_dac_val); // make it a value in the range 0 - 32767 (0 - 10V)
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	b9 01       	movw	r22, r18
    3586:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <analogWrite>
	Y_dac_val = ((uint32_t)Yindex + 1)*32767/g_n_y;
    358a:	b7 01       	movw	r22, r14
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	6f 5f       	subi	r22, 0xFF	; 255
    3592:	7f 4f       	sbci	r23, 0xFF	; 255
    3594:	8f 4f       	sbci	r24, 0xFF	; 255
    3596:	9f 4f       	sbci	r25, 0xFF	; 255
    3598:	2f ef       	ldi	r18, 0xFF	; 255
    359a:	3f e7       	ldi	r19, 0x7F	; 127
    359c:	40 e0       	ldi	r20, 0x00	; 0
    359e:	50 e0       	ldi	r21, 0x00	; 0
    35a0:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    35a4:	20 91 3b 20 	lds	r18, 0x203B
    35a8:	30 91 3c 20 	lds	r19, 0x203C
    35ac:	40 e0       	ldi	r20, 0x00	; 0
    35ae:	50 e0       	ldi	r21, 0x00	; 0
    35b0:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
	analogWrite(1, Y_dac_val); // make it a value in the range 0 - 32767 (0 - 10V)
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	b9 01       	movw	r22, r18
    35b8:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <analogWrite>
	digitalWrite(1, LOW); // set line low at end of frame write	
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	60 e0       	ldi	r22, 0x00	; 0
    35c0:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <digitalWrite>
}
    35c4:	24 96       	adiw	r28, 0x04	; 4
    35c6:	e6 e0       	ldi	r30, 0x06	; 6
    35c8:	0c 94 df 4b 	jmp	0x97be	; 0x97be <__epilogue_restores__+0x18>

000035cc <display_dumped_frame>:

} // handle_message_length_63()


void display_dumped_frame (uint8_t *msg_buffer)
{
    35cc:	a0 e0       	ldi	r26, 0x00	; 0
    35ce:	b0 e0       	ldi	r27, 0x00	; 0
    35d0:	ec ee       	ldi	r30, 0xEC	; 236
    35d2:	fa e1       	ldi	r31, 0x1A	; 26
    35d4:	0c 94 c3 4b 	jmp	0x9786	; 0x9786 <__prologue_saves__+0x12>
    35d8:	ec 01       	movw	r28, r24
    // Bytes 2,3 are the y_dac_val, only support positive number
    // Byte 4 is the number of panels
    // Byte 5 is the gray scale level
    // Byte 6 is the flag of row compression

    x_dac_val = (uint16_t)msg_buffer[0] + 256*(uint16_t)msg_buffer[1];
    35da:	99 81       	ldd	r25, Y+1	; 0x01
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	28 81       	ld	r18, Y
    35e0:	7c 01       	movw	r14, r24
    35e2:	e2 0e       	add	r14, r18
    35e4:	f1 1c       	adc	r15, r1
    y_dac_val = (uint16_t)msg_buffer[2] + 256*(uint16_t)msg_buffer[3];
    35e6:	9b 81       	ldd	r25, Y+3	; 0x03
    35e8:	80 e0       	ldi	r24, 0x00	; 0
    35ea:	2a 81       	ldd	r18, Y+2	; 0x02
    35ec:	6c 01       	movw	r12, r24
    35ee:	c2 0e       	add	r12, r18
    35f0:	d1 1c       	adc	r13, r1
    g_num_panels = msg_buffer[4];
    35f2:	8c 81       	ldd	r24, Y+4	; 0x04
    35f4:	80 93 b5 23 	sts	0x23B5, r24
    grayscale = msg_buffer[5];
    35f8:	8d 81       	ldd	r24, Y+5	; 0x05
    g_row_compress = msg_buffer[6];
    35fa:	9e 81       	ldd	r25, Y+6	; 0x06
    35fc:	90 93 b3 23 	sts	0x23B3, r25


    if (g_row_compress)
    3600:	99 23       	and	r25, r25
    3602:	19 f4       	brne	.+6      	; 0x360a <display_dumped_frame+0x3e>
        g_bytes_per_panel = grayscale;
    else
        g_bytes_per_panel = grayscale*8;
    3604:	88 0f       	add	r24, r24
    3606:	88 0f       	add	r24, r24
    3608:	88 0f       	add	r24, r24
    360a:	80 93 fa 25 	sts	0x25FA, r24
  
    buffer_index = 7;
    g_display_count = 0;  //clear the display count
    360e:	10 92 b2 23 	sts	0x23B2, r1
    digitalWrite(DIO_FRAMEBUSY, HIGH); // set line high at beginning of frame write
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	61 e0       	ldi	r22, 0x01	; 1
    3616:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <digitalWrite>
    if (g_row_compress)
        g_bytes_per_panel = grayscale;
    else
        g_bytes_per_panel = grayscale*8;
  
    buffer_index = 7;
    361a:	07 e0       	ldi	r16, 0x07	; 7
    361c:	10 e0       	ldi	r17, 0x00	; 0
    g_display_count = 0;  //clear the display count
    digitalWrite(DIO_FRAMEBUSY, HIGH); // set line high at beginning of frame write
    
    for (panel_index = 1; panel_index <= g_num_panels; panel_index++)
    361e:	bb 24       	eor	r11, r11
    3620:	b3 94       	inc	r11
    3622:	0d c0       	rjmp	.+26     	; 0x363e <display_dumped_frame+0x72>
    {
        i2cMasterSend(panel_index, g_bytes_per_panel, &msg_buffer[buffer_index]);
    3624:	ae 01       	movw	r20, r28
    3626:	40 0f       	add	r20, r16
    3628:	51 1f       	adc	r21, r17
    362a:	8b 2d       	mov	r24, r11
    362c:	60 91 fa 25 	lds	r22, 0x25FA
    3630:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <i2cMasterSend>
        buffer_index = buffer_index + g_bytes_per_panel;
    3634:	80 91 fa 25 	lds	r24, 0x25FA
    3638:	08 0f       	add	r16, r24
    363a:	11 1d       	adc	r17, r1
  
    buffer_index = 7;
    g_display_count = 0;  //clear the display count
    digitalWrite(DIO_FRAMEBUSY, HIGH); // set line high at beginning of frame write
    
    for (panel_index = 1; panel_index <= g_num_panels; panel_index++)
    363c:	b3 94       	inc	r11
    363e:	80 91 b5 23 	lds	r24, 0x23B5
    3642:	8b 15       	cp	r24, r11
    3644:	78 f7       	brcc	.-34     	; 0x3624 <display_dumped_frame+0x58>
    {
        i2cMasterSend(panel_index, g_bytes_per_panel, &msg_buffer[buffer_index]);
        buffer_index = buffer_index + g_bytes_per_panel;
    }
    analogWrite(0, x_dac_val); // make it a value in the range 0 - 32767 (0V - 10V)
    3646:	80 e0       	ldi	r24, 0x00	; 0
    3648:	b7 01       	movw	r22, r14
    364a:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <analogWrite>
    analogWrite(1, y_dac_val);  // make it a value in the range 0 - 32767 (0V - 10V)
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	b6 01       	movw	r22, r12
    3652:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <analogWrite>
    digitalWrite(DIO_FRAMEBUSY, LOW); // set line low at end of frame write
    3656:	81 e0       	ldi	r24, 0x01	; 1
    3658:	60 e0       	ldi	r22, 0x00	; 0
    365a:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <digitalWrite>
} // display_dumped_frame()
    365e:	cd b7       	in	r28, 0x3d	; 61
    3660:	de b7       	in	r29, 0x3e	; 62
    3662:	e9 e0       	ldi	r30, 0x09	; 9
    3664:	0c 94 dc 4b 	jmp	0x97b8	; 0x97b8 <__epilogue_restores__+0x12>

00003668 <handle_message_length_9>:
} // handle_message_length_7()



void handle_message_length_9(uint8_t *msg_buffer)
{
    3668:	cf 93       	push	r28
    366a:	df 93       	push	r29
    366c:	fc 01       	movw	r30, r24
    switch(msg_buffer[0])
    366e:	80 81       	ld	r24, Z
    3670:	81 30       	cpi	r24, 0x01	; 1
    3672:	09 f0       	breq	.+2      	; 0x3676 <handle_message_length_9+0xe>
    3674:	49 c0       	rjmp	.+146    	; 0x3708 <handle_message_length_9+0xa0>
	//load laser trigger pattern first 62 byte data. Laer patter has 128 bytes, but since
	//the value is either 0 or 1, we can combined them in 12 bytes to 
	//save serial communicaiton time

        case MSG_9_SEND_GAIN_BIAS: // The version of the command with signed 16 bit arguments.
            g_gain_x = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    3676:	92 81       	ldd	r25, Z+2	; 0x02
    3678:	80 e0       	ldi	r24, 0x00	; 0
    367a:	21 81       	ldd	r18, Z+1	; 0x01
    367c:	ac 01       	movw	r20, r24
    367e:	42 0f       	add	r20, r18
    3680:	51 1d       	adc	r21, r1
    3682:	40 93 ec 23 	sts	0x23EC, r20
    3686:	50 93 ed 23 	sts	0x23ED, r21
            g_bias_x = (uint16_t) msg_buffer[3] + (256*msg_buffer[4]);
    368a:	94 81       	ldd	r25, Z+4	; 0x04
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	23 81       	ldd	r18, Z+3	; 0x03
    3690:	bc 01       	movw	r22, r24
    3692:	62 0f       	add	r22, r18
    3694:	71 1d       	adc	r23, r1
    3696:	60 93 f0 23 	sts	0x23F0, r22
    369a:	70 93 f1 23 	sts	0x23F1, r23
            g_gain_y = (uint16_t) msg_buffer[5] + (256*msg_buffer[6]);
    369e:	96 81       	ldd	r25, Z+6	; 0x06
    36a0:	80 e0       	ldi	r24, 0x00	; 0
    36a2:	25 81       	ldd	r18, Z+5	; 0x05
    36a4:	dc 01       	movw	r26, r24
    36a6:	a2 0f       	add	r26, r18
    36a8:	b1 1d       	adc	r27, r1
    36aa:	a0 93 ee 23 	sts	0x23EE, r26
    36ae:	b0 93 ef 23 	sts	0x23EF, r27
            g_bias_y = (uint16_t) msg_buffer[7] + (256*msg_buffer[8]);
    36b2:	90 85       	ldd	r25, Z+8	; 0x08
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	27 81       	ldd	r18, Z+7	; 0x07
    36b8:	ec 01       	movw	r28, r24
    36ba:	c2 0f       	add	r28, r18
    36bc:	d1 1d       	adc	r29, r1
    36be:	9e 01       	movw	r18, r28
    36c0:	c0 93 f2 23 	sts	0x23F2, r28
    36c4:	d0 93 f3 23 	sts	0x23F3, r29
			if (!g_b_quiet_mode)
    36c8:	80 91 34 20 	lds	r24, 0x2034
    36cc:	88 23       	and	r24, r24
    36ce:	11 f5       	brne	.+68     	; 0x3714 <handle_message_length_9+0xac>
                xprintf(PSTR("set_gain_bias: gain_x= %d,  bias_x= %d, gain_y= %d, bias_y=%d\n"), g_gain_x, g_bias_x, g_gain_y, g_bias_y);
    36d0:	ed b7       	in	r30, 0x3d	; 61
    36d2:	fe b7       	in	r31, 0x3e	; 62
    36d4:	3a 97       	sbiw	r30, 0x0a	; 10
    36d6:	ed bf       	out	0x3d, r30	; 61
    36d8:	fe bf       	out	0x3e, r31	; 62
    36da:	31 96       	adiw	r30, 0x01	; 1
    36dc:	84 e5       	ldi	r24, 0x54	; 84
    36de:	9a e0       	ldi	r25, 0x0A	; 10
    36e0:	cd b7       	in	r28, 0x3d	; 61
    36e2:	de b7       	in	r29, 0x3e	; 62
    36e4:	89 83       	std	Y+1, r24	; 0x01
    36e6:	9a 83       	std	Y+2, r25	; 0x02
    36e8:	42 83       	std	Z+2, r20	; 0x02
    36ea:	53 83       	std	Z+3, r21	; 0x03
    36ec:	64 83       	std	Z+4, r22	; 0x04
    36ee:	75 83       	std	Z+5, r23	; 0x05
    36f0:	a6 83       	std	Z+6, r26	; 0x06
    36f2:	b7 83       	std	Z+7, r27	; 0x07
    36f4:	20 87       	std	Z+8, r18	; 0x08
    36f6:	31 87       	std	Z+9, r19	; 0x09
    36f8:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    36fc:	ed b7       	in	r30, 0x3d	; 61
    36fe:	fe b7       	in	r31, 0x3e	; 62
    3700:	3a 96       	adiw	r30, 0x0a	; 10
    3702:	ed bf       	out	0x3d, r30	; 61
    3704:	fe bf       	out	0x3e, r31	; 62
    3706:	06 c0       	rjmp	.+12     	; 0x3714 <handle_message_length_9+0xac>
            break;
		
		default:
            i2cMasterSend(0x00, 8, ERROR_CODES[6]);
    3708:	80 e0       	ldi	r24, 0x00	; 0
    370a:	68 e0       	ldi	r22, 0x08	; 8
    370c:	4b e8       	ldi	r20, 0x8B	; 139
    370e:	50 e2       	ldi	r21, 0x20	; 32
    3710:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <i2cMasterSend>
			
	}
}  // handle_message_length_9()
    3714:	df 91       	pop	r29
    3716:	cf 91       	pop	r28
    3718:	08 95       	ret

0000371a <handle_message_length_5>:
    }
} // handle_message_length_4()


void handle_message_length_5(uint8_t *msg_buffer)
{
    371a:	cf 93       	push	r28
    371c:	df 93       	push	r29
    371e:	fc 01       	movw	r30, r24
    switch(msg_buffer[0])
    3720:	80 81       	ld	r24, Z
    3722:	80 37       	cpi	r24, 0x70	; 112
    3724:	21 f0       	breq	.+8      	; 0x372e <handle_message_length_5+0x14>
    3726:	81 37       	cpi	r24, 0x71	; 113
    3728:	09 f0       	breq	.+2      	; 0x372c <handle_message_length_5+0x12>
    372a:	cc c0       	rjmp	.+408    	; 0x38c4 <handle_message_length_5+0x1aa>
    372c:	8b c0       	rjmp	.+278    	; 0x3844 <handle_message_length_5+0x12a>
    {
        case MSG_5_SET_POSITION:   //put in a bunch of type casts, because of mysterious error dealing with frame index above 128.
            //'set_position'
            g_x = (uint8_t)msg_buffer[1] + (256*(uint8_t)msg_buffer[2]);
    372e:	92 81       	ldd	r25, Z+2	; 0x02
    3730:	80 e0       	ldi	r24, 0x00	; 0
    3732:	21 81       	ldd	r18, Z+1	; 0x01
    3734:	82 0f       	add	r24, r18
    3736:	91 1d       	adc	r25, r1
    3738:	80 93 bc 23 	sts	0x23BC, r24
    373c:	90 93 bd 23 	sts	0x23BD, r25
            g_y = (uint8_t)msg_buffer[3] + (256*(uint8_t)msg_buffer[4]);
    3740:	94 81       	ldd	r25, Z+4	; 0x04
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	23 81       	ldd	r18, Z+3	; 0x03
    3746:	82 0f       	add	r24, r18
    3748:	91 1d       	adc	r25, r1
    374a:	80 93 be 23 	sts	0x23BE, r24
    374e:	90 93 bf 23 	sts	0x23BF, r25
            
            g_x_initial = g_x; // these only used during position func. control mode, but
    3752:	80 91 bc 23 	lds	r24, 0x23BC
    3756:	90 91 bd 23 	lds	r25, 0x23BD
    375a:	80 93 c0 23 	sts	0x23C0, r24
    375e:	90 93 c1 23 	sts	0x23C1, r25
            g_y_initial = g_y; //update here should not slow things down much and no need for sep. function.
    3762:	80 91 be 23 	lds	r24, 0x23BE
    3766:	90 91 bf 23 	lds	r25, 0x23BF
    376a:	80 93 c2 23 	sts	0x23C2, r24
    376e:	90 93 c3 23 	sts	0x23C3, r25
            g_index_frame = FRAMEFROMXY(g_x, g_y);
    3772:	60 91 be 23 	lds	r22, 0x23BE
    3776:	70 91 bf 23 	lds	r23, 0x23BF
    377a:	20 91 bc 23 	lds	r18, 0x23BC
    377e:	30 91 bd 23 	lds	r19, 0x23BD
    3782:	40 91 39 20 	lds	r20, 0x2039
    3786:	50 91 3a 20 	lds	r21, 0x203A
    378a:	64 9f       	mul	r22, r20
    378c:	c0 01       	movw	r24, r0
    378e:	65 9f       	mul	r22, r21
    3790:	90 0d       	add	r25, r0
    3792:	74 9f       	mul	r23, r20
    3794:	90 0d       	add	r25, r0
    3796:	11 24       	eor	r1, r1
    3798:	82 0f       	add	r24, r18
    379a:	93 1f       	adc	r25, r19
    379c:	80 93 b6 23 	sts	0x23B6, r24
    37a0:	90 93 b7 23 	sts	0x23B7, r25
            g_display_count = 0;  //clear the display count
    37a4:	10 92 b2 23 	sts	0x23B2, r1
            if (!g_b_quiet_mode)
    37a8:	80 91 34 20 	lds	r24, 0x2034
    37ac:	88 23       	and	r24, r24
    37ae:	51 f5       	brne	.+84     	; 0x3804 <handle_message_length_5+0xea>
                xprintf(PSTR("set_position: g_x= %u,  g_y= %u, and g_index_frame= %u\n"), g_x, g_y, g_index_frame);
    37b0:	40 91 bc 23 	lds	r20, 0x23BC
    37b4:	50 91 bd 23 	lds	r21, 0x23BD
    37b8:	20 91 be 23 	lds	r18, 0x23BE
    37bc:	30 91 bf 23 	lds	r19, 0x23BF
    37c0:	80 91 b6 23 	lds	r24, 0x23B6
    37c4:	90 91 b7 23 	lds	r25, 0x23B7
    37c8:	6d b7       	in	r22, 0x3d	; 61
    37ca:	7e b7       	in	r23, 0x3e	; 62
    37cc:	68 50       	subi	r22, 0x08	; 8
    37ce:	70 40       	sbci	r23, 0x00	; 0
    37d0:	6d bf       	out	0x3d, r22	; 61
    37d2:	7e bf       	out	0x3e, r23	; 62
    37d4:	ed b7       	in	r30, 0x3d	; 61
    37d6:	fe b7       	in	r31, 0x3e	; 62
    37d8:	31 96       	adiw	r30, 0x01	; 1
    37da:	62 ed       	ldi	r22, 0xD2	; 210
    37dc:	7a e0       	ldi	r23, 0x0A	; 10
    37de:	ad b7       	in	r26, 0x3d	; 61
    37e0:	be b7       	in	r27, 0x3e	; 62
    37e2:	11 96       	adiw	r26, 0x01	; 1
    37e4:	6d 93       	st	X+, r22
    37e6:	7c 93       	st	X, r23
    37e8:	12 97       	sbiw	r26, 0x02	; 2
    37ea:	42 83       	std	Z+2, r20	; 0x02
    37ec:	53 83       	std	Z+3, r21	; 0x03
    37ee:	24 83       	std	Z+4, r18	; 0x04
    37f0:	35 83       	std	Z+5, r19	; 0x05
    37f2:	86 83       	std	Z+6, r24	; 0x06
    37f4:	97 83       	std	Z+7, r25	; 0x07
    37f6:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
    37fe:	28 96       	adiw	r28, 0x08	; 8
    3800:	cd bf       	out	0x3d, r28	; 61
    3802:	de bf       	out	0x3e, r29	; 62

			if (usePreloadedPattern == 1)
    3804:	80 91 bb 23 	lds	r24, 0x23BB
    3808:	81 30       	cpi	r24, 0x01	; 1
    380a:	79 f4       	brne	.+30     	; 0x382a <handle_message_length_5+0x110>
				display_preload_frame(g_index_frame, g_x, g_y);
    380c:	80 91 b6 23 	lds	r24, 0x23B6
    3810:	90 91 b7 23 	lds	r25, 0x23B7
    3814:	60 91 bc 23 	lds	r22, 0x23BC
    3818:	70 91 bd 23 	lds	r23, 0x23BD
    381c:	40 91 be 23 	lds	r20, 0x23BE
    3820:	50 91 bf 23 	lds	r21, 0x23BF
    3824:	0e 94 92 1a 	call	0x3524	; 0x3524 <display_preload_frame>
    3828:	53 c0       	rjmp	.+166    	; 0x38d0 <handle_message_length_5+0x1b6>
			else
                fetch_and_display_frame(&g_file_pattern, g_x, g_y);
    382a:	60 91 bc 23 	lds	r22, 0x23BC
    382e:	70 91 bd 23 	lds	r23, 0x23BD
    3832:	40 91 be 23 	lds	r20, 0x23BE
    3836:	50 91 bf 23 	lds	r21, 0x23BF
    383a:	89 ed       	ldi	r24, 0xD9	; 217
    383c:	97 e2       	ldi	r25, 0x27	; 39
    383e:	0e 94 6f 16 	call	0x2cde	; 0x2cde <fetch_and_display_frame>
    3842:	46 c0       	rjmp	.+140    	; 0x38d0 <handle_message_length_5+0x1b6>
            break;

        case MSG_5_SEND_GAIN_BIAS: // The version of the command with signed 8 bit arguments.
            g_gain_x = (int16_t)(int8_t)msg_buffer[1];
    3844:	61 81       	ldd	r22, Z+1	; 0x01
    3846:	77 27       	eor	r23, r23
    3848:	67 fd       	sbrc	r22, 7
    384a:	70 95       	com	r23
    384c:	60 93 ec 23 	sts	0x23EC, r22
    3850:	70 93 ed 23 	sts	0x23ED, r23
            g_bias_x = (int16_t)(int8_t)msg_buffer[2];
    3854:	42 81       	ldd	r20, Z+2	; 0x02
    3856:	55 27       	eor	r21, r21
    3858:	47 fd       	sbrc	r20, 7
    385a:	50 95       	com	r21
    385c:	40 93 f0 23 	sts	0x23F0, r20
    3860:	50 93 f1 23 	sts	0x23F1, r21
            g_gain_y = (int16_t)(int8_t)msg_buffer[3];
    3864:	23 81       	ldd	r18, Z+3	; 0x03
    3866:	33 27       	eor	r19, r19
    3868:	27 fd       	sbrc	r18, 7
    386a:	30 95       	com	r19
    386c:	20 93 ee 23 	sts	0x23EE, r18
    3870:	30 93 ef 23 	sts	0x23EF, r19
            g_bias_y = (int16_t)(int8_t)msg_buffer[4];
    3874:	84 81       	ldd	r24, Z+4	; 0x04
    3876:	99 27       	eor	r25, r25
    3878:	87 fd       	sbrc	r24, 7
    387a:	90 95       	com	r25
    387c:	80 93 f2 23 	sts	0x23F2, r24
    3880:	90 93 f3 23 	sts	0x23F3, r25
            if (!g_b_quiet_mode)
    3884:	e0 91 34 20 	lds	r30, 0x2034
    3888:	ee 23       	and	r30, r30
    388a:	11 f5       	brne	.+68     	; 0x38d0 <handle_message_length_5+0x1b6>
                xprintf(PSTR("set_gain_bias: gain_x= %d,  bias_x= %d, gain_y= %d, bias_y=%d\n"), g_gain_x, g_bias_x, g_gain_y, g_bias_y);
    388c:	ed b7       	in	r30, 0x3d	; 61
    388e:	fe b7       	in	r31, 0x3e	; 62
    3890:	3a 97       	sbiw	r30, 0x0a	; 10
    3892:	ed bf       	out	0x3d, r30	; 61
    3894:	fe bf       	out	0x3e, r31	; 62
    3896:	31 96       	adiw	r30, 0x01	; 1
    3898:	a3 e9       	ldi	r26, 0x93	; 147
    389a:	ba e0       	ldi	r27, 0x0A	; 10
    389c:	cd b7       	in	r28, 0x3d	; 61
    389e:	de b7       	in	r29, 0x3e	; 62
    38a0:	a9 83       	std	Y+1, r26	; 0x01
    38a2:	ba 83       	std	Y+2, r27	; 0x02
    38a4:	62 83       	std	Z+2, r22	; 0x02
    38a6:	73 83       	std	Z+3, r23	; 0x03
    38a8:	44 83       	std	Z+4, r20	; 0x04
    38aa:	55 83       	std	Z+5, r21	; 0x05
    38ac:	26 83       	std	Z+6, r18	; 0x06
    38ae:	37 83       	std	Z+7, r19	; 0x07
    38b0:	80 87       	std	Z+8, r24	; 0x08
    38b2:	91 87       	std	Z+9, r25	; 0x09
    38b4:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    38b8:	ed b7       	in	r30, 0x3d	; 61
    38ba:	fe b7       	in	r31, 0x3e	; 62
    38bc:	3a 96       	adiw	r30, 0x0a	; 10
    38be:	ed bf       	out	0x3d, r30	; 61
    38c0:	fe bf       	out	0x3e, r31	; 62
    38c2:	06 c0       	rjmp	.+12     	; 0x38d0 <handle_message_length_5+0x1b6>
            break;
        
        default:
            i2cMasterSend(0x00, 8, ERROR_CODES[5]);
    38c4:	80 e0       	ldi	r24, 0x00	; 0
    38c6:	68 e0       	ldi	r22, 0x08	; 8
    38c8:	43 e8       	ldi	r20, 0x83	; 131
    38ca:	50 e2       	ldi	r21, 0x20	; 32
    38cc:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <i2cMasterSend>
            
    }
} // handle_message_length_5()
    38d0:	df 91       	pop	r29
    38d2:	cf 91       	pop	r28
    38d4:	08 95       	ret

000038d6 <handle_message_length_4>:
    }
} // handle_message_length_3()


void handle_message_length_4(uint8_t *msg_buffer)
{
    38d6:	fc 01       	movw	r30, r24
    int16_t setVal;
    //'set_ao'
    switch(msg_buffer[0])
    38d8:	80 81       	ld	r24, Z
    38da:	80 31       	cpi	r24, 0x10	; 16
    38dc:	19 f0       	breq	.+6      	; 0x38e4 <handle_message_length_4+0xe>
    38de:	81 31       	cpi	r24, 0x11	; 17
    38e0:	a9 f4       	brne	.+42     	; 0x390c <handle_message_length_4+0x36>
    38e2:	07 c0       	rjmp	.+14     	; 0x38f2 <handle_message_length_4+0x1c>
    {
        case MSG_4_SET_AO_POS: //set a value ranging from 0-32767 (0-10V) to one of the DAC1~4.
            setVal = (int16_t) msg_buffer[2] + (256*msg_buffer[3]);
            analogWrite(msg_buffer[1] - 1, setVal);
    38e4:	81 81       	ldd	r24, Z+1	; 0x01
    int16_t setVal;
    //'set_ao'
    switch(msg_buffer[0])
    {
        case MSG_4_SET_AO_POS: //set a value ranging from 0-32767 (0-10V) to one of the DAC1~4.
            setVal = (int16_t) msg_buffer[2] + (256*msg_buffer[3]);
    38e6:	73 81       	ldd	r23, Z+3	; 0x03
    38e8:	60 e0       	ldi	r22, 0x00	; 0
    38ea:	92 81       	ldd	r25, Z+2	; 0x02
    38ec:	69 0f       	add	r22, r25
    38ee:	71 1d       	adc	r23, r1
    38f0:	09 c0       	rjmp	.+18     	; 0x3904 <handle_message_length_4+0x2e>
            analogWrite(msg_buffer[1] - 1, setVal);
            break;

        case MSG_4_SET_AO_NEG:  //set a value ranging from -32767 to 0(-10V-0)  to one of the DAC1-4
            setVal = (int16_t) msg_buffer[2] + (256*msg_buffer[3]);
    38f2:	73 81       	ldd	r23, Z+3	; 0x03
    38f4:	60 e0       	ldi	r22, 0x00	; 0
    38f6:	82 81       	ldd	r24, Z+2	; 0x02
    38f8:	68 0f       	add	r22, r24
    38fa:	71 1d       	adc	r23, r1
            setVal = -setVal;
            analogWrite(msg_buffer[1] - 1, setVal);
    38fc:	81 81       	ldd	r24, Z+1	; 0x01
            analogWrite(msg_buffer[1] - 1, setVal);
            break;

        case MSG_4_SET_AO_NEG:  //set a value ranging from -32767 to 0(-10V-0)  to one of the DAC1-4
            setVal = (int16_t) msg_buffer[2] + (256*msg_buffer[3]);
            setVal = -setVal;
    38fe:	70 95       	com	r23
    3900:	61 95       	neg	r22
    3902:	7f 4f       	sbci	r23, 0xFF	; 255
            analogWrite(msg_buffer[1] - 1, setVal);
    3904:	81 50       	subi	r24, 0x01	; 1
    3906:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <analogWrite>
            break;
    390a:	08 95       	ret

        default:   
            i2cMasterSend(0x00, 8, ERROR_CODES[4]);
    390c:	80 e0       	ldi	r24, 0x00	; 0
    390e:	68 e0       	ldi	r22, 0x08	; 8
    3910:	4b e7       	ldi	r20, 0x7B	; 123
    3912:	50 e2       	ldi	r21, 0x20	; 32
    3914:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <i2cMasterSend>
    3918:	08 95       	ret

0000391a <handle_message_length_2>:
    }
} // handle_message_length_1()


void handle_message_length_2(uint8_t *msg_buffer)
{
    391a:	fc 01       	movw	r30, r24
    uint8_t argument_byte;
    
    argument_byte = msg_buffer[1];
    391c:	81 81       	ldd	r24, Z+1	; 0x01
    switch(msg_buffer[0])
    391e:	20 81       	ld	r18, Z
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	21 50       	subi	r18, 0x01	; 1
    3924:	30 40       	sbci	r19, 0x00	; 0
    3926:	20 31       	cpi	r18, 0x10	; 16
    3928:	31 05       	cpc	r19, r1
    392a:	d8 f5       	brcc	.+118    	; 0x39a2 <handle_message_length_2+0x88>
    392c:	26 50       	subi	r18, 0x06	; 6
    392e:	3f 4f       	sbci	r19, 0xFF	; 255
    3930:	f9 01       	movw	r30, r18
    3932:	0c 94 eb 4b 	jmp	0x97d6	; 0x97d6 <__tablejump2__>
    {
        case MSG_2_RESET: //sends a reset command out to panel at target address
            i2cMasterSend(argument_byte, 2, RESET);
    3936:	62 e0       	ldi	r22, 0x02	; 2
    3938:	4b e9       	ldi	r20, 0x9B	; 155
    393a:	50 e2       	ldi	r21, 0x20	; 32
    393c:	36 c0       	rjmp	.+108    	; 0x39aa <handle_message_length_2+0x90>
            break;
            
        case MSG_2_DISPLAY: //sends a display command out to panel at target address
            i2cMasterSend(argument_byte, 2, DISPLAY);
    393e:	62 e0       	ldi	r22, 0x02	; 2
    3940:	4d e9       	ldi	r20, 0x9D	; 157
    3942:	50 e2       	ldi	r21, 0x20	; 32
    3944:	32 c0       	rjmp	.+100    	; 0x39aa <handle_message_length_2+0x90>
            break;
            
        case MSG_2_SET_PATTERN_ID:   //set pattern
            set_pattern(argument_byte);      //pattern x - specified in argument_byte
    3946:	0e 94 90 19 	call	0x3320	; 0x3320 <set_pattern>
            break;
    394a:	08 95       	ret
            
        case MSG_2_ADC_TEST: // this is an ADC test command
            test_ADC(argument_byte);  //here argument_byte is a channel, 0-7 to test ADC/DAC system
    394c:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <test_ADC>
            break;
    3950:	08 95       	ret
            
        case MSG_2_DIO_TEST: // this is a DIO test command
            test_DIO(argument_byte);  //here argument_byte is a channel, 0-7 to test ADC/DAC system
    3952:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <test_DIO>
            break;
    3956:	08 95       	ret
            
        case MSG_2_SET_TRIGGER_RATE: // this is a trigger rate set command
            g_trigger_rate = argument_byte*2;  //here argument_byte is a trigger rate
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	88 0f       	add	r24, r24
    395c:	99 1f       	adc	r25, r25
    395e:	80 93 51 20 	sts	0x2051, r24
    3962:	90 93 52 20 	sts	0x2052, r25
            break;
    3966:	08 95       	ret
            
        case MSG_2_FLASH_PANEL:   //flash panel#
            flash_panel(argument_byte); //here argument_byte is a panel number
    3968:	0e 94 9f 30 	call	0x613e	; 0x613e <flash_panel>
            break;
    396c:	08 95       	ret
            
        case MSG_2_EEPROM_PANEL:   //eeprom panel#
            eeprom_panel(argument_byte); //here argument_byte is a panel number
    396e:	0e 94 b9 33 	call	0x6772	; 0x6772 <eeprom_panel>
            break;
    3972:	08 95       	ret
            
        case MSG_2_SET_CONFIG_ID:   //set arena configuration
            set_hwConfig(argument_byte);      //configuration x - specified in argument_byte
    3974:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <set_hwConfig>
            break;    
    3978:	08 95       	ret
            
        case MSG_2_GET_ADC_VALUE:  // get ADC value from a ADC channel (1-4)
            xprintf(PSTR("ADC_value =  %d:\n"), analogRead(argument_byte - 1));
    397a:	81 50       	subi	r24, 0x01	; 1
    397c:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <analogRead>
    3980:	00 d0       	rcall	.+0      	; 0x3982 <handle_message_length_2+0x68>
    3982:	0f 92       	push	r0
    3984:	20 e5       	ldi	r18, 0x50	; 80
    3986:	3b e0       	ldi	r19, 0x0B	; 11
    3988:	ed b7       	in	r30, 0x3d	; 61
    398a:	fe b7       	in	r31, 0x3e	; 62
    398c:	21 83       	std	Z+1, r18	; 0x01
    398e:	32 83       	std	Z+2, r19	; 0x02
    3990:	83 83       	std	Z+3, r24	; 0x03
    3992:	94 83       	std	Z+4, r25	; 0x04
    3994:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
            break;    
    3998:	0f 90       	pop	r0
    399a:	0f 90       	pop	r0
    399c:	0f 90       	pop	r0
    399e:	0f 90       	pop	r0
    39a0:	08 95       	ret
            
            
        default: i2cMasterSend(0x00, 8, ERROR_CODES[2]);
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	68 e0       	ldi	r22, 0x08	; 8
    39a6:	4b e6       	ldi	r20, 0x6B	; 107
    39a8:	50 e2       	ldi	r21, 0x20	; 32
    39aa:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <i2cMasterSend>
    39ae:	08 95       	ret

000039b0 <set_default_func>:
//
void set_default_func(uint8_t channel)
{
    uint16_t i;
    
    switch (channel)
    39b0:	81 30       	cpi	r24, 0x01	; 1
    39b2:	21 f0       	breq	.+8      	; 0x39bc <set_default_func+0xc>
    39b4:	82 30       	cpi	r24, 0x02	; 2
    39b6:	09 f0       	breq	.+2      	; 0x39ba <set_default_func+0xa>
    39b8:	6b c0       	rjmp	.+214    	; 0x3a90 <set_default_func+0xe0>
    39ba:	35 c0       	rjmp	.+106    	; 0x3a26 <set_default_func+0x76>
    {
        case CHANNEL_X:
            if (!g_b_quiet_mode)
    39bc:	80 91 34 20 	lds	r24, 0x2034
    39c0:	88 23       	and	r24, r24
    39c2:	21 f4       	brne	.+8      	; 0x39cc <set_default_func+0x1c>
                xputs(PSTR("Setting default function for X.\n"));
    39c4:	8a e8       	ldi	r24, 0x8A	; 138
    39c6:	97 e0       	ldi	r25, 0x07	; 7
    39c8:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>

            //Reg_Handler(calculate_and_set_position_x, g_period_func_x, ISR_INCREMENT_FUNC_X, FALSE);// disable ISR
            g_id_func_x = 0;
    39cc:	10 92 e8 23 	sts	0x23E8, r1
    39d0:	10 92 e9 23 	sts	0x23E9, r1
            g_b_default_func_x = TRUE;
    39d4:	81 e0       	ldi	r24, 0x01	; 1
    39d6:	80 93 4b 20 	sts	0x204B, r24
            g_nbytes_func_x = RINGBUFFER_LENGTH;
    39da:	84 e6       	ldi	r24, 0x64	; 100
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	a0 e0       	ldi	r26, 0x00	; 0
    39e0:	b0 e0       	ldi	r27, 0x00	; 0
    39e2:	80 93 3d 20 	sts	0x203D, r24
    39e6:	90 93 3e 20 	sts	0x203E, r25
    39ea:	a0 93 3f 20 	sts	0x203F, r26
    39ee:	b0 93 40 20 	sts	0x2040, r27
    39f2:	eb ef       	ldi	r30, 0xFB	; 251
    39f4:	f5 e2       	ldi	r31, 0x25	; 37

            for (i=0; i<RINGBUFFER_LENGTH; i++)
                g_buf_func_x[i] = 10;
    39f6:	8a e0       	ldi	r24, 0x0A	; 10
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	81 93       	st	Z+, r24
    39fc:	91 93       	st	Z+, r25
            //Reg_Handler(calculate_and_set_position_x, g_period_func_x, ISR_INCREMENT_FUNC_X, FALSE);// disable ISR
            g_id_func_x = 0;
            g_b_default_func_x = TRUE;
            g_nbytes_func_x = RINGBUFFER_LENGTH;

            for (i=0; i<RINGBUFFER_LENGTH; i++)
    39fe:	26 e2       	ldi	r18, 0x26	; 38
    3a00:	e3 3c       	cpi	r30, 0xC3	; 195
    3a02:	f2 07       	cpc	r31, r18
    3a04:	d1 f7       	brne	.-12     	; 0x39fa <set_default_func+0x4a>
                g_buf_func_x[i] = 10;

            g_index_func_x_read = 0;
    3a06:	10 92 de 23 	sts	0x23DE, r1
            g_filllevel_buf_func_x = RINGBUFFER_LENGTH;
    3a0a:	84 e6       	ldi	r24, 0x64	; 100
    3a0c:	80 93 e2 23 	sts	0x23E2, r24
            g_nblocks_func_x = 1;
    3a10:	81 e0       	ldi	r24, 0x01	; 1
    3a12:	90 e0       	ldi	r25, 0x00	; 0
    3a14:	80 93 47 20 	sts	0x2047, r24
    3a18:	90 93 48 20 	sts	0x2048, r25
            g_nbytes_final_block_x = 0;
    3a1c:	10 92 e4 23 	sts	0x23E4, r1
    3a20:	10 92 e5 23 	sts	0x23E5, r1
            //Reg_Handler(calculate_and_set_position_x, g_period_func_x, ISR_INCREMENT_FUNC_X, TRUE);// enable ISR
            break;
    3a24:	08 95       	ret
        case CHANNEL_Y:
            if (!g_b_quiet_mode)
    3a26:	80 91 34 20 	lds	r24, 0x2034
    3a2a:	88 23       	and	r24, r24
    3a2c:	21 f4       	brne	.+8      	; 0x3a36 <set_default_func+0x86>
                xputs(PSTR("Setting default function for Y.\n"));
    3a2e:	89 e6       	ldi	r24, 0x69	; 105
    3a30:	97 e0       	ldi	r25, 0x07	; 7
    3a32:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>

            //Reg_Handler(calculate_and_set_position_y, g_period_func_y, ISR_INCREMENT_FUNC_Y, FALSE);// disable ISR
            g_id_func_y = 0;
    3a36:	10 92 ea 23 	sts	0x23EA, r1
    3a3a:	10 92 eb 23 	sts	0x23EB, r1
            g_b_default_func_y = TRUE;
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	80 93 4c 20 	sts	0x204C, r24
            g_nbytes_func_y = RINGBUFFER_LENGTH;
    3a44:	84 e6       	ldi	r24, 0x64	; 100
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	a0 e0       	ldi	r26, 0x00	; 0
    3a4a:	b0 e0       	ldi	r27, 0x00	; 0
    3a4c:	80 93 41 20 	sts	0x2041, r24
    3a50:	90 93 42 20 	sts	0x2042, r25
    3a54:	a0 93 43 20 	sts	0x2043, r26
    3a58:	b0 93 44 20 	sts	0x2044, r27
    3a5c:	ed ed       	ldi	r30, 0xDD	; 221
    3a5e:	f6 e2       	ldi	r31, 0x26	; 38

            for (i=0; i<RINGBUFFER_LENGTH; i++)
                g_buf_func_y[i] = 10;
    3a60:	8a e0       	ldi	r24, 0x0A	; 10
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	81 93       	st	Z+, r24
    3a66:	91 93       	st	Z+, r25
            //Reg_Handler(calculate_and_set_position_y, g_period_func_y, ISR_INCREMENT_FUNC_Y, FALSE);// disable ISR
            g_id_func_y = 0;
            g_b_default_func_y = TRUE;
            g_nbytes_func_y = RINGBUFFER_LENGTH;

            for (i=0; i<RINGBUFFER_LENGTH; i++)
    3a68:	27 e2       	ldi	r18, 0x27	; 39
    3a6a:	e5 3a       	cpi	r30, 0xA5	; 165
    3a6c:	f2 07       	cpc	r31, r18
    3a6e:	d1 f7       	brne	.-12     	; 0x3a64 <set_default_func+0xb4>
                g_buf_func_y[i] = 10;
            
            g_index_func_y_read = 0;
    3a70:	10 92 df 23 	sts	0x23DF, r1
            g_filllevel_buf_func_y = RINGBUFFER_LENGTH;
    3a74:	84 e6       	ldi	r24, 0x64	; 100
    3a76:	80 93 e3 23 	sts	0x23E3, r24
            g_nblocks_func_y = 1;
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	80 93 49 20 	sts	0x2049, r24
    3a82:	90 93 4a 20 	sts	0x204A, r25
            g_nbytes_final_block_y = 0;
    3a86:	10 92 e6 23 	sts	0x23E6, r1
    3a8a:	10 92 e7 23 	sts	0x23E7, r1
            //Reg_Handler(calculate_and_set_position_y, g_period_func_y, ISR_INCREMENT_FUNC_Y, TRUE);// enable ISR
            break;
    3a8e:	08 95       	ret
        default:
            xputs(PSTR("Function channel number must be 1 for x, or 2 for y.\n"));
    3a90:	83 e3       	ldi	r24, 0x33	; 51
    3a92:	97 e0       	ldi	r25, 0x07	; 7
    3a94:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
    3a98:	08 95       	ret

00003a9a <fetch_block_func_x>:

// fetch_block_func_x()
// Read a block from the given open file into the X function buffer.
//
void fetch_block_func_x(FIL *pFile, uint8_t bReset, uint8_t i_block_func_x)
{
    3a9a:	8f 92       	push	r8
    3a9c:	9f 92       	push	r9
    3a9e:	bf 92       	push	r11
    3aa0:	cf 92       	push	r12
    3aa2:	df 92       	push	r13
    3aa4:	ef 92       	push	r14
    3aa6:	ff 92       	push	r15
    3aa8:	0f 93       	push	r16
    3aaa:	1f 93       	push	r17
    3aac:	df 93       	push	r29
    3aae:	cf 93       	push	r28
    3ab0:	cd b7       	in	r28, 0x3d	; 61
    3ab2:	de b7       	in	r29, 0x3e	; 62
    3ab4:	c6 56       	subi	r28, 0x66	; 102
    3ab6:	d0 40       	sbci	r29, 0x00	; 0
    3ab8:	cd bf       	out	0x3d, r28	; 61
    3aba:	de bf       	out	0x3e, r29	; 62
    3abc:	6c 01       	movw	r12, r24
    3abe:	b4 2e       	mov	r11, r20
    FRESULT 	fresult;
    uint8_t 	bufTemp[RINGBUFFER_LENGTH];
    uint16_t 	nbytesBuf;
                
    //xprintf(PSTR("i_block_func_x =  %u\n"), i_block_func_x);
    if (g_filllevel_buf_func_x < RINGBUFFER_LENGTH)
    3ac0:	80 91 e2 23 	lds	r24, 0x23E2
    3ac4:	84 36       	cpi	r24, 0x64	; 100
    3ac6:	08 f0       	brcs	.+2      	; 0x3aca <fetch_block_func_x+0x30>
    3ac8:	a0 c0       	rjmp	.+320    	; 0x3c0a <fetch_block_func_x+0x170>
    {
        if (bReset)
    3aca:	66 23       	and	r22, r22
    3acc:	31 f0       	breq	.+12     	; 0x3ada <fetch_block_func_x+0x40>
        {
            g_index_func_x_read = 0;
    3ace:	10 92 de 23 	sts	0x23DE, r1
            g_index_func_x_write = 0;
    3ad2:	10 92 e0 23 	sts	0x23E0, r1
            g_filllevel_buf_func_x = 0;
    3ad6:	10 92 e2 23 	sts	0x23E2, r1
        }
        
        offset = NBYTES_HEADER + i_block_func_x * RINGBUFFER_LENGTH;
    3ada:	84 e6       	ldi	r24, 0x64	; 100
    3adc:	2b 2d       	mov	r18, r11
    3ade:	28 9f       	mul	r18, r24
    3ae0:	c0 01       	movw	r24, r0
    3ae2:	11 24       	eor	r1, r1
    3ae4:	80 50       	subi	r24, 0x00	; 0
    3ae6:	9e 4f       	sbci	r25, 0xFE	; 254

        fresult = f_lseek(pFile, offset);
    3ae8:	7c 01       	movw	r14, r24
    3aea:	00 e0       	ldi	r16, 0x00	; 0
    3aec:	10 e0       	ldi	r17, 0x00	; 0
    3aee:	c6 01       	movw	r24, r12
    3af0:	b8 01       	movw	r22, r16
    3af2:	a7 01       	movw	r20, r14
    3af4:	0e 94 39 43 	call	0x8672	; 0x8672 <f_lseek>
        if ((fresult == FR_OK) && (pFile->fptr == offset))
    3af8:	00 97       	sbiw	r24, 0x00	; 0
    3afa:	09 f0       	breq	.+2      	; 0x3afe <fetch_block_func_x+0x64>
    3afc:	73 c0       	rjmp	.+230    	; 0x3be4 <fetch_block_func_x+0x14a>
    3afe:	f6 01       	movw	r30, r12
    3b00:	26 81       	ldd	r18, Z+6	; 0x06
    3b02:	37 81       	ldd	r19, Z+7	; 0x07
    3b04:	40 85       	ldd	r20, Z+8	; 0x08
    3b06:	51 85       	ldd	r21, Z+9	; 0x09
    3b08:	2e 15       	cp	r18, r14
    3b0a:	3f 05       	cpc	r19, r15
    3b0c:	40 07       	cpc	r20, r16
    3b0e:	51 07       	cpc	r21, r17
    3b10:	09 f0       	breq	.+2      	; 0x3b14 <fetch_block_func_x+0x7a>
    3b12:	68 c0       	rjmp	.+208    	; 0x3be4 <fetch_block_func_x+0x14a>
        {
            //i_block_func_x rangesx from 0 to g_nblocks_func_x - 1
            if ((i_block_func_x ==  g_nblocks_func_x - 1) && (g_nbytes_final_block_x != 0))
    3b14:	2b 2d       	mov	r18, r11
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	80 91 47 20 	lds	r24, 0x2047
    3b1c:	90 91 48 20 	lds	r25, 0x2048
    3b20:	01 97       	sbiw	r24, 0x01	; 1
    3b22:	28 17       	cp	r18, r24
    3b24:	39 07       	cpc	r19, r25
    3b26:	39 f4       	brne	.+14     	; 0x3b36 <fetch_block_func_x+0x9c>
    3b28:	00 91 e4 23 	lds	r16, 0x23E4
    3b2c:	10 91 e5 23 	lds	r17, 0x23E5
    3b30:	01 15       	cp	r16, r1
    3b32:	11 05       	cpc	r17, r1
    3b34:	11 f4       	brne	.+4      	; 0x3b3a <fetch_block_func_x+0xa0>
                nbytesBuf = g_nbytes_final_block_x;
            else
                nbytesBuf = RINGBUFFER_LENGTH;
    3b36:	04 e6       	ldi	r16, 0x64	; 100
    3b38:	10 e0       	ldi	r17, 0x00	; 0

            //load N bytes data to bufTemp
            fresult = f_read(pFile, bufTemp, nbytesBuf, &nbytes_read);
    3b3a:	c6 01       	movw	r24, r12
    3b3c:	be 01       	movw	r22, r28
    3b3e:	6d 5f       	subi	r22, 0xFD	; 253
    3b40:	7f 4f       	sbci	r23, 0xFF	; 255
    3b42:	a8 01       	movw	r20, r16
    3b44:	9e 01       	movw	r18, r28
    3b46:	2f 5f       	subi	r18, 0xFF	; 255
    3b48:	3f 4f       	sbci	r19, 0xFF	; 255
    3b4a:	0e 94 eb 41 	call	0x83d6	; 0x83d6 <f_read>
            if (!((fresult == FR_OK) && (nbytes_read == nbytesBuf)))
    3b4e:	00 97       	sbiw	r24, 0x00	; 0
    3b50:	29 f4       	brne	.+10     	; 0x3b5c <fetch_block_func_x+0xc2>
    3b52:	29 81       	ldd	r18, Y+1	; 0x01
    3b54:	3a 81       	ldd	r19, Y+2	; 0x02
    3b56:	20 17       	cp	r18, r16
    3b58:	31 07       	cpc	r19, r17
    3b5a:	a1 f0       	breq	.+40     	; 0x3b84 <fetch_block_func_x+0xea>
            {
                xprintf(PSTR("fresult =  %u\n"), fresult);
    3b5c:	00 d0       	rcall	.+0      	; 0x3b5e <fetch_block_func_x+0xc4>
    3b5e:	0f 92       	push	r0
    3b60:	27 ea       	ldi	r18, 0xA7	; 167
    3b62:	33 e0       	ldi	r19, 0x03	; 3
    3b64:	ed b7       	in	r30, 0x3d	; 61
    3b66:	fe b7       	in	r31, 0x3e	; 62
    3b68:	21 83       	std	Z+1, r18	; 0x01
    3b6a:	32 83       	std	Z+2, r19	; 0x02
    3b6c:	83 83       	std	Z+3, r24	; 0x03
    3b6e:	94 83       	std	Z+4, r25	; 0x04
    3b70:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                xputs(PSTR("Error reading in fetch_block_func_x().\n"));
    3b74:	0f 90       	pop	r0
    3b76:	0f 90       	pop	r0
    3b78:	0f 90       	pop	r0
    3b7a:	0f 90       	pop	r0
    3b7c:	8f e7       	ldi	r24, 0x7F	; 127
    3b7e:	93 e0       	ldi	r25, 0x03	; 3
    3b80:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
            }

            for (j=0; j<nbytes_read; j+=2)
    3b84:	49 81       	ldd	r20, Y+1	; 0x01
    3b86:	5a 81       	ldd	r21, Y+2	; 0x02
    3b88:	fe 01       	movw	r30, r28
    3b8a:	33 96       	adiw	r30, 0x03	; 3
    3b8c:	20 e0       	ldi	r18, 0x00	; 0
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
            {
                g_buf_func_x[g_index_func_x_write] = (uint16_t)bufTemp[j] + (uint16_t)bufTemp[j+1]*256 ;
                g_index_func_x_write++;
                g_index_func_x_write %= RINGBUFFER_LENGTH;
    3b90:	04 e6       	ldi	r16, 0x64	; 100
    3b92:	24 c0       	rjmp	.+72     	; 0x3bdc <fetch_block_func_x+0x142>
                xputs(PSTR("Error reading in fetch_block_func_x().\n"));
            }

            for (j=0; j<nbytes_read; j+=2)
            {
                g_buf_func_x[g_index_func_x_write] = (uint16_t)bufTemp[j] + (uint16_t)bufTemp[j+1]*256 ;
    3b94:	a0 91 e0 23 	lds	r26, 0x23E0
    3b98:	b0 e0       	ldi	r27, 0x00	; 0
    3b9a:	aa 0f       	add	r26, r26
    3b9c:	bb 1f       	adc	r27, r27
    3b9e:	a5 50       	subi	r26, 0x05	; 5
    3ba0:	ba 4d       	sbci	r27, 0xDA	; 218
    3ba2:	91 80       	ldd	r9, Z+1	; 0x01
    3ba4:	88 24       	eor	r8, r8
    3ba6:	80 81       	ld	r24, Z
    3ba8:	b4 01       	movw	r22, r8
    3baa:	68 0f       	add	r22, r24
    3bac:	71 1d       	adc	r23, r1
    3bae:	6d 93       	st	X+, r22
    3bb0:	7c 93       	st	X, r23
    3bb2:	11 97       	sbiw	r26, 0x01	; 1
                g_index_func_x_write++;
    3bb4:	80 91 e0 23 	lds	r24, 0x23E0
    3bb8:	8f 5f       	subi	r24, 0xFF	; 255
    3bba:	80 93 e0 23 	sts	0x23E0, r24
                g_index_func_x_write %= RINGBUFFER_LENGTH;
    3bbe:	80 91 e0 23 	lds	r24, 0x23E0
    3bc2:	60 2f       	mov	r22, r16
    3bc4:	0e 94 4a 4b 	call	0x9694	; 0x9694 <__udivmodqi4>
    3bc8:	90 93 e0 23 	sts	0x23E0, r25
                g_filllevel_buf_func_x++;
    3bcc:	80 91 e2 23 	lds	r24, 0x23E2
    3bd0:	8f 5f       	subi	r24, 0xFF	; 255
    3bd2:	80 93 e2 23 	sts	0x23E2, r24
            {
                xprintf(PSTR("fresult =  %u\n"), fresult);
                xputs(PSTR("Error reading in fetch_block_func_x().\n"));
            }

            for (j=0; j<nbytes_read; j+=2)
    3bd6:	2e 5f       	subi	r18, 0xFE	; 254
    3bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    3bda:	32 96       	adiw	r30, 0x02	; 2
    3bdc:	24 17       	cp	r18, r20
    3bde:	35 07       	cpc	r19, r21
    3be0:	c8 f2       	brcs	.-78     	; 0x3b94 <fetch_block_func_x+0xfa>
    3be2:	17 c0       	rjmp	.+46     	; 0x3c12 <fetch_block_func_x+0x178>
            
            //xprintf(PSTR("g_index_func_x_write =  %u\n"), g_index_func_x_write);
        }
        else
        {
    		xprintf(PSTR("fresult =  %u\n"), fresult);
    3be4:	00 d0       	rcall	.+0      	; 0x3be6 <fetch_block_func_x+0x14c>
    3be6:	0f 92       	push	r0
    3be8:	20 e7       	ldi	r18, 0x70	; 112
    3bea:	33 e0       	ldi	r19, 0x03	; 3
    3bec:	ed b7       	in	r30, 0x3d	; 61
    3bee:	fe b7       	in	r31, 0x3e	; 62
    3bf0:	21 83       	std	Z+1, r18	; 0x01
    3bf2:	32 83       	std	Z+2, r19	; 0x02
    3bf4:	83 83       	std	Z+3, r24	; 0x03
    3bf6:	94 83       	std	Z+4, r25	; 0x04
    3bf8:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    		xputs(PSTR("Error seeking in fetch_block_func_x().\n"));
    3bfc:	0f 90       	pop	r0
    3bfe:	0f 90       	pop	r0
    3c00:	0f 90       	pop	r0
    3c02:	0f 90       	pop	r0
    3c04:	88 e4       	ldi	r24, 0x48	; 72
    3c06:	93 e0       	ldi	r25, 0x03	; 3
    3c08:	02 c0       	rjmp	.+4      	; 0x3c0e <fetch_block_func_x+0x174>
        }
    }
    else
        xputs(PSTR("Function buffer for x is full\n"));
    3c0a:	89 e2       	ldi	r24, 0x29	; 41
    3c0c:	93 e0       	ldi	r25, 0x03	; 3
    3c0e:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>

} // fetch_block_func_x()
    3c12:	ca 59       	subi	r28, 0x9A	; 154
    3c14:	df 4f       	sbci	r29, 0xFF	; 255
    3c16:	cd bf       	out	0x3d, r28	; 61
    3c18:	de bf       	out	0x3e, r29	; 62
    3c1a:	cf 91       	pop	r28
    3c1c:	df 91       	pop	r29
    3c1e:	1f 91       	pop	r17
    3c20:	0f 91       	pop	r16
    3c22:	ff 90       	pop	r15
    3c24:	ef 90       	pop	r14
    3c26:	df 90       	pop	r13
    3c28:	cf 90       	pop	r12
    3c2a:	bf 90       	pop	r11
    3c2c:	9f 90       	pop	r9
    3c2e:	8f 90       	pop	r8
    3c30:	08 95       	ret

00003c32 <fetch_block_func_y>:

// fetch_block_func_y()
// Read a block from the given open file into the Y function buffer.
//
void fetch_block_func_y(FIL *pFile, uint8_t bReset, uint8_t i_block_func_y)
{
    3c32:	8f 92       	push	r8
    3c34:	9f 92       	push	r9
    3c36:	bf 92       	push	r11
    3c38:	cf 92       	push	r12
    3c3a:	df 92       	push	r13
    3c3c:	ef 92       	push	r14
    3c3e:	ff 92       	push	r15
    3c40:	0f 93       	push	r16
    3c42:	1f 93       	push	r17
    3c44:	df 93       	push	r29
    3c46:	cf 93       	push	r28
    3c48:	cd b7       	in	r28, 0x3d	; 61
    3c4a:	de b7       	in	r29, 0x3e	; 62
    3c4c:	c6 56       	subi	r28, 0x66	; 102
    3c4e:	d0 40       	sbci	r29, 0x00	; 0
    3c50:	cd bf       	out	0x3d, r28	; 61
    3c52:	de bf       	out	0x3e, r29	; 62
    3c54:	6c 01       	movw	r12, r24
    3c56:	b4 2e       	mov	r11, r20
    FRESULT 	fresult;
    uint8_t 	bufTemp[RINGBUFFER_LENGTH];
    uint16_t 	nbytesBuf;

    //xprintf(PSTR("i_block_func_y =  %u\n"), i_block_func_y);
    if (g_filllevel_buf_func_y < RINGBUFFER_LENGTH)
    3c58:	80 91 e3 23 	lds	r24, 0x23E3
    3c5c:	84 36       	cpi	r24, 0x64	; 100
    3c5e:	08 f0       	brcs	.+2      	; 0x3c62 <fetch_block_func_y+0x30>
    3c60:	a0 c0       	rjmp	.+320    	; 0x3da2 <fetch_block_func_y+0x170>
    {
        if (bReset)
    3c62:	66 23       	and	r22, r22
    3c64:	31 f0       	breq	.+12     	; 0x3c72 <fetch_block_func_y+0x40>
        {
            g_filllevel_buf_func_y = 0;
    3c66:	10 92 e3 23 	sts	0x23E3, r1
            g_index_func_y_read = 0;
    3c6a:	10 92 df 23 	sts	0x23DF, r1
            g_index_func_y_write = 0;
    3c6e:	10 92 e1 23 	sts	0x23E1, r1
        }
        
        offset = NBYTES_HEADER + i_block_func_y * RINGBUFFER_LENGTH;
    3c72:	84 e6       	ldi	r24, 0x64	; 100
    3c74:	2b 2d       	mov	r18, r11
    3c76:	28 9f       	mul	r18, r24
    3c78:	c0 01       	movw	r24, r0
    3c7a:	11 24       	eor	r1, r1
    3c7c:	80 50       	subi	r24, 0x00	; 0
    3c7e:	9e 4f       	sbci	r25, 0xFE	; 254

        fresult = f_lseek(pFile, offset);
    3c80:	7c 01       	movw	r14, r24
    3c82:	00 e0       	ldi	r16, 0x00	; 0
    3c84:	10 e0       	ldi	r17, 0x00	; 0
    3c86:	c6 01       	movw	r24, r12
    3c88:	b8 01       	movw	r22, r16
    3c8a:	a7 01       	movw	r20, r14
    3c8c:	0e 94 39 43 	call	0x8672	; 0x8672 <f_lseek>
        if ((fresult == FR_OK) && (pFile->fptr == offset))
    3c90:	00 97       	sbiw	r24, 0x00	; 0
    3c92:	09 f0       	breq	.+2      	; 0x3c96 <fetch_block_func_y+0x64>
    3c94:	73 c0       	rjmp	.+230    	; 0x3d7c <fetch_block_func_y+0x14a>
    3c96:	f6 01       	movw	r30, r12
    3c98:	26 81       	ldd	r18, Z+6	; 0x06
    3c9a:	37 81       	ldd	r19, Z+7	; 0x07
    3c9c:	40 85       	ldd	r20, Z+8	; 0x08
    3c9e:	51 85       	ldd	r21, Z+9	; 0x09
    3ca0:	2e 15       	cp	r18, r14
    3ca2:	3f 05       	cpc	r19, r15
    3ca4:	40 07       	cpc	r20, r16
    3ca6:	51 07       	cpc	r21, r17
    3ca8:	09 f0       	breq	.+2      	; 0x3cac <fetch_block_func_y+0x7a>
    3caa:	68 c0       	rjmp	.+208    	; 0x3d7c <fetch_block_func_y+0x14a>
        {

            if ((i_block_func_y ==  g_nblocks_func_y - 1) && (g_nbytes_final_block_y != 0))
    3cac:	2b 2d       	mov	r18, r11
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	80 91 49 20 	lds	r24, 0x2049
    3cb4:	90 91 4a 20 	lds	r25, 0x204A
    3cb8:	01 97       	sbiw	r24, 0x01	; 1
    3cba:	28 17       	cp	r18, r24
    3cbc:	39 07       	cpc	r19, r25
    3cbe:	39 f4       	brne	.+14     	; 0x3cce <fetch_block_func_y+0x9c>
    3cc0:	00 91 e6 23 	lds	r16, 0x23E6
    3cc4:	10 91 e7 23 	lds	r17, 0x23E7
    3cc8:	01 15       	cp	r16, r1
    3cca:	11 05       	cpc	r17, r1
    3ccc:	11 f4       	brne	.+4      	; 0x3cd2 <fetch_block_func_y+0xa0>
                nbytesBuf = g_nbytes_final_block_y;
            else
                nbytesBuf = RINGBUFFER_LENGTH;
    3cce:	04 e6       	ldi	r16, 0x64	; 100
    3cd0:	10 e0       	ldi	r17, 0x00	; 0

            //load 100 bytes data to bufTemp
            fresult = f_read(pFile, bufTemp, nbytesBuf, &nbytes_read);
    3cd2:	c6 01       	movw	r24, r12
    3cd4:	be 01       	movw	r22, r28
    3cd6:	6d 5f       	subi	r22, 0xFD	; 253
    3cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cda:	a8 01       	movw	r20, r16
    3cdc:	9e 01       	movw	r18, r28
    3cde:	2f 5f       	subi	r18, 0xFF	; 255
    3ce0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce2:	0e 94 eb 41 	call	0x83d6	; 0x83d6 <f_read>
            if (!((fresult == FR_OK) && (nbytes_read == nbytesBuf)))
    3ce6:	00 97       	sbiw	r24, 0x00	; 0
    3ce8:	29 f4       	brne	.+10     	; 0x3cf4 <fetch_block_func_y+0xc2>
    3cea:	29 81       	ldd	r18, Y+1	; 0x01
    3cec:	3a 81       	ldd	r19, Y+2	; 0x02
    3cee:	20 17       	cp	r18, r16
    3cf0:	31 07       	cpc	r19, r17
    3cf2:	a1 f0       	breq	.+40     	; 0x3d1c <fetch_block_func_y+0xea>
            {
                xprintf(PSTR("fresult =  %u\n"), fresult);
    3cf4:	00 d0       	rcall	.+0      	; 0x3cf6 <fetch_block_func_y+0xc4>
    3cf6:	0f 92       	push	r0
    3cf8:	2a e1       	ldi	r18, 0x1A	; 26
    3cfa:	33 e0       	ldi	r19, 0x03	; 3
    3cfc:	ed b7       	in	r30, 0x3d	; 61
    3cfe:	fe b7       	in	r31, 0x3e	; 62
    3d00:	21 83       	std	Z+1, r18	; 0x01
    3d02:	32 83       	std	Z+2, r19	; 0x02
    3d04:	83 83       	std	Z+3, r24	; 0x03
    3d06:	94 83       	std	Z+4, r25	; 0x04
    3d08:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                xputs(PSTR("Error reading in fetch_block_func_y().\n"));
    3d0c:	0f 90       	pop	r0
    3d0e:	0f 90       	pop	r0
    3d10:	0f 90       	pop	r0
    3d12:	0f 90       	pop	r0
    3d14:	82 ef       	ldi	r24, 0xF2	; 242
    3d16:	92 e0       	ldi	r25, 0x02	; 2
    3d18:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
            }
            
            for (j = 0; j< nbytes_read; j+=2)
    3d1c:	49 81       	ldd	r20, Y+1	; 0x01
    3d1e:	5a 81       	ldd	r21, Y+2	; 0x02
    3d20:	fe 01       	movw	r30, r28
    3d22:	33 96       	adiw	r30, 0x03	; 3
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	30 e0       	ldi	r19, 0x00	; 0
            {
                g_buf_func_y[g_index_func_y_write] = (uint16_t)bufTemp[j] + (uint16_t)bufTemp[j+1]*256;
                g_index_func_y_write++;
                g_index_func_y_write %= RINGBUFFER_LENGTH;
    3d28:	04 e6       	ldi	r16, 0x64	; 100
    3d2a:	24 c0       	rjmp	.+72     	; 0x3d74 <fetch_block_func_y+0x142>
                xputs(PSTR("Error reading in fetch_block_func_y().\n"));
            }
            
            for (j = 0; j< nbytes_read; j+=2)
            {
                g_buf_func_y[g_index_func_y_write] = (uint16_t)bufTemp[j] + (uint16_t)bufTemp[j+1]*256;
    3d2c:	a0 91 e1 23 	lds	r26, 0x23E1
    3d30:	b0 e0       	ldi	r27, 0x00	; 0
    3d32:	aa 0f       	add	r26, r26
    3d34:	bb 1f       	adc	r27, r27
    3d36:	a3 52       	subi	r26, 0x23	; 35
    3d38:	b9 4d       	sbci	r27, 0xD9	; 217
    3d3a:	91 80       	ldd	r9, Z+1	; 0x01
    3d3c:	88 24       	eor	r8, r8
    3d3e:	80 81       	ld	r24, Z
    3d40:	b4 01       	movw	r22, r8
    3d42:	68 0f       	add	r22, r24
    3d44:	71 1d       	adc	r23, r1
    3d46:	6d 93       	st	X+, r22
    3d48:	7c 93       	st	X, r23
    3d4a:	11 97       	sbiw	r26, 0x01	; 1
                g_index_func_y_write++;
    3d4c:	80 91 e1 23 	lds	r24, 0x23E1
    3d50:	8f 5f       	subi	r24, 0xFF	; 255
    3d52:	80 93 e1 23 	sts	0x23E1, r24
                g_index_func_y_write %= RINGBUFFER_LENGTH;
    3d56:	80 91 e1 23 	lds	r24, 0x23E1
    3d5a:	60 2f       	mov	r22, r16
    3d5c:	0e 94 4a 4b 	call	0x9694	; 0x9694 <__udivmodqi4>
    3d60:	90 93 e1 23 	sts	0x23E1, r25
                g_filllevel_buf_func_y++;
    3d64:	80 91 e3 23 	lds	r24, 0x23E3
    3d68:	8f 5f       	subi	r24, 0xFF	; 255
    3d6a:	80 93 e3 23 	sts	0x23E3, r24
            {
                xprintf(PSTR("fresult =  %u\n"), fresult);
                xputs(PSTR("Error reading in fetch_block_func_y().\n"));
            }
            
            for (j = 0; j< nbytes_read; j+=2)
    3d6e:	2e 5f       	subi	r18, 0xFE	; 254
    3d70:	3f 4f       	sbci	r19, 0xFF	; 255
    3d72:	32 96       	adiw	r30, 0x02	; 2
    3d74:	24 17       	cp	r18, r20
    3d76:	35 07       	cpc	r19, r21
    3d78:	c8 f2       	brcs	.-78     	; 0x3d2c <fetch_block_func_y+0xfa>
    3d7a:	17 c0       	rjmp	.+46     	; 0x3daa <fetch_block_func_y+0x178>
            }
            //xprintf(PSTR("g_index_func_y_write =  %u\n"), g_index_func_y_write);
        }
        else
        {
    		xprintf(PSTR("fresult =  %u\n"), fresult);
    3d7c:	00 d0       	rcall	.+0      	; 0x3d7e <fetch_block_func_y+0x14c>
    3d7e:	0f 92       	push	r0
    3d80:	23 ee       	ldi	r18, 0xE3	; 227
    3d82:	32 e0       	ldi	r19, 0x02	; 2
    3d84:	ed b7       	in	r30, 0x3d	; 61
    3d86:	fe b7       	in	r31, 0x3e	; 62
    3d88:	21 83       	std	Z+1, r18	; 0x01
    3d8a:	32 83       	std	Z+2, r19	; 0x02
    3d8c:	83 83       	std	Z+3, r24	; 0x03
    3d8e:	94 83       	std	Z+4, r25	; 0x04
    3d90:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    		xputs(PSTR("Error seeking in fetch_block_func_y().\n"));
    3d94:	0f 90       	pop	r0
    3d96:	0f 90       	pop	r0
    3d98:	0f 90       	pop	r0
    3d9a:	0f 90       	pop	r0
    3d9c:	8b eb       	ldi	r24, 0xBB	; 187
    3d9e:	92 e0       	ldi	r25, 0x02	; 2
    3da0:	02 c0       	rjmp	.+4      	; 0x3da6 <fetch_block_func_y+0x174>
        }
    }
    else
        xputs(PSTR("Function buffer for y is full.\n"));
    3da2:	8b e9       	ldi	r24, 0x9B	; 155
    3da4:	92 e0       	ldi	r25, 0x02	; 2
    3da6:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>

} // fetch_block_func_y()
    3daa:	ca 59       	subi	r28, 0x9A	; 154
    3dac:	df 4f       	sbci	r29, 0xFF	; 255
    3dae:	cd bf       	out	0x3d, r28	; 61
    3db0:	de bf       	out	0x3e, r29	; 62
    3db2:	cf 91       	pop	r28
    3db4:	df 91       	pop	r29
    3db6:	1f 91       	pop	r17
    3db8:	0f 91       	pop	r16
    3dba:	ff 90       	pop	r15
    3dbc:	ef 90       	pop	r14
    3dbe:	df 90       	pop	r13
    3dc0:	cf 90       	pop	r12
    3dc2:	bf 90       	pop	r11
    3dc4:	9f 90       	pop	r9
    3dc6:	8f 90       	pop	r8
    3dc8:	08 95       	ret

00003dca <set_vel_func>:
    }
} // set_pos_func()


void set_vel_func(uint8_t channel, uint8_t id_func)
{
    3dca:	af e0       	ldi	r26, 0x0F	; 15
    3dcc:	b2 e0       	ldi	r27, 0x02	; 2
    3dce:	eb ee       	ldi	r30, 0xEB	; 235
    3dd0:	fe e1       	ldi	r31, 0x1E	; 30
    3dd2:	0c 94 c7 4b 	jmp	0x978e	; 0x978e <__prologue_saves__+0x1a>
    3dd6:	f6 2e       	mov	r15, r22
    FIL		*pFile=NULL;	// The file we're working on: &g_file_func_x or &g_file_func_y.
    uint8_t bufHeader[NBYTES_HEADER];
    
    
    if (id_func < 1000)
        sprintf(str, "vel%04d.fun\0", id_func);
    3dd8:	8e 01       	movw	r16, r28
    3dda:	0d 5f       	subi	r16, 0xFD	; 253
    3ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    3dde:	00 d0       	rcall	.+0      	; 0x3de0 <set_vel_func+0x16>
    3de0:	00 d0       	rcall	.+0      	; 0x3de2 <set_vel_func+0x18>
    3de2:	ed b7       	in	r30, 0x3d	; 61
    3de4:	fe b7       	in	r31, 0x3e	; 62
    3de6:	31 96       	adiw	r30, 0x01	; 1
    3de8:	ad b7       	in	r26, 0x3d	; 61
    3dea:	be b7       	in	r27, 0x3e	; 62
    3dec:	11 96       	adiw	r26, 0x01	; 1
    3dee:	0d 93       	st	X+, r16
    3df0:	1c 93       	st	X, r17
    3df2:	12 97       	sbiw	r26, 0x02	; 2
    3df4:	2a e1       	ldi	r18, 0x1A	; 26
    3df6:	30 e2       	ldi	r19, 0x20	; 32
    3df8:	22 83       	std	Z+2, r18	; 0x02
    3dfa:	33 83       	std	Z+3, r19	; 0x03
    3dfc:	64 83       	std	Z+4, r22	; 0x04
    3dfe:	15 82       	std	Z+5, r1	; 0x05
    3e00:	c1 5f       	subi	r28, 0xF1	; 241
    3e02:	dd 4f       	sbci	r29, 0xFD	; 253
    3e04:	88 83       	st	Y, r24
    3e06:	cf 50       	subi	r28, 0x0F	; 15
    3e08:	d2 40       	sbci	r29, 0x02	; 2
    3e0a:	0e 94 3a 4e 	call	0x9c74	; 0x9c74 <sprintf>
    else
        xputs(PSTR("function id is too big.\n"));
    
    switch(channel)
    3e0e:	ed b7       	in	r30, 0x3d	; 61
    3e10:	fe b7       	in	r31, 0x3e	; 62
    3e12:	36 96       	adiw	r30, 0x06	; 6
    3e14:	ed bf       	out	0x3d, r30	; 61
    3e16:	fe bf       	out	0x3e, r31	; 62
    3e18:	c1 5f       	subi	r28, 0xF1	; 241
    3e1a:	dd 4f       	sbci	r29, 0xFD	; 253
    3e1c:	48 81       	ld	r20, Y
    3e1e:	cf 50       	subi	r28, 0x0F	; 15
    3e20:	d2 40       	sbci	r29, 0x02	; 2
    3e22:	41 30       	cpi	r20, 0x01	; 1
    3e24:	21 f0       	breq	.+8      	; 0x3e2e <set_vel_func+0x64>
    3e26:	42 30       	cpi	r20, 0x02	; 2
    3e28:	09 f0       	breq	.+2      	; 0x3e2c <set_vel_func+0x62>
    3e2a:	bb c1       	rjmp	.+886    	; 0x41a2 <__stack+0x1a3>
    3e2c:	d9 c0       	rjmp	.+434    	; 0x3fe0 <set_vel_func+0x216>
    {
        case 1:    // Channel x.
            //Reg_Handler(calculate_and_set_position_x, g_period_func_x, ISR_INCREMENT_FUNC_X, FALSE); //disable ISR
            pFile = &g_file_func_x;
            f_close(pFile);
    3e2e:	85 ea       	ldi	r24, 0xA5	; 165
    3e30:	97 e2       	ldi	r25, 0x27	; 39
    3e32:	0e 94 2b 43 	call	0x8656	; 0x8656 <f_close>
            if (!g_b_quiet_mode)
    3e36:	80 91 34 20 	lds	r24, 0x2034
    3e3a:	88 23       	and	r24, r24
    3e3c:	a1 f4       	brne	.+40     	; 0x3e66 <set_vel_func+0x9c>
            	xprintf(PSTR("Opening %s.\n"),str);
    3e3e:	00 d0       	rcall	.+0      	; 0x3e40 <set_vel_func+0x76>
    3e40:	0f 92       	push	r0
    3e42:	83 e6       	ldi	r24, 0x63	; 99
    3e44:	95 e0       	ldi	r25, 0x05	; 5
    3e46:	ad b7       	in	r26, 0x3d	; 61
    3e48:	be b7       	in	r27, 0x3e	; 62
    3e4a:	11 96       	adiw	r26, 0x01	; 1
    3e4c:	8d 93       	st	X+, r24
    3e4e:	9c 93       	st	X, r25
    3e50:	12 97       	sbiw	r26, 0x02	; 2
    3e52:	13 96       	adiw	r26, 0x03	; 3
    3e54:	0d 93       	st	X+, r16
    3e56:	1c 93       	st	X, r17
    3e58:	14 97       	sbiw	r26, 0x04	; 4
    3e5a:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    3e5e:	0f 90       	pop	r0
    3e60:	0f 90       	pop	r0
    3e62:	0f 90       	pop	r0
    3e64:	0f 90       	pop	r0
        	fresult = f_open(pFile, str, FA_OPEN_EXISTING | FA_READ); // The file stays open after this function returns.
    3e66:	85 ea       	ldi	r24, 0xA5	; 165
    3e68:	97 e2       	ldi	r25, 0x27	; 39
    3e6a:	b8 01       	movw	r22, r16
    3e6c:	41 e0       	ldi	r20, 0x01	; 1
    3e6e:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <f_open>
            
            if (fresult == FR_OK)
    3e72:	00 97       	sbiw	r24, 0x00	; 0
    3e74:	09 f0       	breq	.+2      	; 0x3e78 <set_vel_func+0xae>
    3e76:	b1 c0       	rjmp	.+354    	; 0x3fda <set_vel_func+0x210>
            {
                // Read the header block and send back the function name
                fresult = f_read(pFile, bufHeader, NBYTES_HEADER, &nbytes_read);
    3e78:	85 ea       	ldi	r24, 0xA5	; 165
    3e7a:	97 e2       	ldi	r25, 0x27	; 39
    3e7c:	be 01       	movw	r22, r28
    3e7e:	61 5f       	subi	r22, 0xF1	; 241
    3e80:	7f 4f       	sbci	r23, 0xFF	; 255
    3e82:	40 e0       	ldi	r20, 0x00	; 0
    3e84:	52 e0       	ldi	r21, 0x02	; 2
    3e86:	9e 01       	movw	r18, r28
    3e88:	2f 5f       	subi	r18, 0xFF	; 255
    3e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e8c:	0e 94 eb 41 	call	0x83d6	; 0x83d6 <f_read>
                
                if ((fresult == FR_OK) && (nbytes_read == NBYTES_HEADER))
    3e90:	00 97       	sbiw	r24, 0x00	; 0
    3e92:	09 f0       	breq	.+2      	; 0x3e96 <set_vel_func+0xcc>
    3e94:	9f c0       	rjmp	.+318    	; 0x3fd4 <set_vel_func+0x20a>
    3e96:	89 81       	ldd	r24, Y+1	; 0x01
    3e98:	9a 81       	ldd	r25, Y+2	; 0x02
    3e9a:	b2 e0       	ldi	r27, 0x02	; 2
    3e9c:	80 30       	cpi	r24, 0x00	; 0
    3e9e:	9b 07       	cpc	r25, r27
    3ea0:	09 f0       	breq	.+2      	; 0x3ea4 <set_vel_func+0xda>
    3ea2:	98 c0       	rjmp	.+304    	; 0x3fd4 <set_vel_func+0x20a>
                {
                    // get the header info
                    ((uint8_t*)&g_nbytes_func_x)[0] = bufHeader[0];
    3ea4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ea6:	80 93 3d 20 	sts	0x203D, r24
                    ((uint8_t*)&g_nbytes_func_x)[1] = bufHeader[1];
    3eaa:	88 89       	ldd	r24, Y+16	; 0x10
    3eac:	80 93 3e 20 	sts	0x203E, r24
                    ((uint8_t*)&g_nbytes_func_x)[2] = bufHeader[2];
    3eb0:	89 89       	ldd	r24, Y+17	; 0x11
    3eb2:	80 93 3f 20 	sts	0x203F, r24
                    ((uint8_t*)&g_nbytes_func_x)[3] = bufHeader[3];
    3eb6:	8a 89       	ldd	r24, Y+18	; 0x12
    3eb8:	80 93 40 20 	sts	0x2040, r24
                    //func_name_len = bufHeader[4];
                    
                    if(!g_nbytes_final_block_x)
    3ebc:	20 91 e4 23 	lds	r18, 0x23E4
    3ec0:	30 91 e5 23 	lds	r19, 0x23E5
    3ec4:	60 91 3d 20 	lds	r22, 0x203D
    3ec8:	70 91 3e 20 	lds	r23, 0x203E
    3ecc:	80 91 3f 20 	lds	r24, 0x203F
    3ed0:	90 91 40 20 	lds	r25, 0x2040
    3ed4:	21 15       	cp	r18, r1
    3ed6:	31 05       	cpc	r19, r1
    3ed8:	39 f4       	brne	.+14     	; 0x3ee8 <set_vel_func+0x11e>
						g_nblocks_func_x = g_nbytes_func_x/RINGBUFFER_LENGTH;
    3eda:	24 e6       	ldi	r18, 0x64	; 100
    3edc:	30 e0       	ldi	r19, 0x00	; 0
    3ede:	40 e0       	ldi	r20, 0x00	; 0
    3ee0:	50 e0       	ldi	r21, 0x00	; 0
    3ee2:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    3ee6:	08 c0       	rjmp	.+16     	; 0x3ef8 <set_vel_func+0x12e>
					else
						g_nblocks_func_x = g_nbytes_func_x / RINGBUFFER_LENGTH + 1;
    3ee8:	24 e6       	ldi	r18, 0x64	; 100
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	40 e0       	ldi	r20, 0x00	; 0
    3eee:	50 e0       	ldi	r21, 0x00	; 0
    3ef0:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    3ef4:	2f 5f       	subi	r18, 0xFF	; 255
    3ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ef8:	20 93 47 20 	sts	0x2047, r18
    3efc:	30 93 48 20 	sts	0x2048, r19


                    // Reset the function, and read the first block of bytes into the function buffer.
                    fetch_block_func_x(pFile, TRUE, 0);
    3f00:	85 ea       	ldi	r24, 0xA5	; 165
    3f02:	97 e2       	ldi	r25, 0x27	; 39
    3f04:	61 e0       	ldi	r22, 0x01	; 1
    3f06:	40 e0       	ldi	r20, 0x00	; 0
    3f08:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <fetch_block_func_x>

                    // Indicate that the function is ready.
                    g_id_func_x = id_func;
    3f0c:	f0 92 e8 23 	sts	0x23E8, r15
    3f10:	10 92 e9 23 	sts	0x23E9, r1
                    g_b_default_func_x = FALSE;
    3f14:	10 92 4b 20 	sts	0x204B, r1
                    g_b_running = FALSE;
    3f18:	10 92 b0 23 	sts	0x23B0, r1
                    g_display_count = 0;  //clear the display count
    3f1c:	10 92 b2 23 	sts	0x23B2, r1

                    if (!g_b_quiet_mode)
    3f20:	80 91 34 20 	lds	r24, 0x2034
    3f24:	88 23       	and	r24, r24
    3f26:	09 f0       	breq	.+2      	; 0x3f2a <set_vel_func+0x160>
    3f28:	40 c1       	rjmp	.+640    	; 0x41aa <__stack+0x1ab>
                    {
                        xprintf(PSTR("Set velocity function  %u for X\n"), id_func);
    3f2a:	00 d0       	rcall	.+0      	; 0x3f2c <set_vel_func+0x162>
    3f2c:	0f 92       	push	r0
    3f2e:	ed b7       	in	r30, 0x3d	; 61
    3f30:	fe b7       	in	r31, 0x3e	; 62
    3f32:	31 96       	adiw	r30, 0x01	; 1
    3f34:	82 e4       	ldi	r24, 0x42	; 66
    3f36:	95 e0       	ldi	r25, 0x05	; 5
    3f38:	ad b7       	in	r26, 0x3d	; 61
    3f3a:	be b7       	in	r27, 0x3e	; 62
    3f3c:	11 96       	adiw	r26, 0x01	; 1
    3f3e:	8d 93       	st	X+, r24
    3f40:	9c 93       	st	X, r25
    3f42:	12 97       	sbiw	r26, 0x02	; 2
    3f44:	f2 82       	std	Z+2, r15	; 0x02
    3f46:	13 82       	std	Z+3, r1	; 0x03
    3f48:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                        xprintf(PSTR("g_nbytes_func_x = %u\n"), g_nbytes_func_x);
    3f4c:	0f 92       	push	r0
    3f4e:	0f 92       	push	r0
    3f50:	8c e2       	ldi	r24, 0x2C	; 44
    3f52:	95 e0       	ldi	r25, 0x05	; 5
    3f54:	ed b7       	in	r30, 0x3d	; 61
    3f56:	fe b7       	in	r31, 0x3e	; 62
    3f58:	81 83       	std	Z+1, r24	; 0x01
    3f5a:	92 83       	std	Z+2, r25	; 0x02
    3f5c:	80 91 3d 20 	lds	r24, 0x203D
    3f60:	90 91 3e 20 	lds	r25, 0x203E
    3f64:	a0 91 3f 20 	lds	r26, 0x203F
    3f68:	b0 91 40 20 	lds	r27, 0x2040
    3f6c:	83 83       	std	Z+3, r24	; 0x03
    3f6e:	94 83       	std	Z+4, r25	; 0x04
    3f70:	a5 83       	std	Z+5, r26	; 0x05
    3f72:	b6 83       	std	Z+6, r27	; 0x06
    3f74:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                        g_nbytes_final_block_x = g_nbytes_func_x % RINGBUFFER_LENGTH;
    3f78:	60 91 3d 20 	lds	r22, 0x203D
    3f7c:	70 91 3e 20 	lds	r23, 0x203E
    3f80:	80 91 3f 20 	lds	r24, 0x203F
    3f84:	90 91 40 20 	lds	r25, 0x2040
    3f88:	24 e6       	ldi	r18, 0x64	; 100
    3f8a:	30 e0       	ldi	r19, 0x00	; 0
    3f8c:	40 e0       	ldi	r20, 0x00	; 0
    3f8e:	50 e0       	ldi	r21, 0x00	; 0
    3f90:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    3f94:	60 93 e4 23 	sts	0x23E4, r22
    3f98:	70 93 e5 23 	sts	0x23E5, r23
                        xprintf(PSTR("g_nbytes_final_block_x = %u\n"), g_nbytes_final_block_x);
    3f9c:	0f 90       	pop	r0
    3f9e:	0f 90       	pop	r0
    3fa0:	ed b7       	in	r30, 0x3d	; 61
    3fa2:	fe b7       	in	r31, 0x3e	; 62
    3fa4:	31 96       	adiw	r30, 0x01	; 1
    3fa6:	2f e0       	ldi	r18, 0x0F	; 15
    3fa8:	35 e0       	ldi	r19, 0x05	; 5
    3faa:	ad b7       	in	r26, 0x3d	; 61
    3fac:	be b7       	in	r27, 0x3e	; 62
    3fae:	11 96       	adiw	r26, 0x01	; 1
    3fb0:	2d 93       	st	X+, r18
    3fb2:	3c 93       	st	X, r19
    3fb4:	12 97       	sbiw	r26, 0x02	; 2
    3fb6:	62 83       	std	Z+2, r22	; 0x02
    3fb8:	73 83       	std	Z+3, r23	; 0x03
    3fba:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
						xprintf(PSTR("g_nblocks_func_x = %u\n"), g_nblocks_func_x);
    3fbe:	88 ef       	ldi	r24, 0xF8	; 248
    3fc0:	94 e0       	ldi	r25, 0x04	; 4
    3fc2:	ed b7       	in	r30, 0x3d	; 61
    3fc4:	fe b7       	in	r31, 0x3e	; 62
    3fc6:	81 83       	std	Z+1, r24	; 0x01
    3fc8:	92 83       	std	Z+2, r25	; 0x02
    3fca:	80 91 47 20 	lds	r24, 0x2047
    3fce:	90 91 48 20 	lds	r25, 0x2048
    3fd2:	d8 c0       	rjmp	.+432    	; 0x4184 <__stack+0x185>
                    }
                }
                else
                	xputs(PSTR("Error reading file in set_vel_func(): X.\n"));
    3fd4:	8e ec       	ldi	r24, 0xCE	; 206
    3fd6:	94 e0       	ldi	r25, 0x04	; 4
    3fd8:	e6 c0       	rjmp	.+460    	; 0x41a6 <__stack+0x1a7>
            }
            else
				xputs(PSTR("Error opening file in set_vel_func(): X.\n"));
    3fda:	84 ea       	ldi	r24, 0xA4	; 164
    3fdc:	94 e0       	ldi	r25, 0x04	; 4
    3fde:	e3 c0       	rjmp	.+454    	; 0x41a6 <__stack+0x1a7>
            
            
        case 2:	// Channel y.
            //Reg_Handler(calculate_and_set_position_y, g_period_func_y, ISR_INCREMENT_FUNC_Y, FALSE); //disable ISR
        	pFile = &g_file_func_y;
            f_close(pFile);
    3fe0:	8f eb       	ldi	r24, 0xBF	; 191
    3fe2:	97 e2       	ldi	r25, 0x27	; 39
    3fe4:	0e 94 2b 43 	call	0x8656	; 0x8656 <f_close>
            if (!g_b_quiet_mode)
    3fe8:	80 91 34 20 	lds	r24, 0x2034
    3fec:	88 23       	and	r24, r24
    3fee:	a1 f4       	brne	.+40     	; 0x4018 <__stack+0x19>
            	xprintf(PSTR("Opening %s.\n"),str);
    3ff0:	00 d0       	rcall	.+0      	; 0x3ff2 <set_vel_func+0x228>
    3ff2:	0f 92       	push	r0
    3ff4:	87 e9       	ldi	r24, 0x97	; 151
    3ff6:	94 e0       	ldi	r25, 0x04	; 4
    3ff8:	ad b7       	in	r26, 0x3d	; 61
    3ffa:	be b7       	in	r27, 0x3e	; 62
    3ffc:	11 96       	adiw	r26, 0x01	; 1
    3ffe:	8d 93       	st	X+, r24
    4000:	9c 93       	st	X, r25
    4002:	12 97       	sbiw	r26, 0x02	; 2
    4004:	13 96       	adiw	r26, 0x03	; 3
    4006:	0d 93       	st	X+, r16
    4008:	1c 93       	st	X, r17
    400a:	14 97       	sbiw	r26, 0x04	; 4
    400c:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    4010:	0f 90       	pop	r0
    4012:	0f 90       	pop	r0
    4014:	0f 90       	pop	r0
    4016:	0f 90       	pop	r0
        	fresult = f_open(pFile, str, FA_OPEN_EXISTING | FA_READ); // The file stays open after this function returns.
    4018:	8f eb       	ldi	r24, 0xBF	; 191
    401a:	97 e2       	ldi	r25, 0x27	; 39
    401c:	b8 01       	movw	r22, r16
    401e:	41 e0       	ldi	r20, 0x01	; 1
    4020:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <f_open>
            
            if (fresult == FR_OK)
    4024:	00 97       	sbiw	r24, 0x00	; 0
    4026:	09 f0       	breq	.+2      	; 0x402a <__stack+0x2b>
    4028:	b9 c0       	rjmp	.+370    	; 0x419c <__stack+0x19d>
            {
                // Read the header block and send back the function name
                fresult = f_read(pFile, bufHeader, NBYTES_HEADER, &nbytes_read);
    402a:	8f eb       	ldi	r24, 0xBF	; 191
    402c:	97 e2       	ldi	r25, 0x27	; 39
    402e:	be 01       	movw	r22, r28
    4030:	61 5f       	subi	r22, 0xF1	; 241
    4032:	7f 4f       	sbci	r23, 0xFF	; 255
    4034:	40 e0       	ldi	r20, 0x00	; 0
    4036:	52 e0       	ldi	r21, 0x02	; 2
    4038:	9e 01       	movw	r18, r28
    403a:	2f 5f       	subi	r18, 0xFF	; 255
    403c:	3f 4f       	sbci	r19, 0xFF	; 255
    403e:	0e 94 eb 41 	call	0x83d6	; 0x83d6 <f_read>
                
                if ((fresult == FR_OK) && (nbytes_read == NBYTES_HEADER))
    4042:	00 97       	sbiw	r24, 0x00	; 0
    4044:	09 f0       	breq	.+2      	; 0x4048 <__stack+0x49>
    4046:	a7 c0       	rjmp	.+334    	; 0x4196 <__stack+0x197>
    4048:	89 81       	ldd	r24, Y+1	; 0x01
    404a:	9a 81       	ldd	r25, Y+2	; 0x02
    404c:	b2 e0       	ldi	r27, 0x02	; 2
    404e:	80 30       	cpi	r24, 0x00	; 0
    4050:	9b 07       	cpc	r25, r27
    4052:	09 f0       	breq	.+2      	; 0x4056 <__stack+0x57>
    4054:	a0 c0       	rjmp	.+320    	; 0x4196 <__stack+0x197>
                {
                    // get the header info
                    ((uint8_t*)&g_nbytes_func_y)[0] = bufHeader[0];
    4056:	8f 85       	ldd	r24, Y+15	; 0x0f
    4058:	80 93 41 20 	sts	0x2041, r24
                    ((uint8_t*)&g_nbytes_func_y)[1] = bufHeader[1];
    405c:	88 89       	ldd	r24, Y+16	; 0x10
    405e:	80 93 42 20 	sts	0x2042, r24
                    ((uint8_t*)&g_nbytes_func_y)[2] = bufHeader[2];
    4062:	89 89       	ldd	r24, Y+17	; 0x11
    4064:	80 93 43 20 	sts	0x2043, r24
                    ((uint8_t*)&g_nbytes_func_y)[3] = bufHeader[3];
    4068:	8a 89       	ldd	r24, Y+18	; 0x12
    406a:	80 93 44 20 	sts	0x2044, r24
                    //func_name_len = bufHeader[4];
                    
                    if (g_nbytes_final_block_y == 0)
    406e:	20 91 e6 23 	lds	r18, 0x23E6
    4072:	30 91 e7 23 	lds	r19, 0x23E7
    4076:	60 91 41 20 	lds	r22, 0x2041
    407a:	70 91 42 20 	lds	r23, 0x2042
    407e:	80 91 43 20 	lds	r24, 0x2043
    4082:	90 91 44 20 	lds	r25, 0x2044
    4086:	21 15       	cp	r18, r1
    4088:	31 05       	cpc	r19, r1
    408a:	39 f4       	brne	.+14     	; 0x409a <__stack+0x9b>
                        g_nblocks_func_y = g_nbytes_func_y / RINGBUFFER_LENGTH;
    408c:	24 e6       	ldi	r18, 0x64	; 100
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	40 e0       	ldi	r20, 0x00	; 0
    4092:	50 e0       	ldi	r21, 0x00	; 0
    4094:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    4098:	08 c0       	rjmp	.+16     	; 0x40aa <__stack+0xab>
                    else
                        g_nblocks_func_y = g_nbytes_func_y / RINGBUFFER_LENGTH + 1;
    409a:	24 e6       	ldi	r18, 0x64	; 100
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	40 e0       	ldi	r20, 0x00	; 0
    40a0:	50 e0       	ldi	r21, 0x00	; 0
    40a2:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    40a6:	2f 5f       	subi	r18, 0xFF	; 255
    40a8:	3f 4f       	sbci	r19, 0xFF	; 255
    40aa:	20 93 49 20 	sts	0x2049, r18
    40ae:	30 93 4a 20 	sts	0x204A, r19

                    // Reset the function, and read the first block of bytes into the function buffer.
                    fetch_block_func_y(pFile, TRUE, 0);
    40b2:	8f eb       	ldi	r24, 0xBF	; 191
    40b4:	97 e2       	ldi	r25, 0x27	; 39
    40b6:	61 e0       	ldi	r22, 0x01	; 1
    40b8:	40 e0       	ldi	r20, 0x00	; 0
    40ba:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <fetch_block_func_y>

                    // Indicate that the function is ready.
                    g_id_func_y = id_func;
    40be:	f0 92 ea 23 	sts	0x23EA, r15
    40c2:	10 92 eb 23 	sts	0x23EB, r1
                    g_b_default_func_y = FALSE;
    40c6:	10 92 4c 20 	sts	0x204C, r1
                    g_b_running = FALSE;
    40ca:	10 92 b0 23 	sts	0x23B0, r1
                    g_display_count = 0;  //clear the display count
    40ce:	10 92 b2 23 	sts	0x23B2, r1

                    if (!g_b_quiet_mode)
    40d2:	80 91 34 20 	lds	r24, 0x2034
    40d6:	88 23       	and	r24, r24
    40d8:	09 f0       	breq	.+2      	; 0x40dc <__stack+0xdd>
    40da:	67 c0       	rjmp	.+206    	; 0x41aa <__stack+0x1ab>
                    {
                        xprintf(PSTR("Set velocity function %u for Y\n"), id_func);
    40dc:	00 d0       	rcall	.+0      	; 0x40de <__stack+0xdf>
    40de:	0f 92       	push	r0
    40e0:	ed b7       	in	r30, 0x3d	; 61
    40e2:	fe b7       	in	r31, 0x3e	; 62
    40e4:	31 96       	adiw	r30, 0x01	; 1
    40e6:	87 e7       	ldi	r24, 0x77	; 119
    40e8:	94 e0       	ldi	r25, 0x04	; 4
    40ea:	ad b7       	in	r26, 0x3d	; 61
    40ec:	be b7       	in	r27, 0x3e	; 62
    40ee:	11 96       	adiw	r26, 0x01	; 1
    40f0:	8d 93       	st	X+, r24
    40f2:	9c 93       	st	X, r25
    40f4:	12 97       	sbiw	r26, 0x02	; 2
    40f6:	f2 82       	std	Z+2, r15	; 0x02
    40f8:	13 82       	std	Z+3, r1	; 0x03
    40fa:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                        xprintf(PSTR("g_nbytes_func_y = %u\n"), g_nbytes_func_y);
    40fe:	0f 92       	push	r0
    4100:	0f 92       	push	r0
    4102:	81 e6       	ldi	r24, 0x61	; 97
    4104:	94 e0       	ldi	r25, 0x04	; 4
    4106:	ed b7       	in	r30, 0x3d	; 61
    4108:	fe b7       	in	r31, 0x3e	; 62
    410a:	81 83       	std	Z+1, r24	; 0x01
    410c:	92 83       	std	Z+2, r25	; 0x02
    410e:	80 91 41 20 	lds	r24, 0x2041
    4112:	90 91 42 20 	lds	r25, 0x2042
    4116:	a0 91 43 20 	lds	r26, 0x2043
    411a:	b0 91 44 20 	lds	r27, 0x2044
    411e:	83 83       	std	Z+3, r24	; 0x03
    4120:	94 83       	std	Z+4, r25	; 0x04
    4122:	a5 83       	std	Z+5, r26	; 0x05
    4124:	b6 83       	std	Z+6, r27	; 0x06
    4126:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                        g_nbytes_final_block_y = g_nbytes_func_y % RINGBUFFER_LENGTH;
    412a:	60 91 41 20 	lds	r22, 0x2041
    412e:	70 91 42 20 	lds	r23, 0x2042
    4132:	80 91 43 20 	lds	r24, 0x2043
    4136:	90 91 44 20 	lds	r25, 0x2044
    413a:	24 e6       	ldi	r18, 0x64	; 100
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	40 e0       	ldi	r20, 0x00	; 0
    4140:	50 e0       	ldi	r21, 0x00	; 0
    4142:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    4146:	60 93 e6 23 	sts	0x23E6, r22
    414a:	70 93 e7 23 	sts	0x23E7, r23
                        xprintf(PSTR("g_nbytes_final_block_y = %u\n"), g_nbytes_final_block_y);
    414e:	0f 90       	pop	r0
    4150:	0f 90       	pop	r0
    4152:	ed b7       	in	r30, 0x3d	; 61
    4154:	fe b7       	in	r31, 0x3e	; 62
    4156:	31 96       	adiw	r30, 0x01	; 1
    4158:	24 e4       	ldi	r18, 0x44	; 68
    415a:	34 e0       	ldi	r19, 0x04	; 4
    415c:	ad b7       	in	r26, 0x3d	; 61
    415e:	be b7       	in	r27, 0x3e	; 62
    4160:	11 96       	adiw	r26, 0x01	; 1
    4162:	2d 93       	st	X+, r18
    4164:	3c 93       	st	X, r19
    4166:	12 97       	sbiw	r26, 0x02	; 2
    4168:	62 83       	std	Z+2, r22	; 0x02
    416a:	73 83       	std	Z+3, r23	; 0x03
    416c:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                        xprintf(PSTR("g_nblocks_func_y = %u\n"), g_nblocks_func_y);
    4170:	8d e2       	ldi	r24, 0x2D	; 45
    4172:	94 e0       	ldi	r25, 0x04	; 4
    4174:	ed b7       	in	r30, 0x3d	; 61
    4176:	fe b7       	in	r31, 0x3e	; 62
    4178:	81 83       	std	Z+1, r24	; 0x01
    417a:	92 83       	std	Z+2, r25	; 0x02
    417c:	80 91 49 20 	lds	r24, 0x2049
    4180:	90 91 4a 20 	lds	r25, 0x204A
    4184:	83 83       	std	Z+3, r24	; 0x03
    4186:	94 83       	std	Z+4, r25	; 0x04
    4188:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    418c:	0f 90       	pop	r0
    418e:	0f 90       	pop	r0
    4190:	0f 90       	pop	r0
    4192:	0f 90       	pop	r0
    4194:	0a c0       	rjmp	.+20     	; 0x41aa <__stack+0x1ab>
                    }
                }
                else
					xputs(PSTR("Error reading file in set_vel_func(): Y.\n"));
    4196:	83 e0       	ldi	r24, 0x03	; 3
    4198:	94 e0       	ldi	r25, 0x04	; 4
    419a:	05 c0       	rjmp	.+10     	; 0x41a6 <__stack+0x1a7>
            }
            else
				xputs(PSTR("Error opening file in set_vel_func(): Y.\n"));
    419c:	89 ed       	ldi	r24, 0xD9	; 217
    419e:	93 e0       	ldi	r25, 0x03	; 3
    41a0:	02 c0       	rjmp	.+4      	; 0x41a6 <__stack+0x1a7>
            
            //Reg_Handler(calculate_and_set_position_y, g_period_func_y, ISR_INCREMENT_FUNC_Y, TRUE); //enable ISR
            break;
            
        default:
			xputs(PSTR("Error input for function channel.\n"));
    41a2:	86 eb       	ldi	r24, 0xB6	; 182
    41a4:	93 e0       	ldi	r25, 0x03	; 3
    41a6:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
            break;
    }
} // set_vel_func()
    41aa:	c1 5f       	subi	r28, 0xF1	; 241
    41ac:	dd 4f       	sbci	r29, 0xFD	; 253
    41ae:	e5 e0       	ldi	r30, 0x05	; 5
    41b0:	0c 94 e0 4b 	jmp	0x97c0	; 0x97c0 <__epilogue_restores__+0x1a>

000041b4 <set_pos_func>:
    
} // set_default_func()


void set_pos_func(uint8_t channel, uint8_t id_func)
{
    41b4:	af e0       	ldi	r26, 0x0F	; 15
    41b6:	b2 e0       	ldi	r27, 0x02	; 2
    41b8:	e0 ee       	ldi	r30, 0xE0	; 224
    41ba:	f0 e2       	ldi	r31, 0x20	; 32
    41bc:	0c 94 c7 4b 	jmp	0x978e	; 0x978e <__prologue_saves__+0x1a>
    41c0:	f6 2e       	mov	r15, r22
    FIL		*pFile=NULL;	// The file we're working on: &g_file_func_x or &g_file_func_y.
    uint8_t bufHeader[NBYTES_HEADER];
    
    
    if (id_func < 1000)
        sprintf(str, "pos%04d.fun\0", id_func);
    41c2:	8e 01       	movw	r16, r28
    41c4:	0d 5f       	subi	r16, 0xFD	; 253
    41c6:	1f 4f       	sbci	r17, 0xFF	; 255
    41c8:	00 d0       	rcall	.+0      	; 0x41ca <set_pos_func+0x16>
    41ca:	00 d0       	rcall	.+0      	; 0x41cc <set_pos_func+0x18>
    41cc:	ed b7       	in	r30, 0x3d	; 61
    41ce:	fe b7       	in	r31, 0x3e	; 62
    41d0:	31 96       	adiw	r30, 0x01	; 1
    41d2:	ad b7       	in	r26, 0x3d	; 61
    41d4:	be b7       	in	r27, 0x3e	; 62
    41d6:	11 96       	adiw	r26, 0x01	; 1
    41d8:	0d 93       	st	X+, r16
    41da:	1c 93       	st	X, r17
    41dc:	12 97       	sbiw	r26, 0x02	; 2
    41de:	27 e2       	ldi	r18, 0x27	; 39
    41e0:	30 e2       	ldi	r19, 0x20	; 32
    41e2:	22 83       	std	Z+2, r18	; 0x02
    41e4:	33 83       	std	Z+3, r19	; 0x03
    41e6:	64 83       	std	Z+4, r22	; 0x04
    41e8:	15 82       	std	Z+5, r1	; 0x05
    41ea:	c1 5f       	subi	r28, 0xF1	; 241
    41ec:	dd 4f       	sbci	r29, 0xFD	; 253
    41ee:	88 83       	st	Y, r24
    41f0:	cf 50       	subi	r28, 0x0F	; 15
    41f2:	d2 40       	sbci	r29, 0x02	; 2
    41f4:	0e 94 3a 4e 	call	0x9c74	; 0x9c74 <sprintf>
    else
        xputs(PSTR("function id is too big.\n"));
    
    switch(channel)
    41f8:	ed b7       	in	r30, 0x3d	; 61
    41fa:	fe b7       	in	r31, 0x3e	; 62
    41fc:	36 96       	adiw	r30, 0x06	; 6
    41fe:	ed bf       	out	0x3d, r30	; 61
    4200:	fe bf       	out	0x3e, r31	; 62
    4202:	c1 5f       	subi	r28, 0xF1	; 241
    4204:	dd 4f       	sbci	r29, 0xFD	; 253
    4206:	48 81       	ld	r20, Y
    4208:	cf 50       	subi	r28, 0x0F	; 15
    420a:	d2 40       	sbci	r29, 0x02	; 2
    420c:	41 30       	cpi	r20, 0x01	; 1
    420e:	21 f0       	breq	.+8      	; 0x4218 <set_pos_func+0x64>
    4210:	42 30       	cpi	r20, 0x02	; 2
    4212:	09 f0       	breq	.+2      	; 0x4216 <set_pos_func+0x62>
    4214:	8f c1       	rjmp	.+798    	; 0x4534 <set_pos_func+0x380>
    4216:	c3 c0       	rjmp	.+390    	; 0x439e <set_pos_func+0x1ea>
        case 1:    //channel x
            //read the 512 byte header block and send back the function name
            //Reg_Handler(calculate_and_set_position_x, g_period_func_x, ISR_INCREMENT_FUNC_X, FALSE);//disable ISR
            
            pFile = &g_file_func_x;
            f_close(pFile);
    4218:	85 ea       	ldi	r24, 0xA5	; 165
    421a:	97 e2       	ldi	r25, 0x27	; 39
    421c:	0e 94 2b 43 	call	0x8656	; 0x8656 <f_close>
            if (!g_b_quiet_mode)
    4220:	80 91 34 20 	lds	r24, 0x2034
    4224:	88 23       	and	r24, r24
    4226:	a1 f4       	brne	.+40     	; 0x4250 <set_pos_func+0x9c>
            	xprintf(PSTR("Opening %s.\n"),str);
    4228:	00 d0       	rcall	.+0      	; 0x422a <set_pos_func+0x76>
    422a:	0f 92       	push	r0
    422c:	86 e2       	ldi	r24, 0x26	; 38
    422e:	97 e0       	ldi	r25, 0x07	; 7
    4230:	ad b7       	in	r26, 0x3d	; 61
    4232:	be b7       	in	r27, 0x3e	; 62
    4234:	11 96       	adiw	r26, 0x01	; 1
    4236:	8d 93       	st	X+, r24
    4238:	9c 93       	st	X, r25
    423a:	12 97       	sbiw	r26, 0x02	; 2
    423c:	13 96       	adiw	r26, 0x03	; 3
    423e:	0d 93       	st	X+, r16
    4240:	1c 93       	st	X, r17
    4242:	14 97       	sbiw	r26, 0x04	; 4
    4244:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    4248:	0f 90       	pop	r0
    424a:	0f 90       	pop	r0
    424c:	0f 90       	pop	r0
    424e:	0f 90       	pop	r0
            fresult = f_open(pFile, str, FA_OPEN_EXISTING | FA_READ); // The file stays open after this function returns.
    4250:	85 ea       	ldi	r24, 0xA5	; 165
    4252:	97 e2       	ldi	r25, 0x27	; 39
    4254:	b8 01       	movw	r22, r16
    4256:	41 e0       	ldi	r20, 0x01	; 1
    4258:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <f_open>
            if (fresult == FR_OK)
    425c:	00 97       	sbiw	r24, 0x00	; 0
    425e:	09 f0       	breq	.+2      	; 0x4262 <set_pos_func+0xae>
    4260:	9b c0       	rjmp	.+310    	; 0x4398 <set_pos_func+0x1e4>
            {
            	// Read the header into the buffer.
                fresult = f_read(pFile, bufHeader, NBYTES_HEADER, &nbytes_read);
    4262:	85 ea       	ldi	r24, 0xA5	; 165
    4264:	97 e2       	ldi	r25, 0x27	; 39
    4266:	be 01       	movw	r22, r28
    4268:	61 5f       	subi	r22, 0xF1	; 241
    426a:	7f 4f       	sbci	r23, 0xFF	; 255
    426c:	40 e0       	ldi	r20, 0x00	; 0
    426e:	52 e0       	ldi	r21, 0x02	; 2
    4270:	9e 01       	movw	r18, r28
    4272:	2f 5f       	subi	r18, 0xFF	; 255
    4274:	3f 4f       	sbci	r19, 0xFF	; 255
    4276:	0e 94 eb 41 	call	0x83d6	; 0x83d6 <f_read>
                if ((fresult == FR_OK) && (nbytes_read == NBYTES_HEADER))
    427a:	00 97       	sbiw	r24, 0x00	; 0
    427c:	09 f0       	breq	.+2      	; 0x4280 <set_pos_func+0xcc>
    427e:	89 c0       	rjmp	.+274    	; 0x4392 <set_pos_func+0x1de>
    4280:	89 81       	ldd	r24, Y+1	; 0x01
    4282:	9a 81       	ldd	r25, Y+2	; 0x02
    4284:	b2 e0       	ldi	r27, 0x02	; 2
    4286:	80 30       	cpi	r24, 0x00	; 0
    4288:	9b 07       	cpc	r25, r27
    428a:	09 f0       	breq	.+2      	; 0x428e <set_pos_func+0xda>
    428c:	82 c0       	rjmp	.+260    	; 0x4392 <set_pos_func+0x1de>
                {
                    // Get the 32 bit length of the function.
                    ((uint8_t*)&g_nbytes_func_x)[0] = bufHeader[0];
    428e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4290:	80 93 3d 20 	sts	0x203D, r24
                    ((uint8_t*)&g_nbytes_func_x)[1] = bufHeader[1];
    4294:	88 89       	ldd	r24, Y+16	; 0x10
    4296:	80 93 3e 20 	sts	0x203E, r24
                    ((uint8_t*)&g_nbytes_func_x)[2] = bufHeader[2];
    429a:	89 89       	ldd	r24, Y+17	; 0x11
    429c:	80 93 3f 20 	sts	0x203F, r24
                    ((uint8_t*)&g_nbytes_func_x)[3] = bufHeader[3];
    42a0:	8a 89       	ldd	r24, Y+18	; 0x12
    42a2:	80 93 40 20 	sts	0x2040, r24
                    //for (i=0; i<func_name_len; i++)
                    //    {func_name_x[i] = bufHeader[i+5];}
                    //func_name_x[func_name_len] = '\0';
                    

                    g_nbytes_final_block_x = g_nbytes_func_x % RINGBUFFER_LENGTH;
    42a6:	60 91 3d 20 	lds	r22, 0x203D
    42aa:	70 91 3e 20 	lds	r23, 0x203E
    42ae:	80 91 3f 20 	lds	r24, 0x203F
    42b2:	90 91 40 20 	lds	r25, 0x2040
    42b6:	24 e6       	ldi	r18, 0x64	; 100
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	40 e0       	ldi	r20, 0x00	; 0
    42bc:	50 e0       	ldi	r21, 0x00	; 0
    42be:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    42c2:	fb 01       	movw	r30, r22
    42c4:	60 93 e4 23 	sts	0x23E4, r22
    42c8:	70 93 e5 23 	sts	0x23E5, r23
                    if (g_nbytes_final_block_x == 0)
    42cc:	30 97       	sbiw	r30, 0x00	; 0
    42ce:	11 f0       	breq	.+4      	; 0x42d4 <set_pos_func+0x120>
                        g_nblocks_func_x = g_nbytes_func_x / RINGBUFFER_LENGTH;
                    else
                        g_nblocks_func_x = g_nbytes_func_x / RINGBUFFER_LENGTH + 1;
    42d0:	2f 5f       	subi	r18, 0xFF	; 255
    42d2:	3f 4f       	sbci	r19, 0xFF	; 255
    42d4:	20 93 47 20 	sts	0x2047, r18
    42d8:	30 93 48 20 	sts	0x2048, r19

                    //update the function buffer
                    fetch_block_func_x(pFile, TRUE, 0);
    42dc:	85 ea       	ldi	r24, 0xA5	; 165
    42de:	97 e2       	ldi	r25, 0x27	; 39
    42e0:	61 e0       	ldi	r22, 0x01	; 1
    42e2:	40 e0       	ldi	r20, 0x00	; 0
    42e4:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <fetch_block_func_x>

                    // Indicate that the function is ready.
                    g_id_func_x = id_func;
    42e8:	f0 92 e8 23 	sts	0x23E8, r15
    42ec:	10 92 e9 23 	sts	0x23E9, r1
                    g_b_default_func_x = FALSE;
    42f0:	10 92 4b 20 	sts	0x204B, r1
                    g_b_running = FALSE;
    42f4:	10 92 b0 23 	sts	0x23B0, r1
                    g_display_count = 0;
    42f8:	10 92 b2 23 	sts	0x23B2, r1

                    if (!g_b_quiet_mode)
    42fc:	80 91 34 20 	lds	r24, 0x2034
    4300:	88 23       	and	r24, r24
    4302:	09 f0       	breq	.+2      	; 0x4306 <set_pos_func+0x152>
    4304:	1b c1       	rjmp	.+566    	; 0x453c <set_pos_func+0x388>
                    {
                        xprintf(PSTR("Set position function %u for X\n"), id_func);
    4306:	00 d0       	rcall	.+0      	; 0x4308 <set_pos_func+0x154>
    4308:	0f 92       	push	r0
    430a:	ed b7       	in	r30, 0x3d	; 61
    430c:	fe b7       	in	r31, 0x3e	; 62
    430e:	31 96       	adiw	r30, 0x01	; 1
    4310:	86 e0       	ldi	r24, 0x06	; 6
    4312:	97 e0       	ldi	r25, 0x07	; 7
    4314:	ad b7       	in	r26, 0x3d	; 61
    4316:	be b7       	in	r27, 0x3e	; 62
    4318:	11 96       	adiw	r26, 0x01	; 1
    431a:	8d 93       	st	X+, r24
    431c:	9c 93       	st	X, r25
    431e:	12 97       	sbiw	r26, 0x02	; 2
    4320:	f2 82       	std	Z+2, r15	; 0x02
    4322:	13 82       	std	Z+3, r1	; 0x03
    4324:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
						//xprintf(PSTR("fun X: %s\n function X size: %lu bytes\n"), func_name_x, g_nbytes_func_x);
                        xprintf(PSTR("g_nbytes_func_x = %u\n"), g_nbytes_func_x);
    4328:	0f 92       	push	r0
    432a:	0f 92       	push	r0
    432c:	80 ef       	ldi	r24, 0xF0	; 240
    432e:	96 e0       	ldi	r25, 0x06	; 6
    4330:	ed b7       	in	r30, 0x3d	; 61
    4332:	fe b7       	in	r31, 0x3e	; 62
    4334:	81 83       	std	Z+1, r24	; 0x01
    4336:	92 83       	std	Z+2, r25	; 0x02
    4338:	80 91 3d 20 	lds	r24, 0x203D
    433c:	90 91 3e 20 	lds	r25, 0x203E
    4340:	a0 91 3f 20 	lds	r26, 0x203F
    4344:	b0 91 40 20 	lds	r27, 0x2040
    4348:	83 83       	std	Z+3, r24	; 0x03
    434a:	94 83       	std	Z+4, r25	; 0x04
    434c:	a5 83       	std	Z+5, r26	; 0x05
    434e:	b6 83       	std	Z+6, r27	; 0x06
    4350:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                        xprintf(PSTR("g_nbytes_final_block_x = %u\n"), g_nbytes_final_block_x);
    4354:	0f 90       	pop	r0
    4356:	0f 90       	pop	r0
    4358:	83 ed       	ldi	r24, 0xD3	; 211
    435a:	96 e0       	ldi	r25, 0x06	; 6
    435c:	ad b7       	in	r26, 0x3d	; 61
    435e:	be b7       	in	r27, 0x3e	; 62
    4360:	11 96       	adiw	r26, 0x01	; 1
    4362:	8d 93       	st	X+, r24
    4364:	9c 93       	st	X, r25
    4366:	12 97       	sbiw	r26, 0x02	; 2
    4368:	80 91 e4 23 	lds	r24, 0x23E4
    436c:	90 91 e5 23 	lds	r25, 0x23E5
    4370:	13 96       	adiw	r26, 0x03	; 3
    4372:	8d 93       	st	X+, r24
    4374:	9c 93       	st	X, r25
    4376:	14 97       	sbiw	r26, 0x04	; 4
    4378:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                        xprintf(PSTR("g_nblocks_func_x = %u\n"), g_nblocks_func_x);
    437c:	8c eb       	ldi	r24, 0xBC	; 188
    437e:	96 e0       	ldi	r25, 0x06	; 6
    4380:	ed b7       	in	r30, 0x3d	; 61
    4382:	fe b7       	in	r31, 0x3e	; 62
    4384:	81 83       	std	Z+1, r24	; 0x01
    4386:	92 83       	std	Z+2, r25	; 0x02
    4388:	80 91 47 20 	lds	r24, 0x2047
    438c:	90 91 48 20 	lds	r25, 0x2048
    4390:	c2 c0       	rjmp	.+388    	; 0x4516 <set_pos_func+0x362>
                    }
                }
                else
					xputs(PSTR("Error reading file in set_pos_func(): X\n"));
    4392:	83 e9       	ldi	r24, 0x93	; 147
    4394:	96 e0       	ldi	r25, 0x06	; 6
    4396:	d0 c0       	rjmp	.+416    	; 0x4538 <set_pos_func+0x384>
            }
            else
				xputs(PSTR("Error opening file in set_pos_func(): X.\n"));
    4398:	89 e6       	ldi	r24, 0x69	; 105
    439a:	96 e0       	ldi	r25, 0x06	; 6
    439c:	cd c0       	rjmp	.+410    	; 0x4538 <set_pos_func+0x384>
            
        case 2:	// channel y.
            //Reg_Handler(calculate_and_set_position_y, g_period_func_y, ISR_INCREMENT_FUNC_Y, FALSE); //disable ISR
            //read the header block and send back the function name
            pFile = &g_file_func_y;
            f_close(pFile);
    439e:	8f eb       	ldi	r24, 0xBF	; 191
    43a0:	97 e2       	ldi	r25, 0x27	; 39
    43a2:	0e 94 2b 43 	call	0x8656	; 0x8656 <f_close>
            if (!g_b_quiet_mode)
    43a6:	80 91 34 20 	lds	r24, 0x2034
    43aa:	88 23       	and	r24, r24
    43ac:	a1 f4       	brne	.+40     	; 0x43d6 <set_pos_func+0x222>
            	xprintf(PSTR("Opening %s.\n"),str);
    43ae:	00 d0       	rcall	.+0      	; 0x43b0 <set_pos_func+0x1fc>
    43b0:	0f 92       	push	r0
    43b2:	8c e5       	ldi	r24, 0x5C	; 92
    43b4:	96 e0       	ldi	r25, 0x06	; 6
    43b6:	ad b7       	in	r26, 0x3d	; 61
    43b8:	be b7       	in	r27, 0x3e	; 62
    43ba:	11 96       	adiw	r26, 0x01	; 1
    43bc:	8d 93       	st	X+, r24
    43be:	9c 93       	st	X, r25
    43c0:	12 97       	sbiw	r26, 0x02	; 2
    43c2:	13 96       	adiw	r26, 0x03	; 3
    43c4:	0d 93       	st	X+, r16
    43c6:	1c 93       	st	X, r17
    43c8:	14 97       	sbiw	r26, 0x04	; 4
    43ca:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    43ce:	0f 90       	pop	r0
    43d0:	0f 90       	pop	r0
    43d2:	0f 90       	pop	r0
    43d4:	0f 90       	pop	r0
            fresult = f_open(pFile, str, FA_OPEN_EXISTING | FA_READ); // The file stays open after this function returns.
    43d6:	8f eb       	ldi	r24, 0xBF	; 191
    43d8:	97 e2       	ldi	r25, 0x27	; 39
    43da:	b8 01       	movw	r22, r16
    43dc:	41 e0       	ldi	r20, 0x01	; 1
    43de:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <f_open>
            if (fresult == FR_OK)
    43e2:	00 97       	sbiw	r24, 0x00	; 0
    43e4:	09 f0       	breq	.+2      	; 0x43e8 <set_pos_func+0x234>
    43e6:	a3 c0       	rjmp	.+326    	; 0x452e <set_pos_func+0x37a>
            {
                fresult = f_read(pFile, bufHeader, NBYTES_HEADER, &nbytes_read);
    43e8:	8f eb       	ldi	r24, 0xBF	; 191
    43ea:	97 e2       	ldi	r25, 0x27	; 39
    43ec:	be 01       	movw	r22, r28
    43ee:	61 5f       	subi	r22, 0xF1	; 241
    43f0:	7f 4f       	sbci	r23, 0xFF	; 255
    43f2:	40 e0       	ldi	r20, 0x00	; 0
    43f4:	52 e0       	ldi	r21, 0x02	; 2
    43f6:	9e 01       	movw	r18, r28
    43f8:	2f 5f       	subi	r18, 0xFF	; 255
    43fa:	3f 4f       	sbci	r19, 0xFF	; 255
    43fc:	0e 94 eb 41 	call	0x83d6	; 0x83d6 <f_read>
                if ((fresult == FR_OK) && (nbytes_read == NBYTES_HEADER))
    4400:	00 97       	sbiw	r24, 0x00	; 0
    4402:	09 f0       	breq	.+2      	; 0x4406 <set_pos_func+0x252>
    4404:	91 c0       	rjmp	.+290    	; 0x4528 <set_pos_func+0x374>
    4406:	89 81       	ldd	r24, Y+1	; 0x01
    4408:	9a 81       	ldd	r25, Y+2	; 0x02
    440a:	b2 e0       	ldi	r27, 0x02	; 2
    440c:	80 30       	cpi	r24, 0x00	; 0
    440e:	9b 07       	cpc	r25, r27
    4410:	09 f0       	breq	.+2      	; 0x4414 <set_pos_func+0x260>
    4412:	8a c0       	rjmp	.+276    	; 0x4528 <set_pos_func+0x374>
                {
                	// Get the 32 bit length of the function.
                    ((uint8_t*)&g_nbytes_func_y)[0] = bufHeader[0];
    4414:	8f 85       	ldd	r24, Y+15	; 0x0f
    4416:	80 93 41 20 	sts	0x2041, r24
                    ((uint8_t*)&g_nbytes_func_y)[1] = bufHeader[1];
    441a:	88 89       	ldd	r24, Y+16	; 0x10
    441c:	80 93 42 20 	sts	0x2042, r24
                    ((uint8_t*)&g_nbytes_func_y)[2] = bufHeader[2];
    4420:	89 89       	ldd	r24, Y+17	; 0x11
    4422:	80 93 43 20 	sts	0x2043, r24
                    ((uint8_t*)&g_nbytes_func_y)[3] = bufHeader[3];
    4426:	8a 89       	ldd	r24, Y+18	; 0x12
    4428:	80 93 44 20 	sts	0x2044, r24

                    g_nbytes_final_block_y = g_nbytes_func_y % RINGBUFFER_LENGTH;
    442c:	60 91 41 20 	lds	r22, 0x2041
    4430:	70 91 42 20 	lds	r23, 0x2042
    4434:	80 91 43 20 	lds	r24, 0x2043
    4438:	90 91 44 20 	lds	r25, 0x2044
    443c:	24 e6       	ldi	r18, 0x64	; 100
    443e:	30 e0       	ldi	r19, 0x00	; 0
    4440:	40 e0       	ldi	r20, 0x00	; 0
    4442:	50 e0       	ldi	r21, 0x00	; 0
    4444:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    4448:	fb 01       	movw	r30, r22
    444a:	60 93 e6 23 	sts	0x23E6, r22
    444e:	70 93 e7 23 	sts	0x23E7, r23
                    if (g_nbytes_final_block_y == 0)
    4452:	30 97       	sbiw	r30, 0x00	; 0
    4454:	11 f0       	breq	.+4      	; 0x445a <set_pos_func+0x2a6>
                        g_nblocks_func_y = g_nbytes_func_y / RINGBUFFER_LENGTH;
                    else
                        g_nblocks_func_y = g_nbytes_func_y / RINGBUFFER_LENGTH + 1;
    4456:	2f 5f       	subi	r18, 0xFF	; 255
    4458:	3f 4f       	sbci	r19, 0xFF	; 255
    445a:	20 93 49 20 	sts	0x2049, r18
    445e:	30 93 4a 20 	sts	0x204A, r19

                    //update the function buffer
                    fetch_block_func_y(pFile, TRUE, 0);
    4462:	8f eb       	ldi	r24, 0xBF	; 191
    4464:	97 e2       	ldi	r25, 0x27	; 39
    4466:	61 e0       	ldi	r22, 0x01	; 1
    4468:	40 e0       	ldi	r20, 0x00	; 0
    446a:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <fetch_block_func_y>

                    // Indicate that the function is ready.
                    g_id_func_y = id_func;
    446e:	f0 92 ea 23 	sts	0x23EA, r15
    4472:	10 92 eb 23 	sts	0x23EB, r1
                    g_b_default_func_y = FALSE;
    4476:	10 92 4c 20 	sts	0x204C, r1
                    g_b_running = FALSE;
    447a:	10 92 b0 23 	sts	0x23B0, r1
                    g_display_count = 0;
    447e:	10 92 b2 23 	sts	0x23B2, r1

                    if (!g_b_quiet_mode)
    4482:	80 91 34 20 	lds	r24, 0x2034
    4486:	88 23       	and	r24, r24
    4488:	09 f0       	breq	.+2      	; 0x448c <set_pos_func+0x2d8>
    448a:	58 c0       	rjmp	.+176    	; 0x453c <set_pos_func+0x388>
                    {
                        xprintf(PSTR("Set position function %u for Y\n"), id_func);
    448c:	00 d0       	rcall	.+0      	; 0x448e <set_pos_func+0x2da>
    448e:	0f 92       	push	r0
    4490:	ed b7       	in	r30, 0x3d	; 61
    4492:	fe b7       	in	r31, 0x3e	; 62
    4494:	31 96       	adiw	r30, 0x01	; 1
    4496:	8c e3       	ldi	r24, 0x3C	; 60
    4498:	96 e0       	ldi	r25, 0x06	; 6
    449a:	ad b7       	in	r26, 0x3d	; 61
    449c:	be b7       	in	r27, 0x3e	; 62
    449e:	11 96       	adiw	r26, 0x01	; 1
    44a0:	8d 93       	st	X+, r24
    44a2:	9c 93       	st	X, r25
    44a4:	12 97       	sbiw	r26, 0x02	; 2
    44a6:	f2 82       	std	Z+2, r15	; 0x02
    44a8:	13 82       	std	Z+3, r1	; 0x03
    44aa:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                        //xprintf(PSTR("fun Y: %s\n function Y size: %lu bytes\n"),
                        //       func_name_y, g_nbytes_func_y);
                        xprintf(PSTR("g_nbytes_func_y = %u\n"), g_nbytes_func_y);
    44ae:	0f 92       	push	r0
    44b0:	0f 92       	push	r0
    44b2:	86 e2       	ldi	r24, 0x26	; 38
    44b4:	96 e0       	ldi	r25, 0x06	; 6
    44b6:	ed b7       	in	r30, 0x3d	; 61
    44b8:	fe b7       	in	r31, 0x3e	; 62
    44ba:	81 83       	std	Z+1, r24	; 0x01
    44bc:	92 83       	std	Z+2, r25	; 0x02
    44be:	80 91 41 20 	lds	r24, 0x2041
    44c2:	90 91 42 20 	lds	r25, 0x2042
    44c6:	a0 91 43 20 	lds	r26, 0x2043
    44ca:	b0 91 44 20 	lds	r27, 0x2044
    44ce:	83 83       	std	Z+3, r24	; 0x03
    44d0:	94 83       	std	Z+4, r25	; 0x04
    44d2:	a5 83       	std	Z+5, r26	; 0x05
    44d4:	b6 83       	std	Z+6, r27	; 0x06
    44d6:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                        xprintf(PSTR("g_nbytes_final_block_y = %u \n"), g_nbytes_final_block_y);
    44da:	0f 90       	pop	r0
    44dc:	0f 90       	pop	r0
    44de:	88 e0       	ldi	r24, 0x08	; 8
    44e0:	96 e0       	ldi	r25, 0x06	; 6
    44e2:	ad b7       	in	r26, 0x3d	; 61
    44e4:	be b7       	in	r27, 0x3e	; 62
    44e6:	11 96       	adiw	r26, 0x01	; 1
    44e8:	8d 93       	st	X+, r24
    44ea:	9c 93       	st	X, r25
    44ec:	12 97       	sbiw	r26, 0x02	; 2
    44ee:	80 91 e6 23 	lds	r24, 0x23E6
    44f2:	90 91 e7 23 	lds	r25, 0x23E7
    44f6:	13 96       	adiw	r26, 0x03	; 3
    44f8:	8d 93       	st	X+, r24
    44fa:	9c 93       	st	X, r25
    44fc:	14 97       	sbiw	r26, 0x04	; 4
    44fe:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                        xprintf(PSTR("g_nblocks_func_y = %u\n"), g_nblocks_func_y);
    4502:	81 ef       	ldi	r24, 0xF1	; 241
    4504:	95 e0       	ldi	r25, 0x05	; 5
    4506:	ed b7       	in	r30, 0x3d	; 61
    4508:	fe b7       	in	r31, 0x3e	; 62
    450a:	81 83       	std	Z+1, r24	; 0x01
    450c:	92 83       	std	Z+2, r25	; 0x02
    450e:	80 91 49 20 	lds	r24, 0x2049
    4512:	90 91 4a 20 	lds	r25, 0x204A
    4516:	83 83       	std	Z+3, r24	; 0x03
    4518:	94 83       	std	Z+4, r25	; 0x04
    451a:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    451e:	0f 90       	pop	r0
    4520:	0f 90       	pop	r0
    4522:	0f 90       	pop	r0
    4524:	0f 90       	pop	r0
    4526:	0a c0       	rjmp	.+20     	; 0x453c <set_pos_func+0x388>
                    }
                }
                else
					xputs(PSTR("Error reading file in set_pos_func(): Y.\n"));
    4528:	87 ec       	ldi	r24, 0xC7	; 199
    452a:	95 e0       	ldi	r25, 0x05	; 5
    452c:	05 c0       	rjmp	.+10     	; 0x4538 <set_pos_func+0x384>
            }
            else
				xputs(PSTR("Error opening file in set_pos_func(): Y.\n"));
    452e:	8d e9       	ldi	r24, 0x9D	; 157
    4530:	95 e0       	ldi	r25, 0x05	; 5
    4532:	02 c0       	rjmp	.+4      	; 0x4538 <set_pos_func+0x384>
            
            //Reg_Handler(calculate_and_set_position_y, g_period_func_y, ISR_INCREMENT_FUNC_Y, TRUE);//enable ISR
            break;
            
        default:
                xputs(PSTR("Error: channel must be 1 for x, or 2 for y.\n"));
    4534:	80 e7       	ldi	r24, 0x70	; 112
    4536:	95 e0       	ldi	r25, 0x05	; 5
    4538:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
            break;
    }
} // set_pos_func()
    453c:	c1 5f       	subi	r28, 0xF1	; 241
    453e:	dd 4f       	sbci	r29, 0xFD	; 253
    4540:	e5 e0       	ldi	r30, 0x05	; 5
    4542:	0c 94 e0 4b 	jmp	0x97c0	; 0x97c0 <__epilogue_restores__+0x1a>

00004546 <handle_message_length_3>:
    }
} // handle_message_length_2()


void handle_message_length_3(uint8_t *msg_buffer)
{
    4546:	a2 e0       	ldi	r26, 0x02	; 2
    4548:	b0 e0       	ldi	r27, 0x00	; 0
    454a:	e9 ea       	ldi	r30, 0xA9	; 169
    454c:	f2 e2       	ldi	r31, 0x22	; 34
    454e:	0c 94 c4 4b 	jmp	0x9788	; 0x9788 <__prologue_saves__+0x14>
    4552:	8c 01       	movw	r16, r24
    uint8_t target_panel_addr;
    uint8_t CMD[2];
    uint16_t funcX_freq, funcY_freq;
    
    switch(msg_buffer[0])
    4554:	dc 01       	movw	r26, r24
    4556:	8c 91       	ld	r24, X
    4558:	85 32       	cpi	r24, 0x25	; 37
    455a:	09 f4       	brne	.+2      	; 0x455e <handle_message_length_3+0x18>
    455c:	c3 c0       	rjmp	.+390    	; 0x46e4 <handle_message_length_3+0x19e>
    455e:	86 32       	cpi	r24, 0x26	; 38
    4560:	50 f4       	brcc	.+20     	; 0x4576 <handle_message_length_3+0x30>
    4562:	85 31       	cpi	r24, 0x15	; 21
    4564:	09 f4       	brne	.+2      	; 0x4568 <handle_message_length_3+0x22>
    4566:	a6 c0       	rjmp	.+332    	; 0x46b4 <handle_message_length_3+0x16e>
    4568:	80 32       	cpi	r24, 0x20	; 32
    456a:	09 f4       	brne	.+2      	; 0x456e <handle_message_length_3+0x28>
    456c:	ad c0       	rjmp	.+346    	; 0x46c8 <handle_message_length_3+0x182>
    456e:	80 31       	cpi	r24, 0x10	; 16
    4570:	09 f0       	breq	.+2      	; 0x4574 <handle_message_length_3+0x2e>
    4572:	38 c1       	rjmp	.+624    	; 0x47e4 <handle_message_length_3+0x29e>
    4574:	93 c0       	rjmp	.+294    	; 0x469c <handle_message_length_3+0x156>
    4576:	85 33       	cpi	r24, 0x35	; 53
    4578:	09 f4       	brne	.+2      	; 0x457c <handle_message_length_3+0x36>
    457a:	00 c1       	rjmp	.+512    	; 0x477c <handle_message_length_3+0x236>
    457c:	86 33       	cpi	r24, 0x36	; 54
    457e:	20 f4       	brcc	.+8      	; 0x4588 <handle_message_length_3+0x42>
    4580:	80 33       	cpi	r24, 0x30	; 48
    4582:	09 f0       	breq	.+2      	; 0x4586 <handle_message_length_3+0x40>
    4584:	2f c1       	rjmp	.+606    	; 0x47e4 <handle_message_length_3+0x29e>
    4586:	cc c0       	rjmp	.+408    	; 0x4720 <handle_message_length_3+0x1da>
    4588:	82 36       	cpi	r24, 0x62	; 98
    458a:	09 f4       	brne	.+2      	; 0x458e <handle_message_length_3+0x48>
    458c:	25 c1       	rjmp	.+586    	; 0x47d8 <handle_message_length_3+0x292>
    458e:	8f 3f       	cpi	r24, 0xFF	; 255
    4590:	09 f0       	breq	.+2      	; 0x4594 <handle_message_length_3+0x4e>
    4592:	28 c1       	rjmp	.+592    	; 0x47e4 <handle_message_length_3+0x29e>
    {
        case MSG_3_ADDRESS:  //address panel
            target_panel_addr = msg_buffer[1];  //put in error check, in range < 127
    4594:	f8 01       	movw	r30, r16
    4596:	c1 80       	ldd	r12, Z+1	; 0x01
            //sends a reset command out to panel at target address
            
            // Since the panel can be located in any of the four channels,
            // the command should be sent to all channels.
            while (twi1.status != TWIM_STATUS_READY);
    4598:	80 91 0f 28 	lds	r24, 0x280F
    459c:	88 23       	and	r24, r24
    459e:	e1 f7       	brne	.-8      	; 0x4598 <handle_message_length_3+0x52>
            TWI_MasterWrite(&twi1, target_panel_addr, RESET, 2);
    45a0:	82 e0       	ldi	r24, 0x02	; 2
    45a2:	98 e2       	ldi	r25, 0x28	; 40
    45a4:	6c 2d       	mov	r22, r12
    45a6:	4b e9       	ldi	r20, 0x9B	; 155
    45a8:	50 e2       	ldi	r21, 0x20	; 32
    45aa:	22 e0       	ldi	r18, 0x02	; 2
    45ac:	0e 94 f4 39 	call	0x73e8	; 0x73e8 <TWI_MasterWrite>
            while (twi2.status != TWIM_STATUS_READY);
    45b0:	80 91 61 28 	lds	r24, 0x2861
    45b4:	88 23       	and	r24, r24
    45b6:	e1 f7       	brne	.-8      	; 0x45b0 <handle_message_length_3+0x6a>
            TWI_MasterWrite(&twi2, target_panel_addr, RESET, 2);
    45b8:	84 e5       	ldi	r24, 0x54	; 84
    45ba:	98 e2       	ldi	r25, 0x28	; 40
    45bc:	6c 2d       	mov	r22, r12
    45be:	4b e9       	ldi	r20, 0x9B	; 155
    45c0:	50 e2       	ldi	r21, 0x20	; 32
    45c2:	22 e0       	ldi	r18, 0x02	; 2
    45c4:	0e 94 f4 39 	call	0x73e8	; 0x73e8 <TWI_MasterWrite>
            while (twi3.status != TWIM_STATUS_READY);
    45c8:	80 91 1e 28 	lds	r24, 0x281E
    45cc:	88 23       	and	r24, r24
    45ce:	e1 f7       	brne	.-8      	; 0x45c8 <handle_message_length_3+0x82>
            TWI_MasterWrite(&twi3, target_panel_addr, RESET, 2);
    45d0:	81 e1       	ldi	r24, 0x11	; 17
    45d2:	98 e2       	ldi	r25, 0x28	; 40
    45d4:	6c 2d       	mov	r22, r12
    45d6:	4b e9       	ldi	r20, 0x9B	; 155
    45d8:	50 e2       	ldi	r21, 0x20	; 32
    45da:	22 e0       	ldi	r18, 0x02	; 2
    45dc:	0e 94 f4 39 	call	0x73e8	; 0x73e8 <TWI_MasterWrite>
            while (twi4.status != TWIM_STATUS_READY);
    45e0:	80 91 00 28 	lds	r24, 0x2800
    45e4:	88 23       	and	r24, r24
    45e6:	e1 f7       	brne	.-8      	; 0x45e0 <handle_message_length_3+0x9a>
            TWI_MasterWrite(&twi4, target_panel_addr, RESET, 2);
    45e8:	83 ef       	ldi	r24, 0xF3	; 243
    45ea:	97 e2       	ldi	r25, 0x27	; 39
    45ec:	6c 2d       	mov	r22, r12
    45ee:	4b e9       	ldi	r20, 0x9B	; 155
    45f0:	50 e2       	ldi	r21, 0x20	; 32
    45f2:	22 e0       	ldi	r18, 0x02	; 2
    45f4:	0e 94 f4 39 	call	0x73e8	; 0x73e8 <TWI_MasterWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    45f8:	8f ef       	ldi	r24, 0xFF	; 255
    45fa:	97 ed       	ldi	r25, 0xD7	; 215
    45fc:	a6 ed       	ldi	r26, 0xD6	; 214
    45fe:	81 50       	subi	r24, 0x01	; 1
    4600:	90 40       	sbci	r25, 0x00	; 0
    4602:	a0 40       	sbci	r26, 0x00	; 0
    4604:	e1 f7       	brne	.-8      	; 0x45fe <handle_message_length_3+0xb8>
    4606:	00 c0       	rjmp	.+0      	; 0x4608 <handle_message_length_3+0xc2>
    4608:	00 00       	nop
            //i2cMasterSend(target_panel_addr, 2, RESET);
            
            _delay_ms(2200);
            CMD[0] = 0xFF;
    460a:	8f ef       	ldi	r24, 0xFF	; 255
    460c:	89 83       	std	Y+1, r24	; 0x01
            CMD[1] = msg_buffer[2];   //send change address command
    460e:	d8 01       	movw	r26, r16
    4610:	12 96       	adiw	r26, 0x02	; 2
    4612:	8c 91       	ld	r24, X
    4614:	12 97       	sbiw	r26, 0x02	; 2
    4616:	8a 83       	std	Y+2, r24	; 0x02
            
            //Since the panel can be located in any of the four channels,
            // the command should be sent to all channels.
            while (twi1.status != TWIM_STATUS_READY);
    4618:	80 91 0f 28 	lds	r24, 0x280F
    461c:	88 23       	and	r24, r24
    461e:	e1 f7       	brne	.-8      	; 0x4618 <handle_message_length_3+0xd2>
            TWI_MasterWrite(&twi1, target_panel_addr, CMD, 2);
    4620:	82 e0       	ldi	r24, 0x02	; 2
    4622:	98 e2       	ldi	r25, 0x28	; 40
    4624:	6c 2d       	mov	r22, r12
    4626:	ae 01       	movw	r20, r28
    4628:	4f 5f       	subi	r20, 0xFF	; 255
    462a:	5f 4f       	sbci	r21, 0xFF	; 255
    462c:	22 e0       	ldi	r18, 0x02	; 2
    462e:	0e 94 f4 39 	call	0x73e8	; 0x73e8 <TWI_MasterWrite>
            while (twi2.status != TWIM_STATUS_READY);
    4632:	80 91 61 28 	lds	r24, 0x2861
    4636:	88 23       	and	r24, r24
    4638:	e1 f7       	brne	.-8      	; 0x4632 <handle_message_length_3+0xec>
            TWI_MasterWrite(&twi2, target_panel_addr, CMD, 2);
    463a:	84 e5       	ldi	r24, 0x54	; 84
    463c:	98 e2       	ldi	r25, 0x28	; 40
    463e:	6c 2d       	mov	r22, r12
    4640:	ae 01       	movw	r20, r28
    4642:	4f 5f       	subi	r20, 0xFF	; 255
    4644:	5f 4f       	sbci	r21, 0xFF	; 255
    4646:	22 e0       	ldi	r18, 0x02	; 2
    4648:	0e 94 f4 39 	call	0x73e8	; 0x73e8 <TWI_MasterWrite>
            while (twi3.status != TWIM_STATUS_READY);
    464c:	80 91 1e 28 	lds	r24, 0x281E
    4650:	88 23       	and	r24, r24
    4652:	e1 f7       	brne	.-8      	; 0x464c <handle_message_length_3+0x106>
            TWI_MasterWrite(&twi3, target_panel_addr, CMD, 2);
    4654:	81 e1       	ldi	r24, 0x11	; 17
    4656:	98 e2       	ldi	r25, 0x28	; 40
    4658:	6c 2d       	mov	r22, r12
    465a:	ae 01       	movw	r20, r28
    465c:	4f 5f       	subi	r20, 0xFF	; 255
    465e:	5f 4f       	sbci	r21, 0xFF	; 255
    4660:	22 e0       	ldi	r18, 0x02	; 2
    4662:	0e 94 f4 39 	call	0x73e8	; 0x73e8 <TWI_MasterWrite>
            while (twi4.status != TWIM_STATUS_READY);
    4666:	80 91 00 28 	lds	r24, 0x2800
    466a:	88 23       	and	r24, r24
    466c:	e1 f7       	brne	.-8      	; 0x4666 <handle_message_length_3+0x120>
            TWI_MasterWrite(&twi4, target_panel_addr, CMD, 2);
    466e:	83 ef       	ldi	r24, 0xF3	; 243
    4670:	97 e2       	ldi	r25, 0x27	; 39
    4672:	6c 2d       	mov	r22, r12
    4674:	ae 01       	movw	r20, r28
    4676:	4f 5f       	subi	r20, 0xFF	; 255
    4678:	5f 4f       	sbci	r21, 0xFF	; 255
    467a:	22 e0       	ldi	r18, 0x02	; 2
    467c:	0e 94 f4 39 	call	0x73e8	; 0x73e8 <TWI_MasterWrite>
    4680:	8f ef       	ldi	r24, 0xFF	; 255
    4682:	91 ee       	ldi	r25, 0xE1	; 225
    4684:	a4 e0       	ldi	r26, 0x04	; 4
    4686:	81 50       	subi	r24, 0x01	; 1
    4688:	90 40       	sbci	r25, 0x00	; 0
    468a:	a0 40       	sbci	r26, 0x00	; 0
    468c:	e1 f7       	brne	.-8      	; 0x4686 <handle_message_length_3+0x140>
    468e:	00 c0       	rjmp	.+0      	; 0x4690 <handle_message_length_3+0x14a>
    4690:	00 00       	nop
            //i2cMasterSend(target_panel_addr, 2, CMD);
            
            _delay_ms(50);
            //reset all panels again
            i2cMasterSend(0, 2, RESET);
    4692:	80 e0       	ldi	r24, 0x00	; 0
    4694:	62 e0       	ldi	r22, 0x02	; 2
    4696:	4b e9       	ldi	r20, 0x9B	; 155
    4698:	50 e2       	ldi	r21, 0x20	; 32
    469a:	a8 c0       	rjmp	.+336    	; 0x47ec <handle_message_length_3+0x2a6>
            
            break;
            
        case MSG_3_SET_MODE:   // set_mode()
            g_mode_x = msg_buffer[1];
    469c:	d8 01       	movw	r26, r16
    469e:	11 96       	adiw	r26, 0x01	; 1
    46a0:	8c 91       	ld	r24, X
    46a2:	11 97       	sbiw	r26, 0x01	; 1
    46a4:	80 93 c4 23 	sts	0x23C4, r24
            g_mode_y = msg_buffer[2];
    46a8:	12 96       	adiw	r26, 0x02	; 2
    46aa:	8c 91       	ld	r24, X
    46ac:	12 97       	sbiw	r26, 0x02	; 2
    46ae:	80 93 c5 23 	sts	0x23C5, r24
            //put in an error message if value is not 0, 1, or 2.
            break;
    46b2:	9e c0       	rjmp	.+316    	; 0x47f0 <handle_message_length_3+0x2aa>
            
        case MSG_3_SET_POSFUNC_ID:   //this is a set position function
            if (msg_buffer[2] == 0)
    46b4:	f8 01       	movw	r30, r16
    46b6:	62 81       	ldd	r22, Z+2	; 0x02
    46b8:	66 23       	and	r22, r22
    46ba:	51 f0       	breq	.+20     	; 0x46d0 <handle_message_length_3+0x18a>
                set_default_func(msg_buffer[1]);
            else
                set_pos_func(msg_buffer[1], msg_buffer[2]);
    46bc:	d8 01       	movw	r26, r16
    46be:	11 96       	adiw	r26, 0x01	; 1
    46c0:	8c 91       	ld	r24, X
    46c2:	0e 94 da 20 	call	0x41b4	; 0x41b4 <set_pos_func>
    46c6:	94 c0       	rjmp	.+296    	; 0x47f0 <handle_message_length_3+0x2aa>
            break;
            
        case MSG_3_SET_VELFUNC_ID:   //this is a set velocity function
            if (msg_buffer[2] == 0)
    46c8:	f8 01       	movw	r30, r16
    46ca:	62 81       	ldd	r22, Z+2	; 0x02
    46cc:	66 23       	and	r22, r22
    46ce:	21 f4       	brne	.+8      	; 0x46d8 <handle_message_length_3+0x192>
                set_default_func(msg_buffer[1]);
    46d0:	81 81       	ldd	r24, Z+1	; 0x01
    46d2:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <set_default_func>
    46d6:	8c c0       	rjmp	.+280    	; 0x47f0 <handle_message_length_3+0x2aa>
            else
                set_vel_func(msg_buffer[1], msg_buffer[2]);
    46d8:	d8 01       	movw	r26, r16
    46da:	11 96       	adiw	r26, 0x01	; 1
    46dc:	8c 91       	ld	r24, X
    46de:	0e 94 e5 1e 	call	0x3dca	; 0x3dca <set_vel_func>
    46e2:	86 c0       	rjmp	.+268    	; 0x47f0 <handle_message_length_3+0x2aa>
            break;
            
        case MSG_3_SET_FUNCX_FREQ: // this is a set function generator frequency
            funcX_freq = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    46e4:	f8 01       	movw	r30, r16
    46e6:	92 81       	ldd	r25, Z+2	; 0x02
    46e8:	80 e0       	ldi	r24, 0x00	; 0
    46ea:	21 81       	ldd	r18, Z+1	; 0x01
    46ec:	8c 01       	movw	r16, r24
    46ee:	02 0f       	add	r16, r18
    46f0:	11 1d       	adc	r17, r1
            g_period_func_x = OVERFLOW_PERIOD/funcX_freq;
    46f2:	98 01       	movw	r18, r16
    46f4:	40 e0       	ldi	r20, 0x00	; 0
    46f6:	50 e0       	ldi	r21, 0x00	; 0
    46f8:	62 e1       	ldi	r22, 0x12	; 18
    46fa:	7a e7       	ldi	r23, 0x7A	; 122
    46fc:	80 e0       	ldi	r24, 0x00	; 0
    46fe:	90 e0       	ldi	r25, 0x00	; 0
    4700:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    4704:	20 93 4d 20 	sts	0x204D, r18
    4708:	30 93 4e 20 	sts	0x204E, r19
            if (!g_b_quiet_mode)
    470c:	80 91 34 20 	lds	r24, 0x2034
    4710:	88 23       	and	r24, r24
    4712:	09 f0       	breq	.+2      	; 0x4716 <handle_message_length_3+0x1d0>
    4714:	6d c0       	rjmp	.+218    	; 0x47f0 <handle_message_length_3+0x2aa>
                xprintf(PSTR("function X update frequency = %u.\n"), funcX_freq);
    4716:	00 d0       	rcall	.+0      	; 0x4718 <handle_message_length_3+0x1d2>
    4718:	0f 92       	push	r0
    471a:	8d e2       	ldi	r24, 0x2D	; 45
    471c:	9b e0       	ldi	r25, 0x0B	; 11
    471e:	1d c0       	rjmp	.+58     	; 0x475a <handle_message_length_3+0x214>
            break;
            
        case MSG_3_SET_FUNCY_FREQ: // this is a set function generator frequency
            funcY_freq = (uint16_t) msg_buffer[1] + (256*msg_buffer[2]);
    4720:	f8 01       	movw	r30, r16
    4722:	92 81       	ldd	r25, Z+2	; 0x02
    4724:	80 e0       	ldi	r24, 0x00	; 0
    4726:	21 81       	ldd	r18, Z+1	; 0x01
    4728:	8c 01       	movw	r16, r24
    472a:	02 0f       	add	r16, r18
    472c:	11 1d       	adc	r17, r1
            g_period_func_y = OVERFLOW_PERIOD/funcY_freq;
    472e:	98 01       	movw	r18, r16
    4730:	40 e0       	ldi	r20, 0x00	; 0
    4732:	50 e0       	ldi	r21, 0x00	; 0
    4734:	62 e1       	ldi	r22, 0x12	; 18
    4736:	7a e7       	ldi	r23, 0x7A	; 122
    4738:	80 e0       	ldi	r24, 0x00	; 0
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	0e 94 9f 4b 	call	0x973e	; 0x973e <__divmodsi4>
    4740:	20 93 4f 20 	sts	0x204F, r18
    4744:	30 93 50 20 	sts	0x2050, r19
            if (!g_b_quiet_mode)
    4748:	80 91 34 20 	lds	r24, 0x2034
    474c:	88 23       	and	r24, r24
    474e:	09 f0       	breq	.+2      	; 0x4752 <handle_message_length_3+0x20c>
    4750:	4f c0       	rjmp	.+158    	; 0x47f0 <handle_message_length_3+0x2aa>
                xprintf(PSTR("function Y update frequency = %u.\n"), funcY_freq);
    4752:	00 d0       	rcall	.+0      	; 0x4754 <handle_message_length_3+0x20e>
    4754:	0f 92       	push	r0
    4756:	8a e0       	ldi	r24, 0x0A	; 10
    4758:	9b e0       	ldi	r25, 0x0B	; 11
    475a:	ad b7       	in	r26, 0x3d	; 61
    475c:	be b7       	in	r27, 0x3e	; 62
    475e:	11 96       	adiw	r26, 0x01	; 1
    4760:	8d 93       	st	X+, r24
    4762:	9c 93       	st	X, r25
    4764:	12 97       	sbiw	r26, 0x02	; 2
    4766:	13 96       	adiw	r26, 0x03	; 3
    4768:	0d 93       	st	X+, r16
    476a:	1c 93       	st	X, r17
    476c:	14 97       	sbiw	r26, 0x04	; 4
    476e:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    4772:	0f 90       	pop	r0
    4774:	0f 90       	pop	r0
    4776:	0f 90       	pop	r0
    4778:	0f 90       	pop	r0
    477a:	3a c0       	rjmp	.+116    	; 0x47f0 <handle_message_length_3+0x2aa>
            break;
            
        case MSG_3_SET_MAX_VOLTAGE: //set g_x_adc_max and g_y_adc_max
            g_x_adc_max = (uint32_t)msg_buffer[1] * DAQRESOLUTION/10;
    477c:	f8 01       	movw	r30, r16
    477e:	61 81       	ldd	r22, Z+1	; 0x01
    4780:	70 e0       	ldi	r23, 0x00	; 0
    4782:	80 e0       	ldi	r24, 0x00	; 0
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	2f ef       	ldi	r18, 0xFF	; 255
    4788:	3f e1       	ldi	r19, 0x1F	; 31
    478a:	40 e0       	ldi	r20, 0x00	; 0
    478c:	50 e0       	ldi	r21, 0x00	; 0
    478e:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    4792:	ea e0       	ldi	r30, 0x0A	; 10
    4794:	ce 2e       	mov	r12, r30
    4796:	d1 2c       	mov	r13, r1
    4798:	e1 2c       	mov	r14, r1
    479a:	f1 2c       	mov	r15, r1
    479c:	a7 01       	movw	r20, r14
    479e:	96 01       	movw	r18, r12
    47a0:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    47a4:	20 93 35 20 	sts	0x2035, r18
    47a8:	30 93 36 20 	sts	0x2036, r19
            g_y_adc_max = (uint32_t)msg_buffer[2] * DAQRESOLUTION/10;
    47ac:	d8 01       	movw	r26, r16
    47ae:	12 96       	adiw	r26, 0x02	; 2
    47b0:	6c 91       	ld	r22, X
    47b2:	12 97       	sbiw	r26, 0x02	; 2
    47b4:	70 e0       	ldi	r23, 0x00	; 0
    47b6:	80 e0       	ldi	r24, 0x00	; 0
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	2f ef       	ldi	r18, 0xFF	; 255
    47bc:	3f e1       	ldi	r19, 0x1F	; 31
    47be:	40 e0       	ldi	r20, 0x00	; 0
    47c0:	50 e0       	ldi	r21, 0x00	; 0
    47c2:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    47c6:	a7 01       	movw	r20, r14
    47c8:	96 01       	movw	r18, r12
    47ca:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    47ce:	20 93 37 20 	sts	0x2037, r18
    47d2:	30 93 38 20 	sts	0x2038, r19
            break;
    47d6:	0c c0       	rjmp	.+24     	; 0x47f0 <handle_message_length_3+0x2aa>
            
        case MSG_3_SET_VOLTAGE_RANGE_ADC: // set_voltage_range_channel(ch, range)
        	set_voltage_range_channel(msg_buffer[1], msg_buffer[2]);
    47d8:	f8 01       	movw	r30, r16
    47da:	81 81       	ldd	r24, Z+1	; 0x01
    47dc:	62 81       	ldd	r22, Z+2	; 0x02
    47de:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <set_voltage_range_channel>
        	break;
    47e2:	06 c0       	rjmp	.+12     	; 0x47f0 <handle_message_length_3+0x2aa>


        default: i2cMasterSend(0x00, 8, ERROR_CODES[3]);
    47e4:	80 e0       	ldi	r24, 0x00	; 0
    47e6:	68 e0       	ldi	r22, 0x08	; 8
    47e8:	43 e7       	ldi	r20, 0x73	; 115
    47ea:	50 e2       	ldi	r21, 0x20	; 32
    47ec:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <i2cMasterSend>
    }
} // handle_message_length_3()
    47f0:	22 96       	adiw	r28, 0x02	; 2
    47f2:	e8 e0       	ldi	r30, 0x08	; 8
    47f4:	0c 94 dd 4b 	jmp	0x97ba	; 0x97ba <__epilogue_restores__+0x14>

000047f8 <dump_mat>:
} // fetch_block_func_y()


//synchronize the SD.mat from SD card to PC
void dump_mat(void)
{
    47f8:	2f 92       	push	r2
    47fa:	3f 92       	push	r3
    47fc:	4f 92       	push	r4
    47fe:	5f 92       	push	r5
    4800:	7f 92       	push	r7
    4802:	8f 92       	push	r8
    4804:	9f 92       	push	r9
    4806:	af 92       	push	r10
    4808:	bf 92       	push	r11
    480a:	cf 92       	push	r12
    480c:	df 92       	push	r13
    480e:	ef 92       	push	r14
    4810:	ff 92       	push	r15
    4812:	0f 93       	push	r16
    4814:	1f 93       	push	r17
    4816:	df 93       	push	r29
    4818:	cf 93       	push	r28
    481a:	cd b7       	in	r28, 0x3d	; 61
    481c:	de b7       	in	r29, 0x3e	; 62
    481e:	e4 97       	sbiw	r28, 0x34	; 52
    4820:	cd bf       	out	0x3d, r28	; 61
    4822:	de bf       	out	0x3e, r29	; 62
    FRESULT fresult;
    uint16_t nbytes_read;
    uint8_t matBuff[50];
    
    // try to read in the SD.mat filfil
    if (!g_b_quiet_mode)
    4824:	80 91 34 20 	lds	r24, 0x2034
    4828:	88 23       	and	r24, r24
    482a:	91 f4       	brne	.+36     	; 0x4850 <dump_mat+0x58>
    	xprintf(PSTR("Opening %s.\n"),SDInfo);
    482c:	00 d0       	rcall	.+0      	; 0x482e <dump_mat+0x36>
    482e:	0f 92       	push	r0
    4830:	8e e8       	ldi	r24, 0x8E	; 142
    4832:	92 e0       	ldi	r25, 0x02	; 2
    4834:	ed b7       	in	r30, 0x3d	; 61
    4836:	fe b7       	in	r31, 0x3e	; 62
    4838:	81 83       	std	Z+1, r24	; 0x01
    483a:	92 83       	std	Z+2, r25	; 0x02
    483c:	83 e5       	ldi	r24, 0x53	; 83
    483e:	90 e2       	ldi	r25, 0x20	; 32
    4840:	83 83       	std	Z+3, r24	; 0x03
    4842:	94 83       	std	Z+4, r25	; 0x04
    4844:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    4848:	0f 90       	pop	r0
    484a:	0f 90       	pop	r0
    484c:	0f 90       	pop	r0
    484e:	0f 90       	pop	r0
    fresult = f_open(&g_file_arenaconfig, SDInfo, FA_OPEN_EXISTING | FA_READ);
    4850:	83 ec       	ldi	r24, 0xC3	; 195
    4852:	96 e2       	ldi	r25, 0x26	; 38
    4854:	63 e5       	ldi	r22, 0x53	; 83
    4856:	70 e2       	ldi	r23, 0x20	; 32
    4858:	41 e0       	ldi	r20, 0x01	; 1
    485a:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <f_open>
    if (fresult == FR_OK)
    485e:	00 97       	sbiw	r24, 0x00	; 0
    4860:	09 f0       	breq	.+2      	; 0x4864 <dump_mat+0x6c>
    4862:	b2 c0       	rjmp	.+356    	; 0x49c8 <dump_mat+0x1d0>
    {
        // looks good
        iteration = g_file_arenaconfig.fsize/50;
    4864:	70 90 cd 26 	lds	r7, 0x26CD
    4868:	70 91 ce 26 	lds	r23, 0x26CE
    486c:	80 91 cf 26 	lds	r24, 0x26CF
    4870:	90 91 d0 26 	lds	r25, 0x26D0
    4874:	67 2d       	mov	r22, r7
    4876:	22 e3       	ldi	r18, 0x32	; 50
    4878:	30 e0       	ldi	r19, 0x00	; 0
    487a:	40 e0       	ldi	r20, 0x00	; 0
    487c:	50 e0       	ldi	r21, 0x00	; 0
    487e:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    4882:	19 01       	movw	r2, r18
    4884:	2a 01       	movw	r4, r20
        fileRemain = (uint8_t)(g_file_arenaconfig.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), g_file_arenaconfig.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++)
    4886:	11 e0       	ldi	r17, 0x01	; 1
            offset = (b1 -1)*50;
            
            fresult = f_lseek(&g_file_arenaconfig, offset);
            if ((fresult == FR_OK) && (g_file_arenaconfig.fptr == offset))
            {
                fresult = f_read(&g_file_arenaconfig, matBuff, 50, &nbytes_read);
    4888:	f3 e0       	ldi	r31, 0x03	; 3
    488a:	af 2e       	mov	r10, r31
    488c:	b1 2c       	mov	r11, r1
    488e:	ac 0e       	add	r10, r28
    4890:	bd 1e       	adc	r11, r29
    4892:	4e 01       	movw	r8, r28
    4894:	08 94       	sec
    4896:	81 1c       	adc	r8, r1
    4898:	91 1c       	adc	r9, r1
        iteration = g_file_arenaconfig.fsize/50;
        fileRemain = (uint8_t)(g_file_arenaconfig.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), g_file_arenaconfig.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++)
    489a:	3d c0       	rjmp	.+122    	; 0x4916 <dump_mat+0x11e>
        {
            offset = (b1 -1)*50;
    489c:	21 50       	subi	r18, 0x01	; 1
    489e:	30 40       	sbci	r19, 0x00	; 0
    48a0:	82 e3       	ldi	r24, 0x32	; 50
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	28 9f       	mul	r18, r24
    48a6:	60 01       	movw	r12, r0
    48a8:	29 9f       	mul	r18, r25
    48aa:	d0 0c       	add	r13, r0
    48ac:	38 9f       	mul	r19, r24
    48ae:	d0 0c       	add	r13, r0
    48b0:	11 24       	eor	r1, r1
    48b2:	ee 24       	eor	r14, r14
    48b4:	d7 fc       	sbrc	r13, 7
    48b6:	e0 94       	com	r14
    48b8:	fe 2c       	mov	r15, r14
            
            fresult = f_lseek(&g_file_arenaconfig, offset);
    48ba:	83 ec       	ldi	r24, 0xC3	; 195
    48bc:	96 e2       	ldi	r25, 0x26	; 38
    48be:	b7 01       	movw	r22, r14
    48c0:	a6 01       	movw	r20, r12
    48c2:	0e 94 39 43 	call	0x8672	; 0x8672 <f_lseek>
            if ((fresult == FR_OK) && (g_file_arenaconfig.fptr == offset))
    48c6:	00 97       	sbiw	r24, 0x00	; 0
    48c8:	09 f5       	brne	.+66     	; 0x490c <dump_mat+0x114>
    48ca:	80 91 c9 26 	lds	r24, 0x26C9
    48ce:	90 91 ca 26 	lds	r25, 0x26CA
    48d2:	a0 91 cb 26 	lds	r26, 0x26CB
    48d6:	b0 91 cc 26 	lds	r27, 0x26CC
    48da:	8c 15       	cp	r24, r12
    48dc:	9d 05       	cpc	r25, r13
    48de:	ae 05       	cpc	r26, r14
    48e0:	bf 05       	cpc	r27, r15
    48e2:	a1 f4       	brne	.+40     	; 0x490c <dump_mat+0x114>
            {
                fresult = f_read(&g_file_arenaconfig, matBuff, 50, &nbytes_read);
    48e4:	83 ec       	ldi	r24, 0xC3	; 195
    48e6:	96 e2       	ldi	r25, 0x26	; 38
    48e8:	b5 01       	movw	r22, r10
    48ea:	42 e3       	ldi	r20, 0x32	; 50
    48ec:	50 e0       	ldi	r21, 0x00	; 0
    48ee:	94 01       	movw	r18, r8
    48f0:	0e 94 eb 41 	call	0x83d6	; 0x83d6 <f_read>
                if ((fresult == FR_OK) && (nbytes_read == 50))
    48f4:	00 97       	sbiw	r24, 0x00	; 0
    48f6:	71 f4       	brne	.+28     	; 0x4914 <dump_mat+0x11c>
    48f8:	89 81       	ldd	r24, Y+1	; 0x01
    48fa:	9a 81       	ldd	r25, Y+2	; 0x02
    48fc:	82 33       	cpi	r24, 0x32	; 50
    48fe:	91 05       	cpc	r25, r1
    4900:	49 f4       	brne	.+18     	; 0x4914 <dump_mat+0x11c>
                {
                    send_Tx_buffer(matBuff, 50);
    4902:	c5 01       	movw	r24, r10
    4904:	62 e3       	ldi	r22, 0x32	; 50
    4906:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <send_Tx_buffer>
    490a:	04 c0       	rjmp	.+8      	; 0x4914 <dump_mat+0x11c>
                }
            }
            else
            {
                xputs(PSTR("Error f_lseek in SDInfo.mat.\n"));
    490c:	80 e7       	ldi	r24, 0x70	; 112
    490e:	92 e0       	ldi	r25, 0x02	; 2
    4910:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
        iteration = g_file_arenaconfig.fsize/50;
        fileRemain = (uint8_t)(g_file_arenaconfig.fsize - iteration*50);
        //xprintf(PSTR("filesize = %lu, iteration = %lu, fileRemain = %u\n"), g_file_arenaconfig.fsize, iteration, fileRemain);
        
        // send 50 bytes data for iteration times
        for (b1=1; b1<= iteration; b1++)
    4914:	1f 5f       	subi	r17, 0xFF	; 255
    4916:	81 2f       	mov	r24, r17
    4918:	90 e0       	ldi	r25, 0x00	; 0
    491a:	a0 e0       	ldi	r26, 0x00	; 0
    491c:	b0 e0       	ldi	r27, 0x00	; 0
    491e:	21 2f       	mov	r18, r17
    4920:	30 e0       	ldi	r19, 0x00	; 0
    4922:	28 16       	cp	r2, r24
    4924:	39 06       	cpc	r3, r25
    4926:	4a 06       	cpc	r4, r26
    4928:	5b 06       	cpc	r5, r27
    492a:	08 f0       	brcs	.+2      	; 0x492e <dump_mat+0x136>
    492c:	b7 cf       	rjmp	.-146    	; 0x489c <dump_mat+0xa4>
            {
                xputs(PSTR("Error f_lseek in SDInfo.mat.\n"));
            }
        }
        //send the remained data
        offset = (b1-1)*50;
    492e:	21 50       	subi	r18, 0x01	; 1
    4930:	30 40       	sbci	r19, 0x00	; 0
    4932:	82 e3       	ldi	r24, 0x32	; 50
    4934:	90 e0       	ldi	r25, 0x00	; 0
    4936:	28 9f       	mul	r18, r24
    4938:	70 01       	movw	r14, r0
    493a:	29 9f       	mul	r18, r25
    493c:	f0 0c       	add	r15, r0
    493e:	38 9f       	mul	r19, r24
    4940:	f0 0c       	add	r15, r0
    4942:	11 24       	eor	r1, r1
    4944:	00 27       	eor	r16, r16
    4946:	f7 fc       	sbrc	r15, 7
    4948:	00 95       	com	r16
    494a:	10 2f       	mov	r17, r16
        fresult=f_lseek(&g_file_arenaconfig, offset);
    494c:	83 ec       	ldi	r24, 0xC3	; 195
    494e:	96 e2       	ldi	r25, 0x26	; 38
    4950:	b8 01       	movw	r22, r16
    4952:	a7 01       	movw	r20, r14
    4954:	0e 94 39 43 	call	0x8672	; 0x8672 <f_lseek>
        if ((fresult == FR_OK) && (g_file_arenaconfig.fptr == offset))
    4958:	00 97       	sbiw	r24, 0x00	; 0
    495a:	69 f5       	brne	.+90     	; 0x49b6 <dump_mat+0x1be>
    495c:	80 91 c9 26 	lds	r24, 0x26C9
    4960:	90 91 ca 26 	lds	r25, 0x26CA
    4964:	a0 91 cb 26 	lds	r26, 0x26CB
    4968:	b0 91 cc 26 	lds	r27, 0x26CC
    496c:	8e 15       	cp	r24, r14
    496e:	9f 05       	cpc	r25, r15
    4970:	a0 07       	cpc	r26, r16
    4972:	b1 07       	cpc	r27, r17
    4974:	01 f5       	brne	.+64     	; 0x49b6 <dump_mat+0x1be>
    fresult = f_open(&g_file_arenaconfig, SDInfo, FA_OPEN_EXISTING | FA_READ);
    if (fresult == FR_OK)
    {
        // looks good
        iteration = g_file_arenaconfig.fsize/50;
        fileRemain = (uint8_t)(g_file_arenaconfig.fsize - iteration*50);
    4976:	82 e3       	ldi	r24, 0x32	; 50
    4978:	82 9d       	mul	r24, r2
    497a:	20 2c       	mov	r2, r0
    497c:	11 24       	eor	r1, r1
    497e:	c7 2c       	mov	r12, r7
    4980:	c2 18       	sub	r12, r2
        //send the remained data
        offset = (b1-1)*50;
        fresult=f_lseek(&g_file_arenaconfig, offset);
        if ((fresult == FR_OK) && (g_file_arenaconfig.fptr == offset))
        {
            fresult = f_read(&g_file_arenaconfig, matBuff, fileRemain, &nbytes_read);
    4982:	ec 2c       	mov	r14, r12
    4984:	ff 24       	eor	r15, r15
    4986:	8e 01       	movw	r16, r28
    4988:	0d 5f       	subi	r16, 0xFD	; 253
    498a:	1f 4f       	sbci	r17, 0xFF	; 255
    498c:	83 ec       	ldi	r24, 0xC3	; 195
    498e:	96 e2       	ldi	r25, 0x26	; 38
    4990:	b8 01       	movw	r22, r16
    4992:	a7 01       	movw	r20, r14
    4994:	9e 01       	movw	r18, r28
    4996:	2f 5f       	subi	r18, 0xFF	; 255
    4998:	3f 4f       	sbci	r19, 0xFF	; 255
    499a:	0e 94 eb 41 	call	0x83d6	; 0x83d6 <f_read>
            if ((fresult == FR_OK) && (nbytes_read == fileRemain))
    499e:	00 97       	sbiw	r24, 0x00	; 0
    49a0:	71 f4       	brne	.+28     	; 0x49be <dump_mat+0x1c6>
    49a2:	89 81       	ldd	r24, Y+1	; 0x01
    49a4:	9a 81       	ldd	r25, Y+2	; 0x02
    49a6:	8e 15       	cp	r24, r14
    49a8:	9f 05       	cpc	r25, r15
    49aa:	49 f4       	brne	.+18     	; 0x49be <dump_mat+0x1c6>
            {
                send_Tx_buffer(matBuff, fileRemain);
    49ac:	c8 01       	movw	r24, r16
    49ae:	6c 2d       	mov	r22, r12
    49b0:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <send_Tx_buffer>
    49b4:	04 c0       	rjmp	.+8      	; 0x49be <dump_mat+0x1c6>
            }
        }
        else
            xputs(PSTR("Error f_lseek in remained data.\n"));
    49b6:	8f e4       	ldi	r24, 0x4F	; 79
    49b8:	92 e0       	ldi	r25, 0x02	; 2
    49ba:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
        
        f_close(&g_file_arenaconfig);
    49be:	83 ec       	ldi	r24, 0xC3	; 195
    49c0:	96 e2       	ldi	r25, 0x26	; 38
    49c2:	0e 94 2b 43 	call	0x8656	; 0x8656 <f_close>
    49c6:	04 c0       	rjmp	.+8      	; 0x49d0 <dump_mat+0x1d8>
    } 
    else 
        xputs(PSTR("Error f_open in SDInfo.mat.\n"));//end if (fresult == FR_OK
    49c8:	82 e3       	ldi	r24, 0x32	; 50
    49ca:	92 e0       	ldi	r25, 0x02	; 2
    49cc:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
    
} // dump_mat()
    49d0:	e4 96       	adiw	r28, 0x34	; 52
    49d2:	cd bf       	out	0x3d, r28	; 61
    49d4:	de bf       	out	0x3e, r29	; 62
    49d6:	cf 91       	pop	r28
    49d8:	df 91       	pop	r29
    49da:	1f 91       	pop	r17
    49dc:	0f 91       	pop	r16
    49de:	ff 90       	pop	r15
    49e0:	ef 90       	pop	r14
    49e2:	df 90       	pop	r13
    49e4:	cf 90       	pop	r12
    49e6:	bf 90       	pop	r11
    49e8:	af 90       	pop	r10
    49ea:	9f 90       	pop	r9
    49ec:	8f 90       	pop	r8
    49ee:	7f 90       	pop	r7
    49f0:	5f 90       	pop	r5
    49f2:	4f 90       	pop	r4
    49f4:	3f 90       	pop	r3
    49f6:	2f 90       	pop	r2
    49f8:	08 95       	ret

000049fa <handle_message_length_1>:
    Reg_Handler(calculate_and_set_position_x, g_period_func_x, ISR_INCREMENT_FUNC_X, FALSE);
    Reg_Handler(calculate_and_set_position_y, g_period_func_y, ISR_INCREMENT_FUNC_Y, FALSE);
}

void handle_message_length_1(uint8_t *msg_buffer)
{
    49fa:	a3 e0       	ldi	r26, 0x03	; 3
    49fc:	b0 e0       	ldi	r27, 0x00	; 0
    49fe:	e3 e0       	ldi	r30, 0x03	; 3
    4a00:	f5 e2       	ldi	r31, 0x25	; 37
    4a02:	0c 94 be 4b 	jmp	0x977c	; 0x977c <__prologue_saves__+0x8>
    uint8_t i;
    uint32_t tmp_x=0;
    uint32_t tmp_y=0;
    uint8_t n_sample=100;

    switch(msg_buffer[0])
    4a06:	dc 01       	movw	r26, r24
    4a08:	8c 91       	ld	r24, X
    4a0a:	83 34       	cpi	r24, 0x43	; 67
    4a0c:	09 f4       	brne	.+2      	; 0x4a10 <handle_message_length_1+0x16>
    4a0e:	19 c1       	rjmp	.+562    	; 0x4c42 <handle_message_length_1+0x248>
    4a10:	84 34       	cpi	r24, 0x44	; 68
    4a12:	08 f0       	brcs	.+2      	; 0x4a16 <handle_message_length_1+0x1c>
    4a14:	5b c0       	rjmp	.+182    	; 0x4acc <handle_message_length_1+0xd2>
    4a16:	80 32       	cpi	r24, 0x20	; 32
    4a18:	09 f4       	brne	.+2      	; 0x4a1c <handle_message_length_1+0x22>
    4a1a:	b6 c0       	rjmp	.+364    	; 0x4b88 <handle_message_length_1+0x18e>
    4a1c:	81 32       	cpi	r24, 0x21	; 33
    4a1e:	58 f5       	brcc	.+86     	; 0x4a76 <handle_message_length_1+0x7c>
    4a20:	84 31       	cpi	r24, 0x14	; 20
    4a22:	09 f4       	brne	.+2      	; 0x4a26 <handle_message_length_1+0x2c>
    4a24:	92 c1       	rjmp	.+804    	; 0x4d4a <handle_message_length_1+0x350>
    4a26:	85 31       	cpi	r24, 0x15	; 21
    4a28:	98 f4       	brcc	.+38     	; 0x4a50 <handle_message_length_1+0x56>
    4a2a:	81 31       	cpi	r24, 0x11	; 17
    4a2c:	09 f4       	brne	.+2      	; 0x4a30 <handle_message_length_1+0x36>
    4a2e:	7f c1       	rjmp	.+766    	; 0x4d2e <handle_message_length_1+0x334>
    4a30:	82 31       	cpi	r24, 0x12	; 18
    4a32:	38 f4       	brcc	.+14     	; 0x4a42 <handle_message_length_1+0x48>
    4a34:	88 23       	and	r24, r24
    4a36:	09 f4       	brne	.+2      	; 0x4a3a <handle_message_length_1+0x40>
    4a38:	eb c0       	rjmp	.+470    	; 0x4c10 <handle_message_length_1+0x216>
    4a3a:	80 31       	cpi	r24, 0x10	; 16
    4a3c:	09 f0       	breq	.+2      	; 0x4a40 <handle_message_length_1+0x46>
    4a3e:	89 c2       	rjmp	.+1298   	; 0x4f52 <handle_message_length_1+0x558>
    4a40:	72 c1       	rjmp	.+740    	; 0x4d26 <handle_message_length_1+0x32c>
    4a42:	82 31       	cpi	r24, 0x12	; 18
    4a44:	09 f4       	brne	.+2      	; 0x4a48 <handle_message_length_1+0x4e>
    4a46:	7a c1       	rjmp	.+756    	; 0x4d3c <handle_message_length_1+0x342>
    4a48:	83 31       	cpi	r24, 0x13	; 19
    4a4a:	09 f0       	breq	.+2      	; 0x4a4e <handle_message_length_1+0x54>
    4a4c:	82 c2       	rjmp	.+1284   	; 0x4f52 <handle_message_length_1+0x558>
    4a4e:	7a c1       	rjmp	.+756    	; 0x4d44 <handle_message_length_1+0x34a>
    4a50:	87 31       	cpi	r24, 0x17	; 23
    4a52:	09 f4       	brne	.+2      	; 0x4a56 <handle_message_length_1+0x5c>
    4a54:	a1 c1       	rjmp	.+834    	; 0x4d98 <handle_message_length_1+0x39e>
    4a56:	88 31       	cpi	r24, 0x18	; 24
    4a58:	38 f4       	brcc	.+14     	; 0x4a68 <handle_message_length_1+0x6e>
    4a5a:	85 31       	cpi	r24, 0x15	; 21
    4a5c:	09 f4       	brne	.+2      	; 0x4a60 <handle_message_length_1+0x66>
    4a5e:	78 c1       	rjmp	.+752    	; 0x4d50 <handle_message_length_1+0x356>
    4a60:	86 31       	cpi	r24, 0x16	; 22
    4a62:	09 f0       	breq	.+2      	; 0x4a66 <handle_message_length_1+0x6c>
    4a64:	76 c2       	rjmp	.+1260   	; 0x4f52 <handle_message_length_1+0x558>
    4a66:	7f c1       	rjmp	.+766    	; 0x4d66 <handle_message_length_1+0x36c>
    4a68:	88 31       	cpi	r24, 0x18	; 24
    4a6a:	09 f4       	brne	.+2      	; 0x4a6e <handle_message_length_1+0x74>
    4a6c:	99 c1       	rjmp	.+818    	; 0x4da0 <handle_message_length_1+0x3a6>
    4a6e:	89 31       	cpi	r24, 0x19	; 25
    4a70:	09 f0       	breq	.+2      	; 0x4a74 <handle_message_length_1+0x7a>
    4a72:	6f c2       	rjmp	.+1246   	; 0x4f52 <handle_message_length_1+0x558>
    4a74:	98 c1       	rjmp	.+816    	; 0x4da6 <handle_message_length_1+0x3ac>
    4a76:	86 32       	cpi	r24, 0x26	; 38
    4a78:	09 f4       	brne	.+2      	; 0x4a7c <handle_message_length_1+0x82>
    4a7a:	0a c2       	rjmp	.+1044   	; 0x4e90 <handle_message_length_1+0x496>
    4a7c:	87 32       	cpi	r24, 0x27	; 39
    4a7e:	98 f4       	brcc	.+38     	; 0x4aa6 <handle_message_length_1+0xac>
    4a80:	83 32       	cpi	r24, 0x23	; 35
    4a82:	09 f4       	brne	.+2      	; 0x4a86 <handle_message_length_1+0x8c>
    4a84:	e6 c1       	rjmp	.+972    	; 0x4e52 <handle_message_length_1+0x458>
    4a86:	84 32       	cpi	r24, 0x24	; 36
    4a88:	38 f4       	brcc	.+14     	; 0x4a98 <handle_message_length_1+0x9e>
    4a8a:	81 32       	cpi	r24, 0x21	; 33
    4a8c:	09 f4       	brne	.+2      	; 0x4a90 <handle_message_length_1+0x96>
    4a8e:	cd c1       	rjmp	.+922    	; 0x4e2a <handle_message_length_1+0x430>
    4a90:	82 32       	cpi	r24, 0x22	; 34
    4a92:	09 f0       	breq	.+2      	; 0x4a96 <handle_message_length_1+0x9c>
    4a94:	5e c2       	rjmp	.+1212   	; 0x4f52 <handle_message_length_1+0x558>
    4a96:	d3 c1       	rjmp	.+934    	; 0x4e3e <handle_message_length_1+0x444>
    4a98:	84 32       	cpi	r24, 0x24	; 36
    4a9a:	09 f4       	brne	.+2      	; 0x4a9e <handle_message_length_1+0xa4>
    4a9c:	e9 c1       	rjmp	.+978    	; 0x4e70 <handle_message_length_1+0x476>
    4a9e:	85 32       	cpi	r24, 0x25	; 37
    4aa0:	09 f0       	breq	.+2      	; 0x4aa4 <handle_message_length_1+0xaa>
    4aa2:	57 c2       	rjmp	.+1198   	; 0x4f52 <handle_message_length_1+0x558>
    4aa4:	74 c0       	rjmp	.+232    	; 0x4b8e <handle_message_length_1+0x194>
    4aa6:	80 34       	cpi	r24, 0x40	; 64
    4aa8:	09 f4       	brne	.+2      	; 0x4aac <handle_message_length_1+0xb2>
    4aaa:	bc c0       	rjmp	.+376    	; 0x4c24 <handle_message_length_1+0x22a>
    4aac:	81 34       	cpi	r24, 0x41	; 65
    4aae:	38 f4       	brcc	.+14     	; 0x4abe <handle_message_length_1+0xc4>
    4ab0:	80 33       	cpi	r24, 0x30	; 48
    4ab2:	09 f4       	brne	.+2      	; 0x4ab6 <handle_message_length_1+0xbc>
    4ab4:	80 c0       	rjmp	.+256    	; 0x4bb6 <handle_message_length_1+0x1bc>
    4ab6:	85 33       	cpi	r24, 0x35	; 53
    4ab8:	09 f0       	breq	.+2      	; 0x4abc <handle_message_length_1+0xc2>
    4aba:	4b c2       	rjmp	.+1174   	; 0x4f52 <handle_message_length_1+0x558>
    4abc:	94 c0       	rjmp	.+296    	; 0x4be6 <handle_message_length_1+0x1ec>
    4abe:	81 34       	cpi	r24, 0x41	; 65
    4ac0:	09 f4       	brne	.+2      	; 0x4ac4 <handle_message_length_1+0xca>
    4ac2:	b5 c0       	rjmp	.+362    	; 0x4c2e <handle_message_length_1+0x234>
    4ac4:	82 34       	cpi	r24, 0x42	; 66
    4ac6:	09 f0       	breq	.+2      	; 0x4aca <handle_message_length_1+0xd0>
    4ac8:	44 c2       	rjmp	.+1160   	; 0x4f52 <handle_message_length_1+0x558>
    4aca:	b6 c0       	rjmp	.+364    	; 0x4c38 <handle_message_length_1+0x23e>
    4acc:	84 39       	cpi	r24, 0x94	; 148
    4ace:	09 f4       	brne	.+2      	; 0x4ad2 <handle_message_length_1+0xd8>
    4ad0:	ee c0       	rjmp	.+476    	; 0x4cae <handle_message_length_1+0x2b4>
    4ad2:	85 39       	cpi	r24, 0x95	; 149
    4ad4:	58 f5       	brcc	.+86     	; 0x4b2c <handle_message_length_1+0x132>
    4ad6:	80 36       	cpi	r24, 0x60	; 96
    4ad8:	09 f4       	brne	.+2      	; 0x4adc <handle_message_length_1+0xe2>
    4ada:	cf c0       	rjmp	.+414    	; 0x4c7a <handle_message_length_1+0x280>
    4adc:	81 36       	cpi	r24, 0x61	; 97
    4ade:	98 f4       	brcc	.+38     	; 0x4b06 <handle_message_length_1+0x10c>
    4ae0:	86 34       	cpi	r24, 0x46	; 70
    4ae2:	09 f4       	brne	.+2      	; 0x4ae6 <handle_message_length_1+0xec>
    4ae4:	bd c0       	rjmp	.+378    	; 0x4c60 <handle_message_length_1+0x266>
    4ae6:	87 34       	cpi	r24, 0x47	; 71
    4ae8:	38 f4       	brcc	.+14     	; 0x4af8 <handle_message_length_1+0xfe>
    4aea:	84 34       	cpi	r24, 0x44	; 68
    4aec:	09 f4       	brne	.+2      	; 0x4af0 <handle_message_length_1+0xf6>
    4aee:	ae c0       	rjmp	.+348    	; 0x4c4c <handle_message_length_1+0x252>
    4af0:	85 34       	cpi	r24, 0x45	; 69
    4af2:	09 f0       	breq	.+2      	; 0x4af6 <handle_message_length_1+0xfc>
    4af4:	2e c2       	rjmp	.+1116   	; 0x4f52 <handle_message_length_1+0x558>
    4af6:	af c0       	rjmp	.+350    	; 0x4c56 <handle_message_length_1+0x25c>
    4af8:	87 34       	cpi	r24, 0x47	; 71
    4afa:	09 f4       	brne	.+2      	; 0x4afe <handle_message_length_1+0x104>
    4afc:	b6 c0       	rjmp	.+364    	; 0x4c6a <handle_message_length_1+0x270>
    4afe:	80 35       	cpi	r24, 0x50	; 80
    4b00:	09 f0       	breq	.+2      	; 0x4b04 <handle_message_length_1+0x10a>
    4b02:	27 c2       	rjmp	.+1102   	; 0x4f52 <handle_message_length_1+0x558>
    4b04:	b7 c0       	rjmp	.+366    	; 0x4c74 <handle_message_length_1+0x27a>
    4b06:	81 39       	cpi	r24, 0x91	; 145
    4b08:	09 f4       	brne	.+2      	; 0x4b0c <handle_message_length_1+0x112>
    4b0a:	c2 c0       	rjmp	.+388    	; 0x4c90 <handle_message_length_1+0x296>
    4b0c:	82 39       	cpi	r24, 0x92	; 146
    4b0e:	38 f4       	brcc	.+14     	; 0x4b1e <handle_message_length_1+0x124>
    4b10:	80 37       	cpi	r24, 0x70	; 112
    4b12:	09 f4       	brne	.+2      	; 0x4b16 <handle_message_length_1+0x11c>
    4b14:	b5 c0       	rjmp	.+362    	; 0x4c80 <handle_message_length_1+0x286>
    4b16:	80 39       	cpi	r24, 0x90	; 144
    4b18:	09 f0       	breq	.+2      	; 0x4b1c <handle_message_length_1+0x122>
    4b1a:	1b c2       	rjmp	.+1078   	; 0x4f52 <handle_message_length_1+0x558>
    4b1c:	b4 c0       	rjmp	.+360    	; 0x4c86 <handle_message_length_1+0x28c>
    4b1e:	82 39       	cpi	r24, 0x92	; 146
    4b20:	09 f4       	brne	.+2      	; 0x4b24 <handle_message_length_1+0x12a>
    4b22:	bb c0       	rjmp	.+374    	; 0x4c9a <handle_message_length_1+0x2a0>
    4b24:	83 39       	cpi	r24, 0x93	; 147
    4b26:	09 f0       	breq	.+2      	; 0x4b2a <handle_message_length_1+0x130>
    4b28:	14 c2       	rjmp	.+1064   	; 0x4f52 <handle_message_length_1+0x558>
    4b2a:	bc c0       	rjmp	.+376    	; 0x4ca4 <handle_message_length_1+0x2aa>
    4b2c:	8a 39       	cpi	r24, 0x9A	; 154
    4b2e:	09 f4       	brne	.+2      	; 0x4b32 <handle_message_length_1+0x138>
    4b30:	dc c0       	rjmp	.+440    	; 0x4cea <handle_message_length_1+0x2f0>
    4b32:	8b 39       	cpi	r24, 0x9B	; 155
    4b34:	98 f4       	brcc	.+38     	; 0x4b5c <handle_message_length_1+0x162>
    4b36:	87 39       	cpi	r24, 0x97	; 151
    4b38:	09 f4       	brne	.+2      	; 0x4b3c <handle_message_length_1+0x142>
    4b3a:	c8 c0       	rjmp	.+400    	; 0x4ccc <handle_message_length_1+0x2d2>
    4b3c:	88 39       	cpi	r24, 0x98	; 152
    4b3e:	38 f4       	brcc	.+14     	; 0x4b4e <handle_message_length_1+0x154>
    4b40:	85 39       	cpi	r24, 0x95	; 149
    4b42:	09 f4       	brne	.+2      	; 0x4b46 <handle_message_length_1+0x14c>
    4b44:	b9 c0       	rjmp	.+370    	; 0x4cb8 <handle_message_length_1+0x2be>
    4b46:	86 39       	cpi	r24, 0x96	; 150
    4b48:	09 f0       	breq	.+2      	; 0x4b4c <handle_message_length_1+0x152>
    4b4a:	03 c2       	rjmp	.+1030   	; 0x4f52 <handle_message_length_1+0x558>
    4b4c:	ba c0       	rjmp	.+372    	; 0x4cc2 <handle_message_length_1+0x2c8>
    4b4e:	88 39       	cpi	r24, 0x98	; 152
    4b50:	09 f4       	brne	.+2      	; 0x4b54 <handle_message_length_1+0x15a>
    4b52:	c1 c0       	rjmp	.+386    	; 0x4cd6 <handle_message_length_1+0x2dc>
    4b54:	89 39       	cpi	r24, 0x99	; 153
    4b56:	09 f0       	breq	.+2      	; 0x4b5a <handle_message_length_1+0x160>
    4b58:	fc c1       	rjmp	.+1016   	; 0x4f52 <handle_message_length_1+0x558>
    4b5a:	c2 c0       	rjmp	.+388    	; 0x4ce0 <handle_message_length_1+0x2e6>
    4b5c:	8d 39       	cpi	r24, 0x9D	; 157
    4b5e:	09 f4       	brne	.+2      	; 0x4b62 <handle_message_length_1+0x168>
    4b60:	d3 c0       	rjmp	.+422    	; 0x4d08 <handle_message_length_1+0x30e>
    4b62:	8e 39       	cpi	r24, 0x9E	; 158
    4b64:	38 f4       	brcc	.+14     	; 0x4b74 <handle_message_length_1+0x17a>
    4b66:	8b 39       	cpi	r24, 0x9B	; 155
    4b68:	09 f4       	brne	.+2      	; 0x4b6c <handle_message_length_1+0x172>
    4b6a:	c4 c0       	rjmp	.+392    	; 0x4cf4 <handle_message_length_1+0x2fa>
    4b6c:	8c 39       	cpi	r24, 0x9C	; 156
    4b6e:	09 f0       	breq	.+2      	; 0x4b72 <handle_message_length_1+0x178>
    4b70:	f0 c1       	rjmp	.+992    	; 0x4f52 <handle_message_length_1+0x558>
    4b72:	c5 c0       	rjmp	.+394    	; 0x4cfe <handle_message_length_1+0x304>
    4b74:	8f 39       	cpi	r24, 0x9F	; 159
    4b76:	09 f4       	brne	.+2      	; 0x4b7a <handle_message_length_1+0x180>
    4b78:	d1 c0       	rjmp	.+418    	; 0x4d1c <handle_message_length_1+0x322>
    4b7a:	8f 39       	cpi	r24, 0x9F	; 159
    4b7c:	08 f4       	brcc	.+2      	; 0x4b80 <handle_message_length_1+0x186>
    4b7e:	c9 c0       	rjmp	.+402    	; 0x4d12 <handle_message_length_1+0x318>
    4b80:	8f 3f       	cpi	r24, 0xFF	; 255
    4b82:	09 f0       	breq	.+2      	; 0x4b86 <handle_message_length_1+0x18c>
    4b84:	e6 c1       	rjmp	.+972    	; 0x4f52 <handle_message_length_1+0x558>
    4b86:	49 c0       	rjmp	.+146    	; 0x4c1a <handle_message_length_1+0x220>
    {
        case MSG_1_START:  //Start display.
        	start_running();
    4b88:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <start_running>
            break;
    4b8c:	e8 c1       	rjmp	.+976    	; 0x4f5e <handle_message_length_1+0x564>
            
        case MSG_1_START_W_TRIG:  //Start display & trigger - same as regular, but this also does trigger
        	start_running();
    4b8e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <start_running>
        	Reg_Handler(toggle_trigger, (uint32_t)OVERFLOW_PERIOD/g_trigger_rate, ISR_TOGGLE_TRIGGER, TRUE); // Turn on the trigger toggler
    4b92:	60 91 51 20 	lds	r22, 0x2051
    4b96:	70 91 52 20 	lds	r23, 0x2052
    4b9a:	82 e1       	ldi	r24, 0x12	; 18
    4b9c:	9a e7       	ldi	r25, 0x7A	; 122
    4b9e:	0e 94 56 4b 	call	0x96ac	; 0x96ac <__udivmodhi4>
    4ba2:	ab 01       	movw	r20, r22
    4ba4:	60 e0       	ldi	r22, 0x00	; 0
    4ba6:	70 e0       	ldi	r23, 0x00	; 0
    4ba8:	89 ee       	ldi	r24, 0xE9	; 233
    4baa:	9a e0       	ldi	r25, 0x0A	; 10
    4bac:	20 e0       	ldi	r18, 0x00	; 0
    4bae:	01 e0       	ldi	r16, 0x01	; 1
    4bb0:	0e 94 07 39 	call	0x720e	; 0x720e <Reg_Handler>
            break;
    4bb4:	d4 c1       	rjmp	.+936    	; 0x4f5e <handle_message_length_1+0x564>

        case MSG_1_STOP: //stop display
        	stop_running();
    4bb6:	0e 94 28 10 	call	0x2050	; 0x2050 <stop_running>
            if (!g_b_default_func_x)
    4bba:	80 91 4b 20 	lds	r24, 0x204B
    4bbe:	88 23       	and	r24, r24
    4bc0:	31 f4       	brne	.+12     	; 0x4bce <handle_message_length_1+0x1d4>
                fetch_block_func_x(&g_file_func_x, TRUE, 0);
    4bc2:	85 ea       	ldi	r24, 0xA5	; 165
    4bc4:	97 e2       	ldi	r25, 0x27	; 39
    4bc6:	61 e0       	ldi	r22, 0x01	; 1
    4bc8:	40 e0       	ldi	r20, 0x00	; 0
    4bca:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <fetch_block_func_x>
            if (!g_b_default_func_y)
    4bce:	80 91 4c 20 	lds	r24, 0x204C
    4bd2:	88 23       	and	r24, r24
    4bd4:	09 f0       	breq	.+2      	; 0x4bd8 <handle_message_length_1+0x1de>
    4bd6:	c3 c1       	rjmp	.+902    	; 0x4f5e <handle_message_length_1+0x564>
                fetch_block_func_y(&g_file_func_y, TRUE, 0);
    4bd8:	8f eb       	ldi	r24, 0xBF	; 191
    4bda:	97 e2       	ldi	r25, 0x27	; 39
    4bdc:	61 e0       	ldi	r22, 0x01	; 1
    4bde:	40 e0       	ldi	r20, 0x00	; 0
    4be0:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <fetch_block_func_y>
    4be4:	bc c1       	rjmp	.+888    	; 0x4f5e <handle_message_length_1+0x564>
            break;
            
        case MSG_1_STOP_W_TRIG: //stop display & trigger - same as regular, but this also does trigger
        	stop_running();
    4be6:	0e 94 28 10 	call	0x2050	; 0x2050 <stop_running>
            Reg_Handler(toggle_trigger, (uint32_t)OVERFLOW_PERIOD/g_trigger_rate, ISR_TOGGLE_TRIGGER, FALSE); // Turn off the trigger toggler
    4bea:	60 91 51 20 	lds	r22, 0x2051
    4bee:	70 91 52 20 	lds	r23, 0x2052
    4bf2:	82 e1       	ldi	r24, 0x12	; 18
    4bf4:	9a e7       	ldi	r25, 0x7A	; 122
    4bf6:	0e 94 56 4b 	call	0x96ac	; 0x96ac <__udivmodhi4>
    4bfa:	ab 01       	movw	r20, r22
    4bfc:	60 e0       	ldi	r22, 0x00	; 0
    4bfe:	70 e0       	ldi	r23, 0x00	; 0
    4c00:	89 ee       	ldi	r24, 0xE9	; 233
    4c02:	9a e0       	ldi	r25, 0x0A	; 10
    4c04:	20 e0       	ldi	r18, 0x00	; 0
    4c06:	00 e0       	ldi	r16, 0x00	; 0
    4c08:	0e 94 07 39 	call	0x720e	; 0x720e <Reg_Handler>
            digitalWrite(DIO_TRIGGEROUT,LOW);    //set the trigger output to low
    4c0c:	82 e0       	ldi	r24, 0x02	; 2
    4c0e:	92 c0       	rjmp	.+292    	; 0x4d34 <handle_message_length_1+0x33a>
            break;

            
        case MSG_1_ALL_OFF:        i2cMasterSend(0x00, 8, ALL_OFF); break;
    4c10:	80 e0       	ldi	r24, 0x00	; 0
    4c12:	68 e0       	ldi	r22, 0x08	; 8
    4c14:	45 e1       	ldi	r20, 0x15	; 21
    4c16:	54 e2       	ldi	r21, 0x24	; 36
    4c18:	a0 c1       	rjmp	.+832    	; 0x4f5a <handle_message_length_1+0x560>
        case MSG_1_ALL_ON:         i2cMasterSend(0x00, 8, ALL_ON); break;
    4c1a:	80 e0       	ldi	r24, 0x00	; 0
    4c1c:	68 e0       	ldi	r22, 0x08	; 8
    4c1e:	4f e9       	ldi	r20, 0x9F	; 159
    4c20:	50 e2       	ldi	r21, 0x20	; 32
    4c22:	9b c1       	rjmp	.+822    	; 0x4f5a <handle_message_length_1+0x560>
        case 0x40:                 i2cMasterSend(0x00, 24, G_LEVELS[0]); break;
    4c24:	80 e0       	ldi	r24, 0x00	; 0
    4c26:	68 e1       	ldi	r22, 0x18	; 24
    4c28:	47 ea       	ldi	r20, 0xA7	; 167
    4c2a:	50 e2       	ldi	r21, 0x20	; 32
    4c2c:	96 c1       	rjmp	.+812    	; 0x4f5a <handle_message_length_1+0x560>
        case 0x41:                 i2cMasterSend(0x00, 24, G_LEVELS[1]); break;
    4c2e:	80 e0       	ldi	r24, 0x00	; 0
    4c30:	68 e1       	ldi	r22, 0x18	; 24
    4c32:	4f eb       	ldi	r20, 0xBF	; 191
    4c34:	50 e2       	ldi	r21, 0x20	; 32
    4c36:	91 c1       	rjmp	.+802    	; 0x4f5a <handle_message_length_1+0x560>
        case 0x42:                 i2cMasterSend(0x00, 24, G_LEVELS[2]); break;
    4c38:	80 e0       	ldi	r24, 0x00	; 0
    4c3a:	68 e1       	ldi	r22, 0x18	; 24
    4c3c:	47 ed       	ldi	r20, 0xD7	; 215
    4c3e:	50 e2       	ldi	r21, 0x20	; 32
    4c40:	8c c1       	rjmp	.+792    	; 0x4f5a <handle_message_length_1+0x560>
        case 0x43:                 i2cMasterSend(0x00, 24, G_LEVELS[3]);   break;
    4c42:	80 e0       	ldi	r24, 0x00	; 0
    4c44:	68 e1       	ldi	r22, 0x18	; 24
    4c46:	4f ee       	ldi	r20, 0xEF	; 239
    4c48:	50 e2       	ldi	r21, 0x20	; 32
    4c4a:	87 c1       	rjmp	.+782    	; 0x4f5a <handle_message_length_1+0x560>
        case 0x44:                 i2cMasterSend(0x00, 24, G_LEVELS[4]); break;
    4c4c:	80 e0       	ldi	r24, 0x00	; 0
    4c4e:	68 e1       	ldi	r22, 0x18	; 24
    4c50:	47 e0       	ldi	r20, 0x07	; 7
    4c52:	51 e2       	ldi	r21, 0x21	; 33
    4c54:	82 c1       	rjmp	.+772    	; 0x4f5a <handle_message_length_1+0x560>
        case 0x45:                 i2cMasterSend(0x00, 24, G_LEVELS[5]); break;
    4c56:	80 e0       	ldi	r24, 0x00	; 0
    4c58:	68 e1       	ldi	r22, 0x18	; 24
    4c5a:	4f e1       	ldi	r20, 0x1F	; 31
    4c5c:	51 e2       	ldi	r21, 0x21	; 33
    4c5e:	7d c1       	rjmp	.+762    	; 0x4f5a <handle_message_length_1+0x560>
        case 0x46:                 i2cMasterSend(0x00, 24, G_LEVELS[6]); break;
    4c60:	80 e0       	ldi	r24, 0x00	; 0
    4c62:	68 e1       	ldi	r22, 0x18	; 24
    4c64:	47 e3       	ldi	r20, 0x37	; 55
    4c66:	51 e2       	ldi	r21, 0x21	; 33
    4c68:	78 c1       	rjmp	.+752    	; 0x4f5a <handle_message_length_1+0x560>
        case 0x47:                 i2cMasterSend(0x00, 24, G_LEVELS[7]); break;
    4c6a:	80 e0       	ldi	r24, 0x00	; 0
    4c6c:	68 e1       	ldi	r22, 0x18	; 24
    4c6e:	4f e4       	ldi	r20, 0x4F	; 79
    4c70:	51 e2       	ldi	r21, 0x21	; 33
    4c72:	73 c1       	rjmp	.+742    	; 0x4f5a <handle_message_length_1+0x560>
        case MSG_1_LED_TOG:        ledBlink(); break;
    4c74:	0e 94 3d 2c 	call	0x587a	; 0x587a <ledBlink>
    4c78:	72 c1       	rjmp	.+740    	; 0x4f5e <handle_message_length_1+0x564>
        case MSG_1_CTR_RESET:      SystemReset();  break;
    4c7a:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <SystemReset>
    4c7e:	6f c1       	rjmp	.+734    	; 0x4f5e <handle_message_length_1+0x564>
        case MSG_1_BENCH_PATTERN:  benchmark_pattern(); break;
    4c80:	0e 94 33 19 	call	0x3266	; 0x3266 <benchmark_pattern>
    4c84:	6c c1       	rjmp	.+728    	; 0x4f5e <handle_message_length_1+0x564>
        case MSG_1_G_LEVEL_0:      i2cMasterSend(0x00, 32, G_LEVELS_16[0]); break;
    4c86:	80 e0       	ldi	r24, 0x00	; 0
    4c88:	60 e2       	ldi	r22, 0x20	; 32
    4c8a:	47 e6       	ldi	r20, 0x67	; 103
    4c8c:	51 e2       	ldi	r21, 0x21	; 33
    4c8e:	65 c1       	rjmp	.+714    	; 0x4f5a <handle_message_length_1+0x560>
        case MSG_1_G_LEVEL_1:      i2cMasterSend(0x00, 32, G_LEVELS_16[1]); break;
    4c90:	80 e0       	ldi	r24, 0x00	; 0
    4c92:	60 e2       	ldi	r22, 0x20	; 32
    4c94:	47 e8       	ldi	r20, 0x87	; 135
    4c96:	51 e2       	ldi	r21, 0x21	; 33
    4c98:	60 c1       	rjmp	.+704    	; 0x4f5a <handle_message_length_1+0x560>
        case MSG_1_G_LEVEL_2:      i2cMasterSend(0x00, 32, G_LEVELS_16[2]); break;
    4c9a:	80 e0       	ldi	r24, 0x00	; 0
    4c9c:	60 e2       	ldi	r22, 0x20	; 32
    4c9e:	47 ea       	ldi	r20, 0xA7	; 167
    4ca0:	51 e2       	ldi	r21, 0x21	; 33
    4ca2:	5b c1       	rjmp	.+694    	; 0x4f5a <handle_message_length_1+0x560>
        case MSG_1_G_LEVEL_3:      i2cMasterSend(0x00, 32, G_LEVELS_16[3]); break;
    4ca4:	80 e0       	ldi	r24, 0x00	; 0
    4ca6:	60 e2       	ldi	r22, 0x20	; 32
    4ca8:	47 ec       	ldi	r20, 0xC7	; 199
    4caa:	51 e2       	ldi	r21, 0x21	; 33
    4cac:	56 c1       	rjmp	.+684    	; 0x4f5a <handle_message_length_1+0x560>
        case MSG_1_G_LEVEL_4:      i2cMasterSend(0x00, 32, G_LEVELS_16[4]); break;
    4cae:	80 e0       	ldi	r24, 0x00	; 0
    4cb0:	60 e2       	ldi	r22, 0x20	; 32
    4cb2:	47 ee       	ldi	r20, 0xE7	; 231
    4cb4:	51 e2       	ldi	r21, 0x21	; 33
    4cb6:	51 c1       	rjmp	.+674    	; 0x4f5a <handle_message_length_1+0x560>
        case MSG_1_G_LEVEL_5:      i2cMasterSend(0x00, 32, G_LEVELS_16[5]); break;
    4cb8:	80 e0       	ldi	r24, 0x00	; 0
    4cba:	60 e2       	ldi	r22, 0x20	; 32
    4cbc:	47 e0       	ldi	r20, 0x07	; 7
    4cbe:	52 e2       	ldi	r21, 0x22	; 34
    4cc0:	4c c1       	rjmp	.+664    	; 0x4f5a <handle_message_length_1+0x560>
        case MSG_1_G_LEVEL_6:      i2cMasterSend(0x00, 32, G_LEVELS_16[6]); break;
    4cc2:	80 e0       	ldi	r24, 0x00	; 0
    4cc4:	60 e2       	ldi	r22, 0x20	; 32
    4cc6:	47 e2       	ldi	r20, 0x27	; 39
    4cc8:	52 e2       	ldi	r21, 0x22	; 34
    4cca:	47 c1       	rjmp	.+654    	; 0x4f5a <handle_message_length_1+0x560>
        case MSG_1_G_LEVEL_7:      i2cMasterSend(0x00, 32, G_LEVELS_16[7]); break;
    4ccc:	80 e0       	ldi	r24, 0x00	; 0
    4cce:	60 e2       	ldi	r22, 0x20	; 32
    4cd0:	47 e4       	ldi	r20, 0x47	; 71
    4cd2:	52 e2       	ldi	r21, 0x22	; 34
    4cd4:	42 c1       	rjmp	.+644    	; 0x4f5a <handle_message_length_1+0x560>
        case MSG_1_G_LEVEL_8:      i2cMasterSend(0x00, 32, G_LEVELS_16[8]); break;
    4cd6:	80 e0       	ldi	r24, 0x00	; 0
    4cd8:	60 e2       	ldi	r22, 0x20	; 32
    4cda:	47 e6       	ldi	r20, 0x67	; 103
    4cdc:	52 e2       	ldi	r21, 0x22	; 34
    4cde:	3d c1       	rjmp	.+634    	; 0x4f5a <handle_message_length_1+0x560>
        case MSG_1_G_LEVEL_9:      i2cMasterSend(0x00, 32, G_LEVELS_16[9]); break;
    4ce0:	80 e0       	ldi	r24, 0x00	; 0
    4ce2:	60 e2       	ldi	r22, 0x20	; 32
    4ce4:	47 e8       	ldi	r20, 0x87	; 135
    4ce6:	52 e2       	ldi	r21, 0x22	; 34
    4ce8:	38 c1       	rjmp	.+624    	; 0x4f5a <handle_message_length_1+0x560>
        case MSG_1_G_LEVEL_10:     i2cMasterSend(0x00, 32, G_LEVELS_16[10]); break;
    4cea:	80 e0       	ldi	r24, 0x00	; 0
    4cec:	60 e2       	ldi	r22, 0x20	; 32
    4cee:	47 ea       	ldi	r20, 0xA7	; 167
    4cf0:	52 e2       	ldi	r21, 0x22	; 34
    4cf2:	33 c1       	rjmp	.+614    	; 0x4f5a <handle_message_length_1+0x560>
        case MSG_1_G_LEVEL_11:     i2cMasterSend(0x00, 32, G_LEVELS_16[11]); break;
    4cf4:	80 e0       	ldi	r24, 0x00	; 0
    4cf6:	60 e2       	ldi	r22, 0x20	; 32
    4cf8:	47 ec       	ldi	r20, 0xC7	; 199
    4cfa:	52 e2       	ldi	r21, 0x22	; 34
    4cfc:	2e c1       	rjmp	.+604    	; 0x4f5a <handle_message_length_1+0x560>
        case MSG_1_G_LEVEL_12:     i2cMasterSend(0x00, 32, G_LEVELS_16[12]); break;
    4cfe:	80 e0       	ldi	r24, 0x00	; 0
    4d00:	60 e2       	ldi	r22, 0x20	; 32
    4d02:	47 ee       	ldi	r20, 0xE7	; 231
    4d04:	52 e2       	ldi	r21, 0x22	; 34
    4d06:	29 c1       	rjmp	.+594    	; 0x4f5a <handle_message_length_1+0x560>
        case MSG_1_G_LEVEL_13:     i2cMasterSend(0x00, 32, G_LEVELS_16[13]); break;
    4d08:	80 e0       	ldi	r24, 0x00	; 0
    4d0a:	60 e2       	ldi	r22, 0x20	; 32
    4d0c:	47 e0       	ldi	r20, 0x07	; 7
    4d0e:	53 e2       	ldi	r21, 0x23	; 35
    4d10:	24 c1       	rjmp	.+584    	; 0x4f5a <handle_message_length_1+0x560>
        case MSG_1_G_LEVEL_14:     i2cMasterSend(0x00, 32, G_LEVELS_16[14]); break;
    4d12:	80 e0       	ldi	r24, 0x00	; 0
    4d14:	60 e2       	ldi	r22, 0x20	; 32
    4d16:	47 e2       	ldi	r20, 0x27	; 39
    4d18:	53 e2       	ldi	r21, 0x23	; 35
    4d1a:	1f c1       	rjmp	.+574    	; 0x4f5a <handle_message_length_1+0x560>
        case MSG_1_G_LEVEL_15:     i2cMasterSend(0x00, 32, G_LEVELS_16[15]); break;
    4d1c:	80 e0       	ldi	r24, 0x00	; 0
    4d1e:	60 e2       	ldi	r22, 0x20	; 32
    4d20:	47 e4       	ldi	r20, 0x47	; 71
    4d22:	53 e2       	ldi	r21, 0x23	; 35
    4d24:	1a c1       	rjmp	.+564    	; 0x4f5a <handle_message_length_1+0x560>
        
        case MSG_1_LASER_ON:  // turn laser on
            g_b_laseractive = TRUE;
    4d26:	81 e0       	ldi	r24, 0x01	; 1
    4d28:	80 93 b1 23 	sts	0x23B1, r24
            break;
    4d2c:	18 c1       	rjmp	.+560    	; 0x4f5e <handle_message_length_1+0x564>
            
        case MSG_1_LASER_OFF:  // turn laser off
            g_b_laseractive = FALSE;
    4d2e:	10 92 b1 23 	sts	0x23B1, r1
            // turn off the lines that may be connected
            digitalWrite(DIO_LASER, LOW);
    4d32:	80 e0       	ldi	r24, 0x00	; 0
    4d34:	60 e0       	ldi	r22, 0x00	; 0
    4d36:	0e 94 6e 2d 	call	0x5adc	; 0x5adc <digitalWrite>
            break;
    4d3a:	11 c1       	rjmp	.+546    	; 0x4f5e <handle_message_length_1+0x564>
            
        case MSG_1_IDENT_COMPRESS_ON:  // turn on compression for identical elements
            g_ident_compress = TRUE;
    4d3c:	81 e0       	ldi	r24, 0x01	; 1
    4d3e:	80 93 b4 23 	sts	0x23B4, r24
            break;
    4d42:	0d c1       	rjmp	.+538    	; 0x4f5e <handle_message_length_1+0x564>
            
        case MSG_1_IDENT_COMPRESS_OFF:  // turn off compression for identical elements
            g_ident_compress = FALSE;
    4d44:	10 92 b4 23 	sts	0x23B4, r1
            break;
    4d48:	0a c1       	rjmp	.+532    	; 0x4f5e <handle_message_length_1+0x564>
            
        case MSG_1_SYNC_SD_INFO:  //synchronize the SDInfo.mat with the one in the PC
            dump_mat();
    4d4a:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <dump_mat>
            break;
    4d4e:	07 c1       	rjmp	.+526    	; 0x4f5e <handle_message_length_1+0x564>
            
        case MSG_1_GET_VERSION:  //get current version
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
    4d50:	00 d0       	rcall	.+0      	; 0x4d52 <handle_message_length_1+0x358>
    4d52:	0f 92       	push	r0
    4d54:	83 e6       	ldi	r24, 0x63	; 99
    4d56:	9c e0       	ldi	r25, 0x0C	; 12
    4d58:	ed b7       	in	r30, 0x3d	; 61
    4d5a:	fe b7       	in	r31, 0x3e	; 62
    4d5c:	81 83       	std	Z+1, r24	; 0x01
    4d5e:	92 83       	std	Z+2, r25	; 0x02
    4d60:	87 e6       	ldi	r24, 0x67	; 103
    4d62:	93 e2       	ldi	r25, 0x23	; 35
    4d64:	ed c0       	rjmp	.+474    	; 0x4f40 <handle_message_length_1+0x546>
            break;
    4d66:	09 ef       	ldi	r16, 0xF9	; 249
    4d68:	14 e2       	ldi	r17, 0x24	; 36
    uint8_t i;
    uint32_t tmp_x=0;
    uint32_t tmp_y=0;
    uint8_t n_sample=100;

    switch(msg_buffer[0])
    4d6a:	91 e0       	ldi	r25, 0x01	; 1
            break;
            
        case MSG_1_SHOW_BUS_NUMBER:   //show the bus number
            for (i = 1; i <= 128; i++)
            {
                CMD[0] = 0xFE; CMD[1] = g_ch_from_panel[i];
    4d6c:	8e ef       	ldi	r24, 0xFE	; 254
    4d6e:	a8 2e       	mov	r10, r24
                i2cMasterSend(i, 2, CMD);
    4d70:	7e 01       	movw	r14, r28
    4d72:	08 94       	sec
    4d74:	e1 1c       	adc	r14, r1
    4d76:	f1 1c       	adc	r15, r1
            break;
            
        case MSG_1_SHOW_BUS_NUMBER:   //show the bus number
            for (i = 1; i <= 128; i++)
            {
                CMD[0] = 0xFE; CMD[1] = g_ch_from_panel[i];
    4d78:	a9 82       	std	Y+1, r10	; 0x01
    4d7a:	d8 01       	movw	r26, r16
    4d7c:	8d 91       	ld	r24, X+
    4d7e:	8d 01       	movw	r16, r26
    4d80:	8a 83       	std	Y+2, r24	; 0x02
                i2cMasterSend(i, 2, CMD);
    4d82:	89 2f       	mov	r24, r25
    4d84:	62 e0       	ldi	r22, 0x02	; 2
    4d86:	a7 01       	movw	r20, r14
    4d88:	9b 83       	std	Y+3, r25	; 0x03
    4d8a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <i2cMasterSend>
        case MSG_1_GET_VERSION:  //get current version
            xprintf(PSTR("Current version number is %s.\n"), VERSION);
            break;
            
        case MSG_1_SHOW_BUS_NUMBER:   //show the bus number
            for (i = 1; i <= 128; i++)
    4d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d90:	9f 5f       	subi	r25, 0xFF	; 255
    4d92:	91 38       	cpi	r25, 0x81	; 129
    4d94:	89 f7       	brne	.-30     	; 0x4d78 <handle_message_length_1+0x37e>
    4d96:	e3 c0       	rjmp	.+454    	; 0x4f5e <handle_message_length_1+0x564>
                i2cMasterSend(i, 2, CMD);
            }
            break;
            
        case MSG_1_QUIET_MODE_ON:  // turn on quiet_mode, no message sent out
            g_b_quiet_mode = TRUE;
    4d98:	81 e0       	ldi	r24, 0x01	; 1
    4d9a:	80 93 34 20 	sts	0x2034, r24
            break;
    4d9e:	df c0       	rjmp	.+446    	; 0x4f5e <handle_message_length_1+0x564>
            
        case MSG_1_QUIET_MODE_OFF:  // turn off quiet_mode, essage sent out
            g_b_quiet_mode = FALSE;
    4da0:	10 92 34 20 	sts	0x2034, r1
            break;
    4da4:	dc c0       	rjmp	.+440    	; 0x4f5e <handle_message_length_1+0x564>
              
        case MSG_1_UPDATE_GUI_INFO:  // update GUI information
            xprintf(PSTR("update: %d %d %d %d %d %d %d %d:\n"), g_gain_x, g_bias_x, g_x_initial, g_mode_x, g_gain_y, g_bias_y, g_y_initial, g_mode_y);
    4da6:	ed b7       	in	r30, 0x3d	; 61
    4da8:	fe b7       	in	r31, 0x3e	; 62
    4daa:	72 97       	sbiw	r30, 0x12	; 18
    4dac:	ed bf       	out	0x3d, r30	; 61
    4dae:	fe bf       	out	0x3e, r31	; 62
    4db0:	31 96       	adiw	r30, 0x01	; 1
    4db2:	81 e4       	ldi	r24, 0x41	; 65
    4db4:	9c e0       	ldi	r25, 0x0C	; 12
    4db6:	ad b7       	in	r26, 0x3d	; 61
    4db8:	be b7       	in	r27, 0x3e	; 62
    4dba:	11 96       	adiw	r26, 0x01	; 1
    4dbc:	8d 93       	st	X+, r24
    4dbe:	9c 93       	st	X, r25
    4dc0:	12 97       	sbiw	r26, 0x02	; 2
    4dc2:	80 91 ec 23 	lds	r24, 0x23EC
    4dc6:	90 91 ed 23 	lds	r25, 0x23ED
    4dca:	82 83       	std	Z+2, r24	; 0x02
    4dcc:	93 83       	std	Z+3, r25	; 0x03
    4dce:	80 91 f0 23 	lds	r24, 0x23F0
    4dd2:	90 91 f1 23 	lds	r25, 0x23F1
    4dd6:	84 83       	std	Z+4, r24	; 0x04
    4dd8:	95 83       	std	Z+5, r25	; 0x05
    4dda:	80 91 c0 23 	lds	r24, 0x23C0
    4dde:	90 91 c1 23 	lds	r25, 0x23C1
    4de2:	86 83       	std	Z+6, r24	; 0x06
    4de4:	97 83       	std	Z+7, r25	; 0x07
    4de6:	80 91 c4 23 	lds	r24, 0x23C4
    4dea:	80 87       	std	Z+8, r24	; 0x08
    4dec:	11 86       	std	Z+9, r1	; 0x09
    4dee:	80 91 ee 23 	lds	r24, 0x23EE
    4df2:	90 91 ef 23 	lds	r25, 0x23EF
    4df6:	82 87       	std	Z+10, r24	; 0x0a
    4df8:	93 87       	std	Z+11, r25	; 0x0b
    4dfa:	80 91 f2 23 	lds	r24, 0x23F2
    4dfe:	90 91 f3 23 	lds	r25, 0x23F3
    4e02:	84 87       	std	Z+12, r24	; 0x0c
    4e04:	95 87       	std	Z+13, r25	; 0x0d
    4e06:	80 91 c2 23 	lds	r24, 0x23C2
    4e0a:	90 91 c3 23 	lds	r25, 0x23C3
    4e0e:	86 87       	std	Z+14, r24	; 0x0e
    4e10:	97 87       	std	Z+15, r25	; 0x0f
    4e12:	80 91 c5 23 	lds	r24, 0x23C5
    4e16:	80 8b       	std	Z+16, r24	; 0x10
    4e18:	11 8a       	std	Z+17, r1	; 0x11
    4e1a:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
          break;
    4e1e:	ed b7       	in	r30, 0x3d	; 61
    4e20:	fe b7       	in	r31, 0x3e	; 62
    4e22:	72 96       	adiw	r30, 0x12	; 18
    4e24:	ed bf       	out	0x3d, r30	; 61
    4e26:	fe bf       	out	0x3e, r31	; 62
    4e28:	9a c0       	rjmp	.+308    	; 0x4f5e <handle_message_length_1+0x564>
            
        case MSG_1_CONTROLLER_MODE:    // working mode 1 = default mode = controller mode
            eeprom_write_byte(work_mode, WORKINGMODE_CONTROLLER);
    4e2a:	80 e0       	ldi	r24, 0x00	; 0
    4e2c:	90 e0       	ldi	r25, 0x00	; 0
    4e2e:	6f ef       	ldi	r22, 0xFF	; 255
    4e30:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <__eewr_byte_x128a1>
            xprintf(PSTR("Reset controller to work in the controller mode!\n"));
    4e34:	0f 92       	push	r0
    4e36:	0f 92       	push	r0
    4e38:	8f e0       	ldi	r24, 0x0F	; 15
    4e3a:	9c e0       	ldi	r25, 0x0C	; 12
    4e3c:	12 c0       	rjmp	.+36     	; 0x4e62 <handle_message_length_1+0x468>
            break;

        case MSG_1_PC_DUMPING_MODE:
            eeprom_write_byte(work_mode, WORKINGMODE_PCDUMPING);
    4e3e:	80 e0       	ldi	r24, 0x00	; 0
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	60 e0       	ldi	r22, 0x00	; 0
    4e44:	0e 94 7e 50 	call	0xa0fc	; 0xa0fc <__eewr_byte_x128a1>
            xprintf(PSTR("Reset controller to work in the PC dumping mode!\n"));
    4e48:	0f 92       	push	r0
    4e4a:	0f 92       	push	r0
    4e4c:	8d ed       	ldi	r24, 0xDD	; 221
    4e4e:	9b e0       	ldi	r25, 0x0B	; 11
    4e50:	16 c0       	rjmp	.+44     	; 0x4e7e <handle_message_length_1+0x484>
            break;
            
            
        case MSG_1_ENABLE_EXTERN_TRIG: //using Int3 external trigger mode
            PORTK.INT0MASK = 0x08;      //Int3 is used as source for port interrupt 0
    4e52:	88 e0       	ldi	r24, 0x08	; 8
    4e54:	e0 e2       	ldi	r30, 0x20	; 32
    4e56:	f7 e0       	ldi	r31, 0x07	; 7
    4e58:	82 87       	std	Z+10, r24	; 0x0a
            xprintf(PSTR("Enabled Int3 external trigger mode is on!\n"));
    4e5a:	0f 92       	push	r0
    4e5c:	0f 92       	push	r0
    4e5e:	82 eb       	ldi	r24, 0xB2	; 178
    4e60:	9b e0       	ldi	r25, 0x0B	; 11
    4e62:	ad b7       	in	r26, 0x3d	; 61
    4e64:	be b7       	in	r27, 0x3e	; 62
    4e66:	11 96       	adiw	r26, 0x01	; 1
    4e68:	8d 93       	st	X+, r24
    4e6a:	9c 93       	st	X, r25
    4e6c:	12 97       	sbiw	r26, 0x02	; 2
    4e6e:	0b c0       	rjmp	.+22     	; 0x4e86 <handle_message_length_1+0x48c>
            break;
            
        case MSG_1_DISABLE_EXTERN_TRIG: //disable int3 external trigger mode
            PORTK.INT0MASK = 0x00;      //Int3 is used as source for port interrupt 0
    4e70:	e0 e2       	ldi	r30, 0x20	; 32
    4e72:	f7 e0       	ldi	r31, 0x07	; 7
    4e74:	12 86       	std	Z+10, r1	; 0x0a
            xprintf(PSTR("Disabled Int3 external trigger mode!\n"));
    4e76:	0f 92       	push	r0
    4e78:	0f 92       	push	r0
    4e7a:	8c e8       	ldi	r24, 0x8C	; 140
    4e7c:	9b e0       	ldi	r25, 0x0B	; 11
    4e7e:	ed b7       	in	r30, 0x3d	; 61
    4e80:	fe b7       	in	r31, 0x3e	; 62
    4e82:	81 83       	std	Z+1, r24	; 0x01
    4e84:	92 83       	std	Z+2, r25	; 0x02
    4e86:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
            break;        
    4e8a:	0f 90       	pop	r0
    4e8c:	0f 90       	pop	r0
    4e8e:	67 c0       	rjmp	.+206    	; 0x4f5e <handle_message_length_1+0x564>
    uint8_t i;
    uint32_t tmp_x=0;
    uint32_t tmp_y=0;
    uint8_t n_sample=100;

    switch(msg_buffer[0])
    4e90:	b4 e6       	ldi	r27, 0x64	; 100
    4e92:	6b 2e       	mov	r6, r27
    4e94:	aa 24       	eor	r10, r10
    4e96:	bb 24       	eor	r11, r11
    4e98:	65 01       	movw	r12, r10
    4e9a:	ee 24       	eor	r14, r14
    4e9c:	ff 24       	eor	r15, r15
    4e9e:	87 01       	movw	r16, r14

        case MSG_1_READ_AND_SET_MAX_VOLTAGE: //read and set resolution for x and y

            for (i=0; i<n_sample; i++)
            {
               tmp_x += analogRead(2);
    4ea0:	82 e0       	ldi	r24, 0x02	; 2
    4ea2:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <analogRead>
    4ea6:	a0 e0       	ldi	r26, 0x00	; 0
    4ea8:	b0 e0       	ldi	r27, 0x00	; 0
    4eaa:	e8 0e       	add	r14, r24
    4eac:	f9 1e       	adc	r15, r25
    4eae:	0a 1f       	adc	r16, r26
    4eb0:	1b 1f       	adc	r17, r27
               tmp_y += analogRead(3);
    4eb2:	83 e0       	ldi	r24, 0x03	; 3
    4eb4:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <analogRead>
    4eb8:	a0 e0       	ldi	r26, 0x00	; 0
    4eba:	b0 e0       	ldi	r27, 0x00	; 0
    4ebc:	a8 0e       	add	r10, r24
    4ebe:	b9 1e       	adc	r11, r25
    4ec0:	ca 1e       	adc	r12, r26
    4ec2:	db 1e       	adc	r13, r27
    4ec4:	8f e3       	ldi	r24, 0x3F	; 63
    4ec6:	9c e9       	ldi	r25, 0x9C	; 156
    4ec8:	01 97       	sbiw	r24, 0x01	; 1
    4eca:	f1 f7       	brne	.-4      	; 0x4ec8 <handle_message_length_1+0x4ce>
    4ecc:	00 c0       	rjmp	.+0      	; 0x4ece <handle_message_length_1+0x4d4>
    4ece:	00 00       	nop
    4ed0:	6a 94       	dec	r6
            xprintf(PSTR("Disabled Int3 external trigger mode!\n"));
            break;        

        case MSG_1_READ_AND_SET_MAX_VOLTAGE: //read and set resolution for x and y

            for (i=0; i<n_sample; i++)
    4ed2:	31 f7       	brne	.-52     	; 0x4ea0 <handle_message_length_1+0x4a6>
            {
               tmp_x += analogRead(2);
               tmp_y += analogRead(3);
               _delay_ms(5);
            };
            g_x_adc_max  =  tmp_x / n_sample;
    4ed4:	a4 e6       	ldi	r26, 0x64	; 100
    4ed6:	6a 2e       	mov	r6, r26
    4ed8:	71 2c       	mov	r7, r1
    4eda:	81 2c       	mov	r8, r1
    4edc:	91 2c       	mov	r9, r1
    4ede:	c8 01       	movw	r24, r16
    4ee0:	b7 01       	movw	r22, r14
    4ee2:	a4 01       	movw	r20, r8
    4ee4:	93 01       	movw	r18, r6
    4ee6:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    4eea:	79 01       	movw	r14, r18
    4eec:	8a 01       	movw	r16, r20
    4eee:	20 93 35 20 	sts	0x2035, r18
    4ef2:	30 93 36 20 	sts	0x2036, r19
            g_y_adc_max  =  tmp_y / n_sample;
    4ef6:	c6 01       	movw	r24, r12
    4ef8:	b5 01       	movw	r22, r10
    4efa:	a4 01       	movw	r20, r8
    4efc:	93 01       	movw	r18, r6
    4efe:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    4f02:	20 93 37 20 	sts	0x2037, r18
    4f06:	30 93 38 20 	sts	0x2038, r19
            xprintf(PSTR("resolution_x =  %d:\n"), g_x_adc_max);
    4f0a:	00 d0       	rcall	.+0      	; 0x4f0c <handle_message_length_1+0x512>
    4f0c:	0f 92       	push	r0
    4f0e:	ed b7       	in	r30, 0x3d	; 61
    4f10:	fe b7       	in	r31, 0x3e	; 62
    4f12:	31 96       	adiw	r30, 0x01	; 1
    4f14:	87 e7       	ldi	r24, 0x77	; 119
    4f16:	9b e0       	ldi	r25, 0x0B	; 11
    4f18:	ad b7       	in	r26, 0x3d	; 61
    4f1a:	be b7       	in	r27, 0x3e	; 62
    4f1c:	11 96       	adiw	r26, 0x01	; 1
    4f1e:	8d 93       	st	X+, r24
    4f20:	9c 93       	st	X, r25
    4f22:	12 97       	sbiw	r26, 0x02	; 2
    4f24:	e2 82       	std	Z+2, r14	; 0x02
    4f26:	f3 82       	std	Z+3, r15	; 0x03
    4f28:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
            xprintf(PSTR("resolution_y =  %d:\n"), g_y_adc_max);
    4f2c:	82 e6       	ldi	r24, 0x62	; 98
    4f2e:	9b e0       	ldi	r25, 0x0B	; 11
    4f30:	ed b7       	in	r30, 0x3d	; 61
    4f32:	fe b7       	in	r31, 0x3e	; 62
    4f34:	81 83       	std	Z+1, r24	; 0x01
    4f36:	92 83       	std	Z+2, r25	; 0x02
    4f38:	80 91 37 20 	lds	r24, 0x2037
    4f3c:	90 91 38 20 	lds	r25, 0x2038
    4f40:	83 83       	std	Z+3, r24	; 0x03
    4f42:	94 83       	std	Z+4, r25	; 0x04
    4f44:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
            break;
    4f48:	0f 90       	pop	r0
    4f4a:	0f 90       	pop	r0
    4f4c:	0f 90       	pop	r0
    4f4e:	0f 90       	pop	r0
    4f50:	06 c0       	rjmp	.+12     	; 0x4f5e <handle_message_length_1+0x564>
    
        default: i2cMasterSend(0x00, 8, ERROR_CODES[1]);
    4f52:	80 e0       	ldi	r24, 0x00	; 0
    4f54:	68 e0       	ldi	r22, 0x08	; 8
    4f56:	43 e6       	ldi	r20, 0x63	; 99
    4f58:	50 e2       	ldi	r21, 0x20	; 32
    4f5a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <i2cMasterSend>
    }
} // handle_message_length_1()
    4f5e:	23 96       	adiw	r28, 0x03	; 3
    4f60:	ee e0       	ldi	r30, 0x0E	; 14
    4f62:	0c 94 d7 4b 	jmp	0x97ae	; 0x97ae <__epilogue_restores__+0x8>

00004f66 <main>:
}



int main(void)
{
    4f66:	a1 e3       	ldi	r26, 0x31	; 49
    4f68:	b8 e0       	ldi	r27, 0x08	; 8
    4f6a:	e9 eb       	ldi	r30, 0xB9	; 185
    4f6c:	f7 e2       	ldi	r31, 0x27	; 39
    4f6e:	0c 94 c4 4b 	jmp	0x9788	; 0x9788 <__prologue_saves__+0x14>
    uint8_t     rightBufferXLoaded = 0, rightBufferYLoaded = 0;
    uint16_t    index_frame_prev = 999;  //just chosen at random
    uint8_t     index_func_x_read_prev = 199;
    uint8_t     index_func_y_read_prev = 199;
    
    workingModes = eeprom_read_byte(work_mode);
    4f72:	80 e0       	ldi	r24, 0x00	; 0
    4f74:	90 e0       	ldi	r25, 0x00	; 0
    4f76:	0e 94 6e 50 	call	0xa0dc	; 0xa0dc <__eerd_byte_x128a1>
    4f7a:	e8 2e       	mov	r14, r24
    
    TWI_MasterCreateBuff(&twi1,workingModes);
    4f7c:	82 e0       	ldi	r24, 0x02	; 2
    4f7e:	98 e2       	ldi	r25, 0x28	; 40
    4f80:	6e 2d       	mov	r22, r14
    4f82:	0e 94 58 39 	call	0x72b0	; 0x72b0 <TWI_MasterCreateBuff>
    TWI_MasterCreateBuff(&twi2,workingModes);
    4f86:	84 e5       	ldi	r24, 0x54	; 84
    4f88:	98 e2       	ldi	r25, 0x28	; 40
    4f8a:	6e 2d       	mov	r22, r14
    4f8c:	0e 94 58 39 	call	0x72b0	; 0x72b0 <TWI_MasterCreateBuff>
    TWI_MasterCreateBuff(&twi3,workingModes);
    4f90:	81 e1       	ldi	r24, 0x11	; 17
    4f92:	98 e2       	ldi	r25, 0x28	; 40
    4f94:	6e 2d       	mov	r22, r14
    4f96:	0e 94 58 39 	call	0x72b0	; 0x72b0 <TWI_MasterCreateBuff>
    TWI_MasterCreateBuff(&twi4,workingModes);
    4f9a:	83 ef       	ldi	r24, 0xF3	; 243
    4f9c:	97 e2       	ldi	r25, 0x27	; 39
    4f9e:	6e 2d       	mov	r22, r14
    4fa0:	0e 94 58 39 	call	0x72b0	; 0x72b0 <TWI_MasterCreateBuff>
    
    // Initialize TWI master #1
    TWI_MasterInit(&twi1,
    4fa4:	82 e0       	ldi	r24, 0x02	; 2
    4fa6:	98 e2       	ldi	r25, 0x28	; 40
    4fa8:	60 e8       	ldi	r22, 0x80	; 128
    4faa:	74 e0       	ldi	r23, 0x04	; 4
    4fac:	40 e4       	ldi	r20, 0x40	; 64
    4fae:	50 e0       	ldi	r21, 0x00	; 0
    4fb0:	23 e2       	ldi	r18, 0x23	; 35
    4fb2:	0e 94 8d 39 	call	0x731a	; 0x731a <TWI_MasterInit>
            &TWIC,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
    // Initialize TWI master #2
    TWI_MasterInit(&twi2,
    4fb6:	84 e5       	ldi	r24, 0x54	; 84
    4fb8:	98 e2       	ldi	r25, 0x28	; 40
    4fba:	60 e9       	ldi	r22, 0x90	; 144
    4fbc:	74 e0       	ldi	r23, 0x04	; 4
    4fbe:	40 e4       	ldi	r20, 0x40	; 64
    4fc0:	50 e0       	ldi	r21, 0x00	; 0
    4fc2:	23 e2       	ldi	r18, 0x23	; 35
    4fc4:	0e 94 8d 39 	call	0x731a	; 0x731a <TWI_MasterInit>
            &TWID,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
    // Initialize TWI master #3
    TWI_MasterInit(&twi3,
    4fc8:	81 e1       	ldi	r24, 0x11	; 17
    4fca:	98 e2       	ldi	r25, 0x28	; 40
    4fcc:	60 ea       	ldi	r22, 0xA0	; 160
    4fce:	74 e0       	ldi	r23, 0x04	; 4
    4fd0:	40 e4       	ldi	r20, 0x40	; 64
    4fd2:	50 e0       	ldi	r21, 0x00	; 0
    4fd4:	23 e2       	ldi	r18, 0x23	; 35
    4fd6:	0e 94 8d 39 	call	0x731a	; 0x731a <TWI_MasterInit>
            &TWIE,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
    // Initialize TWI master #4
    TWI_MasterInit(&twi4,
    4fda:	83 ef       	ldi	r24, 0xF3	; 243
    4fdc:	97 e2       	ldi	r25, 0x27	; 39
    4fde:	60 eb       	ldi	r22, 0xB0	; 176
    4fe0:	74 e0       	ldi	r23, 0x04	; 4
    4fe2:	40 e4       	ldi	r20, 0x40	; 64
    4fe4:	50 e0       	ldi	r21, 0x00	; 0
    4fe6:	23 e2       	ldi	r18, 0x23	; 35
    4fe8:	0e 94 8d 39 	call	0x731a	; 0x731a <TWI_MasterInit>
            &TWIF,
            TWI_MASTER_INTLVL_LO_gc,
            TWI_BAUDSETTING);
    
    // Initialize the rest of the system
    createRxBuff(workingModes);
    4fec:	8e 2d       	mov	r24, r14
    4fee:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <createRxBuff>
    init_all();
    4ff2:	0e 94 84 2c 	call	0x5908	; 0x5908 <init_all>

    
    /* Join xitoa module to uart module */
    xfunc_out = (void (*)(char))uart_put;
    4ff6:	85 e3       	ldi	r24, 0x35	; 53
    4ff8:	97 e3       	ldi	r25, 0x37	; 55
    4ffa:	80 93 79 24 	sts	0x2479, r24
    4ffe:	90 93 7a 24 	sts	0x247A, r25
    5002:	ed ed       	ldi	r30, 0xDD	; 221
    5004:	f6 e2       	ldi	r31, 0x26	; 38
    5006:	ab ef       	ldi	r26, 0xFB	; 251
    5008:	b5 e2       	ldi	r27, 0x25	; 37
    
    for (i=0; i<RINGBUFFER_LENGTH; i++)
    { 
    	g_buf_func_x[i] = g_buf_func_y[i] = 10;
    500a:	8a e0       	ldi	r24, 0x0A	; 10
    500c:	90 e0       	ldi	r25, 0x00	; 0
    500e:	81 93       	st	Z+, r24
    5010:	91 93       	st	Z+, r25
    5012:	8d 93       	st	X+, r24
    5014:	9d 93       	st	X+, r25

    
    /* Join xitoa module to uart module */
    xfunc_out = (void (*)(char))uart_put;
    
    for (i=0; i<RINGBUFFER_LENGTH; i++)
    5016:	27 e2       	ldi	r18, 0x27	; 39
    5018:	e5 3a       	cpi	r30, 0xA5	; 165
    501a:	f2 07       	cpc	r31, r18
    501c:	c1 f7       	brne	.-16     	; 0x500e <main+0xa8>
    501e:	eb e7       	ldi	r30, 0x7B	; 123
    5020:	f4 e2       	ldi	r31, 0x24	; 36
    5022:	80 e0       	ldi	r24, 0x00	; 0
    5024:	90 e0       	ldi	r25, 0x00	; 0
    
    //initialize laser pattern
    for (i=0; i<125; i++)
    { 
        if (((i>=0) && (i<=2)) || ((i>=6) && (i<=8)))
            g_laserpattern[i] = 255;
    5026:	4f ef       	ldi	r20, 0xFF	; 255
    
    
    //initialize laser pattern
    for (i=0; i<125; i++)
    { 
        if (((i>=0) && (i<=2)) || ((i>=6) && (i<=8)))
    5028:	83 30       	cpi	r24, 0x03	; 3
    502a:	91 05       	cpc	r25, r1
    502c:	30 f0       	brcs	.+12     	; 0x503a <main+0xd4>
    502e:	9c 01       	movw	r18, r24
    5030:	26 50       	subi	r18, 0x06	; 6
    5032:	30 40       	sbci	r19, 0x00	; 0
    5034:	23 30       	cpi	r18, 0x03	; 3
    5036:	31 05       	cpc	r19, r1
    5038:	10 f4       	brcc	.+4      	; 0x503e <main+0xd8>
            g_laserpattern[i] = 255;
    503a:	40 83       	st	Z, r20
    503c:	01 c0       	rjmp	.+2      	; 0x5040 <main+0xda>
        else
            g_laserpattern[i] = 0;
    503e:	10 82       	st	Z, r1
    	g_buf_func_x[i] = g_buf_func_y[i] = 10;
    }// here we use 10 as the equivalent for 1 V.
    
    
    //initialize laser pattern
    for (i=0; i<125; i++)
    5040:	01 96       	adiw	r24, 0x01	; 1
    5042:	31 96       	adiw	r30, 0x01	; 1
    5044:	8d 37       	cpi	r24, 0x7D	; 125
    5046:	91 05       	cpc	r25, r1
    5048:	79 f7       	brne	.-34     	; 0x5028 <main+0xc2>
            g_laserpattern[i] = 0;
    }
    
    
    //initializations
    g_x_initial = g_y_initial = g_x = g_y = 0;
    504a:	10 92 be 23 	sts	0x23BE, r1
    504e:	10 92 bf 23 	sts	0x23BF, r1
    5052:	80 91 be 23 	lds	r24, 0x23BE
    5056:	90 91 bf 23 	lds	r25, 0x23BF
    505a:	80 93 bc 23 	sts	0x23BC, r24
    505e:	90 93 bd 23 	sts	0x23BD, r25
    5062:	80 91 bc 23 	lds	r24, 0x23BC
    5066:	90 91 bd 23 	lds	r25, 0x23BD
    506a:	80 93 c2 23 	sts	0x23C2, r24
    506e:	90 93 c3 23 	sts	0x23C3, r25
    5072:	80 93 c0 23 	sts	0x23C0, r24
    5076:	90 93 c1 23 	sts	0x23C1, r25
    g_bias_x = g_bias_y = 0;
    507a:	10 92 f2 23 	sts	0x23F2, r1
    507e:	10 92 f3 23 	sts	0x23F3, r1
    5082:	10 92 f0 23 	sts	0x23F0, r1
    5086:	10 92 f1 23 	sts	0x23F1, r1
    g_gain_x = g_gain_y = 0;
    508a:	10 92 ee 23 	sts	0x23EE, r1
    508e:	10 92 ef 23 	sts	0x23EF, r1
    5092:	10 92 ec 23 	sts	0x23EC, r1
    5096:	10 92 ed 23 	sts	0x23ED, r1
    g_mode_x = g_mode_y = 0;
    509a:	10 92 c5 23 	sts	0x23C5, r1
    509e:	10 92 c4 23 	sts	0x23C4, r1
    g_row_compress = FALSE;
    50a2:	10 92 b3 23 	sts	0x23B3, r1
    g_ident_compress = FALSE; // enable this to substitute simpler panel pattern for uniform pattern patches
    50a6:	10 92 b4 23 	sts	0x23B4, r1
    
    temp = eeprom_read_byte(arena_config);
    50aa:	81 e0       	ldi	r24, 0x01	; 1
    50ac:	90 e0       	ldi	r25, 0x00	; 0
    50ae:	0e 94 6e 50 	call	0xa0dc	; 0xa0dc <__eerd_byte_x128a1>
    if (temp == 0xff)     //there is no configuration file and use default value 
    50b2:	8f 3f       	cpi	r24, 0xFF	; 255
    50b4:	c9 f4       	brne	.+50     	; 0x50e8 <main+0x182>
    {
    	// create default panel mapping
        for (b1 = 0; b1 <= 128; b1++)
    50b6:	20 e0       	ldi	r18, 0x00	; 0
        {
            g_ch_from_panel[b1] = b1 % 4;
            if (b1 && (g_ch_from_panel[b1] == 0))
                g_ch_from_panel[b1] = 4;
    50b8:	44 e0       	ldi	r20, 0x04	; 4
    
    temp = eeprom_read_byte(arena_config);
    if (temp == 0xff)     //there is no configuration file and use default value 
    {
    	// create default panel mapping
        for (b1 = 0; b1 <= 128; b1++)
    50ba:	12 c0       	rjmp	.+36     	; 0x50e0 <main+0x17a>
        {
            g_ch_from_panel[b1] = b1 % 4;
    50bc:	82 2f       	mov	r24, r18
    50be:	90 e0       	ldi	r25, 0x00	; 0
    50c0:	32 2f       	mov	r19, r18
    50c2:	33 70       	andi	r19, 0x03	; 3
    50c4:	fc 01       	movw	r30, r24
    50c6:	e8 50       	subi	r30, 0x08	; 8
    50c8:	fb 4d       	sbci	r31, 0xDB	; 219
    50ca:	30 83       	st	Z, r19
            if (b1 && (g_ch_from_panel[b1] == 0))
    50cc:	22 23       	and	r18, r18
    50ce:	19 f0       	breq	.+6      	; 0x50d6 <main+0x170>
    50d0:	33 23       	and	r19, r19
    50d2:	09 f4       	brne	.+2      	; 0x50d6 <main+0x170>
                g_ch_from_panel[b1] = 4;
    50d4:	40 83       	st	Z, r20
            g_adr_from_panel[b1] = b1; // panel address identity mapping
    50d6:	87 58       	subi	r24, 0x87	; 135
    50d8:	9a 4d       	sbci	r25, 0xDA	; 218
    50da:	dc 01       	movw	r26, r24
    50dc:	2c 93       	st	X, r18
    50de:	2f 5f       	subi	r18, 0xFF	; 255
    
    temp = eeprom_read_byte(arena_config);
    if (temp == 0xff)     //there is no configuration file and use default value 
    {
    	// create default panel mapping
        for (b1 = 0; b1 <= 128; b1++)
    50e0:	21 38       	cpi	r18, 0x81	; 129
    50e2:	60 f3       	brcs	.-40     	; 0x50bc <main+0x156>
    50e4:	29 83       	std	Y+1, r18	; 0x01
    50e6:	17 c0       	rjmp	.+46     	; 0x5116 <main+0x1b0>
            g_adr_from_panel[b1] = b1; // panel address identity mapping
        }
    } 
    else //load panel mapping from EEPROM
    {
        for (b1 = 0; b1 <= 128; b1++)
    50e8:	19 82       	std	Y+1, r1	; 0x01
    50ea:	11 c0       	rjmp	.+34     	; 0x510e <main+0x1a8>
        {
            g_ch_from_panel[b1] = eeprom_read_byte(arena_config + b1);
    50ec:	0d 2d       	mov	r16, r13
    50ee:	10 e0       	ldi	r17, 0x00	; 0
    50f0:	c8 01       	movw	r24, r16
    50f2:	8f 5f       	subi	r24, 0xFF	; 255
    50f4:	9f 4f       	sbci	r25, 0xFF	; 255
    50f6:	0e 94 6e 50 	call	0xa0dc	; 0xa0dc <__eerd_byte_x128a1>
    50fa:	f8 01       	movw	r30, r16
    50fc:	e8 50       	subi	r30, 0x08	; 8
    50fe:	fb 4d       	sbci	r31, 0xDB	; 219
    5100:	80 83       	st	Z, r24
            g_adr_from_panel[b1] = b1; // panel address identity mapping
    5102:	f8 01       	movw	r30, r16
    5104:	e7 58       	subi	r30, 0x87	; 135
    5106:	fa 4d       	sbci	r31, 0xDA	; 218
    5108:	d0 82       	st	Z, r13
            g_adr_from_panel[b1] = b1; // panel address identity mapping
        }
    } 
    else //load panel mapping from EEPROM
    {
        for (b1 = 0; b1 <= 128; b1++)
    510a:	d3 94       	inc	r13
    510c:	d9 82       	std	Y+1, r13	; 0x01
    510e:	d9 80       	ldd	r13, Y+1	; 0x01
    5110:	bd 2d       	mov	r27, r13
    5112:	b1 38       	cpi	r27, 0x81	; 129
    5114:	58 f3       	brcs	.-42     	; 0x50ec <main+0x186>
            g_ch_from_panel[b1] = eeprom_read_byte(arena_config + b1);
            g_adr_from_panel[b1] = b1; // panel address identity mapping
        }
    }
    
    xputs(PSTR("\nMain Controller Works\n"));
    5116:	8c eb       	ldi	r24, 0xBC	; 188
    5118:	9d e0       	ldi	r25, 0x0D	; 13
    511a:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
    
    // get the fat file system mounted
    ledWrite(LED1, ON);
    511e:	81 e0       	ldi	r24, 0x01	; 1
    5120:	61 e0       	ldi	r22, 0x01	; 1
    5122:	0e 94 09 2c 	call	0x5812	; 0x5812 <ledWrite>
    sta = STA_NOINIT;
    5126:	01 e0       	ldi	r16, 0x01	; 1
    while (sta & STA_NOINIT)
    5128:	3c c0       	rjmp	.+120    	; 0x51a2 <main+0x23c>
    {
        sta = disk_status(0);
    512a:	80 e0       	ldi	r24, 0x00	; 0
    512c:	0e 94 48 46 	call	0x8c90	; 0x8c90 <disk_status>
    5130:	08 2f       	mov	r16, r24
        if(sta & STA_NODISK)
    5132:	81 ff       	sbrs	r24, 1
    5134:	0d c0       	rjmp	.+26     	; 0x5150 <main+0x1ea>
        {
            xputs(PSTR("Insert SD card"));
    5136:	8d ea       	ldi	r24, 0xAD	; 173
    5138:	9d e0       	ldi	r25, 0x0D	; 13
    513a:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
            uart_crlf();
    513e:	0e 94 61 37 	call	0x6ec2	; 0x6ec2 <uart_crlf>
            while (sta & STA_NODISK)
    5142:	04 c0       	rjmp	.+8      	; 0x514c <main+0x1e6>
            {
                sta = disk_status(0);
    5144:	80 e0       	ldi	r24, 0x00	; 0
    5146:	0e 94 48 46 	call	0x8c90	; 0x8c90 <disk_status>
    514a:	08 2f       	mov	r16, r24
        sta = disk_status(0);
        if(sta & STA_NODISK)
        {
            xputs(PSTR("Insert SD card"));
            uart_crlf();
            while (sta & STA_NODISK)
    514c:	01 fd       	sbrc	r16, 1
    514e:	fa cf       	rjmp	.-12     	; 0x5144 <main+0x1de>
            {
                sta = disk_status(0);
            }
        }
        if(sta & STA_PROTECT)
    5150:	02 ff       	sbrs	r16, 2
    5152:	04 c0       	rjmp	.+8      	; 0x515c <main+0x1f6>
        {
            xputs(PSTR("SD card is Write Protected!\n"));
    5154:	80 e9       	ldi	r24, 0x90	; 144
    5156:	9d e0       	ldi	r25, 0x0D	; 13
    5158:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
        }
        // Initialize SD Card, do 4 attempts
        for(b1 = 0; b1 < 4; )
    515c:	19 82       	std	Y+1, r1	; 0x01
    515e:	12 c0       	rjmp	.+36     	; 0x5184 <main+0x21e>
        {
            sta = disk_initialize(0);
    5160:	80 e0       	ldi	r24, 0x00	; 0
    5162:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <disk_initialize>
    5166:	08 2f       	mov	r16, r24
            if(sta & STA_NOINIT) 
    5168:	80 ff       	sbrs	r24, 0
    516a:	0f c0       	rjmp	.+30     	; 0x518a <main+0x224>
            	b1++;
    516c:	89 81       	ldd	r24, Y+1	; 0x01
    516e:	8f 5f       	subi	r24, 0xFF	; 255
    5170:	89 83       	std	Y+1, r24	; 0x01
    5172:	8f ef       	ldi	r24, 0xFF	; 255
    5174:	91 ee       	ldi	r25, 0xE1	; 225
    5176:	a4 e0       	ldi	r26, 0x04	; 4
    5178:	81 50       	subi	r24, 0x01	; 1
    517a:	90 40       	sbci	r25, 0x00	; 0
    517c:	a0 40       	sbci	r26, 0x00	; 0
    517e:	e1 f7       	brne	.-8      	; 0x5178 <main+0x212>
    5180:	00 c0       	rjmp	.+0      	; 0x5182 <main+0x21c>
    5182:	00 00       	nop
        if(sta & STA_PROTECT)
        {
            xputs(PSTR("SD card is Write Protected!\n"));
        }
        // Initialize SD Card, do 4 attempts
        for(b1 = 0; b1 < 4; )
    5184:	89 81       	ldd	r24, Y+1	; 0x01
    5186:	84 30       	cpi	r24, 0x04	; 4
    5188:	58 f3       	brcs	.-42     	; 0x5160 <main+0x1fa>
            	b1++;
            else 
            	break;
            _delay_ms(50);
        }
        if(sta & STA_NOINIT)
    518a:	00 ff       	sbrs	r16, 0
    518c:	0a c0       	rjmp	.+20     	; 0x51a2 <main+0x23c>
        {
            xputs(PSTR("Initialization failed!!!\n"));
    518e:	86 e7       	ldi	r24, 0x76	; 118
    5190:	9d e0       	ldi	r25, 0x0D	; 13
    5192:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
            sta = disk_status(0);
            while (!(sta & STA_NODISK))
            {
                sta = disk_status(0);
    5196:	80 e0       	ldi	r24, 0x00	; 0
    5198:	0e 94 48 46 	call	0x8c90	; 0x8c90 <disk_status>
    519c:	08 2f       	mov	r16, r24
        }
        if(sta & STA_NOINIT)
        {
            xputs(PSTR("Initialization failed!!!\n"));
            sta = disk_status(0);
            while (!(sta & STA_NODISK))
    519e:	81 ff       	sbrs	r24, 1
    51a0:	fa cf       	rjmp	.-12     	; 0x5196 <main+0x230>
    xputs(PSTR("\nMain Controller Works\n"));
    
    // get the fat file system mounted
    ledWrite(LED1, ON);
    sta = STA_NOINIT;
    while (sta & STA_NOINIT)
    51a2:	00 fd       	sbrc	r16, 0
    51a4:	c2 cf       	rjmp	.-124    	; 0x512a <main+0x1c4>
            {
                sta = disk_status(0);
            }
        }
    }
    xputs(PSTR("SD card is initialized\n"));
    51a6:	8e e5       	ldi	r24, 0x5E	; 94
    51a8:	9d e0       	ldi	r25, 0x0D	; 13
    51aa:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
    
    if (disk_ioctl(0, MMC_GET_TYPE, &b1) == RES_OK)
    51ae:	80 e0       	ldi	r24, 0x00	; 0
    51b0:	6a e0       	ldi	r22, 0x0A	; 10
    51b2:	ae 01       	movw	r20, r28
    51b4:	4f 5f       	subi	r20, 0xFF	; 255
    51b6:	5f 4f       	sbci	r21, 0xFF	; 255
    51b8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <disk_ioctl>
    51bc:	00 97       	sbiw	r24, 0x00	; 0
    51be:	59 f5       	brne	.+86     	; 0x5216 <main+0x2b0>
    {
        xputs(PSTR("Card type: "));
    51c0:	82 e5       	ldi	r24, 0x52	; 82
    51c2:	9d e0       	ldi	r25, 0x0D	; 13
    51c4:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
        switch(b1)
    51c8:	89 81       	ldd	r24, Y+1	; 0x01
    51ca:	84 30       	cpi	r24, 0x04	; 4
    51cc:	a1 f0       	breq	.+40     	; 0x51f6 <main+0x290>
    51ce:	85 30       	cpi	r24, 0x05	; 5
    51d0:	28 f4       	brcc	.+10     	; 0x51dc <main+0x276>
    51d2:	81 30       	cpi	r24, 0x01	; 1
    51d4:	51 f0       	breq	.+20     	; 0x51ea <main+0x284>
    51d6:	82 30       	cpi	r24, 0x02	; 2
    51d8:	d1 f4       	brne	.+52     	; 0x520e <main+0x2a8>
    51da:	0a c0       	rjmp	.+20     	; 0x51f0 <main+0x28a>
    51dc:	88 30       	cpi	r24, 0x08	; 8
    51de:	89 f0       	breq	.+34     	; 0x5202 <main+0x29c>
    51e0:	8c 30       	cpi	r24, 0x0C	; 12
    51e2:	91 f0       	breq	.+36     	; 0x5208 <main+0x2a2>
    51e4:	86 30       	cpi	r24, 0x06	; 6
    51e6:	99 f4       	brne	.+38     	; 0x520e <main+0x2a8>
    51e8:	09 c0       	rjmp	.+18     	; 0x51fc <main+0x296>
        {
            case CT_MMC: xputs(PSTR("MMC\n")); break;
    51ea:	8d e4       	ldi	r24, 0x4D	; 77
    51ec:	9d e0       	ldi	r25, 0x0D	; 13
    51ee:	11 c0       	rjmp	.+34     	; 0x5212 <main+0x2ac>
            case CT_SD1: xputs(PSTR("SD\n")); break;
    51f0:	89 e4       	ldi	r24, 0x49	; 73
    51f2:	9d e0       	ldi	r25, 0x0D	; 13
    51f4:	0e c0       	rjmp	.+28     	; 0x5212 <main+0x2ac>
            case CT_SD2: xputs(PSTR("SD2\n")); break;
    51f6:	84 e4       	ldi	r24, 0x44	; 68
    51f8:	9d e0       	ldi	r25, 0x0D	; 13
    51fa:	0b c0       	rjmp	.+22     	; 0x5212 <main+0x2ac>
            case CT_SDC: xputs(PSTR("SDC\n")); break;
    51fc:	8f e3       	ldi	r24, 0x3F	; 63
    51fe:	9d e0       	ldi	r25, 0x0D	; 13
    5200:	08 c0       	rjmp	.+16     	; 0x5212 <main+0x2ac>
            case CT_BLOCK: xputs(PSTR("BLK\n")); break;
    5202:	8a e3       	ldi	r24, 0x3A	; 58
    5204:	9d e0       	ldi	r25, 0x0D	; 13
    5206:	05 c0       	rjmp	.+10     	; 0x5212 <main+0x2ac>
            case CT_SD2_BLK: xputs(PSTR("SDHC\n")); break;
    5208:	84 e3       	ldi	r24, 0x34	; 52
    520a:	9d e0       	ldi	r25, 0x0D	; 13
    520c:	02 c0       	rjmp	.+4      	; 0x5212 <main+0x2ac>
            default: xputs(PSTR("???\n"));
    520e:	8f e2       	ldi	r24, 0x2F	; 47
    5210:	9d e0       	ldi	r25, 0x0D	; 13
    5212:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
        }
    }
    
    xputs(PSTR("Initializing FAT Disk..."));
    5216:	86 e1       	ldi	r24, 0x16	; 22
    5218:	9d e0       	ldi	r25, 0x0D	; 13
    521a:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
    res = f_mount(0, &fatfs);
    521e:	80 e0       	ldi	r24, 0x00	; 0
    5220:	be 01       	movw	r22, r28
    5222:	6e 5f       	subi	r22, 0xFE	; 254
    5224:	7f 4f       	sbci	r23, 0xFF	; 255
    5226:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <f_mount>
    switch(res)
    522a:	81 30       	cpi	r24, 0x01	; 1
    522c:	51 f0       	breq	.+20     	; 0x5242 <main+0x2dc>
    522e:	81 30       	cpi	r24, 0x01	; 1
    5230:	28 f0       	brcs	.+10     	; 0x523c <main+0x2d6>
    5232:	82 30       	cpi	r24, 0x02	; 2
    5234:	49 f0       	breq	.+18     	; 0x5248 <main+0x2e2>
    5236:	83 30       	cpi	r24, 0x03	; 3
    5238:	69 f4       	brne	.+26     	; 0x5254 <main+0x2ee>
    523a:	09 c0       	rjmp	.+18     	; 0x524e <main+0x2e8>
    {
        case RES_OK: xputs(PSTR(" FAT OK!\n")); break;
    523c:	8c e0       	ldi	r24, 0x0C	; 12
    523e:	9d e0       	ldi	r25, 0x0D	; 13
    5240:	0b c0       	rjmp	.+22     	; 0x5258 <main+0x2f2>
        case RES_ERROR: xputs(PSTR(" ERROR!\n")); break;
    5242:	83 e0       	ldi	r24, 0x03	; 3
    5244:	9d e0       	ldi	r25, 0x0D	; 13
    5246:	08 c0       	rjmp	.+16     	; 0x5258 <main+0x2f2>
        case RES_WRPRT: xputs(PSTR(" WRITE PROTECTED!\n")); break;
    5248:	80 ef       	ldi	r24, 0xF0	; 240
    524a:	9c e0       	ldi	r25, 0x0C	; 12
    524c:	05 c0       	rjmp	.+10     	; 0x5258 <main+0x2f2>
        case RES_NOTRDY: xputs(PSTR(" NOT READY!\n")); break;
    524e:	83 ee       	ldi	r24, 0xE3	; 227
    5250:	9c e0       	ldi	r25, 0x0C	; 12
    5252:	02 c0       	rjmp	.+4      	; 0x5258 <main+0x2f2>
        default: xputs(PSTR("???\n"));
    5254:	8e ed       	ldi	r24, 0xDE	; 222
    5256:	9c e0       	ldi	r25, 0x0C	; 12
    5258:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
    }
    
    
    i2cMasterSend(0x00, 8, ALL_OFF);
    525c:	80 e0       	ldi	r24, 0x00	; 0
    525e:	68 e0       	ldi	r22, 0x08	; 8
    5260:	45 e1       	ldi	r20, 0x15	; 21
    5262:	54 e2       	ldi	r21, 0x24	; 36
    5264:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <i2cMasterSend>
    ledWrite(LED1, OFF);
    5268:	81 e0       	ldi	r24, 0x01	; 1
    526a:	60 e0       	ldi	r22, 0x00	; 0
    526c:	0e 94 09 2c 	call	0x5812	; 0x5812 <ledWrite>
    ledBlink();
    5270:	0e 94 3d 2c 	call	0x587a	; 0x587a <ledBlink>
    // Here the EEPROM location 0 is used as a switch between Controller and PCDump mode
    // An alternative is to base the switch on the SD config file
    if (workingModes == WORKINGMODE_CONTROLLER)
    5274:	9e 2d       	mov	r25, r14
    5276:	9f 3f       	cpi	r25, 0xFF	; 255
    5278:	09 f0       	breq	.+2      	; 0x527c <main+0x316>
    527a:	c0 c0       	rjmp	.+384    	; 0x53fc <main+0x496>
    {
        uint8_t msg_buffer[65];
        xputs(PSTR("Current working mode is the Controller mode!\n"));
    527c:	80 eb       	ldi	r24, 0xB0	; 176
    527e:	9c e0       	ldi	r25, 0x0C	; 12
    5280:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
    uint8_t     bufTemp[128];
    uint8_t     workingModes;
    uint8_t     rightBufferXLoaded = 0, rightBufferYLoaded = 0;
    uint16_t    index_frame_prev = 999;  //just chosen at random
    uint8_t     index_func_x_read_prev = 199;
    uint8_t     index_func_y_read_prev = 199;
    5284:	37 ec       	ldi	r19, 0xC7	; 199
    5286:	c3 2e       	mov	r12, r19
    uint16_t    i;
    uint8_t     bufTemp[128];
    uint8_t     workingModes;
    uint8_t     rightBufferXLoaded = 0, rightBufferYLoaded = 0;
    uint16_t    index_frame_prev = 999;  //just chosen at random
    uint8_t     index_func_x_read_prev = 199;
    5288:	27 ec       	ldi	r18, 0xC7	; 199
    528a:	d2 2e       	mov	r13, r18
    uint16_t    message_length;
    uint16_t    i;
    uint8_t     bufTemp[128];
    uint8_t     workingModes;
    uint8_t     rightBufferXLoaded = 0, rightBufferYLoaded = 0;
    uint16_t    index_frame_prev = 999;  //just chosen at random
    528c:	97 ee       	ldi	r25, 0xE7	; 231
    528e:	e9 2e       	mov	r14, r25
    5290:	93 e0       	ldi	r25, 0x03	; 3
    5292:	f9 2e       	mov	r15, r25
        // Main loop.  Wait for communication from PC over UART
        while(TRUE)
        {
            if (uart_test())
            {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    5294:	8e 01       	movw	r16, r28
    5296:	0c 5d       	subi	r16, 0xDC	; 220
    5298:	1d 4f       	sbci	r17, 0xFD	; 253
        xputs(PSTR("Current working mode is the Controller mode!\n"));
        
        // Main loop.  Wait for communication from PC over UART
        while(TRUE)
        {
            if (uart_test())
    529a:	0e 94 02 37 	call	0x6e04	; 0x6e04 <uart_test>
    529e:	00 97       	sbiw	r24, 0x00	; 0
    52a0:	09 f4       	brne	.+2      	; 0x52a4 <main+0x33e>
    52a2:	4a c0       	rjmp	.+148    	; 0x5338 <main+0x3d2>
            {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    52a4:	c8 01       	movw	r24, r16
    52a6:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <fill_Rx_buffer>
                switch(message_length)
    52aa:	84 30       	cpi	r24, 0x04	; 4
    52ac:	91 05       	cpc	r25, r1
    52ae:	51 f1       	breq	.+84     	; 0x5304 <main+0x39e>
    52b0:	85 30       	cpi	r24, 0x05	; 5
    52b2:	91 05       	cpc	r25, r1
    52b4:	50 f4       	brcc	.+20     	; 0x52ca <main+0x364>
    52b6:	82 30       	cpi	r24, 0x02	; 2
    52b8:	91 05       	cpc	r25, r1
    52ba:	e1 f0       	breq	.+56     	; 0x52f4 <main+0x38e>
    52bc:	83 30       	cpi	r24, 0x03	; 3
    52be:	91 05       	cpc	r25, r1
    52c0:	e8 f4       	brcc	.+58     	; 0x52fc <main+0x396>
    52c2:	81 30       	cpi	r24, 0x01	; 1
    52c4:	91 05       	cpc	r25, r1
    52c6:	91 f5       	brne	.+100    	; 0x532c <main+0x3c6>
    52c8:	11 c0       	rjmp	.+34     	; 0x52ec <main+0x386>
    52ca:	87 30       	cpi	r24, 0x07	; 7
    52cc:	91 05       	cpc	r25, r1
    52ce:	11 f1       	breq	.+68     	; 0x5314 <main+0x3ae>
    52d0:	88 30       	cpi	r24, 0x08	; 8
    52d2:	91 05       	cpc	r25, r1
    52d4:	20 f4       	brcc	.+8      	; 0x52de <main+0x378>
    52d6:	85 30       	cpi	r24, 0x05	; 5
    52d8:	91 05       	cpc	r25, r1
    52da:	41 f5       	brne	.+80     	; 0x532c <main+0x3c6>
    52dc:	17 c0       	rjmp	.+46     	; 0x530c <main+0x3a6>
    52de:	8e 33       	cpi	r24, 0x3E	; 62
    52e0:	91 05       	cpc	r25, r1
    52e2:	e1 f0       	breq	.+56     	; 0x531c <main+0x3b6>
    52e4:	8f 33       	cpi	r24, 0x3F	; 63
    52e6:	91 05       	cpc	r25, r1
    52e8:	09 f5       	brne	.+66     	; 0x532c <main+0x3c6>
    52ea:	1c c0       	rjmp	.+56     	; 0x5324 <main+0x3be>
                {
                    case 1:
                        handle_message_length_1(&msg_buffer[0]);
    52ec:	c8 01       	movw	r24, r16
    52ee:	0e 94 fd 24 	call	0x49fa	; 0x49fa <handle_message_length_1>
                        break;
    52f2:	22 c0       	rjmp	.+68     	; 0x5338 <main+0x3d2>
                    case 2:
                        handle_message_length_2(&msg_buffer[0]);
    52f4:	c8 01       	movw	r24, r16
    52f6:	0e 94 8d 1c 	call	0x391a	; 0x391a <handle_message_length_2>
                        break;
    52fa:	1e c0       	rjmp	.+60     	; 0x5338 <main+0x3d2>
                    case 3:
                        handle_message_length_3(&msg_buffer[0]);
    52fc:	c8 01       	movw	r24, r16
    52fe:	0e 94 a3 22 	call	0x4546	; 0x4546 <handle_message_length_3>
                        break;
    5302:	1a c0       	rjmp	.+52     	; 0x5338 <main+0x3d2>
                    case 4:
                        handle_message_length_4(&msg_buffer[0]);
    5304:	c8 01       	movw	r24, r16
    5306:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <handle_message_length_4>
                        break;
    530a:	16 c0       	rjmp	.+44     	; 0x5338 <main+0x3d2>
                    case 5:
                        handle_message_length_5(&msg_buffer[0]);
    530c:	c8 01       	movw	r24, r16
    530e:	0e 94 8d 1b 	call	0x371a	; 0x371a <handle_message_length_5>
                        break;
    5312:	12 c0       	rjmp	.+36     	; 0x5338 <main+0x3d2>
                    case 7:
                        handle_message_length_7(&msg_buffer[0]);
    5314:	c8 01       	movw	r24, r16
    5316:	0e 94 5f 10 	call	0x20be	; 0x20be <handle_message_length_7>
                        break;
    531a:	0e c0       	rjmp	.+28     	; 0x5338 <main+0x3d2>
                    case 62:
                        handle_message_length_62(&msg_buffer[0]);
    531c:	c8 01       	movw	r24, r16
    531e:	0e 94 b7 10 	call	0x216e	; 0x216e <handle_message_length_62>
                        break;
    5322:	0a c0       	rjmp	.+20     	; 0x5338 <main+0x3d2>
                    case 63:
                        handle_message_length_63(&msg_buffer[0]);
    5324:	c8 01       	movw	r24, r16
    5326:	0e 94 c3 10 	call	0x2186	; 0x2186 <handle_message_length_63>
                        break;    
    532a:	06 c0       	rjmp	.+12     	; 0x5338 <main+0x3d2>
                    default:
                        i2cMasterSend(0x00, 8, ERROR_CODES[7]);
    532c:	80 e0       	ldi	r24, 0x00	; 0
    532e:	68 e0       	ldi	r22, 0x08	; 8
    5330:	43 e9       	ldi	r20, 0x93	; 147
    5332:	50 e2       	ldi	r21, 0x20	; 32
    5334:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <i2cMasterSend>
                } // switch()
            } // if (uart_test())
            
            // If running, then update display.
            if (g_b_running)
    5338:	80 91 b0 23 	lds	r24, 0x23B0
    533c:	88 23       	and	r24, r24
    533e:	09 f4       	brne	.+2      	; 0x5342 <main+0x3dc>
    5340:	ac cf       	rjmp	.-168    	; 0x529a <main+0x334>
            {
            	// Only send out new pattern if the pattern index has changed.
                if (g_index_frame != index_frame_prev)
    5342:	80 91 b6 23 	lds	r24, 0x23B6
    5346:	90 91 b7 23 	lds	r25, 0x23B7
    534a:	8e 15       	cp	r24, r14
    534c:	9f 05       	cpc	r25, r15
    534e:	81 f0       	breq	.+32     	; 0x5370 <main+0x40a>
                {
                    index_frame_prev = g_index_frame; //update the 'old' frame number
    5350:	e0 90 b6 23 	lds	r14, 0x23B6
    5354:	f0 90 b7 23 	lds	r15, 0x23B7
                    fetch_and_display_frame(&g_file_pattern, g_x, g_y);
    5358:	60 91 bc 23 	lds	r22, 0x23BC
    535c:	70 91 bd 23 	lds	r23, 0x23BD
    5360:	40 91 be 23 	lds	r20, 0x23BE
    5364:	50 91 bf 23 	lds	r21, 0x23BF
    5368:	89 ed       	ldi	r24, 0xD9	; 217
    536a:	97 e2       	ldi	r25, 0x27	; 39
    536c:	0e 94 6f 16 	call	0x2cde	; 0x2cde <fetch_and_display_frame>
                }
                
                //g_filllevel_buf_func_x in word, 2 bytes.
                if (!g_b_default_func_x && (g_filllevel_buf_func_x <= RINGBUFFER_LENGTH/4) && (g_index_func_x_read != index_func_x_read_prev))
    5370:	80 91 4b 20 	lds	r24, 0x204B
    5374:	88 23       	and	r24, r24
    5376:	e9 f4       	brne	.+58     	; 0x53b2 <main+0x44c>
    5378:	80 91 e2 23 	lds	r24, 0x23E2
    537c:	8a 31       	cpi	r24, 0x1A	; 26
    537e:	c8 f4       	brcc	.+50     	; 0x53b2 <main+0x44c>
    5380:	80 91 de 23 	lds	r24, 0x23DE
    5384:	8d 15       	cp	r24, r13
    5386:	a9 f0       	breq	.+42     	; 0x53b2 <main+0x44c>
                {                    
                    index_func_x_read_prev = g_index_func_x_read;
    5388:	d0 90 de 23 	lds	r13, 0x23DE
                    fetch_block_func_x(&g_file_func_x, FALSE, g_iblock_func_x);
    538c:	40 91 45 20 	lds	r20, 0x2045
    5390:	85 ea       	ldi	r24, 0xA5	; 165
    5392:	97 e2       	ldi	r25, 0x27	; 39
    5394:	60 e0       	ldi	r22, 0x00	; 0
    5396:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <fetch_block_func_x>
                    g_iblock_func_x = (g_iblock_func_x+1) % g_nblocks_func_x;
    539a:	80 91 45 20 	lds	r24, 0x2045
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	01 96       	adiw	r24, 0x01	; 1
    53a2:	60 91 47 20 	lds	r22, 0x2047
    53a6:	70 91 48 20 	lds	r23, 0x2048
    53aa:	0e 94 56 4b 	call	0x96ac	; 0x96ac <__udivmodhi4>
    53ae:	80 93 45 20 	sts	0x2045, r24
                    //xprintf(PSTR("g_filllevel_buf_func_x=%u, g_index_func_x_read=%u\n"), g_filllevel_buf_func_x, g_index_func_x_read);
                }

                if (!g_b_default_func_y && (g_filllevel_buf_func_y <= RINGBUFFER_LENGTH/4) && (g_index_func_y_read != index_func_y_read_prev))
    53b2:	80 91 4c 20 	lds	r24, 0x204C
    53b6:	88 23       	and	r24, r24
    53b8:	09 f0       	breq	.+2      	; 0x53bc <main+0x456>
    53ba:	6f cf       	rjmp	.-290    	; 0x529a <main+0x334>
    53bc:	80 91 e3 23 	lds	r24, 0x23E3
    53c0:	8a 31       	cpi	r24, 0x1A	; 26
    53c2:	08 f0       	brcs	.+2      	; 0x53c6 <main+0x460>
    53c4:	6a cf       	rjmp	.-300    	; 0x529a <main+0x334>
    53c6:	80 91 df 23 	lds	r24, 0x23DF
    53ca:	8c 15       	cp	r24, r12
    53cc:	09 f4       	brne	.+2      	; 0x53d0 <main+0x46a>
    53ce:	65 cf       	rjmp	.-310    	; 0x529a <main+0x334>
                {                    
                    index_func_y_read_prev = g_index_func_y_read;
    53d0:	c0 90 df 23 	lds	r12, 0x23DF
                    fetch_block_func_y(&g_file_func_y, FALSE, g_iblock_func_y);
    53d4:	40 91 46 20 	lds	r20, 0x2046
    53d8:	8f eb       	ldi	r24, 0xBF	; 191
    53da:	97 e2       	ldi	r25, 0x27	; 39
    53dc:	60 e0       	ldi	r22, 0x00	; 0
    53de:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <fetch_block_func_y>
                    g_iblock_func_y = (g_iblock_func_y + 1)%g_nblocks_func_y;
    53e2:	80 91 46 20 	lds	r24, 0x2046
    53e6:	90 e0       	ldi	r25, 0x00	; 0
    53e8:	01 96       	adiw	r24, 0x01	; 1
    53ea:	60 91 49 20 	lds	r22, 0x2049
    53ee:	70 91 4a 20 	lds	r23, 0x204A
    53f2:	0e 94 56 4b 	call	0x96ac	; 0x96ac <__udivmodhi4>
    53f6:	80 93 46 20 	sts	0x2046, r24
    53fa:	4f cf       	rjmp	.-354    	; 0x529a <main+0x334>
        }
    }
    else // else workingModes==WORKINGMODE_PCDUMPING
    {
        uint8_t msg_buffer[1550];
        xputs(PSTR("Current working mode is the PC dumping mode!\n"));
    53fc:	82 e8       	ldi	r24, 0x82	; 130
    53fe:	9c e0       	ldi	r25, 0x0C	; 12
    5400:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
        // Main loop.  Wait for communication from PC over UART
        while(1)
        {
            if (uart_test())
            {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    5404:	8e 01       	movw	r16, r28
    5406:	0c 5d       	subi	r16, 0xDC	; 220
    5408:	1d 4f       	sbci	r17, 0xFD	; 253
        xputs(PSTR("Current working mode is the PC dumping mode!\n"));

        // Main loop.  Wait for communication from PC over UART
        while(1)
        {
            if (uart_test())
    540a:	0e 94 02 37 	call	0x6e04	; 0x6e04 <uart_test>
    540e:	00 97       	sbiw	r24, 0x00	; 0
    5410:	e1 f3       	breq	.-8      	; 0x540a <main+0x4a4>
            {
                message_length = fill_Rx_buffer(&msg_buffer[0]);
    5412:	c8 01       	movw	r24, r16
    5414:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <fill_Rx_buffer>
                switch(message_length)
    5418:	81 30       	cpi	r24, 0x01	; 1
    541a:	91 05       	cpc	r25, r1
    541c:	21 f0       	breq	.+8      	; 0x5426 <main+0x4c0>
    541e:	82 33       	cpi	r24, 0x32	; 50
    5420:	91 05       	cpc	r25, r1
    5422:	49 f4       	brne	.+18     	; 0x5436 <main+0x4d0>
    5424:	04 c0       	rjmp	.+8      	; 0x542e <main+0x4c8>
                {
                    case 1:  // if length 1, then decode...
                        handle_message_length_1(&msg_buffer[0]);
    5426:	c8 01       	movw	r24, r16
    5428:	0e 94 fd 24 	call	0x49fa	; 0x49fa <handle_message_length_1>
                        break;
    542c:	ee cf       	rjmp	.-36     	; 0x540a <main+0x4a4>
                    //case 2: // if length 2, then decode, could be reset, display num, or change pat
                    //    handle_message_length_2(&msg_buffer[0]);
                    //    break;
                    case 50: //
                        display_dumped_frame(&msg_buffer[0]);
    542e:	c8 01       	movw	r24, r16
    5430:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <display_dumped_frame>
                        break;
    5434:	ea cf       	rjmp	.-44     	; 0x540a <main+0x4a4>
                    default:            
                        i2cMasterSend(0x00, 8, ERROR_CODES[8]);
    5436:	80 e0       	ldi	r24, 0x00	; 0
    5438:	68 e0       	ldi	r22, 0x08	; 8
    543a:	4b e9       	ldi	r20, 0x9B	; 155
    543c:	50 e2       	ldi	r21, 0x20	; 32
    543e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <i2cMasterSend>
    5442:	e3 cf       	rjmp	.-58     	; 0x540a <main+0x4a4>

00005444 <put_rc>:
            "OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
            "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
            "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0";
    FRESULT i;
    
    for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++)
    5444:	40 e0       	ldi	r20, 0x00	; 0
    5446:	50 e0       	ldi	r21, 0x00	; 0
    5448:	24 e3       	ldi	r18, 0x34	; 52
    544a:	30 e1       	ldi	r19, 0x10	; 16
    544c:	08 c0       	rjmp	.+16     	; 0x545e <put_rc+0x1a>
    544e:	f9 01       	movw	r30, r18
        while(pgm_read_byte_near(p++));
    5450:	2f 5f       	subi	r18, 0xFF	; 255
    5452:	3f 4f       	sbci	r19, 0xFF	; 255
    5454:	e4 91       	lpm	r30, Z+
    5456:	ee 23       	and	r30, r30
    5458:	d1 f7       	brne	.-12     	; 0x544e <put_rc+0xa>
            "OK\0" "DISK_ERR\0" "INT_ERR\0" "NOT_READY\0" "NO_FILE\0" "NO_PATH\0"
            "INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
            "INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0";
    FRESULT i;
    
    for (p = str, i = 0; i != rc && pgm_read_byte_near(p); i++)
    545a:	4f 5f       	subi	r20, 0xFF	; 255
    545c:	5f 4f       	sbci	r21, 0xFF	; 255
    545e:	48 17       	cp	r20, r24
    5460:	59 07       	cpc	r21, r25
    5462:	21 f0       	breq	.+8      	; 0x546c <put_rc+0x28>
    5464:	f9 01       	movw	r30, r18
    5466:	64 91       	lpm	r22, Z+
    5468:	66 23       	and	r22, r22
    546a:	89 f7       	brne	.-30     	; 0x544e <put_rc+0xa>
        while(pgm_read_byte_near(p++));

    xprintf(PSTR("%S\n"), p);
    546c:	00 d0       	rcall	.+0      	; 0x546e <put_rc+0x2a>
    546e:	0f 92       	push	r0
    5470:	80 e3       	ldi	r24, 0x30	; 48
    5472:	90 e1       	ldi	r25, 0x10	; 16
    5474:	ed b7       	in	r30, 0x3d	; 61
    5476:	fe b7       	in	r31, 0x3e	; 62
    5478:	81 83       	std	Z+1, r24	; 0x01
    547a:	92 83       	std	Z+2, r25	; 0x02
    547c:	23 83       	std	Z+3, r18	; 0x03
    547e:	34 83       	std	Z+4, r19	; 0x04
    5480:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    5484:	0f 90       	pop	r0
    5486:	0f 90       	pop	r0
    5488:	0f 90       	pop	r0
    548a:	0f 90       	pop	r0
}
    548c:	08 95       	ret

0000548e <ihex_readrec>:

static int16_t ihex_readrec(ihexrec_t * ihex, char * rec)
{
    548e:	ae e0       	ldi	r26, 0x0E	; 14
    5490:	b0 e0       	ldi	r27, 0x00	; 0
    5492:	ed e4       	ldi	r30, 0x4D	; 77
    5494:	fa e2       	ldi	r31, 0x2A	; 42
    5496:	0c 94 ba 4b 	jmp	0x9774	; 0x9774 <__prologue_saves__>
    549a:	6c 01       	movw	r12, r24
    549c:	8b 01       	movw	r16, r22
    int offset, len;
    char * e;
    unsigned char cksum;
    int rc;
    
    len    = strlen(rec);
    549e:	db 01       	movw	r26, r22
    54a0:	0d 90       	ld	r0, X+
    54a2:	00 20       	and	r0, r0
    54a4:	e9 f7       	brne	.-6      	; 0x54a0 <ihex_readrec+0x12>
    54a6:	7d 01       	movw	r14, r26
    54a8:	08 94       	sec
    54aa:	e1 08       	sbc	r14, r1
    54ac:	f1 08       	sbc	r15, r1
    54ae:	e6 1a       	sub	r14, r22
    54b0:	f7 0a       	sbc	r15, r23
    offset = 1;
    cksum  = 0;
    
    /* reclen */
    if (offset + 2 > len)
    54b2:	b3 e0       	ldi	r27, 0x03	; 3
    54b4:	eb 16       	cp	r14, r27
    54b6:	f1 04       	cpc	r15, r1
    54b8:	0c f4       	brge	.+2      	; 0x54bc <ihex_readrec+0x2e>
    54ba:	dc c0       	rjmp	.+440    	; 0x5674 <ihex_readrec+0x1e6>
        return -1;

    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    54bc:	fb 01       	movw	r30, r22
    54be:	81 81       	ldd	r24, Z+1	; 0x01
    54c0:	8b 83       	std	Y+3, r24	; 0x03
    54c2:	82 81       	ldd	r24, Z+2	; 0x02
    54c4:	8c 83       	std	Y+4, r24	; 0x04

    buf[i] = 0;
    54c6:	1d 82       	std	Y+5, r1	; 0x05
    ihex->reclen = strtoul(buf, &e, 16);
    54c8:	93 e0       	ldi	r25, 0x03	; 3
    54ca:	89 2e       	mov	r8, r25
    54cc:	91 2c       	mov	r9, r1
    54ce:	8c 0e       	add	r8, r28
    54d0:	9d 1e       	adc	r9, r29
    54d2:	c4 01       	movw	r24, r8
    54d4:	2e 01       	movw	r4, r28
    54d6:	08 94       	sec
    54d8:	41 1c       	adc	r4, r1
    54da:	51 1c       	adc	r5, r1
    54dc:	b2 01       	movw	r22, r4
    54de:	40 e1       	ldi	r20, 0x10	; 16
    54e0:	50 e0       	ldi	r21, 0x00	; 0
    54e2:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <strtoul>
    54e6:	d6 01       	movw	r26, r12
    54e8:	6c 93       	st	X, r22
    if (e == buf || *e != 0)
    54ea:	e9 81       	ldd	r30, Y+1	; 0x01
    54ec:	fa 81       	ldd	r31, Y+2	; 0x02
    54ee:	e8 15       	cp	r30, r8
    54f0:	f9 05       	cpc	r31, r9
    54f2:	09 f4       	brne	.+2      	; 0x54f6 <ihex_readrec+0x68>
    54f4:	bf c0       	rjmp	.+382    	; 0x5674 <ihex_readrec+0x1e6>
    54f6:	80 81       	ld	r24, Z
    54f8:	88 23       	and	r24, r24
    54fa:	09 f0       	breq	.+2      	; 0x54fe <ihex_readrec+0x70>
    54fc:	bb c0       	rjmp	.+374    	; 0x5674 <ihex_readrec+0x1e6>
        return -1;
    
    /* load offset */
    if (offset + 4 > len)
    54fe:	b7 e0       	ldi	r27, 0x07	; 7
    5500:	eb 16       	cp	r14, r27
    5502:	f1 04       	cpc	r15, r1
    5504:	0c f4       	brge	.+2      	; 0x5508 <ihex_readrec+0x7a>
    5506:	b6 c0       	rjmp	.+364    	; 0x5674 <ihex_readrec+0x1e6>
        return -1;

    for (i=0; i<4; i++)
        buf[i] = rec[offset++];
    5508:	f8 01       	movw	r30, r16
    550a:	83 81       	ldd	r24, Z+3	; 0x03
    550c:	8b 83       	std	Y+3, r24	; 0x03
    550e:	84 81       	ldd	r24, Z+4	; 0x04
    5510:	8c 83       	std	Y+4, r24	; 0x04
    5512:	85 81       	ldd	r24, Z+5	; 0x05
    5514:	8d 83       	std	Y+5, r24	; 0x05
    5516:	86 81       	ldd	r24, Z+6	; 0x06
    5518:	8e 83       	std	Y+6, r24	; 0x06

    buf[i] = 0;
    551a:	1f 82       	std	Y+7, r1	; 0x07
    ihex->loadofs = strtoul(buf, &e, 16);
    551c:	c4 01       	movw	r24, r8
    551e:	b2 01       	movw	r22, r4
    5520:	40 e1       	ldi	r20, 0x10	; 16
    5522:	50 e0       	ldi	r21, 0x00	; 0
    5524:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <strtoul>
    5528:	d6 01       	movw	r26, r12
    552a:	11 96       	adiw	r26, 0x01	; 1
    552c:	6d 93       	st	X+, r22
    552e:	7c 93       	st	X, r23
    5530:	12 97       	sbiw	r26, 0x02	; 2
    if (e == buf || *e != 0)
    5532:	e9 81       	ldd	r30, Y+1	; 0x01
    5534:	fa 81       	ldd	r31, Y+2	; 0x02
    5536:	e8 15       	cp	r30, r8
    5538:	f9 05       	cpc	r31, r9
    553a:	09 f4       	brne	.+2      	; 0x553e <ihex_readrec+0xb0>
    553c:	9b c0       	rjmp	.+310    	; 0x5674 <ihex_readrec+0x1e6>
    553e:	80 81       	ld	r24, Z
    5540:	88 23       	and	r24, r24
    5542:	09 f0       	breq	.+2      	; 0x5546 <ihex_readrec+0xb8>
    5544:	97 c0       	rjmp	.+302    	; 0x5674 <ihex_readrec+0x1e6>
        return -1;
    
    /* record type */
    if (offset + 2 > len)
    5546:	b9 e0       	ldi	r27, 0x09	; 9
    5548:	eb 16       	cp	r14, r27
    554a:	f1 04       	cpc	r15, r1
    554c:	0c f4       	brge	.+2      	; 0x5550 <ihex_readrec+0xc2>
    554e:	92 c0       	rjmp	.+292    	; 0x5674 <ihex_readrec+0x1e6>
        return -1;

    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    5550:	f8 01       	movw	r30, r16
    5552:	87 81       	ldd	r24, Z+7	; 0x07
    5554:	8b 83       	std	Y+3, r24	; 0x03
    5556:	80 85       	ldd	r24, Z+8	; 0x08
    5558:	8c 83       	std	Y+4, r24	; 0x04

    buf[i] = 0;
    555a:	1d 82       	std	Y+5, r1	; 0x05
    ihex->rectyp = strtoul(buf, &e, 16);
    555c:	c4 01       	movw	r24, r8
    555e:	b2 01       	movw	r22, r4
    5560:	40 e1       	ldi	r20, 0x10	; 16
    5562:	50 e0       	ldi	r21, 0x00	; 0
    5564:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <strtoul>
    5568:	d6 01       	movw	r26, r12
    556a:	13 96       	adiw	r26, 0x03	; 3
    556c:	6c 93       	st	X, r22
    556e:	13 97       	sbiw	r26, 0x03	; 3
    if (e == buf || *e != 0)
    5570:	e9 81       	ldd	r30, Y+1	; 0x01
    5572:	fa 81       	ldd	r31, Y+2	; 0x02
    5574:	e8 15       	cp	r30, r8
    5576:	f9 05       	cpc	r31, r9
    5578:	09 f4       	brne	.+2      	; 0x557c <ihex_readrec+0xee>
    557a:	7c c0       	rjmp	.+248    	; 0x5674 <ihex_readrec+0x1e6>
    557c:	80 81       	ld	r24, Z
    557e:	88 23       	and	r24, r24
    5580:	09 f0       	breq	.+2      	; 0x5584 <ihex_readrec+0xf6>
    5582:	78 c0       	rjmp	.+240    	; 0x5674 <ihex_readrec+0x1e6>
        return -1;
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
    5584:	11 96       	adiw	r26, 0x01	; 1
    5586:	9c 91       	ld	r25, X
    5588:	11 97       	sbiw	r26, 0x01	; 1
    558a:	12 96       	adiw	r26, 0x02	; 2
    558c:	8c 91       	ld	r24, X
    558e:	12 97       	sbiw	r26, 0x02	; 2
    5590:	bc 90       	ld	r11, X
    5592:	b9 0e       	add	r11, r25
    5594:	b8 0e       	add	r11, r24
    5596:	b6 0e       	add	r11, r22
    5598:	38 01       	movw	r6, r16
        while(pgm_read_byte_near(p++));

    xprintf(PSTR("%S\n"), p);
}

static int16_t ihex_readrec(ihexrec_t * ihex, char * rec)
    559a:	f6 01       	movw	r30, r12
    559c:	34 96       	adiw	r30, 0x04	; 4
    559e:	ed 87       	std	Y+13, r30	; 0x0d
    55a0:	fe 87       	std	Y+14, r31	; 0x0e
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++)
    55a2:	89 e0       	ldi	r24, 0x09	; 9
    55a4:	28 2e       	mov	r2, r24
    55a6:	31 2c       	mov	r3, r1
    55a8:	1b 86       	std	Y+11, r1	; 0x0b
    55aa:	1c 86       	std	Y+12, r1	; 0x0c

        for (i=0; i<2; i++)
            buf[i] = rec[offset++];

        buf[i] = 0;
        ihex->data[j] = strtoul(buf, &e, 16);
    55ac:	a4 2c       	mov	r10, r4
    55ae:	45 2c       	mov	r4, r5
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++)
    55b0:	2e c0       	rjmp	.+92     	; 0x560e <ihex_readrec+0x180>
    {
        if (offset + 2 > len)
    55b2:	8e 15       	cp	r24, r14
    55b4:	9f 05       	cpc	r25, r15
    55b6:	0c f0       	brlt	.+2      	; 0x55ba <ihex_readrec+0x12c>
    55b8:	5d c0       	rjmp	.+186    	; 0x5674 <ihex_readrec+0x1e6>
            return -1;

        for (i=0; i<2; i++)
            buf[i] = rec[offset++];
    55ba:	d3 01       	movw	r26, r6
    55bc:	19 96       	adiw	r26, 0x09	; 9
    55be:	8c 91       	ld	r24, X
    55c0:	19 97       	sbiw	r26, 0x09	; 9
    55c2:	8b 83       	std	Y+3, r24	; 0x03
    55c4:	1a 96       	adiw	r26, 0x0a	; 10
    55c6:	8c 91       	ld	r24, X
    55c8:	8c 83       	std	Y+4, r24	; 0x04

        buf[i] = 0;
    55ca:	1d 82       	std	Y+5, r1	; 0x05
        ihex->data[j] = strtoul(buf, &e, 16);
    55cc:	c4 01       	movw	r24, r8
    55ce:	6a 2d       	mov	r22, r10
    55d0:	74 2d       	mov	r23, r4
    55d2:	40 e1       	ldi	r20, 0x10	; 16
    55d4:	50 e0       	ldi	r21, 0x00	; 0
    55d6:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <strtoul>
    55da:	ed 85       	ldd	r30, Y+13	; 0x0d
    55dc:	fe 85       	ldd	r31, Y+14	; 0x0e
    55de:	61 93       	st	Z+, r22
    55e0:	ed 87       	std	Y+13, r30	; 0x0d
    55e2:	fe 87       	std	Y+14, r31	; 0x0e
        if (e == buf || *e != 0)
    55e4:	e9 81       	ldd	r30, Y+1	; 0x01
    55e6:	fa 81       	ldd	r31, Y+2	; 0x02
    55e8:	e8 15       	cp	r30, r8
    55ea:	f9 05       	cpc	r31, r9
    55ec:	09 f4       	brne	.+2      	; 0x55f0 <ihex_readrec+0x162>
    55ee:	42 c0       	rjmp	.+132    	; 0x5674 <ihex_readrec+0x1e6>
    55f0:	42 e0       	ldi	r20, 0x02	; 2
    55f2:	50 e0       	ldi	r21, 0x00	; 0
    55f4:	64 0e       	add	r6, r20
    55f6:	75 1e       	adc	r7, r21
    55f8:	80 81       	ld	r24, Z
    55fa:	88 23       	and	r24, r24
    55fc:	d9 f5       	brne	.+118    	; 0x5674 <ihex_readrec+0x1e6>
        while(pgm_read_byte_near(p++));

    xprintf(PSTR("%S\n"), p);
}

static int16_t ihex_readrec(ihexrec_t * ihex, char * rec)
    55fe:	24 0e       	add	r2, r20
    5600:	35 1e       	adc	r3, r21
        buf[i] = 0;
        ihex->data[j] = strtoul(buf, &e, 16);
        if (e == buf || *e != 0)
            return -1;

        cksum += ihex->data[j];
    5602:	b6 0e       	add	r11, r22
    
    cksum = ihex->reclen + ((ihex->loadofs >> 8) & 0x0ff) +
            (ihex->loadofs & 0x0ff) + ihex->rectyp;
    
    /* data */
    for (j=0; j<ihex->reclen; j++)
    5604:	8b 85       	ldd	r24, Y+11	; 0x0b
    5606:	9c 85       	ldd	r25, Y+12	; 0x0c
    5608:	01 96       	adiw	r24, 0x01	; 1
    560a:	8b 87       	std	Y+11, r24	; 0x0b
    560c:	9c 87       	std	Y+12, r25	; 0x0c
    560e:	d6 01       	movw	r26, r12
    5610:	2c 91       	ld	r18, X
    5612:	30 e0       	ldi	r19, 0x00	; 0
    5614:	c1 01       	movw	r24, r2
    5616:	01 96       	adiw	r24, 0x01	; 1
    5618:	eb 85       	ldd	r30, Y+11	; 0x0b
    561a:	fc 85       	ldd	r31, Y+12	; 0x0c
    561c:	e2 17       	cp	r30, r18
    561e:	f3 07       	cpc	r31, r19
    5620:	44 f2       	brlt	.-112    	; 0x55b2 <ihex_readrec+0x124>

        cksum += ihex->data[j];
    }
    
    /* cksum */
    if (offset + 2 > len)
    5622:	8e 15       	cp	r24, r14
    5624:	9f 05       	cpc	r25, r15
    5626:	34 f5       	brge	.+76     	; 0x5674 <ihex_readrec+0x1e6>
        return -1;

    for (i=0; i<2; i++)
        buf[i] = rec[offset++];
    5628:	f8 01       	movw	r30, r16
    562a:	e2 0d       	add	r30, r2
    562c:	f3 1d       	adc	r31, r3
    562e:	20 81       	ld	r18, Z
    5630:	2b 83       	std	Y+3, r18	; 0x03
    5632:	08 0f       	add	r16, r24
    5634:	19 1f       	adc	r17, r25
    5636:	d8 01       	movw	r26, r16
    5638:	8c 91       	ld	r24, X
    563a:	8c 83       	std	Y+4, r24	; 0x04

    buf[i] = 0;
    563c:	1d 82       	std	Y+5, r1	; 0x05
    ihex->cksum = strtoul(buf, &e, 16);
    563e:	8e 01       	movw	r16, r28
    5640:	0d 5f       	subi	r16, 0xFD	; 253
    5642:	1f 4f       	sbci	r17, 0xFF	; 255
    5644:	c8 01       	movw	r24, r16
    5646:	be 01       	movw	r22, r28
    5648:	6f 5f       	subi	r22, 0xFF	; 255
    564a:	7f 4f       	sbci	r23, 0xFF	; 255
    564c:	40 e1       	ldi	r20, 0x10	; 16
    564e:	50 e0       	ldi	r21, 0x00	; 0
    5650:	0e 94 24 4d 	call	0x9a48	; 0x9a48 <strtoul>
    5654:	f6 01       	movw	r30, r12
    5656:	ec 5f       	subi	r30, 0xFC	; 252
    5658:	fe 4f       	sbci	r31, 0xFE	; 254
    565a:	60 83       	st	Z, r22
    if (e == buf || *e != 0)
    565c:	e9 81       	ldd	r30, Y+1	; 0x01
    565e:	fa 81       	ldd	r31, Y+2	; 0x02
    5660:	e0 17       	cp	r30, r16
    5662:	f1 07       	cpc	r31, r17
    5664:	39 f0       	breq	.+14     	; 0x5674 <ihex_readrec+0x1e6>
    5666:	80 81       	ld	r24, Z
    5668:	88 23       	and	r24, r24
    566a:	21 f4       	brne	.+8      	; 0x5674 <ihex_readrec+0x1e6>
        return -1;
    
    rc = -cksum & 0x000000ff;
    566c:	b1 94       	neg	r11
    566e:	2b 2d       	mov	r18, r11
    5670:	30 e0       	ldi	r19, 0x00	; 0
    
    return rc;
    5672:	02 c0       	rjmp	.+4      	; 0x5678 <ihex_readrec+0x1ea>
        buf[i] = rec[offset++];

    buf[i] = 0;
    ihex->cksum = strtoul(buf, &e, 16);
    if (e == buf || *e != 0)
        return -1;
    5674:	2f ef       	ldi	r18, 0xFF	; 255
    5676:	3f ef       	ldi	r19, 0xFF	; 255
    
    rc = -cksum & 0x000000ff;
    
    return rc;
}
    5678:	c9 01       	movw	r24, r18
    567a:	2e 96       	adiw	r28, 0x0e	; 14
    567c:	e2 e1       	ldi	r30, 0x12	; 18
    567e:	0c 94 d3 4b 	jmp	0x97a6	; 0x97a6 <__epilogue_restores__>

00005682 <writeCommandToADC>:
}


void writeCommandToADC (uint16_t command)
{
	  PORTC.OUTCLR = PIN4_bm;				// Select the AD7328 DAC chip.
    5682:	20 e1       	ldi	r18, 0x10	; 16
    5684:	e0 e4       	ldi	r30, 0x40	; 64
    5686:	f6 e0       	ldi	r31, 0x06	; 6
    5688:	26 83       	std	Z+6, r18	; 0x06
	  SPIC.DATA = MSB(command);
    568a:	e0 ec       	ldi	r30, 0xC0	; 192
    568c:	f8 e0       	ldi	r31, 0x08	; 8
    568e:	93 83       	std	Z+3, r25	; 0x03
	  loop_until_bit_is_set(SPIC.STATUS, 7);
    5690:	90 91 c2 08 	lds	r25, 0x08C2
    5694:	97 ff       	sbrs	r25, 7
    5696:	fc cf       	rjmp	.-8      	; 0x5690 <writeCommandToADC+0xe>
	  SPIC.DATA = LSB(command);
    5698:	e0 ec       	ldi	r30, 0xC0	; 192
    569a:	f8 e0       	ldi	r31, 0x08	; 8
    569c:	83 83       	std	Z+3, r24	; 0x03
	  loop_until_bit_is_set(SPIC.STATUS, 7);
    569e:	80 91 c2 08 	lds	r24, 0x08C2
    56a2:	87 ff       	sbrs	r24, 7
    56a4:	fc cf       	rjmp	.-8      	; 0x569e <writeCommandToADC+0x1c>
	  PORTC.OUTSET = PIN4_bm;				// Execute the command, i.e. deselect the AD7328 DAC chip.
    56a6:	80 e1       	ldi	r24, 0x10	; 16
    56a8:	e0 e4       	ldi	r30, 0x40	; 64
    56aa:	f6 e0       	ldi	r31, 0x06	; 6
    56ac:	85 83       	std	Z+5, r24	; 0x05

}
    56ae:	08 95       	ret

000056b0 <set_voltage_range_channel>:
//         ADC_RR_VIN_PLUSMINUS5
//         ADC_RR_VIN_PLUSMINUS2P5
//         ADC_RR_VIN_PLUS10
//
void set_voltage_range_channel(uint8_t ch, uint8_t range)
{
    56b0:	cf 93       	push	r28
    56b2:	df 93       	push	r29
	// Update the bits in the static variable.
	s_command_rangeregister[ADC_RR_FROM_CH(ch)] &= ~ADC_RR_CH_MASK(ch);		// Clear the bits for this channel.
    56b4:	a1 e0       	ldi	r26, 0x01	; 1
    56b6:	b0 e0       	ldi	r27, 0x00	; 0
    56b8:	84 30       	cpi	r24, 0x04	; 4
    56ba:	10 f4       	brcc	.+4      	; 0x56c0 <set_voltage_range_channel+0x10>
    56bc:	a0 e0       	ldi	r26, 0x00	; 0
    56be:	b0 e0       	ldi	r27, 0x00	; 0
    56c0:	fd 01       	movw	r30, r26
    56c2:	ee 0f       	add	r30, r30
    56c4:	ff 1f       	adc	r31, r31
    56c6:	e3 5e       	subi	r30, 0xE3	; 227
    56c8:	fb 4d       	sbci	r31, 0xDB	; 219
    56ca:	c0 81       	ld	r28, Z
    56cc:	d1 81       	ldd	r29, Z+1	; 0x01
    56ce:	84 30       	cpi	r24, 0x04	; 4
    56d0:	18 f0       	brcs	.+6      	; 0x56d8 <set_voltage_range_channel+0x28>
    56d2:	44 e0       	ldi	r20, 0x04	; 4
    56d4:	50 e0       	ldi	r21, 0x00	; 0
    56d6:	02 c0       	rjmp	.+4      	; 0x56dc <set_voltage_range_channel+0x2c>
    56d8:	40 e0       	ldi	r20, 0x00	; 0
    56da:	50 e0       	ldi	r21, 0x00	; 0
    56dc:	e5 e0       	ldi	r30, 0x05	; 5
    56de:	f0 e0       	ldi	r31, 0x00	; 0
    56e0:	e8 1b       	sub	r30, r24
    56e2:	f1 09       	sbc	r31, r1
    56e4:	4e 0f       	add	r20, r30
    56e6:	5f 1f       	adc	r21, r31
    56e8:	44 0f       	add	r20, r20
    56ea:	55 1f       	adc	r21, r21
    56ec:	4f 5f       	subi	r20, 0xFF	; 255
    56ee:	5f 4f       	sbci	r21, 0xFF	; 255
    56f0:	23 e0       	ldi	r18, 0x03	; 3
    56f2:	30 e0       	ldi	r19, 0x00	; 0
    56f4:	02 c0       	rjmp	.+4      	; 0x56fa <set_voltage_range_channel+0x4a>
    56f6:	22 0f       	add	r18, r18
    56f8:	33 1f       	adc	r19, r19
    56fa:	4a 95       	dec	r20
    56fc:	e2 f7       	brpl	.-8      	; 0x56f6 <set_voltage_range_channel+0x46>
    56fe:	20 95       	com	r18
    5700:	30 95       	com	r19
    5702:	2c 23       	and	r18, r28
    5704:	3d 23       	and	r19, r29
	s_command_rangeregister[ADC_RR_FROM_CH(ch)] |= ADC_RR_BITS(ch, range);  // Set the new range for this channel.
    5706:	70 e0       	ldi	r23, 0x00	; 0
    5708:	84 30       	cpi	r24, 0x04	; 4
    570a:	18 f0       	brcs	.+6      	; 0x5712 <set_voltage_range_channel+0x62>
    570c:	84 e0       	ldi	r24, 0x04	; 4
    570e:	90 e0       	ldi	r25, 0x00	; 0
    5710:	02 c0       	rjmp	.+4      	; 0x5716 <set_voltage_range_channel+0x66>
    5712:	80 e0       	ldi	r24, 0x00	; 0
    5714:	90 e0       	ldi	r25, 0x00	; 0
    5716:	8e 0f       	add	r24, r30
    5718:	9f 1f       	adc	r25, r31
    571a:	88 0f       	add	r24, r24
    571c:	99 1f       	adc	r25, r25
    571e:	01 96       	adiw	r24, 0x01	; 1
    5720:	ab 01       	movw	r20, r22
    5722:	02 c0       	rjmp	.+4      	; 0x5728 <set_voltage_range_channel+0x78>
    5724:	44 0f       	add	r20, r20
    5726:	55 1f       	adc	r21, r21
    5728:	8a 95       	dec	r24
    572a:	e2 f7       	brpl	.-8      	; 0x5724 <set_voltage_range_channel+0x74>
    572c:	ca 01       	movw	r24, r20
    572e:	82 2b       	or	r24, r18
    5730:	93 2b       	or	r25, r19
    5732:	fd 01       	movw	r30, r26
    5734:	ee 0f       	add	r30, r30
    5736:	ff 1f       	adc	r31, r31
    5738:	e3 5e       	subi	r30, 0xE3	; 227
    573a:	fb 4d       	sbci	r31, 0xDB	; 219
    573c:	80 83       	st	Z, r24
    573e:	91 83       	std	Z+1, r25	; 0x01

	// Send the bits out to the ADC chip.
	SPIC.CTRL = 0x58;
    5740:	28 e5       	ldi	r18, 0x58	; 88
    5742:	20 93 c0 08 	sts	0x08C0, r18
	writeCommandToADC(s_command_rangeregister[ADC_RR_FROM_CH(ch)]);
    5746:	0e 94 41 2b 	call	0x5682	; 0x5682 <writeCommandToADC>
}
    574a:	df 91       	pop	r29
    574c:	cf 91       	pop	r28
    574e:	08 95       	ret

00005750 <readConversionFromADC>:

}


int16_t readConversionFromADC (void)
{
    5750:	a2 e0       	ldi	r26, 0x02	; 2
    5752:	b0 e0       	ldi	r27, 0x00	; 0
    5754:	ee ea       	ldi	r30, 0xAE	; 174
    5756:	fb e2       	ldi	r31, 0x2B	; 43
    5758:	0c 94 ca 4b 	jmp	0x9794	; 0x9794 <__prologue_saves__+0x20>
	int16_t	w1;

	PORTC.OUTCLR = PIN4_bm;				// Select the AD7328 DAC chip.
    575c:	80 e1       	ldi	r24, 0x10	; 16
    575e:	e0 e4       	ldi	r30, 0x40	; 64
    5760:	f6 e0       	ldi	r31, 0x06	; 6
    5762:	86 83       	std	Z+6, r24	; 0x06
	SPIC.DATA = 0;
    5764:	e0 ec       	ldi	r30, 0xC0	; 192
    5766:	f8 e0       	ldi	r31, 0x08	; 8
    5768:	13 82       	std	Z+3, r1	; 0x03
	loop_until_bit_is_set(SPIC.STATUS, 7);
    576a:	80 91 c2 08 	lds	r24, 0x08C2
    576e:	87 ff       	sbrs	r24, 7
    5770:	fc cf       	rjmp	.-8      	; 0x576a <readConversionFromADC+0x1a>
	((uint8_t*)&w1)[1] = SPIC.DATA;
    5772:	fe 01       	movw	r30, r28
    5774:	31 96       	adiw	r30, 0x01	; 1
    5776:	80 91 c3 08 	lds	r24, 0x08C3
    577a:	81 83       	std	Z+1, r24	; 0x01
	SPIC.DATA = 0;
    577c:	a0 ec       	ldi	r26, 0xC0	; 192
    577e:	b8 e0       	ldi	r27, 0x08	; 8
    5780:	13 96       	adiw	r26, 0x03	; 3
    5782:	1c 92       	st	X, r1
    5784:	13 97       	sbiw	r26, 0x03	; 3
	loop_until_bit_is_set(SPIC.STATUS, 7);
    5786:	80 91 c2 08 	lds	r24, 0x08C2
    578a:	87 ff       	sbrs	r24, 7
    578c:	fc cf       	rjmp	.-8      	; 0x5786 <readConversionFromADC+0x36>
	((uint8_t*)&w1)[0] = SPIC.DATA;
    578e:	80 91 c3 08 	lds	r24, 0x08C3
    5792:	80 83       	st	Z, r24
	PORTC.OUTSET = PIN4_bm;				// Deselect the AD7328 DAC chip.
    5794:	80 e1       	ldi	r24, 0x10	; 16
    5796:	e0 e4       	ldi	r30, 0x40	; 64
    5798:	f6 e0       	ldi	r31, 0x06	; 6
    579a:	85 83       	std	Z+5, r24	; 0x05

	return w1;
}
    579c:	89 81       	ldd	r24, Y+1	; 0x01
    579e:	9a 81       	ldd	r25, Y+2	; 0x02
    57a0:	22 96       	adiw	r28, 0x02	; 2
    57a2:	e2 e0       	ldi	r30, 0x02	; 2
    57a4:	0c 94 e3 4b 	jmp	0x97c6	; 0x97c6 <__epilogue_restores__+0x20>

000057a8 <CCPWrite>:


// From Application Note AVR1003
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    57a8:	0f 93       	push	r16
    57aa:	df 93       	push	r29
    57ac:	cf 93       	push	r28
    57ae:	0f 92       	push	r0
    57b0:	cd b7       	in	r28, 0x3d	; 61
    57b2:	de b7       	in	r29, 0x3e	; 62
	uint8_t volatile saved_sreg = SREG;
    57b4:	2f b7       	in	r18, 0x3f	; 63
    57b6:	29 83       	std	Y+1, r18	; 0x01
	cli();
    57b8:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    57ba:	1b be       	out	0x3b, r1	; 59
#endif

	asm volatile(
    57bc:	fc 01       	movw	r30, r24
    57be:	08 ed       	ldi	r16, 0xD8	; 216
    57c0:	04 bf       	out	0x34, r16	; 52
    57c2:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
	);

	SREG = saved_sreg;
    57c4:	89 81       	ldd	r24, Y+1	; 0x01
    57c6:	8f bf       	out	0x3f, r24	; 63
}
    57c8:	0f 90       	pop	r0
    57ca:	cf 91       	pop	r28
    57cc:	df 91       	pop	r29
    57ce:	0f 91       	pop	r16
    57d0:	08 95       	ret

000057d2 <ledShow4Bits>:
// Display the lower four bits on the four controller leds.
//
void ledShow4Bits (uint8_t byte)
{
	// Shift and reverse the bits.
	byte &= 0x0F;
    57d2:	8f 70       	andi	r24, 0x0F	; 15
	byte |= (byte & 0x01) ? 0x80 : 0;
    57d4:	80 ff       	sbrs	r24, 0
    57d6:	02 c0       	rjmp	.+4      	; 0x57dc <ledShow4Bits+0xa>
    57d8:	90 e8       	ldi	r25, 0x80	; 128
    57da:	01 c0       	rjmp	.+2      	; 0x57de <ledShow4Bits+0xc>
    57dc:	90 e0       	ldi	r25, 0x00	; 0
    57de:	89 2b       	or	r24, r25
	byte |= (byte & 0x02) ? 0x40 : 0;
    57e0:	81 ff       	sbrs	r24, 1
    57e2:	02 c0       	rjmp	.+4      	; 0x57e8 <ledShow4Bits+0x16>
    57e4:	90 e4       	ldi	r25, 0x40	; 64
    57e6:	01 c0       	rjmp	.+2      	; 0x57ea <ledShow4Bits+0x18>
    57e8:	90 e0       	ldi	r25, 0x00	; 0
    57ea:	89 2b       	or	r24, r25
	byte |= (byte & 0x04) ? 0x20 : 0;
    57ec:	82 ff       	sbrs	r24, 2
    57ee:	02 c0       	rjmp	.+4      	; 0x57f4 <ledShow4Bits+0x22>
    57f0:	90 e2       	ldi	r25, 0x20	; 32
    57f2:	01 c0       	rjmp	.+2      	; 0x57f6 <ledShow4Bits+0x24>
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	89 2b       	or	r24, r25
	byte |= (byte & 0x08) ? 0x10 : 0;
    57f8:	83 ff       	sbrs	r24, 3
    57fa:	02 c0       	rjmp	.+4      	; 0x5800 <ledShow4Bits+0x2e>
    57fc:	90 e1       	ldi	r25, 0x10	; 16
    57fe:	01 c0       	rjmp	.+2      	; 0x5802 <ledShow4Bits+0x30>
    5800:	90 e0       	ldi	r25, 0x00	; 0
    5802:	89 2b       	or	r24, r25
	byte &= 0xF0;
    5804:	80 7f       	andi	r24, 0xF0	; 240

	// Output them.
	PORTJ.OUTCLR = byte;
    5806:	e0 e0       	ldi	r30, 0x00	; 0
    5808:	f7 e0       	ldi	r31, 0x07	; 7
    580a:	86 83       	std	Z+6, r24	; 0x06
	PORTJ.OUTSET = ~byte;
    580c:	80 95       	com	r24
    580e:	85 83       	std	Z+5, r24	; 0x05

}
    5810:	08 95       	ret

00005812 <ledWrite>:

void ledWrite( uint8_t led, uint8_t value )
{
	// ignore write if out-ouf-bounds argument
	if (!((led & ~3) || (value & ~1)))
    5812:	90 e0       	ldi	r25, 0x00	; 0
    5814:	9c 01       	movw	r18, r24
    5816:	2c 7f       	andi	r18, 0xFC	; 252
    5818:	21 15       	cp	r18, r1
    581a:	31 05       	cpc	r19, r1
    581c:	d9 f4       	brne	.+54     	; 0x5854 <ledWrite+0x42>
    581e:	26 2f       	mov	r18, r22
    5820:	2e 7f       	andi	r18, 0xFE	; 254
    5822:	c1 f4       	brne	.+48     	; 0x5854 <ledWrite+0x42>
    5824:	04 96       	adiw	r24, 0x04	; 4
	{
		if (value == 1)
    5826:	61 30       	cpi	r22, 0x01	; 1
    5828:	59 f4       	brne	.+22     	; 0x5840 <ledWrite+0x2e>
			PORTJ.OUTCLR = 1 << 4 + led;	// turn the led ON
    582a:	21 e0       	ldi	r18, 0x01	; 1
    582c:	30 e0       	ldi	r19, 0x00	; 0
    582e:	02 c0       	rjmp	.+4      	; 0x5834 <ledWrite+0x22>
    5830:	22 0f       	add	r18, r18
    5832:	33 1f       	adc	r19, r19
    5834:	8a 95       	dec	r24
    5836:	e2 f7       	brpl	.-8      	; 0x5830 <ledWrite+0x1e>
    5838:	e0 e0       	ldi	r30, 0x00	; 0
    583a:	f7 e0       	ldi	r31, 0x07	; 7
    583c:	26 83       	std	Z+6, r18	; 0x06
    583e:	08 95       	ret
		else
			PORTJ.OUTSET = 1 << 4 + led;	// turn the led OFF
    5840:	21 e0       	ldi	r18, 0x01	; 1
    5842:	30 e0       	ldi	r19, 0x00	; 0
    5844:	02 c0       	rjmp	.+4      	; 0x584a <ledWrite+0x38>
    5846:	22 0f       	add	r18, r18
    5848:	33 1f       	adc	r19, r19
    584a:	8a 95       	dec	r24
    584c:	e2 f7       	brpl	.-8      	; 0x5846 <ledWrite+0x34>
    584e:	e0 e0       	ldi	r30, 0x00	; 0
    5850:	f7 e0       	ldi	r31, 0x07	; 7
    5852:	25 83       	std	Z+5, r18	; 0x05
    5854:	08 95       	ret

00005856 <ledToggle>:
}

void ledToggle( uint8_t led )
{
	// ignore write if out-ouf-bounds argument
	if (!(led & ~3))
    5856:	90 e0       	ldi	r25, 0x00	; 0
    5858:	9c 01       	movw	r18, r24
    585a:	2c 7f       	andi	r18, 0xFC	; 252
    585c:	21 15       	cp	r18, r1
    585e:	31 05       	cpc	r19, r1
    5860:	59 f4       	brne	.+22     	; 0x5878 <ledToggle+0x22>
		PORTJ.OUTTGL = 1 << 4 + led;	// toggle the led
    5862:	04 96       	adiw	r24, 0x04	; 4
    5864:	21 e0       	ldi	r18, 0x01	; 1
    5866:	30 e0       	ldi	r19, 0x00	; 0
    5868:	02 c0       	rjmp	.+4      	; 0x586e <ledToggle+0x18>
    586a:	22 0f       	add	r18, r18
    586c:	33 1f       	adc	r19, r19
    586e:	8a 95       	dec	r24
    5870:	e2 f7       	brpl	.-8      	; 0x586a <ledToggle+0x14>
    5872:	e0 e0       	ldi	r30, 0x00	; 0
    5874:	f7 e0       	ldi	r31, 0x07	; 7
    5876:	27 83       	std	Z+7, r18	; 0x07
    5878:	08 95       	ret

0000587a <ledBlink>:
}

void ledBlink(void)
{ 
    587a:	cf 93       	push	r28
    587c:	df 93       	push	r29
    587e:	ca e0       	ldi	r28, 0x0A	; 10
    5880:	d0 e0       	ldi	r29, 0x00	; 0
  /* blink LED 1, this is a simple debug tool to see if the controller is responsive */
  int j;
  	
  for(j = 0;j < 10;j++)
  {
    ledToggle(1);
    5882:	81 e0       	ldi	r24, 0x01	; 1
    5884:	0e 94 2b 2c 	call	0x5856	; 0x5856 <ledToggle>
    5888:	8f ef       	ldi	r24, 0xFF	; 255
    588a:	9d e2       	ldi	r25, 0x2D	; 45
    588c:	a2 e2       	ldi	r26, 0x22	; 34
    588e:	81 50       	subi	r24, 0x01	; 1
    5890:	90 40       	sbci	r25, 0x00	; 0
    5892:	a0 40       	sbci	r26, 0x00	; 0
    5894:	e1 f7       	brne	.-8      	; 0x588e <ledBlink+0x14>
    5896:	00 c0       	rjmp	.+0      	; 0x5898 <ledBlink+0x1e>
    5898:	00 00       	nop
    589a:	21 97       	sbiw	r28, 0x01	; 1
void ledBlink(void)
{ 
  /* blink LED 1, this is a simple debug tool to see if the controller is responsive */
  int j;
  	
  for(j = 0;j < 10;j++)
    589c:	91 f7       	brne	.-28     	; 0x5882 <ledBlink+0x8>
  {
    ledToggle(1);
    _delay_ms(350);
  }
}
    589e:	df 91       	pop	r29
    58a0:	cf 91       	pop	r28
    58a2:	08 95       	ret

000058a4 <digitalMode>:

void digitalMode( uint8_t bit, uint8_t mode)
{
	if (!(bit & ~3))
    58a4:	28 2f       	mov	r18, r24
    58a6:	30 e0       	ldi	r19, 0x00	; 0
    58a8:	f9 01       	movw	r30, r18
    58aa:	ec 7f       	andi	r30, 0xFC	; 252
    58ac:	30 97       	sbiw	r30, 0x00	; 0
    58ae:	59 f5       	brne	.+86     	; 0x5906 <digitalMode+0x62>
	{
		if (mode == OUTPUT)
    58b0:	66 23       	and	r22, r22
    58b2:	a1 f4       	brne	.+40     	; 0x58dc <digitalMode+0x38>
		{
			/* set the port as output */
			PORTK.OUTCLR = 1 << 4 + bit; // set the external driver mode to output first
    58b4:	2c 5f       	subi	r18, 0xFC	; 252
    58b6:	3f 4f       	sbci	r19, 0xFF	; 255
    58b8:	41 e0       	ldi	r20, 0x01	; 1
    58ba:	50 e0       	ldi	r21, 0x00	; 0
    58bc:	ba 01       	movw	r22, r20
    58be:	02 c0       	rjmp	.+4      	; 0x58c4 <digitalMode+0x20>
    58c0:	66 0f       	add	r22, r22
    58c2:	77 1f       	adc	r23, r23
    58c4:	2a 95       	dec	r18
    58c6:	e2 f7       	brpl	.-8      	; 0x58c0 <digitalMode+0x1c>
    58c8:	e0 e2       	ldi	r30, 0x20	; 32
    58ca:	f7 e0       	ldi	r31, 0x07	; 7
    58cc:	66 83       	std	Z+6, r22	; 0x06
			PORTK.DIRSET = 1 << bit;   // set the uC pin direction to output second
    58ce:	02 c0       	rjmp	.+4      	; 0x58d4 <digitalMode+0x30>
    58d0:	44 0f       	add	r20, r20
    58d2:	55 1f       	adc	r21, r21
    58d4:	8a 95       	dec	r24
    58d6:	e2 f7       	brpl	.-8      	; 0x58d0 <digitalMode+0x2c>
    58d8:	41 83       	std	Z+1, r20	; 0x01
    58da:	08 95       	ret
		}
		else if (mode == INPUT)
    58dc:	61 30       	cpi	r22, 0x01	; 1
    58de:	99 f4       	brne	.+38     	; 0x5906 <digitalMode+0x62>
		{
			/* set the port as input */
			PORTK.DIRCLR = 1 << bit;   // set the uC pin direction to input first
    58e0:	41 e0       	ldi	r20, 0x01	; 1
    58e2:	50 e0       	ldi	r21, 0x00	; 0
    58e4:	ba 01       	movw	r22, r20
    58e6:	02 c0       	rjmp	.+4      	; 0x58ec <digitalMode+0x48>
    58e8:	66 0f       	add	r22, r22
    58ea:	77 1f       	adc	r23, r23
    58ec:	8a 95       	dec	r24
    58ee:	e2 f7       	brpl	.-8      	; 0x58e8 <digitalMode+0x44>
    58f0:	e0 e2       	ldi	r30, 0x20	; 32
    58f2:	f7 e0       	ldi	r31, 0x07	; 7
    58f4:	62 83       	std	Z+2, r22	; 0x02
			PORTK.OUTSET = 1 << 4 + bit; // set the external driver direction to input
    58f6:	2c 5f       	subi	r18, 0xFC	; 252
    58f8:	3f 4f       	sbci	r19, 0xFF	; 255
    58fa:	02 c0       	rjmp	.+4      	; 0x5900 <digitalMode+0x5c>
    58fc:	44 0f       	add	r20, r20
    58fe:	55 1f       	adc	r21, r21
    5900:	2a 95       	dec	r18
    5902:	e2 f7       	brpl	.-8      	; 0x58fc <digitalMode+0x58>
    5904:	45 83       	std	Z+5, r20	; 0x05
    5906:	08 95       	ret

00005908 <init_all>:

static uint16_t	s_command_rangeregister[2]={0,0};


void init_all()
{ 
    5908:	1f 93       	push	r17
    590a:	cf 93       	push	r28
    590c:	df 93       	push	r29
  ledWrite(LED0, ON);
    590e:	80 e0       	ldi	r24, 0x00	; 0
    5910:	61 e0       	ldi	r22, 0x01	; 1
    5912:	0e 94 09 2c 	call	0x5812	; 0x5812 <ledWrite>
  
  PORTC.DIRSET = PIN3_bm; // UART pin
    5916:	e0 e4       	ldi	r30, 0x40	; 64
    5918:	f6 e0       	ldi	r31, 0x06	; 6
    591a:	88 e0       	ldi	r24, 0x08	; 8
    591c:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm; // UART pin
    591e:	84 e0       	ldi	r24, 0x04	; 4
    5920:	82 83       	std	Z+2, r24	; 0x02

  PORTC.DIRSET = PIN4_bm; // SS pin for SPI unit on port C
    5922:	20 e1       	ldi	r18, 0x10	; 16
    5924:	21 83       	std	Z+1, r18	; 0x01
  PORTC.DIRSET = PIN5_bm; // MOSI pin for SPI unit on port C
    5926:	90 e2       	ldi	r25, 0x20	; 32
    5928:	91 83       	std	Z+1, r25	; 0x01
  PORTC.DIRSET = PIN7_bm; // SCL pin for SPI unit on port C
    592a:	80 e8       	ldi	r24, 0x80	; 128
    592c:	81 83       	std	Z+1, r24	; 0x01
  PORTC.OUTSET = PIN4_bm; // Set SS high
    592e:	25 83       	std	Z+5, r18	; 0x05

  PORTD.DIRSET = PIN4_bm; // SS pin for SPI unit on port D
    5930:	e0 e6       	ldi	r30, 0x60	; 96
    5932:	f6 e0       	ldi	r31, 0x06	; 6
    5934:	21 83       	std	Z+1, r18	; 0x01
  PORTD.DIRSET = PIN5_bm; // MOSI pin for SPI unit on port D
    5936:	91 83       	std	Z+1, r25	; 0x01
  PORTD.DIRSET = PIN7_bm; // SCL pin for SPI unit on port D
    5938:	81 83       	std	Z+1, r24	; 0x01
  PORTD.OUTSET = PIN4_bm; // Set SS high
    593a:	25 83       	std	Z+5, r18	; 0x05

  PORTE.DIR = 0xB0;       // SPI (SD-card)
    593c:	20 eb       	ldi	r18, 0xB0	; 176
    593e:	20 93 80 06 	sts	0x0680, r18
  PORTE.OUT = 0x00;
    5942:	e0 e8       	ldi	r30, 0x80	; 128
    5944:	f6 e0       	ldi	r31, 0x06	; 6
    5946:	14 82       	std	Z+4, r1	; 0x04

  PORTH.DIRSET = PIN5_bm; // LDAC
    5948:	e0 ee       	ldi	r30, 0xE0	; 224
    594a:	f6 e0       	ldi	r31, 0x06	; 6
    594c:	91 83       	std	Z+1, r25	; 0x01
  PORTH.DIRSET = PIN6_bm; // CLR
    594e:	20 e4       	ldi	r18, 0x40	; 64
    5950:	21 83       	std	Z+1, r18	; 0x01
  PORTH.DIRSET = PIN7_bm; // BIN
    5952:	81 83       	std	Z+1, r24	; 0x01
  PORTH.OUTCLR = PIN5_bm; // LDAC low
    5954:	96 83       	std	Z+6, r25	; 0x06
  PORTH.OUTSET = PIN6_bm; // CLR high
    5956:	25 83       	std	Z+5, r18	; 0x05
  PORTH.OUTCLR = PIN7_bm; // BIN low
    5958:	86 83       	std	Z+6, r24	; 0x06

  PORTJ.DIR = 0xf0;       // LEDs are on bits 4 - 7
    595a:	80 ef       	ldi	r24, 0xF0	; 240
    595c:	80 93 00 07 	sts	0x0700, r24
  PORTJ.OUT = 0xf0;       // All LEDs off
    5960:	e0 e0       	ldi	r30, 0x00	; 0
    5962:	f7 e0       	ldi	r31, 0x07	; 7
    5964:	84 83       	std	Z+4, r24	; 0x04


  PORTK.DIR = 0xf0;       // bit 4 - 7 are external signal direction control
    5966:	c0 e2       	ldi	r28, 0x20	; 32
    5968:	d7 e0       	ldi	r29, 0x07	; 7
    596a:	80 93 20 07 	sts	0x0720, r24
  PORTK.OUT = 0xff;       // external signal direction set to input (0 = input)
    596e:	8f ef       	ldi	r24, 0xFF	; 255
    5970:	8c 83       	std	Y+4, r24	; 0x04



 // set digital I/O signals to outputs
  digitalMode(DIO_0, OUTPUT);     //used to trigger laser
    5972:	80 e0       	ldi	r24, 0x00	; 0
    5974:	60 e0       	ldi	r22, 0x00	; 0
    5976:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <digitalMode>
  digitalMode(DIO_1, OUTPUT);     //used as a sign for the start and end of fetch_display_frame function
    597a:	81 e0       	ldi	r24, 0x01	; 1
    597c:	60 e0       	ldi	r22, 0x00	; 0
    597e:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <digitalMode>
  digitalMode(DIO_2, OUTPUT);     //used to trigger camera
    5982:	82 e0       	ldi	r24, 0x02	; 2
    5984:	60 e0       	ldi	r22, 0x00	; 0
    5986:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <digitalMode>
  digitalMode(DIO_3, INPUT);      //Used to detect external trigger signal
    598a:	83 e0       	ldi	r24, 0x03	; 3
    598c:	61 e0       	ldi	r22, 0x01	; 1
    598e:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <digitalMode>

  PORTK.PIN3CTRL = 0x01;      //INT3 senses rising edge
    5992:	81 e0       	ldi	r24, 0x01	; 1
    5994:	8b 8b       	std	Y+19, r24	; 0x13
  PORTK.INT0MASK = 0x00;      //disable Int3 as source for port interrupt 0x00, enable it with 0x08.
    5996:	1a 86       	std	Y+10, r1	; 0x0a
  PORTK.INTCTRL = 0x02;       //Set Int3 INT0 Level medium   
    5998:	82 e0       	ldi	r24, 0x02	; 2
    599a:	89 87       	std	Y+9, r24	; 0x09

  
  OSC.XOSCCTRL = 0x47;    // 0.4-16 MHz XTAL - 1K CLK Start Up
    599c:	e0 e5       	ldi	r30, 0x50	; 80
    599e:	f0 e0       	ldi	r31, 0x00	; 0
    59a0:	87 e4       	ldi	r24, 0x47	; 71
    59a2:	82 83       	std	Z+2, r24	; 0x02
  OSC.PLLCTRL = 0xC4;     // XOSC is PLL Source - 4x Factor (32MHz)
    59a4:	84 ec       	ldi	r24, 0xC4	; 196
    59a6:	85 83       	std	Z+5, r24	; 0x05
  OSC.CTRL = 0x18;        // Enable PLL & External Oscillator
    59a8:	88 e1       	ldi	r24, 0x18	; 24
    59aa:	80 93 50 00 	sts	0x0050, r24

  // switch to 32 MHz oscillator
  while(!testbit(OSC.STATUS,OSC_PLLRDY_bp));  // wait until PLL stable
    59ae:	80 91 51 00 	lds	r24, 0x0051
    59b2:	84 ff       	sbrs	r24, 4
    59b4:	fc cf       	rjmp	.-8      	; 0x59ae <init_all+0xa6>
  CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);    // 32MHz from PLL
    59b6:	80 e4       	ldi	r24, 0x40	; 64
    59b8:	90 e0       	ldi	r25, 0x00	; 0
    59ba:	64 e0       	ldi	r22, 0x04	; 4
    59bc:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <CCPWrite>
    59c0:	8f ef       	ldi	r24, 0xFF	; 255
    59c2:	93 ec       	ldi	r25, 0xC3	; 195
    59c4:	a9 e0       	ldi	r26, 0x09	; 9
    59c6:	81 50       	subi	r24, 0x01	; 1
    59c8:	90 40       	sbci	r25, 0x00	; 0
    59ca:	a0 40       	sbci	r26, 0x00	; 0
    59cc:	e1 f7       	brne	.-8      	; 0x59c6 <init_all+0xbe>
    59ce:	00 c0       	rjmp	.+0      	; 0x59d0 <init_all+0xc8>
    59d0:	00 00       	nop
  _delay_ms(100);         // Debounce ON Switch

  // Timer TCE1: 100Hz timer for SD Card routines
  
 // TCE1.CTRLA = 0x05;      // Prescaler: clk/64
  TCE1.CTRLA = 0x04;      // Prescaler: clk/8
    59d2:	e0 e4       	ldi	r30, 0x40	; 64
    59d4:	fa e0       	ldi	r31, 0x0A	; 10
    59d6:	84 e0       	ldi	r24, 0x04	; 4
    59d8:	80 93 40 0a 	sts	0x0A40, r24
  TCE1.PER   = 39999;     // 100Hz
    59dc:	8f e3       	ldi	r24, 0x3F	; 63
    59de:	9c e9       	ldi	r25, 0x9C	; 156
    59e0:	86 a3       	std	Z+38, r24	; 0x26
    59e2:	97 a3       	std	Z+39, r25	; 0x27
  TCE1.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    59e4:	82 e0       	ldi	r24, 0x02	; 2
    59e6:	86 83       	std	Z+6, r24	; 0x06

  // Set initial default values for analog input voltage ranges.
  s_command_rangeregister[0] = ADC_WRITE | ADC_RANGEREGISTER1
    59e8:	80 ee       	ldi	r24, 0xE0	; 224
    59ea:	9b ea       	ldi	r25, 0xAB	; 171
    59ec:	80 93 1d 24 	sts	0x241D, r24
    59f0:	90 93 1e 24 	sts	0x241E, r25
									| ADC_RR_BITS(0, ADC_RR_VIN_PLUSMINUS5)
									| ADC_RR_BITS(1, ADC_RR_VIN_PLUSMINUS5)
									| ADC_RR_BITS(2, ADC_RR_VIN_PLUS10)
									| ADC_RR_BITS(3, ADC_RR_VIN_PLUS10);

  s_command_rangeregister[1] = ADC_WRITE | ADC_RANGEREGISTER2
    59f4:	80 ee       	ldi	r24, 0xE0	; 224
    59f6:	9b ec       	ldi	r25, 0xCB	; 203
    59f8:	80 93 1f 24 	sts	0x241F, r24
    59fc:	90 93 20 24 	sts	0x2420, r25
									| ADC_RR_BITS(5, ADC_RR_VIN_PLUSMINUS5)
									| ADC_RR_BITS(6, ADC_RR_VIN_PLUS10)
									| ADC_RR_BITS(7, ADC_RR_VIN_PLUS10);

  // Prepare for SPI communication to the ADC7328.
  SPIC.CTRL = 0x58;       // 0101 1000:  Enable Master Mode, Mode 2, clkper/4
    5a00:	18 e5       	ldi	r17, 0x58	; 88
    5a02:	10 93 c0 08 	sts	0x08C0, r17

  // Write the range registers.
  writeCommandToADC(s_command_rangeregister[0]);
    5a06:	80 ee       	ldi	r24, 0xE0	; 224
    5a08:	9b ea       	ldi	r25, 0xAB	; 171
    5a0a:	0e 94 41 2b 	call	0x5682	; 0x5682 <writeCommandToADC>
  writeCommandToADC(s_command_rangeregister[1]);
    5a0e:	80 ee       	ldi	r24, 0xE0	; 224
    5a10:	9b ec       	ldi	r25, 0xCB	; 203
    5a12:	0e 94 41 2b 	call	0x5682	; 0x5682 <writeCommandToADC>


  // sequence register: all channels off.
  writeCommandToADC(ADC_WRITE | ADC_SEQUENCEREGISTER | ADC_SR_NONE);
    5a16:	80 e0       	ldi	r24, 0x00	; 0
    5a18:	90 ee       	ldi	r25, 0xE0	; 224
    5a1a:	0e 94 41 2b 	call	0x5682	; 0x5682 <writeCommandToADC>

  // control register: ch 000, mode = 00, pm = 00, code = 0(twos complement), ref = 1, seq = 00
  writeCommandToADC(ADC_WRITE | ADC_CONTROLREGISTER |
    5a1e:	80 e1       	ldi	r24, 0x10	; 16
    5a20:	90 e8       	ldi	r25, 0x80	; 128
    5a22:	0e 94 41 2b 	call	0x5682	; 0x5682 <writeCommandToADC>
		  	  	  	  ADC_CR_REFINT |
		  	  	  	  ADC_CR_SEQ_NONE);


  // Prepare for SPI communication to the DAC.
  SPID.CTRL = 0x58;       // 0101 1000:  Enable Master Mode, Mode 2, clkper/4
    5a26:	10 93 c0 09 	sts	0x09C0, r17

  // Initialize DAC (SPI master on port D)
  // DAC power control register (all ch + ref powered up)
  PORTD.OUTCLR = PIN4_bm;
    5a2a:	80 e1       	ldi	r24, 0x10	; 16
    5a2c:	e0 e6       	ldi	r30, 0x60	; 96
    5a2e:	f6 e0       	ldi	r31, 0x06	; 6
    5a30:	86 83       	std	Z+6, r24	; 0x06
  SPID.DATA = 0x10;
    5a32:	e0 ec       	ldi	r30, 0xC0	; 192
    5a34:	f9 e0       	ldi	r31, 0x09	; 9
    5a36:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    5a38:	80 91 c2 09 	lds	r24, 0x09C2
    5a3c:	87 ff       	sbrs	r24, 7
    5a3e:	fc cf       	rjmp	.-8      	; 0x5a38 <init_all+0x130>
  SPID.DATA = 0x00;
    5a40:	e0 ec       	ldi	r30, 0xC0	; 192
    5a42:	f9 e0       	ldi	r31, 0x09	; 9
    5a44:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    5a46:	80 91 c2 09 	lds	r24, 0x09C2
    5a4a:	87 ff       	sbrs	r24, 7
    5a4c:	fc cf       	rjmp	.-8      	; 0x5a46 <init_all+0x13e>
  SPID.DATA = 0x1f;
    5a4e:	8f e1       	ldi	r24, 0x1F	; 31
    5a50:	e0 ec       	ldi	r30, 0xC0	; 192
    5a52:	f9 e0       	ldi	r31, 0x09	; 9
    5a54:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    5a56:	80 91 c2 09 	lds	r24, 0x09C2
    5a5a:	87 ff       	sbrs	r24, 7
    5a5c:	fc cf       	rjmp	.-8      	; 0x5a56 <init_all+0x14e>
  PORTD.OUTSET = PIN4_bm;
    5a5e:	e0 e6       	ldi	r30, 0x60	; 96
    5a60:	f6 e0       	ldi	r31, 0x06	; 6
    5a62:	80 e1       	ldi	r24, 0x10	; 16
    5a64:	85 83       	std	Z+5, r24	; 0x05

//DAC output range register (all ch +/-10V range)  
  PORTD.OUTCLR = PIN4_bm;
    5a66:	86 83       	std	Z+6, r24	; 0x06
  SPID.DATA = 0x0c;
    5a68:	8c e0       	ldi	r24, 0x0C	; 12
    5a6a:	e0 ec       	ldi	r30, 0xC0	; 192
    5a6c:	f9 e0       	ldi	r31, 0x09	; 9
    5a6e:	83 83       	std	Z+3, r24	; 0x03
//	SPID.DATA = 0x08; // only ch 0
  loop_until_bit_is_set(SPID.STATUS, 7);
    5a70:	80 91 c2 09 	lds	r24, 0x09C2
    5a74:	87 ff       	sbrs	r24, 7
    5a76:	fc cf       	rjmp	.-8      	; 0x5a70 <init_all+0x168>
  SPID.DATA = 0x00;
    5a78:	e0 ec       	ldi	r30, 0xC0	; 192
    5a7a:	f9 e0       	ldi	r31, 0x09	; 9
    5a7c:	13 82       	std	Z+3, r1	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    5a7e:	80 91 c2 09 	lds	r24, 0x09C2
    5a82:	87 ff       	sbrs	r24, 7
    5a84:	fc cf       	rjmp	.-8      	; 0x5a7e <init_all+0x176>
   SPID.DATA = 0x04;
    5a86:	84 e0       	ldi	r24, 0x04	; 4
    5a88:	e0 ec       	ldi	r30, 0xC0	; 192
    5a8a:	f9 e0       	ldi	r31, 0x09	; 9
    5a8c:	83 83       	std	Z+3, r24	; 0x03
  loop_until_bit_is_set(SPID.STATUS, 7);
    5a8e:	80 91 c2 09 	lds	r24, 0x09C2
    5a92:	87 ff       	sbrs	r24, 7
    5a94:	fc cf       	rjmp	.-8      	; 0x5a8e <init_all+0x186>
  PORTD.OUTSET = PIN4_bm;
    5a96:	80 e1       	ldi	r24, 0x10	; 16
    5a98:	e0 e6       	ldi	r30, 0x60	; 96
    5a9a:	f6 e0       	ldi	r31, 0x06	; 6
    5a9c:	85 83       	std	Z+5, r24	; 0x05

  // initialize the UART
  uart_init();
    5a9e:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <uart_init>
  
  //initialize timer
  timer_init();
    5aa2:	0e 94 b7 48 	call	0x916e	; 0x916e <timer_init>
  
  Handler_Init();
    5aa6:	0e 94 68 38 	call	0x70d0	; 0x70d0 <Handler_Init>

  // Enable interrupts
  PMIC.CTRL = 0x07;       // Enable High, Medium and Low level interrupts
    5aaa:	87 e0       	ldi	r24, 0x07	; 7
    5aac:	e0 ea       	ldi	r30, 0xA0	; 160
    5aae:	f0 e0       	ldi	r31, 0x00	; 0
    5ab0:	82 83       	std	Z+2, r24	; 0x02
  sei();
    5ab2:	78 94       	sei
}
    5ab4:	df 91       	pop	r29
    5ab6:	cf 91       	pop	r28
    5ab8:	1f 91       	pop	r17
    5aba:	08 95       	ret

00005abc <digitalRead>:
uint8_t digitalRead( uint8_t bit )
{
	uint8_t res;

	// ignore read if out-ouf-bounds argument
	if (!(bit & ~3))
    5abc:	98 2f       	mov	r25, r24
    5abe:	9c 7f       	andi	r25, 0xFC	; 252
    5ac0:	59 f4       	brne	.+22     	; 0x5ad8 <digitalRead+0x1c>
		res = (PORTK.IN >> bit) & 0x01;
    5ac2:	20 91 28 07 	lds	r18, 0x0728
    5ac6:	30 e0       	ldi	r19, 0x00	; 0
    5ac8:	02 c0       	rjmp	.+4      	; 0x5ace <digitalRead+0x12>
    5aca:	35 95       	asr	r19
    5acc:	27 95       	ror	r18
    5ace:	8a 95       	dec	r24
    5ad0:	e2 f7       	brpl	.-8      	; 0x5aca <digitalRead+0xe>
    5ad2:	82 2f       	mov	r24, r18
    5ad4:	81 70       	andi	r24, 0x01	; 1
    5ad6:	08 95       	ret
	else
		res = 0;
    5ad8:	80 e0       	ldi	r24, 0x00	; 0

	return(res);
}
    5ada:	08 95       	ret

00005adc <digitalWrite>:

void digitalWrite( uint8_t bit, uint8_t value )
{
	// ignore write if out-ouf-bounds argument
	if (!((bit & ~3) || (value & ~1)))
    5adc:	98 2f       	mov	r25, r24
    5ade:	9c 7f       	andi	r25, 0xFC	; 252
    5ae0:	d1 f4       	brne	.+52     	; 0x5b16 <digitalWrite+0x3a>
    5ae2:	96 2f       	mov	r25, r22
    5ae4:	9e 7f       	andi	r25, 0xFE	; 254
    5ae6:	b9 f4       	brne	.+46     	; 0x5b16 <digitalWrite+0x3a>
	{
		if (value == 1)
    5ae8:	61 30       	cpi	r22, 0x01	; 1
    5aea:	59 f4       	brne	.+22     	; 0x5b02 <digitalWrite+0x26>
			PORTK.OUTSET = 1 << bit;	// set the bit HIGH
    5aec:	21 e0       	ldi	r18, 0x01	; 1
    5aee:	30 e0       	ldi	r19, 0x00	; 0
    5af0:	02 c0       	rjmp	.+4      	; 0x5af6 <digitalWrite+0x1a>
    5af2:	22 0f       	add	r18, r18
    5af4:	33 1f       	adc	r19, r19
    5af6:	8a 95       	dec	r24
    5af8:	e2 f7       	brpl	.-8      	; 0x5af2 <digitalWrite+0x16>
    5afa:	e0 e2       	ldi	r30, 0x20	; 32
    5afc:	f7 e0       	ldi	r31, 0x07	; 7
    5afe:	25 83       	std	Z+5, r18	; 0x05
    5b00:	08 95       	ret
		else
			PORTK.OUTCLR = 1 << bit;	// set the bit LOW
    5b02:	21 e0       	ldi	r18, 0x01	; 1
    5b04:	30 e0       	ldi	r19, 0x00	; 0
    5b06:	02 c0       	rjmp	.+4      	; 0x5b0c <digitalWrite+0x30>
    5b08:	22 0f       	add	r18, r18
    5b0a:	33 1f       	adc	r19, r19
    5b0c:	8a 95       	dec	r24
    5b0e:	e2 f7       	brpl	.-8      	; 0x5b08 <digitalWrite+0x2c>
    5b10:	e0 e2       	ldi	r30, 0x20	; 32
    5b12:	f7 e0       	ldi	r31, 0x07	; 7
    5b14:	26 83       	std	Z+6, r18	; 0x06
    5b16:	08 95       	ret

00005b18 <digitalToggle>:
}

void digitalToggle( uint8_t bit )
{
	// ignore write if out-ouf-bounds argument
	if (!(bit & ~3))
    5b18:	98 2f       	mov	r25, r24
    5b1a:	9c 7f       	andi	r25, 0xFC	; 252
    5b1c:	51 f4       	brne	.+20     	; 0x5b32 <digitalToggle+0x1a>
		PORTK.OUTTGL = 1 << bit;	// toggle the bit
    5b1e:	21 e0       	ldi	r18, 0x01	; 1
    5b20:	30 e0       	ldi	r19, 0x00	; 0
    5b22:	02 c0       	rjmp	.+4      	; 0x5b28 <digitalToggle+0x10>
    5b24:	22 0f       	add	r18, r18
    5b26:	33 1f       	adc	r19, r19
    5b28:	8a 95       	dec	r24
    5b2a:	e2 f7       	brpl	.-8      	; 0x5b24 <digitalToggle+0xc>
    5b2c:	e0 e2       	ldi	r30, 0x20	; 32
    5b2e:	f7 e0       	ldi	r31, 0x07	; 7
    5b30:	27 83       	std	Z+7, r18	; 0x07
    5b32:	08 95       	ret

00005b34 <analogRead>:
uint16_t analogRead( uint8_t ch )
{
	int16_t     w1;
	uint8_t     range;

	if (ch <= 7)
    5b34:	88 30       	cpi	r24, 0x08	; 8
    5b36:	b0 f4       	brcc	.+44     	; 0x5b64 <analogRead+0x30>
	{
		writeCommandToADC(ADC_WRITE | ADC_CONTROLREGISTER
							| ADC_CR_ADDRESS(ch)
    5b38:	90 e0       	ldi	r25, 0x00	; 0
    5b3a:	87 70       	andi	r24, 0x07	; 7
    5b3c:	90 70       	andi	r25, 0x00	; 0
    5b3e:	98 2f       	mov	r25, r24
    5b40:	88 27       	eor	r24, r24
    5b42:	99 0f       	add	r25, r25
    5b44:	99 0f       	add	r25, r25
	int16_t     w1;
	uint8_t     range;

	if (ch <= 7)
	{
		writeCommandToADC(ADC_WRITE | ADC_CONTROLREGISTER
    5b46:	80 61       	ori	r24, 0x10	; 16
    5b48:	90 68       	ori	r25, 0x80	; 128
    5b4a:	0e 94 41 2b 	call	0x5682	; 0x5682 <writeCommandToADC>
							| ADC_CR_REFINT
							| ADC_CR_SEQ_NONE);

		// Do a conversion on the selected channel (no register write)
		// Output data: 3 channel id bits + sign bit + 12 conversion result
		w1 = readConversionFromADC();
    5b4e:	0e 94 a8 2b 	call	0x5750	; 0x5750 <readConversionFromADC>
		range = (s_command_rangeregister[ADC_RR_FROM_CH(ch)] & ADC_RR_CH_MASK(ch)) >> ADC_RR_BIT_FROM_CH(ch);		// Get the voltage range for this channel.

		// Extend the 13th bit to all 16 bits.
		if (w1 & 0x1000)
    5b52:	94 ff       	sbrs	r25, 4
    5b54:	02 c0       	rjmp	.+4      	; 0x5b5a <analogRead+0x26>
			w1 |= 0xF000;
    5b56:	90 6f       	ori	r25, 0xF0	; 240
    5b58:	01 c0       	rjmp	.+2      	; 0x5b5c <analogRead+0x28>
		else
			w1 &= 0x0FFF;
    5b5a:	9f 70       	andi	r25, 0x0F	; 15

		// w1 should now be in the range (-4096,+4095), 12 bits + sign.
		w1 += 4096;
    5b5c:	9c 01       	movw	r18, r24
    5b5e:	20 50       	subi	r18, 0x00	; 0
    5b60:	30 4f       	sbci	r19, 0xF0	; 240
		// w1 should now be in the range (0,+8191), 13 bits unsigned.

		return (uint16_t)w1;
    5b62:	02 c0       	rjmp	.+4      	; 0x5b68 <analogRead+0x34>
	}
	else
		return 0;
    5b64:	20 e0       	ldi	r18, 0x00	; 0
    5b66:	30 e0       	ldi	r19, 0x00	; 0
}
    5b68:	c9 01       	movw	r24, r18
    5b6a:	08 95       	ret

00005b6c <analogWrite>:

void analogWrite(uint8_t ch, int16_t value)
{
	//AD5754 16 bit DAC, it also works for AD5724 12 bit DAC
	//chanel number should from 0 to 3 and value ranges from -32767 to 32767
	if (!(ch & ~3 || value > 32767 || value < -32767))
    5b6c:	98 2f       	mov	r25, r24
    5b6e:	9c 7f       	andi	r25, 0xFC	; 252
    5b70:	11 f5       	brne	.+68     	; 0x5bb6 <analogWrite+0x4a>
    5b72:	90 e8       	ldi	r25, 0x80	; 128
    5b74:	60 30       	cpi	r22, 0x00	; 0
    5b76:	79 07       	cpc	r23, r25
    5b78:	f1 f0       	breq	.+60     	; 0x5bb6 <analogWrite+0x4a>
	{
		/* DAC register*/
		PORTD.OUTCLR = PIN4_bm;        // SPI SS = L
    5b7a:	90 e1       	ldi	r25, 0x10	; 16
    5b7c:	e0 e6       	ldi	r30, 0x60	; 96
    5b7e:	f6 e0       	ldi	r31, 0x06	; 6
    5b80:	96 83       	std	Z+6, r25	; 0x06
		SPID.DATA = 0x00 | (ch & 0x7);
    5b82:	87 70       	andi	r24, 0x07	; 7
    5b84:	e0 ec       	ldi	r30, 0xC0	; 192
    5b86:	f9 e0       	ldi	r31, 0x09	; 9
    5b88:	83 83       	std	Z+3, r24	; 0x03
		loop_until_bit_is_set(SPID.STATUS, 7);
    5b8a:	80 91 c2 09 	lds	r24, 0x09C2
    5b8e:	87 ff       	sbrs	r24, 7
    5b90:	fc cf       	rjmp	.-8      	; 0x5b8a <analogWrite+0x1e>
		SPID.DATA = (uint8_t)((value & 0xff00) >> 8);
    5b92:	e0 ec       	ldi	r30, 0xC0	; 192
    5b94:	f9 e0       	ldi	r31, 0x09	; 9
    5b96:	73 83       	std	Z+3, r23	; 0x03
		loop_until_bit_is_set(SPID.STATUS, 7);
    5b98:	80 91 c2 09 	lds	r24, 0x09C2
    5b9c:	87 ff       	sbrs	r24, 7
    5b9e:	fc cf       	rjmp	.-8      	; 0x5b98 <analogWrite+0x2c>
		SPID.DATA = (uint8_t)(value & 0xff) ;
    5ba0:	e0 ec       	ldi	r30, 0xC0	; 192
    5ba2:	f9 e0       	ldi	r31, 0x09	; 9
    5ba4:	63 83       	std	Z+3, r22	; 0x03
		loop_until_bit_is_set(SPID.STATUS, 7);
    5ba6:	80 91 c2 09 	lds	r24, 0x09C2
    5baa:	87 ff       	sbrs	r24, 7
    5bac:	fc cf       	rjmp	.-8      	; 0x5ba6 <analogWrite+0x3a>
		PORTD.OUTSET = PIN4_bm;        // SPI SS = H
    5bae:	80 e1       	ldi	r24, 0x10	; 16
    5bb0:	e0 e6       	ldi	r30, 0x60	; 96
    5bb2:	f6 e0       	ldi	r31, 0x06	; 6
    5bb4:	85 83       	std	Z+5, r24	; 0x05
    5bb6:	08 95       	ret

00005bb8 <test_DIO>:
	}
}
 
void test_DIO(uint8_t ch)
{ 
    5bb8:	1f 93       	push	r17
    5bba:	cf 93       	push	r28
    5bbc:	df 93       	push	r29
    5bbe:	18 2f       	mov	r17, r24
    5bc0:	c0 e0       	ldi	r28, 0x00	; 0
    5bc2:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t k;

	for (k = 0; k < 60; k++)
	{
		//flip all 4 bits
		digitalToggle(0);
    5bc4:	80 e0       	ldi	r24, 0x00	; 0
    5bc6:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <digitalToggle>
		digitalToggle(1);
    5bca:	81 e0       	ldi	r24, 0x01	; 1
    5bcc:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <digitalToggle>
		digitalToggle(2);
    5bd0:	82 e0       	ldi	r24, 0x02	; 2
    5bd2:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <digitalToggle>
		digitalToggle(3);
    5bd6:	83 e0       	ldi	r24, 0x03	; 3
    5bd8:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <digitalToggle>
    5bdc:	8f ef       	ldi	r24, 0xFF	; 255
    5bde:	93 ec       	ldi	r25, 0xC3	; 195
    5be0:	a9 e0       	ldi	r26, 0x09	; 9
    5be2:	81 50       	subi	r24, 0x01	; 1
    5be4:	90 40       	sbci	r25, 0x00	; 0
    5be6:	a0 40       	sbci	r26, 0x00	; 0
    5be8:	e1 f7       	brne	.-8      	; 0x5be2 <test_DIO+0x2a>
    5bea:	00 c0       	rjmp	.+0      	; 0x5bec <test_DIO+0x34>
    5bec:	00 00       	nop

		_delay_ms(100);			
		ADC_val = analogRead(ch); // +/-5v range, 1v = 408
    5bee:	81 2f       	mov	r24, r17
    5bf0:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <analogRead>
    5bf4:	bc 01       	movw	r22, r24
    5bf6:	8f ef       	ldi	r24, 0xFF	; 255
    5bf8:	93 ec       	ldi	r25, 0xC3	; 195
    5bfa:	a9 e0       	ldi	r26, 0x09	; 9
    5bfc:	81 50       	subi	r24, 0x01	; 1
    5bfe:	90 40       	sbci	r25, 0x00	; 0
    5c00:	a0 40       	sbci	r26, 0x00	; 0
    5c02:	e1 f7       	brne	.-8      	; 0x5bfc <test_DIO+0x44>
    5c04:	00 c0       	rjmp	.+0      	; 0x5c06 <test_DIO+0x4e>
    5c06:	00 00       	nop
		_delay_ms(100);			
		analogWrite(1, ADC_val); // +/- 5v range, 1v = 408
    5c08:	81 e0       	ldi	r24, 0x01	; 1
    5c0a:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <analogWrite>

		if (k % 2)
    5c0e:	c0 ff       	sbrs	r28, 0
    5c10:	03 c0       	rjmp	.+6      	; 0x5c18 <test_DIO+0x60>
			ledToggle(1);  //toggle LED, once per square wave pulse
    5c12:	81 e0       	ldi	r24, 0x01	; 1
    5c14:	0e 94 2b 2c 	call	0x5856	; 0x5856 <ledToggle>
    5c18:	21 96       	adiw	r28, 0x01	; 1
void test_DIO(uint8_t ch)
{ 
	int16_t ADC_val;
	uint8_t k;

	for (k = 0; k < 60; k++)
    5c1a:	cc 33       	cpi	r28, 0x3C	; 60
    5c1c:	d1 05       	cpc	r29, r1
    5c1e:	91 f6       	brne	.-92     	; 0x5bc4 <test_DIO+0xc>
		analogWrite(1, ADC_val); // +/- 5v range, 1v = 408

		if (k % 2)
			ledToggle(1);  //toggle LED, once per square wave pulse
	}
}
    5c20:	df 91       	pop	r29
    5c22:	cf 91       	pop	r28
    5c24:	1f 91       	pop	r17
    5c26:	08 95       	ret

00005c28 <SystemReset>:

void SystemReset(void)
{
	//issue software reset
	CCPWrite(&RST.CTRL, RST_SWRST_bm);
    5c28:	89 e7       	ldi	r24, 0x79	; 121
    5c2a:	90 e0       	ldi	r25, 0x00	; 0
    5c2c:	61 e0       	ldi	r22, 0x01	; 1
    5c2e:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <CCPWrite>
}
    5c32:	08 95       	ret

00005c34 <test_ADC>:

void test_ADC(uint8_t ch)
{
    5c34:	a1 e0       	ldi	r26, 0x01	; 1
    5c36:	b0 e0       	ldi	r27, 0x00	; 0
    5c38:	e0 e2       	ldi	r30, 0x20	; 32
    5c3a:	fe e2       	ldi	r31, 0x2E	; 46
    5c3c:	0c 94 c4 4b 	jmp	0x9788	; 0x9788 <__prologue_saves__+0x14>
    5c40:	e8 2e       	mov	r14, r24
    5c42:	3e e1       	ldi	r19, 0x1E	; 30
    5c44:	f3 2e       	mov	r15, r19
{
	//issue software reset
	CCPWrite(&RST.CTRL, RST_SWRST_bm);
}

void test_ADC(uint8_t ch)
    5c46:	00 ea       	ldi	r16, 0xA0	; 160
    5c48:	1f e0       	ldi	r17, 0x0F	; 15
    5c4a:	25 c0       	rjmp	.+74     	; 0x5c96 <test_ADC+0x62>
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
		{	if (j < 100)
    5c4c:	24 36       	cpi	r18, 0x64	; 100
    5c4e:	10 f4       	brcc	.+4      	; 0x5c54 <test_ADC+0x20>
    5c50:	b6 01       	movw	r22, r12
    5c52:	03 c0       	rjmp	.+6      	; 0x5c5a <test_ADC+0x26>
{
	//issue software reset
	CCPWrite(&RST.CTRL, RST_SWRST_bm);
}

void test_ADC(uint8_t ch)
    5c54:	b8 01       	movw	r22, r16
    5c56:	6c 19       	sub	r22, r12
    5c58:	7d 09       	sbc	r23, r13
		{	if (j < 100)
				X_dac_val = 20*(uint16_t)j; 	// build the up part of the triangle wave
			else
				X_dac_val = 20*(uint16_t)(100 + (100 - j)); // build the down part of the triangle wave
 	
            analogWrite(0, X_dac_val);
    5c5a:	80 e0       	ldi	r24, 0x00	; 0
    5c5c:	29 83       	std	Y+1, r18	; 0x01
    5c5e:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <analogWrite>
			ADC_val = analogRead(ch);   //1v = 102 -> ~5 TIMES THE GAIN OF OL
    5c62:	8e 2d       	mov	r24, r14
    5c64:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <analogRead>
    5c68:	bc 01       	movw	r22, r24
            analogWrite(1, ADC_val);
    5c6a:	81 e0       	ldi	r24, 0x01	; 1
    5c6c:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <analogWrite>
    5c70:	8f e7       	ldi	r24, 0x7F	; 127
    5c72:	9e e3       	ldi	r25, 0x3E	; 62
    5c74:	01 97       	sbiw	r24, 0x01	; 1
    5c76:	f1 f7       	brne	.-4      	; 0x5c74 <test_ADC+0x40>
    5c78:	00 c0       	rjmp	.+0      	; 0x5c7a <test_ADC+0x46>
    5c7a:	00 00       	nop
	int16_t ADC_val;
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
	{
		for (j = 0; j < 200; j++)
    5c7c:	29 81       	ldd	r18, Y+1	; 0x01
    5c7e:	2f 5f       	subi	r18, 0xFF	; 255
    5c80:	e4 e1       	ldi	r30, 0x14	; 20
    5c82:	f0 e0       	ldi	r31, 0x00	; 0
    5c84:	ce 0e       	add	r12, r30
    5c86:	df 1e       	adc	r13, r31
    5c88:	28 3c       	cpi	r18, 0xC8	; 200
    5c8a:	01 f7       	brne	.-64     	; 0x5c4c <test_ADC+0x18>
            analogWrite(0, X_dac_val);
			ADC_val = analogRead(ch);   //1v = 102 -> ~5 TIMES THE GAIN OF OL
            analogWrite(1, ADC_val);
			_delay_ms(2);			
		}
		ledToggle(1);  //toggle LED, once per triangle wave pulse
    5c8c:	81 e0       	ldi	r24, 0x01	; 1
    5c8e:	0e 94 2b 2c 	call	0x5856	; 0x5856 <ledToggle>
    5c92:	fa 94       	dec	r15
{
	int16_t X_dac_val;
	int16_t ADC_val;
	uint8_t j, k;
		
	for (k = 0; k < 30; k++)
    5c94:	21 f0       	breq	.+8      	; 0x5c9e <test_ADC+0x6a>
	//issue software reset
	CCPWrite(&RST.CTRL, RST_SWRST_bm);
}

void test_ADC(uint8_t ch)
{
    5c96:	cc 24       	eor	r12, r12
    5c98:	dd 24       	eor	r13, r13
    5c9a:	20 e0       	ldi	r18, 0x00	; 0
    5c9c:	d7 cf       	rjmp	.-82     	; 0x5c4c <test_ADC+0x18>
            analogWrite(1, ADC_val);
			_delay_ms(2);			
		}
		ledToggle(1);  //toggle LED, once per triangle wave pulse
	}	 	
}
    5c9e:	21 96       	adiw	r28, 0x01	; 1
    5ca0:	e8 e0       	ldi	r30, 0x08	; 8
    5ca2:	0c 94 dd 4b 	jmp	0x97ba	; 0x97ba <__epilogue_restores__+0x14>

00005ca6 <progPage>:

void progPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff)
{
    5ca6:	a3 e0       	ldi	r26, 0x03	; 3
    5ca8:	b0 e0       	ldi	r27, 0x00	; 0
    5caa:	e9 e5       	ldi	r30, 0x59	; 89
    5cac:	fe e2       	ldi	r31, 0x2E	; 46
    5cae:	0c 94 c6 4b 	jmp	0x978c	; 0x978c <__prologue_saves__+0x18>
    5cb2:	7c 01       	movw	r14, r24
    xputs(PSTR("#"));
    5cb4:	84 ec       	ldi	r24, 0xC4	; 196
    5cb6:	93 e1       	ldi	r25, 0x13	; 19
    5cb8:	29 83       	std	Y+1, r18	; 0x01
    5cba:	4a 83       	std	Y+2, r20	; 0x02
    5cbc:	5b 83       	std	Y+3, r21	; 0x03
    5cbe:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
//  xprintf(PSTR("flash page write: 0x%lX 0x%X\n"), paddr, psize);
    buff[0] = 'B';
    5cc2:	82 e4       	ldi	r24, 0x42	; 66
    5cc4:	d8 01       	movw	r26, r16
    5cc6:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    5cc8:	5b 81       	ldd	r21, Y+3	; 0x03
    5cca:	11 96       	adiw	r26, 0x01	; 1
    5ccc:	5c 93       	st	X, r21
    5cce:	11 97       	sbiw	r26, 0x01	; 1
    buff[2] = (uint8_t)(paddr & 0xff);
    5cd0:	4a 81       	ldd	r20, Y+2	; 0x02
    5cd2:	12 96       	adiw	r26, 0x02	; 2
    5cd4:	4c 93       	st	X, r20
    5cd6:	12 97       	sbiw	r26, 0x02	; 2
    buff[3] = psize>>1;
    5cd8:	29 81       	ldd	r18, Y+1	; 0x01
    5cda:	82 2f       	mov	r24, r18
    5cdc:	86 95       	lsr	r24
    5cde:	13 96       	adiw	r26, 0x03	; 3
    5ce0:	8c 93       	st	X, r24
    5ce2:	13 97       	sbiw	r26, 0x03	; 3
    buff[4] = 'F';
    5ce4:	86 e4       	ldi	r24, 0x46	; 70
    5ce6:	14 96       	adiw	r26, 0x04	; 4
    5ce8:	8c 93       	st	X, r24
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], psize+HEADER_SIZE, 0);
    5cea:	2b 5f       	subi	r18, 0xFB	; 251
    5cec:	c7 01       	movw	r24, r14
    5cee:	60 e7       	ldi	r22, 0x70	; 112
    5cf0:	a8 01       	movw	r20, r16
    5cf2:	00 e0       	ldi	r16, 0x00	; 0
    5cf4:	0e 94 af 39 	call	0x735e	; 0x735e <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY)
    5cf8:	f7 01       	movw	r30, r14
    5cfa:	85 85       	ldd	r24, Z+13	; 0x0d
    5cfc:	88 23       	and	r24, r24
    5cfe:	e1 f7       	brne	.-8      	; 0x5cf8 <progPage+0x52>
    {
        /* Wait until transaction is complete. */
        //xputs(PSTR("I am waiting.\n"));
    }
    if (twi->result != TWIM_RESULT_OK)
    5d00:	86 85       	ldd	r24, Z+14	; 0x0e
    5d02:	81 30       	cpi	r24, 0x01	; 1
    5d04:	b1 f0       	breq	.+44     	; 0x5d32 <progPage+0x8c>
    {
        xprintf(PSTR("Bad flash write, result = %u\n"), twi->result);
    5d06:	26 85       	ldd	r18, Z+14	; 0x0e
    5d08:	00 d0       	rcall	.+0      	; 0x5d0a <progPage+0x64>
    5d0a:	0f 92       	push	r0
    5d0c:	ed b7       	in	r30, 0x3d	; 61
    5d0e:	fe b7       	in	r31, 0x3e	; 62
    5d10:	31 96       	adiw	r30, 0x01	; 1
    5d12:	86 ea       	ldi	r24, 0xA6	; 166
    5d14:	93 e1       	ldi	r25, 0x13	; 19
    5d16:	ad b7       	in	r26, 0x3d	; 61
    5d18:	be b7       	in	r27, 0x3e	; 62
    5d1a:	11 96       	adiw	r26, 0x01	; 1
    5d1c:	8d 93       	st	X+, r24
    5d1e:	9c 93       	st	X, r25
    5d20:	12 97       	sbiw	r26, 0x02	; 2
    5d22:	22 83       	std	Z+2, r18	; 0x02
    5d24:	13 82       	std	Z+3, r1	; 0x03
    5d26:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    5d2a:	0f 90       	pop	r0
    5d2c:	0f 90       	pop	r0
    5d2e:	0f 90       	pop	r0
    5d30:	0f 90       	pop	r0
    }
}
    5d32:	23 96       	adiw	r28, 0x03	; 3
    5d34:	e6 e0       	ldi	r30, 0x06	; 6
    5d36:	0c 94 df 4b 	jmp	0x97be	; 0x97be <__epilogue_restores__+0x18>

00005d3a <readPage>:

void readPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff)
{
    5d3a:	af 92       	push	r10
    5d3c:	bf 92       	push	r11
    5d3e:	df 92       	push	r13
    5d40:	ef 92       	push	r14
    5d42:	ff 92       	push	r15
    5d44:	0f 93       	push	r16
    5d46:	1f 93       	push	r17
    5d48:	df 93       	push	r29
    5d4a:	cf 93       	push	r28
    5d4c:	0f 92       	push	r0
    5d4e:	0f 92       	push	r0
    5d50:	cd b7       	in	r28, 0x3d	; 61
    5d52:	de b7       	in	r29, 0x3e	; 62
    5d54:	7c 01       	movw	r14, r24
    5d56:	d2 2e       	mov	r13, r18
    5d58:	58 01       	movw	r10, r16
    uint8_t i;
    
    xputs(PSTR("#"));
    5d5a:	84 ea       	ldi	r24, 0xA4	; 164
    5d5c:	93 e1       	ldi	r25, 0x13	; 19
    5d5e:	49 83       	std	Y+1, r20	; 0x01
    5d60:	5a 83       	std	Y+2, r21	; 0x02
    5d62:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
    buff[0] = 'g';
    5d66:	87 e6       	ldi	r24, 0x67	; 103
    5d68:	d8 01       	movw	r26, r16
    5d6a:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    5d6c:	5a 81       	ldd	r21, Y+2	; 0x02
    5d6e:	11 96       	adiw	r26, 0x01	; 1
    5d70:	5c 93       	st	X, r21
    5d72:	11 97       	sbiw	r26, 0x01	; 1
    buff[2] = (uint8_t)(paddr & 0xff);
    5d74:	49 81       	ldd	r20, Y+1	; 0x01
    5d76:	12 96       	adiw	r26, 0x02	; 2
    5d78:	4c 93       	st	X, r20
    5d7a:	12 97       	sbiw	r26, 0x02	; 2
    buff[3] = psize>>1;
    5d7c:	8d 2d       	mov	r24, r13
    5d7e:	86 95       	lsr	r24
    5d80:	13 96       	adiw	r26, 0x03	; 3
    5d82:	8c 93       	st	X, r24
    5d84:	13 97       	sbiw	r26, 0x03	; 3
    buff[4] = 'F';
    5d86:	86 e4       	ldi	r24, 0x46	; 70
    5d88:	14 96       	adiw	r26, 0x04	; 4
    5d8a:	8c 93       	st	X, r24
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    5d8c:	c7 01       	movw	r24, r14
    5d8e:	60 e7       	ldi	r22, 0x70	; 112
    5d90:	a8 01       	movw	r20, r16
    5d92:	25 e0       	ldi	r18, 0x05	; 5
    5d94:	0d 2d       	mov	r16, r13
    5d96:	0e 94 af 39 	call	0x735e	; 0x735e <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY)
    5d9a:	f7 01       	movw	r30, r14
    5d9c:	85 85       	ldd	r24, Z+13	; 0x0d
    5d9e:	88 23       	and	r24, r24
    5da0:	e1 f7       	brne	.-8      	; 0x5d9a <readPage+0x60>
    {
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK)
    5da2:	86 85       	ldd	r24, Z+14	; 0x0e
    5da4:	81 30       	cpi	r24, 0x01	; 1
    5da6:	b1 f0       	breq	.+44     	; 0x5dd4 <readPage+0x9a>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    5da8:	26 85       	ldd	r18, Z+14	; 0x0e
    5daa:	00 d0       	rcall	.+0      	; 0x5dac <readPage+0x72>
    5dac:	0f 92       	push	r0
    5dae:	ed b7       	in	r30, 0x3d	; 61
    5db0:	fe b7       	in	r31, 0x3e	; 62
    5db2:	31 96       	adiw	r30, 0x01	; 1
    5db4:	87 e8       	ldi	r24, 0x87	; 135
    5db6:	93 e1       	ldi	r25, 0x13	; 19
    5db8:	ad b7       	in	r26, 0x3d	; 61
    5dba:	be b7       	in	r27, 0x3e	; 62
    5dbc:	11 96       	adiw	r26, 0x01	; 1
    5dbe:	8d 93       	st	X+, r24
    5dc0:	9c 93       	st	X, r25
    5dc2:	12 97       	sbiw	r26, 0x02	; 2
    5dc4:	22 83       	std	Z+2, r18	; 0x02
    5dc6:	13 82       	std	Z+3, r1	; 0x03
    5dc8:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    5dcc:	0f 90       	pop	r0
    5dce:	0f 90       	pop	r0
    5dd0:	0f 90       	pop	r0
    5dd2:	0f 90       	pop	r0
    {
        xprintf(PSTR("Bad flash write, result = %u\n"), twi->result);
    }
}

void readPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff)
    5dd4:	a5 01       	movw	r20, r10
    5dd6:	4b 5f       	subi	r20, 0xFB	; 251
    5dd8:	5f 4f       	sbci	r21, 0xFF	; 255
    5dda:	80 e0       	ldi	r24, 0x00	; 0
    5ddc:	90 e0       	ldi	r25, 0x00	; 0
    5dde:	0c c0       	rjmp	.+24     	; 0x5df8 <readPage+0xbe>
    }
    if (twi->result != TWIM_RESULT_OK)
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    
    for (i = 0; i < psize; i++)
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    5de0:	d7 01       	movw	r26, r14
    5de2:	15 96       	adiw	r26, 0x05	; 5
    5de4:	ed 91       	ld	r30, X+
    5de6:	fc 91       	ld	r31, X
    5de8:	16 97       	sbiw	r26, 0x06	; 6
    5dea:	e8 0f       	add	r30, r24
    5dec:	f9 1f       	adc	r31, r25
    5dee:	20 81       	ld	r18, Z
    5df0:	fa 01       	movw	r30, r20
    5df2:	21 93       	st	Z+, r18
    5df4:	af 01       	movw	r20, r30
    5df6:	01 96       	adiw	r24, 0x01	; 1
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK)
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    
    for (i = 0; i < psize; i++)
    5df8:	8d 15       	cp	r24, r13
    5dfa:	90 f3       	brcs	.-28     	; 0x5de0 <readPage+0xa6>
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
}
    5dfc:	0f 90       	pop	r0
    5dfe:	0f 90       	pop	r0
    5e00:	cf 91       	pop	r28
    5e02:	df 91       	pop	r29
    5e04:	1f 91       	pop	r17
    5e06:	0f 91       	pop	r16
    5e08:	ff 90       	pop	r15
    5e0a:	ef 90       	pop	r14
    5e0c:	df 90       	pop	r13
    5e0e:	bf 90       	pop	r11
    5e10:	af 90       	pop	r10
    5e12:	08 95       	ret

00005e14 <verifyPage>:


int verifyPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff)
{
    5e14:	af 92       	push	r10
    5e16:	bf 92       	push	r11
    5e18:	df 92       	push	r13
    5e1a:	ef 92       	push	r14
    5e1c:	ff 92       	push	r15
    5e1e:	0f 93       	push	r16
    5e20:	1f 93       	push	r17
    5e22:	df 93       	push	r29
    5e24:	cf 93       	push	r28
    5e26:	0f 92       	push	r0
    5e28:	0f 92       	push	r0
    5e2a:	cd b7       	in	r28, 0x3d	; 61
    5e2c:	de b7       	in	r29, 0x3e	; 62
    5e2e:	7c 01       	movw	r14, r24
    5e30:	d2 2e       	mov	r13, r18
    5e32:	58 01       	movw	r10, r16
    uint8_t match, i;
    
    xputs(PSTR("#"));
    5e34:	85 e8       	ldi	r24, 0x85	; 133
    5e36:	93 e1       	ldi	r25, 0x13	; 19
    5e38:	49 83       	std	Y+1, r20	; 0x01
    5e3a:	5a 83       	std	Y+2, r21	; 0x02
    5e3c:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
    buff[0] = 'g';
    5e40:	87 e6       	ldi	r24, 0x67	; 103
    5e42:	d8 01       	movw	r26, r16
    5e44:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    5e46:	5a 81       	ldd	r21, Y+2	; 0x02
    5e48:	11 96       	adiw	r26, 0x01	; 1
    5e4a:	5c 93       	st	X, r21
    5e4c:	11 97       	sbiw	r26, 0x01	; 1
    buff[2] = (uint8_t)(paddr & 0xff);
    5e4e:	49 81       	ldd	r20, Y+1	; 0x01
    5e50:	12 96       	adiw	r26, 0x02	; 2
    5e52:	4c 93       	st	X, r20
    5e54:	12 97       	sbiw	r26, 0x02	; 2
    buff[3] = psize>>1;
    5e56:	8d 2d       	mov	r24, r13
    5e58:	86 95       	lsr	r24
    5e5a:	13 96       	adiw	r26, 0x03	; 3
    5e5c:	8c 93       	st	X, r24
    5e5e:	13 97       	sbiw	r26, 0x03	; 3
    buff[4] = 'F';
    5e60:	86 e4       	ldi	r24, 0x46	; 70
    5e62:	14 96       	adiw	r26, 0x04	; 4
    5e64:	8c 93       	st	X, r24
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    5e66:	c7 01       	movw	r24, r14
    5e68:	60 e7       	ldi	r22, 0x70	; 112
    5e6a:	a8 01       	movw	r20, r16
    5e6c:	25 e0       	ldi	r18, 0x05	; 5
    5e6e:	0d 2d       	mov	r16, r13
    5e70:	0e 94 af 39 	call	0x735e	; 0x735e <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY)
    5e74:	f7 01       	movw	r30, r14
    5e76:	85 85       	ldd	r24, Z+13	; 0x0d
    5e78:	88 23       	and	r24, r24
    5e7a:	e1 f7       	brne	.-8      	; 0x5e74 <verifyPage+0x60>
    {
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK)
    5e7c:	86 85       	ldd	r24, Z+14	; 0x0e
    5e7e:	81 30       	cpi	r24, 0x01	; 1
    5e80:	b1 f0       	breq	.+44     	; 0x5eae <verifyPage+0x9a>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    5e82:	26 85       	ldd	r18, Z+14	; 0x0e
    5e84:	00 d0       	rcall	.+0      	; 0x5e86 <verifyPage+0x72>
    5e86:	0f 92       	push	r0
    5e88:	ed b7       	in	r30, 0x3d	; 61
    5e8a:	fe b7       	in	r31, 0x3e	; 62
    5e8c:	31 96       	adiw	r30, 0x01	; 1
    5e8e:	88 e6       	ldi	r24, 0x68	; 104
    5e90:	93 e1       	ldi	r25, 0x13	; 19
    5e92:	ad b7       	in	r26, 0x3d	; 61
    5e94:	be b7       	in	r27, 0x3e	; 62
    5e96:	11 96       	adiw	r26, 0x01	; 1
    5e98:	8d 93       	st	X+, r24
    5e9a:	9c 93       	st	X, r25
    5e9c:	12 97       	sbiw	r26, 0x02	; 2
    5e9e:	22 83       	std	Z+2, r18	; 0x02
    5ea0:	13 82       	std	Z+3, r1	; 0x03
    5ea2:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    5ea6:	0f 90       	pop	r0
    5ea8:	0f 90       	pop	r0
    5eaa:	0f 90       	pop	r0
    5eac:	0f 90       	pop	r0
    for (i = 0; i < psize; i++)
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
}


int verifyPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff)
    5eae:	b5 01       	movw	r22, r10
    5eb0:	6b 5f       	subi	r22, 0xFB	; 251
    5eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    }
    if (twi->result != TWIM_RESULT_OK)
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);

    match = 1;
    for (i = 0; i < psize; i++)
    5eb4:	20 e0       	ldi	r18, 0x00	; 0
    5eb6:	30 e0       	ldi	r19, 0x00	; 0
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK)
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);

    match = 1;
    5eb8:	81 e0       	ldi	r24, 0x01	; 1
    for (i = 0; i < psize; i++)
    5eba:	0f c0       	rjmp	.+30     	; 0x5eda <verifyPage+0xc6>
    {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    5ebc:	fb 01       	movw	r30, r22
    5ebe:	91 91       	ld	r25, Z+
    5ec0:	bf 01       	movw	r22, r30
    5ec2:	d7 01       	movw	r26, r14
    5ec4:	15 96       	adiw	r26, 0x05	; 5
    5ec6:	ed 91       	ld	r30, X+
    5ec8:	fc 91       	ld	r31, X
    5eca:	16 97       	sbiw	r26, 0x06	; 6
    5ecc:	e2 0f       	add	r30, r18
    5ece:	f3 1f       	adc	r31, r19
    5ed0:	40 81       	ld	r20, Z
    5ed2:	49 13       	cpse	r20, r25
            match = 0;
    5ed4:	80 e0       	ldi	r24, 0x00	; 0
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);

    match = 1;
    for (i = 0; i < psize; i++)
    {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    5ed6:	2f 5f       	subi	r18, 0xFF	; 255
    5ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    }
    if (twi->result != TWIM_RESULT_OK)
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);

    match = 1;
    for (i = 0; i < psize; i++)
    5eda:	2d 15       	cp	r18, r13
    5edc:	78 f3       	brcs	.-34     	; 0x5ebc <verifyPage+0xa8>
    {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
            match = 0;
    }
    return match;
}
    5ede:	90 e0       	ldi	r25, 0x00	; 0
    5ee0:	0f 90       	pop	r0
    5ee2:	0f 90       	pop	r0
    5ee4:	cf 91       	pop	r28
    5ee6:	df 91       	pop	r29
    5ee8:	1f 91       	pop	r17
    5eea:	0f 91       	pop	r16
    5eec:	ff 90       	pop	r15
    5eee:	ef 90       	pop	r14
    5ef0:	df 90       	pop	r13
    5ef2:	bf 90       	pop	r11
    5ef4:	af 90       	pop	r10
    5ef6:	08 95       	ret

00005ef8 <progEEPage>:

void progEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff)
{
    5ef8:	a3 e0       	ldi	r26, 0x03	; 3
    5efa:	b0 e0       	ldi	r27, 0x00	; 0
    5efc:	e2 e8       	ldi	r30, 0x82	; 130
    5efe:	ff e2       	ldi	r31, 0x2F	; 47
    5f00:	0c 94 c6 4b 	jmp	0x978c	; 0x978c <__prologue_saves__+0x18>
    5f04:	7c 01       	movw	r14, r24
    xputs(PSTR("#"));
    5f06:	86 e6       	ldi	r24, 0x66	; 102
    5f08:	93 e1       	ldi	r25, 0x13	; 19
    5f0a:	29 83       	std	Y+1, r18	; 0x01
    5f0c:	4a 83       	std	Y+2, r20	; 0x02
    5f0e:	5b 83       	std	Y+3, r21	; 0x03
    5f10:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
    buff[0] = 'B';
    5f14:	82 e4       	ldi	r24, 0x42	; 66
    5f16:	d8 01       	movw	r26, r16
    5f18:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    5f1a:	5b 81       	ldd	r21, Y+3	; 0x03
    5f1c:	11 96       	adiw	r26, 0x01	; 1
    5f1e:	5c 93       	st	X, r21
    5f20:	11 97       	sbiw	r26, 0x01	; 1
    buff[2] = (uint8_t)(paddr & 0xff);
    5f22:	4a 81       	ldd	r20, Y+2	; 0x02
    5f24:	12 96       	adiw	r26, 0x02	; 2
    5f26:	4c 93       	st	X, r20
    5f28:	12 97       	sbiw	r26, 0x02	; 2
    buff[3] = psize;
    5f2a:	29 81       	ldd	r18, Y+1	; 0x01
    5f2c:	13 96       	adiw	r26, 0x03	; 3
    5f2e:	2c 93       	st	X, r18
    5f30:	13 97       	sbiw	r26, 0x03	; 3
    buff[4] = 'E';
    5f32:	85 e4       	ldi	r24, 0x45	; 69
    5f34:	14 96       	adiw	r26, 0x04	; 4
    5f36:	8c 93       	st	X, r24
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], psize+HEADER_SIZE, 0);
    5f38:	2b 5f       	subi	r18, 0xFB	; 251
    5f3a:	c7 01       	movw	r24, r14
    5f3c:	60 e7       	ldi	r22, 0x70	; 112
    5f3e:	a8 01       	movw	r20, r16
    5f40:	00 e0       	ldi	r16, 0x00	; 0
    5f42:	0e 94 af 39 	call	0x735e	; 0x735e <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY)
    5f46:	f7 01       	movw	r30, r14
    5f48:	85 85       	ldd	r24, Z+13	; 0x0d
    5f4a:	88 23       	and	r24, r24
    5f4c:	e1 f7       	brne	.-8      	; 0x5f46 <progEEPage+0x4e>
    {
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK)
    5f4e:	86 85       	ldd	r24, Z+14	; 0x0e
    5f50:	81 30       	cpi	r24, 0x01	; 1
    5f52:	b1 f0       	breq	.+44     	; 0x5f80 <progEEPage+0x88>
        xprintf(PSTR("Bad eeprom write, result = %u\n"), twi->result);
    5f54:	26 85       	ldd	r18, Z+14	; 0x0e
    5f56:	00 d0       	rcall	.+0      	; 0x5f58 <progEEPage+0x60>
    5f58:	0f 92       	push	r0
    5f5a:	ed b7       	in	r30, 0x3d	; 61
    5f5c:	fe b7       	in	r31, 0x3e	; 62
    5f5e:	31 96       	adiw	r30, 0x01	; 1
    5f60:	87 e4       	ldi	r24, 0x47	; 71
    5f62:	93 e1       	ldi	r25, 0x13	; 19
    5f64:	ad b7       	in	r26, 0x3d	; 61
    5f66:	be b7       	in	r27, 0x3e	; 62
    5f68:	11 96       	adiw	r26, 0x01	; 1
    5f6a:	8d 93       	st	X+, r24
    5f6c:	9c 93       	st	X, r25
    5f6e:	12 97       	sbiw	r26, 0x02	; 2
    5f70:	22 83       	std	Z+2, r18	; 0x02
    5f72:	13 82       	std	Z+3, r1	; 0x03
    5f74:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    5f78:	0f 90       	pop	r0
    5f7a:	0f 90       	pop	r0
    5f7c:	0f 90       	pop	r0
    5f7e:	0f 90       	pop	r0

}
    5f80:	23 96       	adiw	r28, 0x03	; 3
    5f82:	e6 e0       	ldi	r30, 0x06	; 6
    5f84:	0c 94 df 4b 	jmp	0x97be	; 0x97be <__epilogue_restores__+0x18>

00005f88 <readEEPage>:

void readEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff)
{
    5f88:	af 92       	push	r10
    5f8a:	bf 92       	push	r11
    5f8c:	df 92       	push	r13
    5f8e:	ef 92       	push	r14
    5f90:	ff 92       	push	r15
    5f92:	0f 93       	push	r16
    5f94:	1f 93       	push	r17
    5f96:	df 93       	push	r29
    5f98:	cf 93       	push	r28
    5f9a:	0f 92       	push	r0
    5f9c:	0f 92       	push	r0
    5f9e:	cd b7       	in	r28, 0x3d	; 61
    5fa0:	de b7       	in	r29, 0x3e	; 62
    5fa2:	7c 01       	movw	r14, r24
    5fa4:	d2 2e       	mov	r13, r18
    5fa6:	58 01       	movw	r10, r16
    uint8_t i;
    
    xputs(PSTR("#"));
    5fa8:	85 e4       	ldi	r24, 0x45	; 69
    5faa:	93 e1       	ldi	r25, 0x13	; 19
    5fac:	49 83       	std	Y+1, r20	; 0x01
    5fae:	5a 83       	std	Y+2, r21	; 0x02
    5fb0:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
    buff[0] = 'g';
    5fb4:	87 e6       	ldi	r24, 0x67	; 103
    5fb6:	d8 01       	movw	r26, r16
    5fb8:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    5fba:	5a 81       	ldd	r21, Y+2	; 0x02
    5fbc:	11 96       	adiw	r26, 0x01	; 1
    5fbe:	5c 93       	st	X, r21
    5fc0:	11 97       	sbiw	r26, 0x01	; 1
    buff[2] = (uint8_t)(paddr & 0xff);
    5fc2:	49 81       	ldd	r20, Y+1	; 0x01
    5fc4:	12 96       	adiw	r26, 0x02	; 2
    5fc6:	4c 93       	st	X, r20
    5fc8:	12 97       	sbiw	r26, 0x02	; 2
    buff[3] = psize;
    5fca:	13 96       	adiw	r26, 0x03	; 3
    5fcc:	dc 92       	st	X, r13
    5fce:	13 97       	sbiw	r26, 0x03	; 3
    buff[4] = 'E';
    5fd0:	85 e4       	ldi	r24, 0x45	; 69
    5fd2:	14 96       	adiw	r26, 0x04	; 4
    5fd4:	8c 93       	st	X, r24
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    5fd6:	c7 01       	movw	r24, r14
    5fd8:	60 e7       	ldi	r22, 0x70	; 112
    5fda:	a8 01       	movw	r20, r16
    5fdc:	25 e0       	ldi	r18, 0x05	; 5
    5fde:	0d 2d       	mov	r16, r13
    5fe0:	0e 94 af 39 	call	0x735e	; 0x735e <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY)
    5fe4:	f7 01       	movw	r30, r14
    5fe6:	85 85       	ldd	r24, Z+13	; 0x0d
    5fe8:	88 23       	and	r24, r24
    5fea:	e1 f7       	brne	.-8      	; 0x5fe4 <readEEPage+0x5c>
    {
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK)
    5fec:	86 85       	ldd	r24, Z+14	; 0x0e
    5fee:	81 30       	cpi	r24, 0x01	; 1
    5ff0:	b1 f0       	breq	.+44     	; 0x601e <readEEPage+0x96>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    5ff2:	26 85       	ldd	r18, Z+14	; 0x0e
    5ff4:	00 d0       	rcall	.+0      	; 0x5ff6 <readEEPage+0x6e>
    5ff6:	0f 92       	push	r0
    5ff8:	ed b7       	in	r30, 0x3d	; 61
    5ffa:	fe b7       	in	r31, 0x3e	; 62
    5ffc:	31 96       	adiw	r30, 0x01	; 1
    5ffe:	88 e2       	ldi	r24, 0x28	; 40
    6000:	93 e1       	ldi	r25, 0x13	; 19
    6002:	ad b7       	in	r26, 0x3d	; 61
    6004:	be b7       	in	r27, 0x3e	; 62
    6006:	11 96       	adiw	r26, 0x01	; 1
    6008:	8d 93       	st	X+, r24
    600a:	9c 93       	st	X, r25
    600c:	12 97       	sbiw	r26, 0x02	; 2
    600e:	22 83       	std	Z+2, r18	; 0x02
    6010:	13 82       	std	Z+3, r1	; 0x03
    6012:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    6016:	0f 90       	pop	r0
    6018:	0f 90       	pop	r0
    601a:	0f 90       	pop	r0
    601c:	0f 90       	pop	r0
    if (twi->result != TWIM_RESULT_OK)
        xprintf(PSTR("Bad eeprom write, result = %u\n"), twi->result);

}

void readEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff)
    601e:	a5 01       	movw	r20, r10
    6020:	4b 5f       	subi	r20, 0xFB	; 251
    6022:	5f 4f       	sbci	r21, 0xFF	; 255
    6024:	80 e0       	ldi	r24, 0x00	; 0
    6026:	90 e0       	ldi	r25, 0x00	; 0
    6028:	0c c0       	rjmp	.+24     	; 0x6042 <readEEPage+0xba>
    }
    if (twi->result != TWIM_RESULT_OK)
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    
    for (i = 0; i < psize; i++)
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);
    602a:	d7 01       	movw	r26, r14
    602c:	15 96       	adiw	r26, 0x05	; 5
    602e:	ed 91       	ld	r30, X+
    6030:	fc 91       	ld	r31, X
    6032:	16 97       	sbiw	r26, 0x06	; 6
    6034:	e8 0f       	add	r30, r24
    6036:	f9 1f       	adc	r31, r25
    6038:	20 81       	ld	r18, Z
    603a:	fa 01       	movw	r30, r20
    603c:	21 93       	st	Z+, r18
    603e:	af 01       	movw	r20, r30
    6040:	01 96       	adiw	r24, 0x01	; 1
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK)
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    
    for (i = 0; i < psize; i++)
    6042:	8d 15       	cp	r24, r13
    6044:	90 f3       	brcs	.-28     	; 0x602a <readEEPage+0xa2>
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);

}
    6046:	0f 90       	pop	r0
    6048:	0f 90       	pop	r0
    604a:	cf 91       	pop	r28
    604c:	df 91       	pop	r29
    604e:	1f 91       	pop	r17
    6050:	0f 91       	pop	r16
    6052:	ff 90       	pop	r15
    6054:	ef 90       	pop	r14
    6056:	df 90       	pop	r13
    6058:	bf 90       	pop	r11
    605a:	af 90       	pop	r10
    605c:	08 95       	ret

0000605e <verifyEEPage>:

int verifyEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    605e:	af 92       	push	r10
    6060:	bf 92       	push	r11
    6062:	df 92       	push	r13
    6064:	ef 92       	push	r14
    6066:	ff 92       	push	r15
    6068:	0f 93       	push	r16
    606a:	1f 93       	push	r17
    606c:	df 93       	push	r29
    606e:	cf 93       	push	r28
    6070:	0f 92       	push	r0
    6072:	0f 92       	push	r0
    6074:	cd b7       	in	r28, 0x3d	; 61
    6076:	de b7       	in	r29, 0x3e	; 62
    6078:	7c 01       	movw	r14, r24
    607a:	d2 2e       	mov	r13, r18
    607c:	58 01       	movw	r10, r16
    uint8_t match, i;
    
    xputs(PSTR("#"));
    607e:	86 e2       	ldi	r24, 0x26	; 38
    6080:	93 e1       	ldi	r25, 0x13	; 19
    6082:	49 83       	std	Y+1, r20	; 0x01
    6084:	5a 83       	std	Y+2, r21	; 0x02
    6086:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
    buff[0] = 'g';
    608a:	87 e6       	ldi	r24, 0x67	; 103
    608c:	d8 01       	movw	r26, r16
    608e:	8c 93       	st	X, r24
    buff[1] = (uint8_t)((paddr>>8) & 0xff);
    6090:	5a 81       	ldd	r21, Y+2	; 0x02
    6092:	11 96       	adiw	r26, 0x01	; 1
    6094:	5c 93       	st	X, r21
    6096:	11 97       	sbiw	r26, 0x01	; 1
    buff[2] = (uint8_t)(paddr & 0xff);
    6098:	49 81       	ldd	r20, Y+1	; 0x01
    609a:	12 96       	adiw	r26, 0x02	; 2
    609c:	4c 93       	st	X, r20
    609e:	12 97       	sbiw	r26, 0x02	; 2
    buff[3] = psize;
    60a0:	13 96       	adiw	r26, 0x03	; 3
    60a2:	dc 92       	st	X, r13
    60a4:	13 97       	sbiw	r26, 0x03	; 3
    buff[4] = 'E';
    60a6:	85 e4       	ldi	r24, 0x45	; 69
    60a8:	14 96       	adiw	r26, 0x04	; 4
    60aa:	8c 93       	st	X, r24
    TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &buff[0], HEADER_SIZE, psize);
    60ac:	c7 01       	movw	r24, r14
    60ae:	60 e7       	ldi	r22, 0x70	; 112
    60b0:	a8 01       	movw	r20, r16
    60b2:	25 e0       	ldi	r18, 0x05	; 5
    60b4:	0d 2d       	mov	r16, r13
    60b6:	0e 94 af 39 	call	0x735e	; 0x735e <TWI_MasterWriteRead>
    while (twi->status != TWIM_STATUS_READY)
    60ba:	f7 01       	movw	r30, r14
    60bc:	85 85       	ldd	r24, Z+13	; 0x0d
    60be:	88 23       	and	r24, r24
    60c0:	e1 f7       	brne	.-8      	; 0x60ba <verifyEEPage+0x5c>
    {
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK)
    60c2:	86 85       	ldd	r24, Z+14	; 0x0e
    60c4:	81 30       	cpi	r24, 0x01	; 1
    60c6:	b1 f0       	breq	.+44     	; 0x60f4 <verifyEEPage+0x96>
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);
    60c8:	26 85       	ldd	r18, Z+14	; 0x0e
    60ca:	00 d0       	rcall	.+0      	; 0x60cc <verifyEEPage+0x6e>
    60cc:	0f 92       	push	r0
    60ce:	ed b7       	in	r30, 0x3d	; 61
    60d0:	fe b7       	in	r31, 0x3e	; 62
    60d2:	31 96       	adiw	r30, 0x01	; 1
    60d4:	89 e0       	ldi	r24, 0x09	; 9
    60d6:	93 e1       	ldi	r25, 0x13	; 19
    60d8:	ad b7       	in	r26, 0x3d	; 61
    60da:	be b7       	in	r27, 0x3e	; 62
    60dc:	11 96       	adiw	r26, 0x01	; 1
    60de:	8d 93       	st	X+, r24
    60e0:	9c 93       	st	X, r25
    60e2:	12 97       	sbiw	r26, 0x02	; 2
    60e4:	22 83       	std	Z+2, r18	; 0x02
    60e6:	13 82       	std	Z+3, r1	; 0x03
    60e8:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    60ec:	0f 90       	pop	r0
    60ee:	0f 90       	pop	r0
    60f0:	0f 90       	pop	r0
    60f2:	0f 90       	pop	r0
    for (i = 0; i < psize; i++)
        buff[i+HEADER_SIZE] = *(twi->PreadData + i);

}

int verifyEEPage(TWI_Master_t *twi, uint32_t paddr, uint8_t psize, uint8_t *buff) {
    60f4:	b5 01       	movw	r22, r10
    60f6:	6b 5f       	subi	r22, 0xFB	; 251
    60f8:	7f 4f       	sbci	r23, 0xFF	; 255
    }
    if (twi->result != TWIM_RESULT_OK)
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);

    match = 1;
    for (i = 0; i < psize; i++)
    60fa:	20 e0       	ldi	r18, 0x00	; 0
    60fc:	30 e0       	ldi	r19, 0x00	; 0
        /* Wait until transaction is complete. */
    }
    if (twi->result != TWIM_RESULT_OK)
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);

    match = 1;
    60fe:	81 e0       	ldi	r24, 0x01	; 1
    for (i = 0; i < psize; i++)
    6100:	0f c0       	rjmp	.+30     	; 0x6120 <verifyEEPage+0xc2>
    {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    6102:	fb 01       	movw	r30, r22
    6104:	91 91       	ld	r25, Z+
    6106:	bf 01       	movw	r22, r30
    6108:	d7 01       	movw	r26, r14
    610a:	15 96       	adiw	r26, 0x05	; 5
    610c:	ed 91       	ld	r30, X+
    610e:	fc 91       	ld	r31, X
    6110:	16 97       	sbiw	r26, 0x06	; 6
    6112:	e2 0f       	add	r30, r18
    6114:	f3 1f       	adc	r31, r19
    6116:	40 81       	ld	r20, Z
    6118:	49 13       	cpse	r20, r25
            match = 0;
    611a:	80 e0       	ldi	r24, 0x00	; 0
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);

    match = 1;
    for (i = 0; i < psize; i++)
    {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
    611c:	2f 5f       	subi	r18, 0xFF	; 255
    611e:	3f 4f       	sbci	r19, 0xFF	; 255
    }
    if (twi->result != TWIM_RESULT_OK)
        xprintf(PSTR("Bad flash read, result = %u\n"), twi->result);

    match = 1;
    for (i = 0; i < psize; i++)
    6120:	2d 15       	cp	r18, r13
    6122:	78 f3       	brcs	.-34     	; 0x6102 <verifyEEPage+0xa4>
    {
        if (*(twi->PreadData + i) != buff[i+HEADER_SIZE])
            match = 0;
    }
    return match;
}
    6124:	90 e0       	ldi	r25, 0x00	; 0
    6126:	0f 90       	pop	r0
    6128:	0f 90       	pop	r0
    612a:	cf 91       	pop	r28
    612c:	df 91       	pop	r29
    612e:	1f 91       	pop	r17
    6130:	0f 91       	pop	r16
    6132:	ff 90       	pop	r15
    6134:	ef 90       	pop	r14
    6136:	df 90       	pop	r13
    6138:	bf 90       	pop	r11
    613a:	af 90       	pop	r10
    613c:	08 95       	ret

0000613e <flash_panel>:

void flash_panel(uint8_t panel_num)
{
    613e:	af e8       	ldi	r26, 0x8F	; 143
    6140:	b2 e0       	ldi	r27, 0x02	; 2
    6142:	e5 ea       	ldi	r30, 0xA5	; 165
    6144:	f0 e3       	ldi	r31, 0x30	; 48
    6146:	0c 94 ba 4b 	jmp	0x9774	; 0x9774 <__prologue_saves__>
    614a:	c8 2e       	mov	r12, r24
    uint16_t len, i;
    TWI_Master_t *twi;
    uint8_t ch;
    uint8_t flashBuff[256];
    
    ch = g_ch_from_panel[panel_num];
    614c:	08 2f       	mov	r16, r24
    614e:	10 e0       	ldi	r17, 0x00	; 0
    6150:	f8 01       	movw	r30, r16
    6152:	e8 50       	subi	r30, 0x08	; 8
    6154:	fb 4d       	sbci	r31, 0xDB	; 219
    6156:	e0 81       	ld	r30, Z
    if (ch != 0)
    6158:	ee 23       	and	r30, r30
    615a:	09 f4       	brne	.+2      	; 0x615e <flash_panel+0x20>
    615c:	f5 c2       	rjmp	.+1514   	; 0x6748 <flash_panel+0x60a>
    615e:	e1 50       	subi	r30, 0x01	; 1
    6160:	e4 30       	cpi	r30, 0x04	; 4
    6162:	40 f4       	brcc	.+16     	; 0x6174 <flash_panel+0x36>
    6164:	f0 e0       	ldi	r31, 0x00	; 0
    6166:	ee 0f       	add	r30, r30
    6168:	ff 1f       	adc	r31, r31
    616a:	e6 57       	subi	r30, 0x76	; 118
    616c:	fc 4d       	sbci	r31, 0xDC	; 220
    616e:	e0 80       	ld	r14, Z
    6170:	f1 80       	ldd	r15, Z+1	; 0x01
    6172:	04 c0       	rjmp	.+8      	; 0x617c <flash_panel+0x3e>
    6174:	32 e0       	ldi	r19, 0x02	; 2
    6176:	e3 2e       	mov	r14, r19
    6178:	38 e2       	ldi	r19, 0x28	; 40
    617a:	f3 2e       	mov	r15, r19
                
                break;
        }
        
        // open the hex file for reading
        res = f_open(&g_file_flash, panelFlash, FA_OPEN_EXISTING | FA_READ);
    617c:	80 e2       	ldi	r24, 0x20	; 32
    617e:	98 e2       	ldi	r25, 0x28	; 40
    6180:	6f e7       	ldi	r22, 0x7F	; 127
    6182:	73 e2       	ldi	r23, 0x23	; 35
    6184:	41 e0       	ldi	r20, 0x01	; 1
    6186:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <f_open>
    618a:	a8 2e       	mov	r10, r24
        if (res != FR_OK)
    618c:	88 23       	and	r24, r24
    618e:	49 f0       	breq	.+18     	; 0x61a2 <flash_panel+0x64>
        {
            // could'n open the file
            xputs(PSTR("Error f_open in panel.hex.\n"));
    6190:	8d ee       	ldi	r24, 0xED	; 237
    6192:	92 e1       	ldi	r25, 0x12	; 18
    6194:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
            put_rc(res);
    6198:	8a 2d       	mov	r24, r10
    619a:	90 e0       	ldi	r25, 0x00	; 0
    619c:	0e 94 22 2a 	call	0x5444	; 0x5444 <put_rc>
    61a0:	52 c0       	rjmp	.+164    	; 0x6246 <flash_panel+0x108>
        }
        else
        {
            // file open OK, get the panel address
            //paddr = panel_num;
            if (panel_num >= 128)
    61a2:	c7 fe       	sbrs	r12, 7
    61a4:	0f c0       	rjmp	.+30     	; 0x61c4 <flash_panel+0x86>
            {
                // use hardware reset
                PORTD.OUTCLR = 0x04;
    61a6:	e0 e6       	ldi	r30, 0x60	; 96
    61a8:	f6 e0       	ldi	r31, 0x06	; 6
    61aa:	84 e0       	ldi	r24, 0x04	; 4
    61ac:	86 83       	std	Z+6, r24	; 0x06
    61ae:	2f ef       	ldi	r18, 0xFF	; 255
    61b0:	39 ef       	ldi	r19, 0xF9	; 249
    61b2:	40 e0       	ldi	r20, 0x00	; 0
    61b4:	21 50       	subi	r18, 0x01	; 1
    61b6:	30 40       	sbci	r19, 0x00	; 0
    61b8:	40 40       	sbci	r20, 0x00	; 0
    61ba:	e1 f7       	brne	.-8      	; 0x61b4 <flash_panel+0x76>
    61bc:	00 c0       	rjmp	.+0      	; 0x61be <flash_panel+0x80>
    61be:	00 00       	nop
                _delay_ms(10);
                PORTD.OUTSET = 0x04;
    61c0:	85 83       	std	Z+5, r24	; 0x05
    61c2:	41 c0       	rjmp	.+130    	; 0x6246 <flash_panel+0x108>
            }
            else
            {
                // use cmd reset (assumes panel firmware already loaded)
                xprintf(PSTR("flash panel %u.\n"), panel_num);
    61c4:	00 d0       	rcall	.+0      	; 0x61c6 <flash_panel+0x88>
    61c6:	0f 92       	push	r0
    61c8:	2c ed       	ldi	r18, 0xDC	; 220
    61ca:	32 e1       	ldi	r19, 0x12	; 18
    61cc:	ad b7       	in	r26, 0x3d	; 61
    61ce:	be b7       	in	r27, 0x3e	; 62
    61d0:	11 96       	adiw	r26, 0x01	; 1
    61d2:	2d 93       	st	X+, r18
    61d4:	3c 93       	st	X, r19
    61d6:	12 97       	sbiw	r26, 0x02	; 2
    61d8:	13 96       	adiw	r26, 0x03	; 3
    61da:	0d 93       	st	X+, r16
    61dc:	1c 93       	st	X, r17
    61de:	14 97       	sbiw	r26, 0x04	; 4
    61e0:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                pagebuff[0] = 0x00;
    61e4:	19 82       	std	Y+1, r1	; 0x01
                pagebuff[1] = 0x01;
    61e6:	81 e0       	ldi	r24, 0x01	; 1
    61e8:	8a 83       	std	Y+2, r24	; 0x02
                TWI_MasterWriteRead(twi, panel_num, &pagebuff[0], 2, 0);
    61ea:	0f 90       	pop	r0
    61ec:	0f 90       	pop	r0
    61ee:	0f 90       	pop	r0
    61f0:	0f 90       	pop	r0
    61f2:	c7 01       	movw	r24, r14
    61f4:	6c 2d       	mov	r22, r12
    61f6:	ae 01       	movw	r20, r28
    61f8:	4f 5f       	subi	r20, 0xFF	; 255
    61fa:	5f 4f       	sbci	r21, 0xFF	; 255
    61fc:	22 e0       	ldi	r18, 0x02	; 2
    61fe:	00 e0       	ldi	r16, 0x00	; 0
    6200:	0e 94 af 39 	call	0x735e	; 0x735e <TWI_MasterWriteRead>
                while (twi->status != TWIM_STATUS_READY)
    6204:	f7 01       	movw	r30, r14
    6206:	85 85       	ldd	r24, Z+13	; 0x0d
    6208:	88 23       	and	r24, r24
    620a:	e1 f7       	brne	.-8      	; 0x6204 <flash_panel+0xc6>
                {
                    /* Wait until transaction is complete. */
                }
                if (twi->result != TWIM_RESULT_OK)
    620c:	d7 01       	movw	r26, r14
    620e:	1e 96       	adiw	r26, 0x0e	; 14
    6210:	8c 91       	ld	r24, X
    6212:	1e 97       	sbiw	r26, 0x0e	; 14
    6214:	81 30       	cpi	r24, 0x01	; 1
    6216:	b9 f0       	breq	.+46     	; 0x6246 <flash_panel+0x108>
                    xprintf(PSTR("Bad panel reset, result = %u\n"), twi->result);
    6218:	1e 96       	adiw	r26, 0x0e	; 14
    621a:	2c 91       	ld	r18, X
    621c:	00 d0       	rcall	.+0      	; 0x621e <flash_panel+0xe0>
    621e:	0f 92       	push	r0
    6220:	ed b7       	in	r30, 0x3d	; 61
    6222:	fe b7       	in	r31, 0x3e	; 62
    6224:	31 96       	adiw	r30, 0x01	; 1
    6226:	8e eb       	ldi	r24, 0xBE	; 190
    6228:	92 e1       	ldi	r25, 0x12	; 18
    622a:	ad b7       	in	r26, 0x3d	; 61
    622c:	be b7       	in	r27, 0x3e	; 62
    622e:	11 96       	adiw	r26, 0x01	; 1
    6230:	8d 93       	st	X+, r24
    6232:	9c 93       	st	X, r25
    6234:	12 97       	sbiw	r26, 0x02	; 2
    6236:	22 83       	std	Z+2, r18	; 0x02
    6238:	13 82       	std	Z+3, r1	; 0x03
    623a:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    623e:	0f 90       	pop	r0
    6240:	0f 90       	pop	r0
    6242:	0f 90       	pop	r0
    6244:	0f 90       	pop	r0
    6246:	2f ef       	ldi	r18, 0xFF	; 255
    6248:	33 ed       	ldi	r19, 0xD3	; 211
    624a:	40 e3       	ldi	r20, 0x30	; 48
    624c:	21 50       	subi	r18, 0x01	; 1
    624e:	30 40       	sbci	r19, 0x00	; 0
    6250:	40 40       	sbci	r20, 0x00	; 0
    6252:	e1 f7       	brne	.-8      	; 0x624c <flash_panel+0x10e>
    6254:	00 c0       	rjmp	.+0      	; 0x6256 <flash_panel+0x118>
    6256:	00 00       	nop
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
    6258:	81 eb       	ldi	r24, 0xB1	; 177
    625a:	92 e1       	ldi	r25, 0x12	; 18
    625c:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
            //TWI_MasterWriteRead(&twi1, panel_num, &buff[0], psize+HEADER_SIZE, 0);
        }
        
        // program the panel
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
    6260:	44 24       	eor	r4, r4
    6262:	55 24       	eor	r5, r5
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
    6264:	88 24       	eor	r8, r8
        
        // program the panel
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
    6266:	aa 24       	eor	r10, r10
        }
        
        // program the panel
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
    6268:	0f ef       	ldi	r16, 0xFF	; 255
    626a:	1f ef       	ldi	r17, 0xFF	; 255
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &g_file_flash) != NULL)
    626c:	26 e8       	ldi	r18, 0x86	; 134
    626e:	c2 2e       	mov	r12, r18
    6270:	d1 2c       	mov	r13, r1
    6272:	cc 0e       	add	r12, r28
    6274:	dd 1e       	adc	r13, r29
            len = strlen(flashBuff);
            if (flashBuff[len-1] == '\n')
                flashBuff[--len] = 0;
            if (flashBuff[0] != ':')
                continue;
            rc = ihex_readrec(&ihex, flashBuff);
    6276:	96 e8       	ldi	r25, 0x86	; 134
    6278:	69 2e       	mov	r6, r25
    627a:	91 e0       	ldi	r25, 0x01	; 1
    627c:	79 2e       	mov	r7, r25
    627e:	6c 0e       	add	r6, r28
    6280:	7d 1e       	adc	r7, r29
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++)
    6282:	a3 01       	movw	r20, r6
    6284:	4c 5f       	subi	r20, 0xFC	; 252
    6286:	5f 4f       	sbci	r21, 0xFF	; 255
    6288:	c3 57       	subi	r28, 0x73	; 115
    628a:	dd 4f       	sbci	r29, 0xFD	; 253
    628c:	48 83       	st	Y, r20
    628e:	59 83       	std	Y+1, r21	; 0x01
    6290:	cd 58       	subi	r28, 0x8D	; 141
    6292:	d2 40       	sbci	r29, 0x02	; 2
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &g_file_flash) != NULL)
    6294:	e4 c0       	rjmp	.+456    	; 0x645e <flash_panel+0x320>
        {
            lineno++;
    6296:	08 94       	sec
    6298:	41 1c       	adc	r4, r1
    629a:	51 1c       	adc	r5, r1
            len = strlen(flashBuff);
    629c:	f6 01       	movw	r30, r12
    629e:	01 90       	ld	r0, Z+
    62a0:	00 20       	and	r0, r0
    62a2:	e9 f7       	brne	.-6      	; 0x629e <flash_panel+0x160>
    62a4:	31 97       	sbiw	r30, 0x01	; 1
    62a6:	ec 19       	sub	r30, r12
    62a8:	fd 09       	sbc	r31, r13
            if (flashBuff[len-1] == '\n')
    62aa:	ec 0d       	add	r30, r12
    62ac:	fd 1d       	adc	r31, r13
    62ae:	82 91       	ld	r24, -Z
    62b0:	8a 30       	cpi	r24, 0x0A	; 10
    62b2:	09 f4       	brne	.+2      	; 0x62b6 <flash_panel+0x178>
                flashBuff[--len] = 0;
    62b4:	10 82       	st	Z, r1
            if (flashBuff[0] != ':')
    62b6:	d6 01       	movw	r26, r12
    62b8:	8c 91       	ld	r24, X
    62ba:	8a 33       	cpi	r24, 0x3A	; 58
    62bc:	09 f0       	breq	.+2      	; 0x62c0 <flash_panel+0x182>
    62be:	cd c0       	rjmp	.+410    	; 0x645a <flash_panel+0x31c>
                continue;
            rc = ihex_readrec(&ihex, flashBuff);
    62c0:	c3 01       	movw	r24, r6
    62c2:	b6 01       	movw	r22, r12
    62c4:	0e 94 47 2a 	call	0x548e	; 0x548e <ihex_readrec>
            if (rc < 0)
            {
                xprintf(PSTR("invalid record at line %d of panel.hex.\n"), lineno);
                break;
            }
            else if (rc != ihex.cksum)
    62c8:	c6 57       	subi	r28, 0x76	; 118
    62ca:	dd 4f       	sbci	r29, 0xFD	; 253
    62cc:	98 81       	ld	r25, Y
    62ce:	ca 58       	subi	r28, 0x8A	; 138
    62d0:	d2 40       	sbci	r29, 0x02	; 2
    62d2:	89 17       	cp	r24, r25
    62d4:	69 f1       	breq	.+90     	; 0x6330 <flash_panel+0x1f2>
            {
                xprintf(PSTR("ERROR: checksum mismatch at line %d of panel.hex.\n"), lineno);
    62d6:	00 d0       	rcall	.+0      	; 0x62d8 <flash_panel+0x19a>
    62d8:	0f 92       	push	r0
    62da:	2e e7       	ldi	r18, 0x7E	; 126
    62dc:	32 e1       	ldi	r19, 0x12	; 18
    62de:	ed b7       	in	r30, 0x3d	; 61
    62e0:	fe b7       	in	r31, 0x3e	; 62
    62e2:	21 83       	std	Z+1, r18	; 0x01
    62e4:	32 83       	std	Z+2, r19	; 0x02
    62e6:	43 82       	std	Z+3, r4	; 0x03
    62e8:	54 82       	std	Z+4, r5	; 0x04
    62ea:	c1 57       	subi	r28, 0x71	; 113
    62ec:	dd 4f       	sbci	r29, 0xFD	; 253
    62ee:	88 83       	st	Y, r24
    62f0:	cf 58       	subi	r28, 0x8F	; 143
    62f2:	d2 40       	sbci	r29, 0x02	; 2
    62f4:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    62f8:	0f 92       	push	r0
    62fa:	0f 92       	push	r0
    62fc:	ed b7       	in	r30, 0x3d	; 61
    62fe:	fe b7       	in	r31, 0x3e	; 62
    6300:	31 96       	adiw	r30, 0x01	; 1
    6302:	23 e5       	ldi	r18, 0x53	; 83
    6304:	32 e1       	ldi	r19, 0x12	; 18
    6306:	ad b7       	in	r26, 0x3d	; 61
    6308:	be b7       	in	r27, 0x3e	; 62
    630a:	11 96       	adiw	r26, 0x01	; 1
    630c:	2d 93       	st	X+, r18
    630e:	3c 93       	st	X, r19
    6310:	12 97       	sbiw	r26, 0x02	; 2
    6312:	c6 57       	subi	r28, 0x76	; 118
    6314:	dd 4f       	sbci	r29, 0xFD	; 253
    6316:	98 81       	ld	r25, Y
    6318:	ca 58       	subi	r28, 0x8A	; 138
    631a:	d2 40       	sbci	r29, 0x02	; 2
    631c:	92 83       	std	Z+2, r25	; 0x02
    631e:	13 82       	std	Z+3, r1	; 0x03
    6320:	c1 57       	subi	r28, 0x71	; 113
    6322:	dd 4f       	sbci	r29, 0xFD	; 253
    6324:	88 81       	ld	r24, Y
    6326:	cf 58       	subi	r28, 0x8F	; 143
    6328:	d2 40       	sbci	r29, 0x02	; 2
    632a:	84 83       	std	Z+4, r24	; 0x04
    632c:	15 82       	std	Z+5, r1	; 0x05
    632e:	8d c0       	rjmp	.+282    	; 0x644a <flash_panel+0x30c>
                break;
            }
            else
            {
                if (ihex.rectyp == 0)
    6330:	d3 01       	movw	r26, r6
    6332:	13 96       	adiw	r26, 0x03	; 3
    6334:	2c 91       	ld	r18, X
    6336:	13 97       	sbiw	r26, 0x03	; 3
    6338:	22 23       	and	r18, r18
    633a:	09 f0       	breq	.+2      	; 0x633e <flash_panel+0x200>
    633c:	5e c0       	rjmp	.+188    	; 0x63fa <flash_panel+0x2bc>
                {
                    // data record
                    nextaddr = ihex.loadofs;
    633e:	11 96       	adiw	r26, 0x01	; 1
    6340:	ed 91       	ld	r30, X+
    6342:	fc 91       	ld	r31, X
    6344:	12 97       	sbiw	r26, 0x02	; 2
    6346:	c5 57       	subi	r28, 0x75	; 117
    6348:	dd 4f       	sbci	r29, 0xFD	; 253
    634a:	e8 83       	st	Y, r30
    634c:	f9 83       	std	Y+1, r31	; 0x01
    634e:	cb 58       	subi	r28, 0x8B	; 139
    6350:	d2 40       	sbci	r29, 0x02	; 2
                    if ((nextaddr >> PAGE_SIZE_SHIFT) != page)
    6352:	1f 01       	movw	r2, r30
    6354:	22 0c       	add	r2, r2
    6356:	23 2c       	mov	r2, r3
    6358:	22 1c       	adc	r2, r2
    635a:	33 08       	sbc	r3, r3
    635c:	31 94       	neg	r3
    635e:	20 16       	cp	r2, r16
    6360:	31 06       	cpc	r3, r17
    6362:	e1 f0       	breq	.+56     	; 0x639c <flash_panel+0x25e>
                    {
                        // this record is for a different page - check if we need to flush the current page
                        if (pagestartaddr != pageendaddr)
    6364:	a8 14       	cp	r10, r8
    6366:	91 f0       	breq	.+36     	; 0x638c <flash_panel+0x24e>
                        {
                            // flush data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
    6368:	16 95       	lsr	r17
    636a:	10 2f       	mov	r17, r16
    636c:	00 27       	eor	r16, r16
    636e:	17 95       	ror	r17
    6370:	07 95       	ror	r16
    6372:	0a 0d       	add	r16, r10
    6374:	11 1d       	adc	r17, r1
    6376:	a8 01       	movw	r20, r16
    6378:	60 e0       	ldi	r22, 0x00	; 0
    637a:	70 e0       	ldi	r23, 0x00	; 0
                            psize = pageendaddr - pagestartaddr;
    637c:	28 2d       	mov	r18, r8
    637e:	2a 19       	sub	r18, r10
                            progPage(twi, paddr, psize, &pagebuff[0]);
    6380:	c7 01       	movw	r24, r14
    6382:	8e 01       	movw	r16, r28
    6384:	0f 5f       	subi	r16, 0xFF	; 255
    6386:	1f 4f       	sbci	r17, 0xFF	; 255
    6388:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <progPage>
                        }
                        page = (nextaddr >> PAGE_SIZE_SHIFT);
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    638c:	c5 57       	subi	r28, 0x75	; 117
    638e:	dd 4f       	sbci	r29, 0xFD	; 253
    6390:	88 80       	ld	r8, Y
    6392:	cb 58       	subi	r28, 0x8B	; 139
    6394:	d2 40       	sbci	r29, 0x02	; 2
    6396:	ff e7       	ldi	r31, 0x7F	; 127
    6398:	8f 22       	and	r8, r31
    639a:	a8 2c       	mov	r10, r8
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
    639c:	c5 57       	subi	r28, 0x75	; 117
    639e:	dd 4f       	sbci	r29, 0xFD	; 253
    63a0:	48 81       	ld	r20, Y
    63a2:	cb 58       	subi	r28, 0x8B	; 139
    63a4:	d2 40       	sbci	r29, 0x02	; 2
    63a6:	4f 77       	andi	r20, 0x7F	; 127
    63a8:	4a 15       	cp	r20, r10
    63aa:	08 f4       	brcc	.+2      	; 0x63ae <flash_panel+0x270>
    63ac:	a4 2e       	mov	r10, r20
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++)
    63ae:	d3 01       	movw	r26, r6
    63b0:	5c 91       	ld	r21, X
    63b2:	c3 57       	subi	r28, 0x73	; 115
    63b4:	dd 4f       	sbci	r29, 0xFD	; 253
    63b6:	a8 81       	ld	r26, Y
    63b8:	b9 81       	ldd	r27, Y+1	; 0x01
    63ba:	cd 58       	subi	r28, 0x8D	; 141
    63bc:	d2 40       	sbci	r29, 0x02	; 2
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    63be:	e4 2f       	mov	r30, r20
    63c0:	f0 e0       	ldi	r31, 0x00	; 0
    63c2:	35 96       	adiw	r30, 0x05	; 5
            match = 0;
    }
    return match;
}

void flash_panel(uint8_t panel_num)
    63c4:	21 e0       	ldi	r18, 0x01	; 1
    63c6:	30 e0       	ldi	r19, 0x00	; 0
    63c8:	2c 0f       	add	r18, r28
    63ca:	3d 1f       	adc	r19, r29
    63cc:	e2 0f       	add	r30, r18
    63ce:	f3 1f       	adc	r31, r19
    63d0:	cd 01       	movw	r24, r26
    63d2:	85 0f       	add	r24, r21
    63d4:	91 1d       	adc	r25, r1
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++)
    63d6:	02 c0       	rjmp	.+4      	; 0x63dc <flash_panel+0x29e>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    63d8:	2d 91       	ld	r18, X+
    63da:	21 93       	st	Z+, r18
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;
                    for (i=0; i<ihex.reclen; i++)
    63dc:	a8 17       	cp	r26, r24
    63de:	b9 07       	cpc	r27, r25
    63e0:	d9 f7       	brne	.-10     	; 0x63d8 <flash_panel+0x29a>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];

                    if ((pageoffset + ihex.reclen) > pageendaddr)
    63e2:	85 2f       	mov	r24, r21
    63e4:	90 e0       	ldi	r25, 0x00	; 0
    63e6:	84 0f       	add	r24, r20
    63e8:	91 1d       	adc	r25, r1
    63ea:	28 2d       	mov	r18, r8
    63ec:	30 e0       	ldi	r19, 0x00	; 0
    63ee:	28 17       	cp	r18, r24
    63f0:	39 07       	cpc	r19, r25
    63f2:	a4 f5       	brge	.+104    	; 0x645c <flash_panel+0x31e>
                        pageendaddr = pageoffset+ihex.reclen;
    63f4:	84 2e       	mov	r8, r20
    63f6:	85 0e       	add	r8, r21
    63f8:	31 c0       	rjmp	.+98     	; 0x645c <flash_panel+0x31e>

                }
                else if (ihex.rectyp == 1)
    63fa:	21 30       	cpi	r18, 0x01	; 1
    63fc:	a9 f4       	brne	.+42     	; 0x6428 <flash_panel+0x2ea>
                {
                    // end of file record
                    if (pagestartaddr != pageendaddr)
    63fe:	a8 14       	cp	r10, r8
    6400:	c1 f1       	breq	.+112    	; 0x6472 <flash_panel+0x334>
                    {
                        // flush the data in page buffer
                        paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
    6402:	16 95       	lsr	r17
    6404:	10 2f       	mov	r17, r16
    6406:	00 27       	eor	r16, r16
    6408:	17 95       	ror	r17
    640a:	07 95       	ror	r16
    640c:	0a 0d       	add	r16, r10
    640e:	11 1d       	adc	r17, r1
    6410:	a8 01       	movw	r20, r16
    6412:	60 e0       	ldi	r22, 0x00	; 0
    6414:	70 e0       	ldi	r23, 0x00	; 0
                        psize = pageendaddr - pagestartaddr;
    6416:	28 2d       	mov	r18, r8
    6418:	2a 19       	sub	r18, r10
                        progPage(twi, paddr, psize, &pagebuff[0]);
    641a:	c7 01       	movw	r24, r14
    641c:	8e 01       	movw	r16, r28
    641e:	0f 5f       	subi	r16, 0xFF	; 255
    6420:	1f 4f       	sbci	r17, 0xFF	; 255
    6422:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <progPage>
    6426:	25 c0       	rjmp	.+74     	; 0x6472 <flash_panel+0x334>
                    }
                    break;
                }
                else
                {
                    xprintf(PSTR("don't know how to deal with rectype=%d at line %d of panel.hex\n"),
    6428:	00 d0       	rcall	.+0      	; 0x642a <flash_panel+0x2ec>
    642a:	00 d0       	rcall	.+0      	; 0x642c <flash_panel+0x2ee>
    642c:	ed b7       	in	r30, 0x3d	; 61
    642e:	fe b7       	in	r31, 0x3e	; 62
    6430:	31 96       	adiw	r30, 0x01	; 1
    6432:	83 e1       	ldi	r24, 0x13	; 19
    6434:	92 e1       	ldi	r25, 0x12	; 18
    6436:	ad b7       	in	r26, 0x3d	; 61
    6438:	be b7       	in	r27, 0x3e	; 62
    643a:	11 96       	adiw	r26, 0x01	; 1
    643c:	8d 93       	st	X+, r24
    643e:	9c 93       	st	X, r25
    6440:	12 97       	sbiw	r26, 0x02	; 2
    6442:	22 83       	std	Z+2, r18	; 0x02
    6444:	13 82       	std	Z+3, r1	; 0x03
    6446:	44 82       	std	Z+4, r4	; 0x04
    6448:	55 82       	std	Z+5, r5	; 0x05
    644a:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                            ihex.rectyp, lineno);
                    break;
    644e:	ed b7       	in	r30, 0x3d	; 61
    6450:	fe b7       	in	r31, 0x3e	; 62
    6452:	36 96       	adiw	r30, 0x06	; 6
    6454:	ed bf       	out	0x3d, r30	; 61
    6456:	fe bf       	out	0x3e, r31	; 62
    6458:	0c c0       	rjmp	.+24     	; 0x6472 <flash_panel+0x334>
        {
            lineno++;
            len = strlen(flashBuff);
            if (flashBuff[len-1] == '\n')
                flashBuff[--len] = 0;
            if (flashBuff[0] != ':')
    645a:	18 01       	movw	r2, r16
    645c:	81 01       	movw	r16, r2
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)flashBuff, sizeof(flashBuff), &g_file_flash) != NULL)
    645e:	c6 01       	movw	r24, r12
    6460:	60 e0       	ldi	r22, 0x00	; 0
    6462:	71 e0       	ldi	r23, 0x01	; 1
    6464:	40 e2       	ldi	r20, 0x20	; 32
    6466:	58 e2       	ldi	r21, 0x28	; 40
    6468:	0e 94 7f 44 	call	0x88fe	; 0x88fe <f_gets>
    646c:	00 97       	sbiw	r24, 0x00	; 0
    646e:	09 f0       	breq	.+2      	; 0x6472 <flash_panel+0x334>
    6470:	12 cf       	rjmp	.-476    	; 0x6296 <flash_panel+0x158>
                    break;
                }
            }
        }
        // rewind the the input file to the start for verification
        res = f_lseek(&g_file_flash, 0);
    6472:	80 e2       	ldi	r24, 0x20	; 32
    6474:	98 e2       	ldi	r25, 0x28	; 40
    6476:	40 e0       	ldi	r20, 0x00	; 0
    6478:	50 e0       	ldi	r21, 0x00	; 0
    647a:	ba 01       	movw	r22, r20
    647c:	0e 94 39 43 	call	0x8672	; 0x8672 <f_lseek>
    6480:	18 2f       	mov	r17, r24
        if (res != FR_OK)
    6482:	88 23       	and	r24, r24
    6484:	49 f0       	breq	.+18     	; 0x6498 <flash_panel+0x35a>
        {
            xputs(PSTR("Error f_lseek in panel.hex.\n"));
    6486:	86 ef       	ldi	r24, 0xF6	; 246
    6488:	91 e1       	ldi	r25, 0x11	; 17
    648a:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
            put_rc(res);
    648e:	81 2f       	mov	r24, r17
    6490:	90 e0       	ldi	r25, 0x00	; 0
    6492:	0e 94 22 2a 	call	0x5444	; 0x5444 <put_rc>
    6496:	32 c1       	rjmp	.+612    	; 0x66fc <flash_panel+0x5be>
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
    6498:	89 ee       	ldi	r24, 0xE9	; 233
    649a:	91 e1       	ldi	r25, 0x11	; 17
    649c:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
            put_rc(res);
        }
        else
        {
            // verify the panel data
            lineno = 0;
    64a0:	66 24       	eor	r6, r6
    64a2:	77 24       	eor	r7, r7
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
    64a4:	10 e0       	ldi	r17, 0x00	; 0
        else
        {
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
    64a6:	00 e0       	ldi	r16, 0x00	; 0
        }
        else
        {
            // verify the panel data
            lineno = 0;
            page = 65535;
    64a8:	aa 24       	eor	r10, r10
    64aa:	aa 94       	dec	r10
    64ac:	ba 2c       	mov	r11, r10
                    flashBuff[--len] = 0;

                if (flashBuff[0] != ':')
                    continue;

                rc = ihex_readrec(&ihex, flashBuff);
    64ae:	f6 e8       	ldi	r31, 0x86	; 134
    64b0:	8f 2e       	mov	r8, r31
    64b2:	f1 e0       	ldi	r31, 0x01	; 1
    64b4:	9f 2e       	mov	r9, r31
    64b6:	8c 0e       	add	r8, r28
    64b8:	9d 1e       	adc	r9, r29
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;

                        for (i=0; i<ihex.reclen; i++)
    64ba:	94 01       	movw	r18, r8
    64bc:	2c 5f       	subi	r18, 0xFC	; 252
    64be:	3f 4f       	sbci	r19, 0xFF	; 255
    64c0:	c5 57       	subi	r28, 0x75	; 117
    64c2:	dd 4f       	sbci	r29, 0xFD	; 253
    64c4:	28 83       	st	Y, r18
    64c6:	39 83       	std	Y+1, r19	; 0x01
    64c8:	cb 58       	subi	r28, 0x8B	; 139
    64ca:	d2 40       	sbci	r29, 0x02	; 2
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &g_file_flash) != NULL)
    64cc:	0d c1       	rjmp	.+538    	; 0x66e8 <flash_panel+0x5aa>
            {
                lineno++;
    64ce:	08 94       	sec
    64d0:	61 1c       	adc	r6, r1
    64d2:	71 1c       	adc	r7, r1
                len = strlen(flashBuff);
    64d4:	f6 01       	movw	r30, r12
    64d6:	01 90       	ld	r0, Z+
    64d8:	00 20       	and	r0, r0
    64da:	e9 f7       	brne	.-6      	; 0x64d6 <flash_panel+0x398>
    64dc:	31 97       	sbiw	r30, 0x01	; 1
    64de:	ec 19       	sub	r30, r12
    64e0:	fd 09       	sbc	r31, r13
                if (flashBuff[len-1] == '\n')
    64e2:	46 e8       	ldi	r20, 0x86	; 134
    64e4:	50 e0       	ldi	r21, 0x00	; 0
    64e6:	4c 0f       	add	r20, r28
    64e8:	5d 1f       	adc	r21, r29
    64ea:	e4 0f       	add	r30, r20
    64ec:	f5 1f       	adc	r31, r21
    64ee:	82 91       	ld	r24, -Z
    64f0:	8a 30       	cpi	r24, 0x0A	; 10
    64f2:	09 f4       	brne	.+2      	; 0x64f6 <flash_panel+0x3b8>
                    flashBuff[--len] = 0;
    64f4:	10 82       	st	Z, r1

                if (flashBuff[0] != ':')
    64f6:	ca 57       	subi	r28, 0x7A	; 122
    64f8:	df 4f       	sbci	r29, 0xFF	; 255
    64fa:	88 81       	ld	r24, Y
    64fc:	c6 58       	subi	r28, 0x86	; 134
    64fe:	d0 40       	sbci	r29, 0x00	; 0
    6500:	8a 33       	cpi	r24, 0x3A	; 58
    6502:	09 f0       	breq	.+2      	; 0x6506 <flash_panel+0x3c8>
    6504:	ef c0       	rjmp	.+478    	; 0x66e4 <flash_panel+0x5a6>
                    continue;

                rc = ihex_readrec(&ihex, flashBuff);
    6506:	c4 01       	movw	r24, r8
    6508:	b6 01       	movw	r22, r12
    650a:	0e 94 47 2a 	call	0x548e	; 0x548e <ihex_readrec>
                if (rc < 0)
                {
                    xprintf(PSTR("invalid record at line %d of panel.hex\n"), lineno);
                    break;
                }
                else if (rc != ihex.cksum)
    650e:	c6 57       	subi	r28, 0x76	; 118
    6510:	dd 4f       	sbci	r29, 0xFD	; 253
    6512:	98 81       	ld	r25, Y
    6514:	ca 58       	subi	r28, 0x8A	; 138
    6516:	d2 40       	sbci	r29, 0x02	; 2
    6518:	89 17       	cp	r24, r25
    651a:	89 f1       	breq	.+98     	; 0x657e <flash_panel+0x440>
                {
                    xprintf(PSTR("ERROR: checksum mismatch at line %d of panel.hex\n"), lineno);
    651c:	00 d0       	rcall	.+0      	; 0x651e <flash_panel+0x3e0>
    651e:	0f 92       	push	r0
    6520:	27 eb       	ldi	r18, 0xB7	; 183
    6522:	31 e1       	ldi	r19, 0x11	; 17
    6524:	ad b7       	in	r26, 0x3d	; 61
    6526:	be b7       	in	r27, 0x3e	; 62
    6528:	11 96       	adiw	r26, 0x01	; 1
    652a:	2d 93       	st	X+, r18
    652c:	3c 93       	st	X, r19
    652e:	12 97       	sbiw	r26, 0x02	; 2
    6530:	13 96       	adiw	r26, 0x03	; 3
    6532:	6d 92       	st	X+, r6
    6534:	7c 92       	st	X, r7
    6536:	14 97       	sbiw	r26, 0x04	; 4
    6538:	c1 57       	subi	r28, 0x71	; 113
    653a:	dd 4f       	sbci	r29, 0xFD	; 253
    653c:	88 83       	st	Y, r24
    653e:	cf 58       	subi	r28, 0x8F	; 143
    6540:	d2 40       	sbci	r29, 0x02	; 2
    6542:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                    xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    6546:	0f 92       	push	r0
    6548:	0f 92       	push	r0
    654a:	ed b7       	in	r30, 0x3d	; 61
    654c:	fe b7       	in	r31, 0x3e	; 62
    654e:	31 96       	adiw	r30, 0x01	; 1
    6550:	2c e8       	ldi	r18, 0x8C	; 140
    6552:	31 e1       	ldi	r19, 0x11	; 17
    6554:	ad b7       	in	r26, 0x3d	; 61
    6556:	be b7       	in	r27, 0x3e	; 62
    6558:	11 96       	adiw	r26, 0x01	; 1
    655a:	2d 93       	st	X+, r18
    655c:	3c 93       	st	X, r19
    655e:	12 97       	sbiw	r26, 0x02	; 2
    6560:	c6 57       	subi	r28, 0x76	; 118
    6562:	dd 4f       	sbci	r29, 0xFD	; 253
    6564:	98 81       	ld	r25, Y
    6566:	ca 58       	subi	r28, 0x8A	; 138
    6568:	d2 40       	sbci	r29, 0x02	; 2
    656a:	92 83       	std	Z+2, r25	; 0x02
    656c:	13 82       	std	Z+3, r1	; 0x03
    656e:	c1 57       	subi	r28, 0x71	; 113
    6570:	dd 4f       	sbci	r29, 0xFD	; 253
    6572:	88 81       	ld	r24, Y
    6574:	cf 58       	subi	r28, 0x8F	; 143
    6576:	d2 40       	sbci	r29, 0x02	; 2
    6578:	84 83       	std	Z+4, r24	; 0x04
    657a:	15 82       	std	Z+5, r1	; 0x05
    657c:	ab c0       	rjmp	.+342    	; 0x66d4 <flash_panel+0x596>
                    break;
                }
                else
                {
                    if (ihex.rectyp == 0)
    657e:	d4 01       	movw	r26, r8
    6580:	13 96       	adiw	r26, 0x03	; 3
    6582:	2c 91       	ld	r18, X
    6584:	13 97       	sbiw	r26, 0x03	; 3
    6586:	22 23       	and	r18, r18
    6588:	09 f0       	breq	.+2      	; 0x658c <flash_panel+0x44e>
    658a:	62 c0       	rjmp	.+196    	; 0x6650 <flash_panel+0x512>
                    {
                        // data record
                        nextaddr = ihex.loadofs;
    658c:	11 96       	adiw	r26, 0x01	; 1
    658e:	2d 90       	ld	r2, X+
    6590:	3c 90       	ld	r3, X
    6592:	12 97       	sbiw	r26, 0x02	; 2
                        if ((nextaddr >> PAGE_SIZE_SHIFT) != page)
    6594:	21 01       	movw	r4, r2
    6596:	44 0c       	add	r4, r4
    6598:	45 2c       	mov	r4, r5
    659a:	44 1c       	adc	r4, r4
    659c:	55 08       	sbc	r5, r5
    659e:	51 94       	neg	r5
    65a0:	4a 14       	cp	r4, r10
    65a2:	5b 04       	cpc	r5, r11
    65a4:	49 f1       	breq	.+82     	; 0x65f8 <flash_panel+0x4ba>
                        {
                            // this record is for a different page - check if we need to flush the current page
                            if (pagestartaddr != pageendaddr)
    65a6:	01 17       	cp	r16, r17
    65a8:	21 f1       	breq	.+72     	; 0x65f2 <flash_panel+0x4b4>
                            {
                                // flush data in page buffer
                                paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
    65aa:	a5 01       	movw	r20, r10
    65ac:	56 95       	lsr	r21
    65ae:	54 2f       	mov	r21, r20
    65b0:	44 27       	eor	r20, r20
    65b2:	57 95       	ror	r21
    65b4:	47 95       	ror	r20
    65b6:	40 0f       	add	r20, r16
    65b8:	51 1d       	adc	r21, r1
    65ba:	60 e0       	ldi	r22, 0x00	; 0
    65bc:	70 e0       	ldi	r23, 0x00	; 0
                                psize = pageendaddr - pagestartaddr;
    65be:	21 2f       	mov	r18, r17
    65c0:	20 1b       	sub	r18, r16
                                if (verifyPage(twi, paddr, psize, &pagebuff[0])==0)
    65c2:	c7 01       	movw	r24, r14
    65c4:	8e 01       	movw	r16, r28
    65c6:	0f 5f       	subi	r16, 0xFF	; 255
    65c8:	1f 4f       	sbci	r17, 0xFF	; 255
    65ca:	0e 94 0a 2f 	call	0x5e14	; 0x5e14 <verifyPage>
    65ce:	00 97       	sbiw	r24, 0x00	; 0
    65d0:	81 f4       	brne	.+32     	; 0x65f2 <flash_panel+0x4b4>
                                    xprintf(PSTR("verify mismatch for page %d\n"), page);
    65d2:	00 d0       	rcall	.+0      	; 0x65d4 <flash_panel+0x496>
    65d4:	0f 92       	push	r0
    65d6:	2f e6       	ldi	r18, 0x6F	; 111
    65d8:	31 e1       	ldi	r19, 0x11	; 17
    65da:	ed b7       	in	r30, 0x3d	; 61
    65dc:	fe b7       	in	r31, 0x3e	; 62
    65de:	21 83       	std	Z+1, r18	; 0x01
    65e0:	32 83       	std	Z+2, r19	; 0x02
    65e2:	a3 82       	std	Z+3, r10	; 0x03
    65e4:	b4 82       	std	Z+4, r11	; 0x04
    65e6:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    65ea:	0f 90       	pop	r0
    65ec:	0f 90       	pop	r0
    65ee:	0f 90       	pop	r0
    65f0:	0f 90       	pop	r0

                            }
                            page = (nextaddr >> PAGE_SIZE_SHIFT);
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    65f2:	12 2d       	mov	r17, r2
    65f4:	1f 77       	andi	r17, 0x7F	; 127
    65f6:	01 2f       	mov	r16, r17
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
    65f8:	42 2d       	mov	r20, r2
    65fa:	4f 77       	andi	r20, 0x7F	; 127
    65fc:	40 17       	cp	r20, r16
    65fe:	08 f4       	brcc	.+2      	; 0x6602 <flash_panel+0x4c4>
    6600:	04 2f       	mov	r16, r20
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;

                        for (i=0; i<ihex.reclen; i++)
    6602:	d4 01       	movw	r26, r8
    6604:	5c 91       	ld	r21, X
    6606:	c5 57       	subi	r28, 0x75	; 117
    6608:	dd 4f       	sbci	r29, 0xFD	; 253
    660a:	a8 81       	ld	r26, Y
    660c:	b9 81       	ldd	r27, Y+1	; 0x01
    660e:	cb 58       	subi	r28, 0x8B	; 139
    6610:	d2 40       	sbci	r29, 0x02	; 2
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    6612:	e4 2f       	mov	r30, r20
    6614:	f0 e0       	ldi	r31, 0x00	; 0
    6616:	35 96       	adiw	r30, 0x05	; 5
            match = 0;
    }
    return match;
}

void flash_panel(uint8_t panel_num)
    6618:	21 e0       	ldi	r18, 0x01	; 1
    661a:	30 e0       	ldi	r19, 0x00	; 0
    661c:	2c 0f       	add	r18, r28
    661e:	3d 1f       	adc	r19, r29
    6620:	e2 0f       	add	r30, r18
    6622:	f3 1f       	adc	r31, r19
    6624:	cd 01       	movw	r24, r26
    6626:	85 0f       	add	r24, r21
    6628:	91 1d       	adc	r25, r1
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;

                        for (i=0; i<ihex.reclen; i++)
    662a:	02 c0       	rjmp	.+4      	; 0x6630 <flash_panel+0x4f2>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    662c:	2d 91       	ld	r18, X+
    662e:	21 93       	st	Z+, r18
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;

                        for (i=0; i<ihex.reclen; i++)
    6630:	a8 17       	cp	r26, r24
    6632:	b9 07       	cpc	r27, r25
    6634:	d9 f7       	brne	.-10     	; 0x662c <flash_panel+0x4ee>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];

                        if ((pageoffset + ihex.reclen) > pageendaddr)
    6636:	85 2f       	mov	r24, r21
    6638:	90 e0       	ldi	r25, 0x00	; 0
    663a:	84 0f       	add	r24, r20
    663c:	91 1d       	adc	r25, r1
    663e:	21 2f       	mov	r18, r17
    6640:	30 e0       	ldi	r19, 0x00	; 0
    6642:	28 17       	cp	r18, r24
    6644:	39 07       	cpc	r19, r25
    6646:	0c f0       	brlt	.+2      	; 0x664a <flash_panel+0x50c>
    6648:	4e c0       	rjmp	.+156    	; 0x66e6 <flash_panel+0x5a8>
                            pageendaddr = pageoffset+ihex.reclen;
    664a:	14 2f       	mov	r17, r20
    664c:	15 0f       	add	r17, r21
    664e:	4b c0       	rjmp	.+150    	; 0x66e6 <flash_panel+0x5a8>

                    }
                    else if (ihex.rectyp == 1)
    6650:	21 30       	cpi	r18, 0x01	; 1
    6652:	79 f5       	brne	.+94     	; 0x66b2 <flash_panel+0x574>
                    {
                        // end of file record
                        if (pagestartaddr != pageendaddr)
    6654:	01 17       	cp	r16, r17
    6656:	41 f1       	breq	.+80     	; 0x66a8 <flash_panel+0x56a>
                        {
                            // flush the data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
    6658:	a5 01       	movw	r20, r10
    665a:	56 95       	lsr	r21
    665c:	54 2f       	mov	r21, r20
    665e:	44 27       	eor	r20, r20
    6660:	57 95       	ror	r21
    6662:	47 95       	ror	r20
    6664:	40 0f       	add	r20, r16
    6666:	51 1d       	adc	r21, r1
    6668:	60 e0       	ldi	r22, 0x00	; 0
    666a:	70 e0       	ldi	r23, 0x00	; 0
                            psize = pageendaddr - pagestartaddr;
    666c:	21 2f       	mov	r18, r17
    666e:	20 1b       	sub	r18, r16
                            if (verifyPage(twi, paddr, psize, &pagebuff[0])==0)
    6670:	c7 01       	movw	r24, r14
    6672:	8e 01       	movw	r16, r28
    6674:	0f 5f       	subi	r16, 0xFF	; 255
    6676:	1f 4f       	sbci	r17, 0xFF	; 255
    6678:	0e 94 0a 2f 	call	0x5e14	; 0x5e14 <verifyPage>
    667c:	00 97       	sbiw	r24, 0x00	; 0
    667e:	a1 f4       	brne	.+40     	; 0x66a8 <flash_panel+0x56a>
                                xprintf(PSTR("verify mismatch for page %d\n"), page);
    6680:	00 d0       	rcall	.+0      	; 0x6682 <flash_panel+0x544>
    6682:	0f 92       	push	r0
    6684:	82 e5       	ldi	r24, 0x52	; 82
    6686:	91 e1       	ldi	r25, 0x11	; 17
    6688:	ad b7       	in	r26, 0x3d	; 61
    668a:	be b7       	in	r27, 0x3e	; 62
    668c:	11 96       	adiw	r26, 0x01	; 1
    668e:	8d 93       	st	X+, r24
    6690:	9c 93       	st	X, r25
    6692:	12 97       	sbiw	r26, 0x02	; 2
    6694:	13 96       	adiw	r26, 0x03	; 3
    6696:	ad 92       	st	X+, r10
    6698:	bc 92       	st	X, r11
    669a:	14 97       	sbiw	r26, 0x04	; 4
    669c:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    66a0:	0f 90       	pop	r0
    66a2:	0f 90       	pop	r0
    66a4:	0f 90       	pop	r0
    66a6:	0f 90       	pop	r0

                        }
                        xputs(PSTR("\n"));
    66a8:	80 e5       	ldi	r24, 0x50	; 80
    66aa:	91 e1       	ldi	r25, 0x11	; 17
    66ac:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
                        break;
    66b0:	25 c0       	rjmp	.+74     	; 0x66fc <flash_panel+0x5be>
                    }
                    else
                    {
                        xprintf(PSTR("don't know how to deal with rectype=%d at line %d of panel.hex\n"),
    66b2:	00 d0       	rcall	.+0      	; 0x66b4 <flash_panel+0x576>
    66b4:	00 d0       	rcall	.+0      	; 0x66b6 <flash_panel+0x578>
    66b6:	ed b7       	in	r30, 0x3d	; 61
    66b8:	fe b7       	in	r31, 0x3e	; 62
    66ba:	31 96       	adiw	r30, 0x01	; 1
    66bc:	80 e1       	ldi	r24, 0x10	; 16
    66be:	91 e1       	ldi	r25, 0x11	; 17
    66c0:	ad b7       	in	r26, 0x3d	; 61
    66c2:	be b7       	in	r27, 0x3e	; 62
    66c4:	11 96       	adiw	r26, 0x01	; 1
    66c6:	8d 93       	st	X+, r24
    66c8:	9c 93       	st	X, r25
    66ca:	12 97       	sbiw	r26, 0x02	; 2
    66cc:	22 83       	std	Z+2, r18	; 0x02
    66ce:	13 82       	std	Z+3, r1	; 0x03
    66d0:	64 82       	std	Z+4, r6	; 0x04
    66d2:	75 82       	std	Z+5, r7	; 0x05
    66d4:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                                ihex.rectyp, lineno);
                        break;
    66d8:	ed b7       	in	r30, 0x3d	; 61
    66da:	fe b7       	in	r31, 0x3e	; 62
    66dc:	36 96       	adiw	r30, 0x06	; 6
    66de:	ed bf       	out	0x3d, r30	; 61
    66e0:	fe bf       	out	0x3e, r31	; 62
    66e2:	0c c0       	rjmp	.+24     	; 0x66fc <flash_panel+0x5be>
                lineno++;
                len = strlen(flashBuff);
                if (flashBuff[len-1] == '\n')
                    flashBuff[--len] = 0;

                if (flashBuff[0] != ':')
    66e4:	25 01       	movw	r4, r10
    66e6:	52 01       	movw	r10, r4
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)flashBuff, sizeof(flashBuff), &g_file_flash) != NULL)
    66e8:	c6 01       	movw	r24, r12
    66ea:	60 e0       	ldi	r22, 0x00	; 0
    66ec:	71 e0       	ldi	r23, 0x01	; 1
    66ee:	40 e2       	ldi	r20, 0x20	; 32
    66f0:	58 e2       	ldi	r21, 0x28	; 40
    66f2:	0e 94 7f 44 	call	0x88fe	; 0x88fe <f_gets>
    66f6:	00 97       	sbiw	r24, 0x00	; 0
    66f8:	09 f0       	breq	.+2      	; 0x66fc <flash_panel+0x5be>
    66fa:	e9 ce       	rjmp	.-558    	; 0x64ce <flash_panel+0x390>
                    }
                }
            }
        }
        // exit bootloader
        pagebuff[0] = 'E';
    66fc:	85 e4       	ldi	r24, 0x45	; 69
    66fe:	89 83       	std	Y+1, r24	; 0x01
        TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    6700:	c7 01       	movw	r24, r14
    6702:	60 e7       	ldi	r22, 0x70	; 112
    6704:	ae 01       	movw	r20, r28
    6706:	4f 5f       	subi	r20, 0xFF	; 255
    6708:	5f 4f       	sbci	r21, 0xFF	; 255
    670a:	21 e0       	ldi	r18, 0x01	; 1
    670c:	00 e0       	ldi	r16, 0x00	; 0
    670e:	0e 94 af 39 	call	0x735e	; 0x735e <TWI_MasterWriteRead>
        while (twi->status != TWIM_STATUS_READY)
    6712:	d7 01       	movw	r26, r14
    6714:	1d 96       	adiw	r26, 0x0d	; 13
    6716:	8c 91       	ld	r24, X
    6718:	1d 97       	sbiw	r26, 0x0d	; 13
    671a:	88 23       	and	r24, r24
    671c:	d1 f7       	brne	.-12     	; 0x6712 <flash_panel+0x5d4>
        {
            /* Wait until transaction is complete. */
        }
        if (twi->result != TWIM_RESULT_OK)
    671e:	f7 01       	movw	r30, r14
    6720:	86 85       	ldd	r24, Z+14	; 0x0e
    6722:	81 30       	cpi	r24, 0x01	; 1
    6724:	09 f1       	breq	.+66     	; 0x6768 <flash_panel+0x62a>
            xprintf(PSTR("Bad exit cmd, result = %u\n"), twi->result);
    6726:	26 85       	ldd	r18, Z+14	; 0x0e
    6728:	00 d0       	rcall	.+0      	; 0x672a <flash_panel+0x5ec>
    672a:	0f 92       	push	r0
    672c:	ed b7       	in	r30, 0x3d	; 61
    672e:	fe b7       	in	r31, 0x3e	; 62
    6730:	31 96       	adiw	r30, 0x01	; 1
    6732:	85 ef       	ldi	r24, 0xF5	; 245
    6734:	90 e1       	ldi	r25, 0x10	; 16
    6736:	ad b7       	in	r26, 0x3d	; 61
    6738:	be b7       	in	r27, 0x3e	; 62
    673a:	11 96       	adiw	r26, 0x01	; 1
    673c:	8d 93       	st	X+, r24
    673e:	9c 93       	st	X, r25
    6740:	12 97       	sbiw	r26, 0x02	; 2
    6742:	22 83       	std	Z+2, r18	; 0x02
    6744:	13 82       	std	Z+3, r1	; 0x03
    6746:	0a c0       	rjmp	.+20     	; 0x675c <flash_panel+0x61e>
        //i2cMasterSend(panel_num, 1, &pagebuff[0]);
        //TWI_MasterWriteRead(&twiMaster1, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    }
    else
    {
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    6748:	00 d0       	rcall	.+0      	; 0x674a <flash_panel+0x60c>
    674a:	0f 92       	push	r0
    674c:	8a ed       	ldi	r24, 0xDA	; 218
    674e:	90 e1       	ldi	r25, 0x10	; 16
    6750:	ed b7       	in	r30, 0x3d	; 61
    6752:	fe b7       	in	r31, 0x3e	; 62
    6754:	81 83       	std	Z+1, r24	; 0x01
    6756:	92 83       	std	Z+2, r25	; 0x02
    6758:	03 83       	std	Z+3, r16	; 0x03
    675a:	14 83       	std	Z+4, r17	; 0x04
    675c:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    6760:	0f 90       	pop	r0
    6762:	0f 90       	pop	r0
    6764:	0f 90       	pop	r0
    6766:	0f 90       	pop	r0
    }
};
    6768:	c1 57       	subi	r28, 0x71	; 113
    676a:	dd 4f       	sbci	r29, 0xFD	; 253
    676c:	e2 e1       	ldi	r30, 0x12	; 18
    676e:	0c 94 d3 4b 	jmp	0x97a6	; 0x97a6 <__epilogue_restores__>

00006772 <eeprom_panel>:

void eeprom_panel(uint8_t panel_num)
{
    6772:	af e8       	ldi	r26, 0x8F	; 143
    6774:	b2 e0       	ldi	r27, 0x02	; 2
    6776:	ef eb       	ldi	r30, 0xBF	; 191
    6778:	f3 e3       	ldi	r31, 0x33	; 51
    677a:	0c 94 ba 4b 	jmp	0x9774	; 0x9774 <__prologue_saves__>
    677e:	c8 2e       	mov	r12, r24
    uint16_t len, i;
    TWI_Master_t *twi;
    uint8_t ch;
    uint8_t eepromBuff[256];
    
    ch = g_ch_from_panel[panel_num];
    6780:	08 2f       	mov	r16, r24
    6782:	10 e0       	ldi	r17, 0x00	; 0
    6784:	f8 01       	movw	r30, r16
    6786:	e8 50       	subi	r30, 0x08	; 8
    6788:	fb 4d       	sbci	r31, 0xDB	; 219
    678a:	e0 81       	ld	r30, Z
    if (ch != 0)
    678c:	ee 23       	and	r30, r30
    678e:	09 f4       	brne	.+2      	; 0x6792 <eeprom_panel+0x20>
    6790:	e2 c2       	rjmp	.+1476   	; 0x6d56 <eeprom_panel+0x5e4>
    6792:	e1 50       	subi	r30, 0x01	; 1
    6794:	e4 30       	cpi	r30, 0x04	; 4
    6796:	40 f4       	brcc	.+16     	; 0x67a8 <eeprom_panel+0x36>
    6798:	f0 e0       	ldi	r31, 0x00	; 0
    679a:	ee 0f       	add	r30, r30
    679c:	ff 1f       	adc	r31, r31
    679e:	ee 56       	subi	r30, 0x6E	; 110
    67a0:	fc 4d       	sbci	r31, 0xDC	; 220
    67a2:	e0 80       	ld	r14, Z
    67a4:	f1 80       	ldd	r15, Z+1	; 0x01
    67a6:	04 c0       	rjmp	.+8      	; 0x67b0 <eeprom_panel+0x3e>
    67a8:	32 e0       	ldi	r19, 0x02	; 2
    67aa:	e3 2e       	mov	r14, r19
    67ac:	38 e2       	ldi	r19, 0x28	; 40
    67ae:	f3 2e       	mov	r15, r19
                twi = &twi1;
                break;
        }
        
        // open the hex file for reading
        res = f_open(&g_file_eeprom, panelEEprom, FA_OPEN_EXISTING | FA_READ);
    67b0:	8a e3       	ldi	r24, 0x3A	; 58
    67b2:	98 e2       	ldi	r25, 0x28	; 40
    67b4:	64 e7       	ldi	r22, 0x74	; 116
    67b6:	73 e2       	ldi	r23, 0x23	; 35
    67b8:	41 e0       	ldi	r20, 0x01	; 1
    67ba:	0e 94 4d 3d 	call	0x7a9a	; 0x7a9a <f_open>
    67be:	a8 2e       	mov	r10, r24
        if (res != FR_OK)
    67c0:	88 23       	and	r24, r24
    67c2:	49 f0       	breq	.+18     	; 0x67d6 <eeprom_panel+0x64>
        {
            // could'n open the file
            xputs(PSTR("Error f_open in eeprom.hex.\n"));
    67c4:	83 e1       	ldi	r24, 0x13	; 19
    67c6:	90 e1       	ldi	r25, 0x10	; 16
    67c8:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
            put_rc(res);
    67cc:	8a 2d       	mov	r24, r10
    67ce:	90 e0       	ldi	r25, 0x00	; 0
    67d0:	0e 94 22 2a 	call	0x5444	; 0x5444 <put_rc>
    67d4:	41 c0       	rjmp	.+130    	; 0x6858 <eeprom_panel+0xe6>
            {
                // use cmd reset (assumes panel firmware already loaded)
                //i2cMasterSend(panel_num, 2, RESET);
                
                // use cmd reset (assumes panel firmware already loaded)
                xprintf(PSTR("eeprom panel %u.\n"), panel_num);
    67d6:	00 d0       	rcall	.+0      	; 0x67d8 <eeprom_panel+0x66>
    67d8:	0f 92       	push	r0
    67da:	21 e0       	ldi	r18, 0x01	; 1
    67dc:	30 e1       	ldi	r19, 0x10	; 16
    67de:	ad b7       	in	r26, 0x3d	; 61
    67e0:	be b7       	in	r27, 0x3e	; 62
    67e2:	11 96       	adiw	r26, 0x01	; 1
    67e4:	2d 93       	st	X+, r18
    67e6:	3c 93       	st	X, r19
    67e8:	12 97       	sbiw	r26, 0x02	; 2
    67ea:	13 96       	adiw	r26, 0x03	; 3
    67ec:	0d 93       	st	X+, r16
    67ee:	1c 93       	st	X, r17
    67f0:	14 97       	sbiw	r26, 0x04	; 4
    67f2:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                pagebuff[0] = 0x00;
    67f6:	19 82       	std	Y+1, r1	; 0x01
                pagebuff[1] = 0x01;
    67f8:	81 e0       	ldi	r24, 0x01	; 1
    67fa:	8a 83       	std	Y+2, r24	; 0x02
                TWI_MasterWriteRead(twi, panel_num, &pagebuff[0], 2, 0);
    67fc:	0f 90       	pop	r0
    67fe:	0f 90       	pop	r0
    6800:	0f 90       	pop	r0
    6802:	0f 90       	pop	r0
    6804:	c7 01       	movw	r24, r14
    6806:	6c 2d       	mov	r22, r12
    6808:	ae 01       	movw	r20, r28
    680a:	4f 5f       	subi	r20, 0xFF	; 255
    680c:	5f 4f       	sbci	r21, 0xFF	; 255
    680e:	22 e0       	ldi	r18, 0x02	; 2
    6810:	00 e0       	ldi	r16, 0x00	; 0
    6812:	0e 94 af 39 	call	0x735e	; 0x735e <TWI_MasterWriteRead>
                while (twi->status != TWIM_STATUS_READY)
    6816:	f7 01       	movw	r30, r14
    6818:	85 85       	ldd	r24, Z+13	; 0x0d
    681a:	88 23       	and	r24, r24
    681c:	e1 f7       	brne	.-8      	; 0x6816 <eeprom_panel+0xa4>
                {
                    /* Wait until transaction is complete. */
                }
                if (twi->result != TWIM_RESULT_OK)
    681e:	d7 01       	movw	r26, r14
    6820:	1e 96       	adiw	r26, 0x0e	; 14
    6822:	8c 91       	ld	r24, X
    6824:	1e 97       	sbiw	r26, 0x0e	; 14
    6826:	81 30       	cpi	r24, 0x01	; 1
    6828:	b9 f0       	breq	.+46     	; 0x6858 <eeprom_panel+0xe6>
                    xprintf(PSTR("Bad panel reset, result = %u\n"), twi->result);
    682a:	1e 96       	adiw	r26, 0x0e	; 14
    682c:	2c 91       	ld	r18, X
    682e:	00 d0       	rcall	.+0      	; 0x6830 <eeprom_panel+0xbe>
    6830:	0f 92       	push	r0
    6832:	ed b7       	in	r30, 0x3d	; 61
    6834:	fe b7       	in	r31, 0x3e	; 62
    6836:	31 96       	adiw	r30, 0x01	; 1
    6838:	83 ee       	ldi	r24, 0xE3	; 227
    683a:	9f e0       	ldi	r25, 0x0F	; 15
    683c:	ad b7       	in	r26, 0x3d	; 61
    683e:	be b7       	in	r27, 0x3e	; 62
    6840:	11 96       	adiw	r26, 0x01	; 1
    6842:	8d 93       	st	X+, r24
    6844:	9c 93       	st	X, r25
    6846:	12 97       	sbiw	r26, 0x02	; 2
    6848:	22 83       	std	Z+2, r18	; 0x02
    684a:	13 82       	std	Z+3, r1	; 0x03
    684c:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    6850:	0f 90       	pop	r0
    6852:	0f 90       	pop	r0
    6854:	0f 90       	pop	r0
    6856:	0f 90       	pop	r0
    6858:	8f ef       	ldi	r24, 0xFF	; 255
    685a:	93 ed       	ldi	r25, 0xD3	; 211
    685c:	a0 e3       	ldi	r26, 0x30	; 48
    685e:	81 50       	subi	r24, 0x01	; 1
    6860:	90 40       	sbci	r25, 0x00	; 0
    6862:	a0 40       	sbci	r26, 0x00	; 0
    6864:	e1 f7       	brne	.-8      	; 0x685e <eeprom_panel+0xec>
    6866:	00 c0       	rjmp	.+0      	; 0x6868 <eeprom_panel+0xf6>
    6868:	00 00       	nop
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
    686a:	86 ed       	ldi	r24, 0xD6	; 214
    686c:	9f e0       	ldi	r25, 0x0F	; 15
    686e:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>

            }
        }
        // program the panel
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
    6872:	44 24       	eor	r4, r4
    6874:	55 24       	eor	r5, r5
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
    6876:	88 24       	eor	r8, r8
        }
        // program the panel
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
    6878:	aa 24       	eor	r10, r10
            }
        }
        // program the panel
        _delay_ms(500); // wait .5 sec for the panel to come out of reset
        lineno = 0;
        page = 65535;
    687a:	0f ef       	ldi	r16, 0xFF	; 255
    687c:	1f ef       	ldi	r17, 0xFF	; 255
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &g_file_eeprom) != NULL)
    687e:	26 e8       	ldi	r18, 0x86	; 134
    6880:	c2 2e       	mov	r12, r18
    6882:	d1 2c       	mov	r13, r1
    6884:	cc 0e       	add	r12, r28
    6886:	dd 1e       	adc	r13, r29
                eepromBuff[--len] = 0;

            if (eepromBuff[0] != ':')
                continue;

            rc = ihex_readrec(&ihex, eepromBuff);
    6888:	96 e8       	ldi	r25, 0x86	; 134
    688a:	69 2e       	mov	r6, r25
    688c:	91 e0       	ldi	r25, 0x01	; 1
    688e:	79 2e       	mov	r7, r25
    6890:	6c 0e       	add	r6, r28
    6892:	7d 1e       	adc	r7, r29
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;

                    for (i=0; i<ihex.reclen; i++)
    6894:	d3 01       	movw	r26, r6
    6896:	14 96       	adiw	r26, 0x04	; 4
    6898:	c3 57       	subi	r28, 0x73	; 115
    689a:	dd 4f       	sbci	r29, 0xFD	; 253
    689c:	a8 83       	st	Y, r26
    689e:	b9 83       	std	Y+1, r27	; 0x01
    68a0:	cd 58       	subi	r28, 0x8D	; 141
    68a2:	d2 40       	sbci	r29, 0x02	; 2
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &g_file_eeprom) != NULL)
    68a4:	e8 c0       	rjmp	.+464    	; 0x6a76 <eeprom_panel+0x304>
        {
            lineno++;
    68a6:	08 94       	sec
    68a8:	41 1c       	adc	r4, r1
    68aa:	51 1c       	adc	r5, r1
            len = strlen(eepromBuff);
    68ac:	f6 01       	movw	r30, r12
    68ae:	01 90       	ld	r0, Z+
    68b0:	00 20       	and	r0, r0
    68b2:	e9 f7       	brne	.-6      	; 0x68ae <eeprom_panel+0x13c>
    68b4:	31 97       	sbiw	r30, 0x01	; 1
    68b6:	ec 19       	sub	r30, r12
    68b8:	fd 09       	sbc	r31, r13
            if (eepromBuff[len-1] == '\n')
    68ba:	ec 0d       	add	r30, r12
    68bc:	fd 1d       	adc	r31, r13
    68be:	82 91       	ld	r24, -Z
    68c0:	8a 30       	cpi	r24, 0x0A	; 10
    68c2:	09 f4       	brne	.+2      	; 0x68c6 <eeprom_panel+0x154>
                eepromBuff[--len] = 0;
    68c4:	10 82       	st	Z, r1

            if (eepromBuff[0] != ':')
    68c6:	f6 01       	movw	r30, r12
    68c8:	80 81       	ld	r24, Z
    68ca:	8a 33       	cpi	r24, 0x3A	; 58
    68cc:	09 f0       	breq	.+2      	; 0x68d0 <eeprom_panel+0x15e>
    68ce:	d1 c0       	rjmp	.+418    	; 0x6a72 <eeprom_panel+0x300>
                continue;

            rc = ihex_readrec(&ihex, eepromBuff);
    68d0:	c3 01       	movw	r24, r6
    68d2:	b6 01       	movw	r22, r12
    68d4:	0e 94 47 2a 	call	0x548e	; 0x548e <ihex_readrec>
            if (rc < 0)
            {
                xprintf(PSTR("invalid record at line %d of eeprom.hex.\n"), lineno);
                break;
            }
            else if (rc != ihex.cksum)
    68d8:	c6 57       	subi	r28, 0x76	; 118
    68da:	dd 4f       	sbci	r29, 0xFD	; 253
    68dc:	98 81       	ld	r25, Y
    68de:	ca 58       	subi	r28, 0x8A	; 138
    68e0:	d2 40       	sbci	r29, 0x02	; 2
    68e2:	89 17       	cp	r24, r25
    68e4:	89 f1       	breq	.+98     	; 0x6948 <eeprom_panel+0x1d6>
            {
                xprintf(PSTR("ERROR: checksum mismatch at line %d of eeprom.hex.\n"), lineno);
    68e6:	00 d0       	rcall	.+0      	; 0x68e8 <eeprom_panel+0x176>
    68e8:	0f 92       	push	r0
    68ea:	22 ea       	ldi	r18, 0xA2	; 162
    68ec:	3f e0       	ldi	r19, 0x0F	; 15
    68ee:	ad b7       	in	r26, 0x3d	; 61
    68f0:	be b7       	in	r27, 0x3e	; 62
    68f2:	11 96       	adiw	r26, 0x01	; 1
    68f4:	2d 93       	st	X+, r18
    68f6:	3c 93       	st	X, r19
    68f8:	12 97       	sbiw	r26, 0x02	; 2
    68fa:	13 96       	adiw	r26, 0x03	; 3
    68fc:	4d 92       	st	X+, r4
    68fe:	5c 92       	st	X, r5
    6900:	14 97       	sbiw	r26, 0x04	; 4
    6902:	c1 57       	subi	r28, 0x71	; 113
    6904:	dd 4f       	sbci	r29, 0xFD	; 253
    6906:	88 83       	st	Y, r24
    6908:	cf 58       	subi	r28, 0x8F	; 143
    690a:	d2 40       	sbci	r29, 0x02	; 2
    690c:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    6910:	0f 92       	push	r0
    6912:	0f 92       	push	r0
    6914:	ed b7       	in	r30, 0x3d	; 61
    6916:	fe b7       	in	r31, 0x3e	; 62
    6918:	31 96       	adiw	r30, 0x01	; 1
    691a:	27 e7       	ldi	r18, 0x77	; 119
    691c:	3f e0       	ldi	r19, 0x0F	; 15
    691e:	ad b7       	in	r26, 0x3d	; 61
    6920:	be b7       	in	r27, 0x3e	; 62
    6922:	11 96       	adiw	r26, 0x01	; 1
    6924:	2d 93       	st	X+, r18
    6926:	3c 93       	st	X, r19
    6928:	12 97       	sbiw	r26, 0x02	; 2
    692a:	c6 57       	subi	r28, 0x76	; 118
    692c:	dd 4f       	sbci	r29, 0xFD	; 253
    692e:	98 81       	ld	r25, Y
    6930:	ca 58       	subi	r28, 0x8A	; 138
    6932:	d2 40       	sbci	r29, 0x02	; 2
    6934:	92 83       	std	Z+2, r25	; 0x02
    6936:	13 82       	std	Z+3, r1	; 0x03
    6938:	c1 57       	subi	r28, 0x71	; 113
    693a:	dd 4f       	sbci	r29, 0xFD	; 253
    693c:	88 81       	ld	r24, Y
    693e:	cf 58       	subi	r28, 0x8F	; 143
    6940:	d2 40       	sbci	r29, 0x02	; 2
    6942:	84 83       	std	Z+4, r24	; 0x04
    6944:	15 82       	std	Z+5, r1	; 0x05
    6946:	8d c0       	rjmp	.+282    	; 0x6a62 <eeprom_panel+0x2f0>
                break;
            }
            else
            {
                if (ihex.rectyp == 0)
    6948:	d3 01       	movw	r26, r6
    694a:	13 96       	adiw	r26, 0x03	; 3
    694c:	2c 91       	ld	r18, X
    694e:	13 97       	sbiw	r26, 0x03	; 3
    6950:	22 23       	and	r18, r18
    6952:	09 f0       	breq	.+2      	; 0x6956 <eeprom_panel+0x1e4>
    6954:	5e c0       	rjmp	.+188    	; 0x6a12 <eeprom_panel+0x2a0>
                {
                    // data record
                    nextaddr = ihex.loadofs;
    6956:	11 96       	adiw	r26, 0x01	; 1
    6958:	ed 91       	ld	r30, X+
    695a:	fc 91       	ld	r31, X
    695c:	12 97       	sbiw	r26, 0x02	; 2
    695e:	c5 57       	subi	r28, 0x75	; 117
    6960:	dd 4f       	sbci	r29, 0xFD	; 253
    6962:	e8 83       	st	Y, r30
    6964:	f9 83       	std	Y+1, r31	; 0x01
    6966:	cb 58       	subi	r28, 0x8B	; 139
    6968:	d2 40       	sbci	r29, 0x02	; 2
                    if ((nextaddr >> PAGE_SIZE_SHIFT) != page)
    696a:	1f 01       	movw	r2, r30
    696c:	22 0c       	add	r2, r2
    696e:	23 2c       	mov	r2, r3
    6970:	22 1c       	adc	r2, r2
    6972:	33 08       	sbc	r3, r3
    6974:	31 94       	neg	r3
    6976:	20 16       	cp	r2, r16
    6978:	31 06       	cpc	r3, r17
    697a:	e1 f0       	breq	.+56     	; 0x69b4 <eeprom_panel+0x242>
                    {
                        // this record is for a different page - check if we need to flush the current page
                        if (pagestartaddr != pageendaddr)
    697c:	a8 14       	cp	r10, r8
    697e:	91 f0       	breq	.+36     	; 0x69a4 <eeprom_panel+0x232>
                        {
                            // flush data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
    6980:	16 95       	lsr	r17
    6982:	10 2f       	mov	r17, r16
    6984:	00 27       	eor	r16, r16
    6986:	17 95       	ror	r17
    6988:	07 95       	ror	r16
    698a:	0a 0d       	add	r16, r10
    698c:	11 1d       	adc	r17, r1
    698e:	a8 01       	movw	r20, r16
    6990:	60 e0       	ldi	r22, 0x00	; 0
    6992:	70 e0       	ldi	r23, 0x00	; 0
                            psize = pageendaddr - pagestartaddr;
    6994:	28 2d       	mov	r18, r8
    6996:	2a 19       	sub	r18, r10
                            progEEPage(twi, paddr, psize, &pagebuff[0]);
    6998:	c7 01       	movw	r24, r14
    699a:	8e 01       	movw	r16, r28
    699c:	0f 5f       	subi	r16, 0xFF	; 255
    699e:	1f 4f       	sbci	r17, 0xFF	; 255
    69a0:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <progEEPage>
                        }
                        page = (nextaddr >> PAGE_SIZE_SHIFT);
                        pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    69a4:	c5 57       	subi	r28, 0x75	; 117
    69a6:	dd 4f       	sbci	r29, 0xFD	; 253
    69a8:	88 80       	ld	r8, Y
    69aa:	cb 58       	subi	r28, 0x8B	; 139
    69ac:	d2 40       	sbci	r29, 0x02	; 2
    69ae:	ff e7       	ldi	r31, 0x7F	; 127
    69b0:	8f 22       	and	r8, r31
    69b2:	a8 2c       	mov	r10, r8
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
    69b4:	c5 57       	subi	r28, 0x75	; 117
    69b6:	dd 4f       	sbci	r29, 0xFD	; 253
    69b8:	48 81       	ld	r20, Y
    69ba:	cb 58       	subi	r28, 0x8B	; 139
    69bc:	d2 40       	sbci	r29, 0x02	; 2
    69be:	4f 77       	andi	r20, 0x7F	; 127
    69c0:	4a 15       	cp	r20, r10
    69c2:	08 f4       	brcc	.+2      	; 0x69c6 <eeprom_panel+0x254>
    69c4:	a4 2e       	mov	r10, r20
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;

                    for (i=0; i<ihex.reclen; i++)
    69c6:	d3 01       	movw	r26, r6
    69c8:	5c 91       	ld	r21, X
    69ca:	c3 57       	subi	r28, 0x73	; 115
    69cc:	dd 4f       	sbci	r29, 0xFD	; 253
    69ce:	a8 81       	ld	r26, Y
    69d0:	b9 81       	ldd	r27, Y+1	; 0x01
    69d2:	cd 58       	subi	r28, 0x8D	; 141
    69d4:	d2 40       	sbci	r29, 0x02	; 2
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    69d6:	e4 2f       	mov	r30, r20
    69d8:	f0 e0       	ldi	r31, 0x00	; 0
    69da:	35 96       	adiw	r30, 0x05	; 5
    {
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    }
};

void eeprom_panel(uint8_t panel_num)
    69dc:	81 e0       	ldi	r24, 0x01	; 1
    69de:	90 e0       	ldi	r25, 0x00	; 0
    69e0:	8c 0f       	add	r24, r28
    69e2:	9d 1f       	adc	r25, r29
    69e4:	e8 0f       	add	r30, r24
    69e6:	f9 1f       	adc	r31, r25
    69e8:	cd 01       	movw	r24, r26
    69ea:	85 0f       	add	r24, r21
    69ec:	91 1d       	adc	r25, r1
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;

                    for (i=0; i<ihex.reclen; i++)
    69ee:	02 c0       	rjmp	.+4      	; 0x69f4 <eeprom_panel+0x282>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    69f0:	2d 91       	ld	r18, X+
    69f2:	21 93       	st	Z+, r18
                    }
                    pageoffset = nextaddr & (PAGE_SIZE - 1);
                    if (pageoffset < pagestartaddr)
                        pagestartaddr = pageoffset;

                    for (i=0; i<ihex.reclen; i++)
    69f4:	a8 17       	cp	r26, r24
    69f6:	b9 07       	cpc	r27, r25
    69f8:	d9 f7       	brne	.-10     	; 0x69f0 <eeprom_panel+0x27e>
                        pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];

                    if ((pageoffset + ihex.reclen) > pageendaddr)
    69fa:	85 2f       	mov	r24, r21
    69fc:	90 e0       	ldi	r25, 0x00	; 0
    69fe:	84 0f       	add	r24, r20
    6a00:	91 1d       	adc	r25, r1
    6a02:	28 2d       	mov	r18, r8
    6a04:	30 e0       	ldi	r19, 0x00	; 0
    6a06:	28 17       	cp	r18, r24
    6a08:	39 07       	cpc	r19, r25
    6a0a:	a4 f5       	brge	.+104    	; 0x6a74 <eeprom_panel+0x302>
                        pageendaddr = pageoffset+ihex.reclen;
    6a0c:	84 2e       	mov	r8, r20
    6a0e:	85 0e       	add	r8, r21
    6a10:	31 c0       	rjmp	.+98     	; 0x6a74 <eeprom_panel+0x302>

                }
                else if (ihex.rectyp == 1)
    6a12:	21 30       	cpi	r18, 0x01	; 1
    6a14:	a9 f4       	brne	.+42     	; 0x6a40 <eeprom_panel+0x2ce>
                {
                    // end of file record
                    if (pagestartaddr != pageendaddr)
    6a16:	a8 14       	cp	r10, r8
    6a18:	c1 f1       	breq	.+112    	; 0x6a8a <eeprom_panel+0x318>
                    {
                        // flush the data in page buffer
                        paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
    6a1a:	16 95       	lsr	r17
    6a1c:	10 2f       	mov	r17, r16
    6a1e:	00 27       	eor	r16, r16
    6a20:	17 95       	ror	r17
    6a22:	07 95       	ror	r16
    6a24:	0a 0d       	add	r16, r10
    6a26:	11 1d       	adc	r17, r1
    6a28:	a8 01       	movw	r20, r16
    6a2a:	60 e0       	ldi	r22, 0x00	; 0
    6a2c:	70 e0       	ldi	r23, 0x00	; 0
                        psize = pageendaddr - pagestartaddr;
    6a2e:	28 2d       	mov	r18, r8
    6a30:	2a 19       	sub	r18, r10
                        progEEPage(twi, paddr, psize, &pagebuff[0]);
    6a32:	c7 01       	movw	r24, r14
    6a34:	8e 01       	movw	r16, r28
    6a36:	0f 5f       	subi	r16, 0xFF	; 255
    6a38:	1f 4f       	sbci	r17, 0xFF	; 255
    6a3a:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <progEEPage>
    6a3e:	25 c0       	rjmp	.+74     	; 0x6a8a <eeprom_panel+0x318>
                    }
                    break;
                }
                else
                {
                    xprintf(PSTR("don't know how to deal with rectype=%d at line %d of eeprom.hex.\n"),
    6a40:	00 d0       	rcall	.+0      	; 0x6a42 <eeprom_panel+0x2d0>
    6a42:	00 d0       	rcall	.+0      	; 0x6a44 <eeprom_panel+0x2d2>
    6a44:	ed b7       	in	r30, 0x3d	; 61
    6a46:	fe b7       	in	r31, 0x3e	; 62
    6a48:	31 96       	adiw	r30, 0x01	; 1
    6a4a:	85 e3       	ldi	r24, 0x35	; 53
    6a4c:	9f e0       	ldi	r25, 0x0F	; 15
    6a4e:	ad b7       	in	r26, 0x3d	; 61
    6a50:	be b7       	in	r27, 0x3e	; 62
    6a52:	11 96       	adiw	r26, 0x01	; 1
    6a54:	8d 93       	st	X+, r24
    6a56:	9c 93       	st	X, r25
    6a58:	12 97       	sbiw	r26, 0x02	; 2
    6a5a:	22 83       	std	Z+2, r18	; 0x02
    6a5c:	13 82       	std	Z+3, r1	; 0x03
    6a5e:	44 82       	std	Z+4, r4	; 0x04
    6a60:	55 82       	std	Z+5, r5	; 0x05
    6a62:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                            ihex.rectyp, lineno);
                    break;
    6a66:	ed b7       	in	r30, 0x3d	; 61
    6a68:	fe b7       	in	r31, 0x3e	; 62
    6a6a:	36 96       	adiw	r30, 0x06	; 6
    6a6c:	ed bf       	out	0x3d, r30	; 61
    6a6e:	fe bf       	out	0x3e, r31	; 62
    6a70:	0c c0       	rjmp	.+24     	; 0x6a8a <eeprom_panel+0x318>
            lineno++;
            len = strlen(eepromBuff);
            if (eepromBuff[len-1] == '\n')
                eepromBuff[--len] = 0;

            if (eepromBuff[0] != ':')
    6a72:	18 01       	movw	r2, r16
    6a74:	81 01       	movw	r16, r2
        lineno = 0;
        page = 65535;
        pagestartaddr = 0;
        pageendaddr = 0;
        xputs(PSTR("\nwriting:   "));
        while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &g_file_eeprom) != NULL)
    6a76:	c6 01       	movw	r24, r12
    6a78:	60 e0       	ldi	r22, 0x00	; 0
    6a7a:	71 e0       	ldi	r23, 0x01	; 1
    6a7c:	4a e3       	ldi	r20, 0x3A	; 58
    6a7e:	58 e2       	ldi	r21, 0x28	; 40
    6a80:	0e 94 7f 44 	call	0x88fe	; 0x88fe <f_gets>
    6a84:	00 97       	sbiw	r24, 0x00	; 0
    6a86:	09 f0       	breq	.+2      	; 0x6a8a <eeprom_panel+0x318>
    6a88:	0e cf       	rjmp	.-484    	; 0x68a6 <eeprom_panel+0x134>
                    break;
                }
            }
        }
        // rewind the the input file to the start for verification
        res = f_lseek(&g_file_eeprom, 0);
    6a8a:	8a e3       	ldi	r24, 0x3A	; 58
    6a8c:	98 e2       	ldi	r25, 0x28	; 40
    6a8e:	40 e0       	ldi	r20, 0x00	; 0
    6a90:	50 e0       	ldi	r21, 0x00	; 0
    6a92:	ba 01       	movw	r22, r20
    6a94:	0e 94 39 43 	call	0x8672	; 0x8672 <f_lseek>
    6a98:	18 2f       	mov	r17, r24
        if (res != FR_OK)
    6a9a:	88 23       	and	r24, r24
    6a9c:	49 f0       	breq	.+18     	; 0x6ab0 <eeprom_panel+0x33e>
        {
            xputs(PSTR("Error f_lseek in eeprom.hex.\n"));
    6a9e:	87 e1       	ldi	r24, 0x17	; 23
    6aa0:	9f e0       	ldi	r25, 0x0F	; 15
    6aa2:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
            put_rc(res);
    6aa6:	81 2f       	mov	r24, r17
    6aa8:	90 e0       	ldi	r25, 0x00	; 0
    6aaa:	0e 94 22 2a 	call	0x5444	; 0x5444 <put_rc>
    6aae:	2d c1       	rjmp	.+602    	; 0x6d0a <eeprom_panel+0x598>
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
    6ab0:	8a e0       	ldi	r24, 0x0A	; 10
    6ab2:	9f e0       	ldi	r25, 0x0F	; 15
    6ab4:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
            put_rc(res);
        }
        else
        {
            // verify the panel data
            lineno = 0;
    6ab8:	66 24       	eor	r6, r6
    6aba:	77 24       	eor	r7, r7
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
    6abc:	10 e0       	ldi	r17, 0x00	; 0
        else
        {
            // verify the panel data
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
    6abe:	00 e0       	ldi	r16, 0x00	; 0
        }
        else
        {
            // verify the panel data
            lineno = 0;
            page = 65535;
    6ac0:	aa 24       	eor	r10, r10
    6ac2:	aa 94       	dec	r10
    6ac4:	ba 2c       	mov	r11, r10
                    eepromBuff[--len] = 0;

                if (eepromBuff[0] != ':')
                    continue;

                rc = ihex_readrec(&ihex, eepromBuff);
    6ac6:	f6 e8       	ldi	r31, 0x86	; 134
    6ac8:	8f 2e       	mov	r8, r31
    6aca:	f1 e0       	ldi	r31, 0x01	; 1
    6acc:	9f 2e       	mov	r9, r31
    6ace:	8c 0e       	add	r8, r28
    6ad0:	9d 1e       	adc	r9, r29
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;

                        for (i=0; i<ihex.reclen; i++)
    6ad2:	c4 01       	movw	r24, r8
    6ad4:	04 96       	adiw	r24, 0x04	; 4
    6ad6:	c5 57       	subi	r28, 0x75	; 117
    6ad8:	dd 4f       	sbci	r29, 0xFD	; 253
    6ada:	88 83       	st	Y, r24
    6adc:	99 83       	std	Y+1, r25	; 0x01
    6ade:	cb 58       	subi	r28, 0x8B	; 139
    6ae0:	d2 40       	sbci	r29, 0x02	; 2
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &g_file_eeprom) != NULL)
    6ae2:	09 c1       	rjmp	.+530    	; 0x6cf6 <eeprom_panel+0x584>
            {
                lineno++;
    6ae4:	08 94       	sec
    6ae6:	61 1c       	adc	r6, r1
    6ae8:	71 1c       	adc	r7, r1
                len = strlen(eepromBuff);
    6aea:	f6 01       	movw	r30, r12
    6aec:	01 90       	ld	r0, Z+
    6aee:	00 20       	and	r0, r0
    6af0:	e9 f7       	brne	.-6      	; 0x6aec <eeprom_panel+0x37a>
    6af2:	31 97       	sbiw	r30, 0x01	; 1
    6af4:	ec 19       	sub	r30, r12
    6af6:	fd 09       	sbc	r31, r13
                if (eepromBuff[len-1] == '\n')
    6af8:	a6 e8       	ldi	r26, 0x86	; 134
    6afa:	b0 e0       	ldi	r27, 0x00	; 0
    6afc:	ac 0f       	add	r26, r28
    6afe:	bd 1f       	adc	r27, r29
    6b00:	ea 0f       	add	r30, r26
    6b02:	fb 1f       	adc	r31, r27
    6b04:	82 91       	ld	r24, -Z
    6b06:	8a 30       	cpi	r24, 0x0A	; 10
    6b08:	09 f4       	brne	.+2      	; 0x6b0c <eeprom_panel+0x39a>
                    eepromBuff[--len] = 0;
    6b0a:	10 82       	st	Z, r1

                if (eepromBuff[0] != ':')
    6b0c:	ca 57       	subi	r28, 0x7A	; 122
    6b0e:	df 4f       	sbci	r29, 0xFF	; 255
    6b10:	88 81       	ld	r24, Y
    6b12:	c6 58       	subi	r28, 0x86	; 134
    6b14:	d0 40       	sbci	r29, 0x00	; 0
    6b16:	8a 33       	cpi	r24, 0x3A	; 58
    6b18:	09 f0       	breq	.+2      	; 0x6b1c <eeprom_panel+0x3aa>
    6b1a:	eb c0       	rjmp	.+470    	; 0x6cf2 <eeprom_panel+0x580>
                    continue;

                rc = ihex_readrec(&ihex, eepromBuff);
    6b1c:	c4 01       	movw	r24, r8
    6b1e:	b6 01       	movw	r22, r12
    6b20:	0e 94 47 2a 	call	0x548e	; 0x548e <ihex_readrec>
                if (rc < 0)
                {
                    xprintf(PSTR("invalid record at line %d of eeprom.hex\n"), lineno);
                    break;
                }
                else if (rc != ihex.cksum)
    6b24:	c6 57       	subi	r28, 0x76	; 118
    6b26:	dd 4f       	sbci	r29, 0xFD	; 253
    6b28:	98 81       	ld	r25, Y
    6b2a:	ca 58       	subi	r28, 0x8A	; 138
    6b2c:	d2 40       	sbci	r29, 0x02	; 2
    6b2e:	89 17       	cp	r24, r25
    6b30:	69 f1       	breq	.+90     	; 0x6b8c <eeprom_panel+0x41a>
                {
                    xprintf(PSTR("ERROR: checksum mismatch at line %d of eeprom.hex\n"), lineno);
    6b32:	00 d0       	rcall	.+0      	; 0x6b34 <eeprom_panel+0x3c2>
    6b34:	0f 92       	push	r0
    6b36:	27 ed       	ldi	r18, 0xD7	; 215
    6b38:	3e e0       	ldi	r19, 0x0E	; 14
    6b3a:	ed b7       	in	r30, 0x3d	; 61
    6b3c:	fe b7       	in	r31, 0x3e	; 62
    6b3e:	21 83       	std	Z+1, r18	; 0x01
    6b40:	32 83       	std	Z+2, r19	; 0x02
    6b42:	63 82       	std	Z+3, r6	; 0x03
    6b44:	74 82       	std	Z+4, r7	; 0x04
    6b46:	c1 57       	subi	r28, 0x71	; 113
    6b48:	dd 4f       	sbci	r29, 0xFD	; 253
    6b4a:	88 83       	st	Y, r24
    6b4c:	cf 58       	subi	r28, 0x8F	; 143
    6b4e:	d2 40       	sbci	r29, 0x02	; 2
    6b50:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                    xprintf(PSTR("checksum=0x%02x, computed checksum=0x%02x\n"), ihex.cksum, rc);
    6b54:	0f 92       	push	r0
    6b56:	0f 92       	push	r0
    6b58:	ed b7       	in	r30, 0x3d	; 61
    6b5a:	fe b7       	in	r31, 0x3e	; 62
    6b5c:	31 96       	adiw	r30, 0x01	; 1
    6b5e:	2c ea       	ldi	r18, 0xAC	; 172
    6b60:	3e e0       	ldi	r19, 0x0E	; 14
    6b62:	ad b7       	in	r26, 0x3d	; 61
    6b64:	be b7       	in	r27, 0x3e	; 62
    6b66:	11 96       	adiw	r26, 0x01	; 1
    6b68:	2d 93       	st	X+, r18
    6b6a:	3c 93       	st	X, r19
    6b6c:	12 97       	sbiw	r26, 0x02	; 2
    6b6e:	c6 57       	subi	r28, 0x76	; 118
    6b70:	dd 4f       	sbci	r29, 0xFD	; 253
    6b72:	98 81       	ld	r25, Y
    6b74:	ca 58       	subi	r28, 0x8A	; 138
    6b76:	d2 40       	sbci	r29, 0x02	; 2
    6b78:	92 83       	std	Z+2, r25	; 0x02
    6b7a:	13 82       	std	Z+3, r1	; 0x03
    6b7c:	c1 57       	subi	r28, 0x71	; 113
    6b7e:	dd 4f       	sbci	r29, 0xFD	; 253
    6b80:	88 81       	ld	r24, Y
    6b82:	cf 58       	subi	r28, 0x8F	; 143
    6b84:	d2 40       	sbci	r29, 0x02	; 2
    6b86:	84 83       	std	Z+4, r24	; 0x04
    6b88:	15 82       	std	Z+5, r1	; 0x05
    6b8a:	ab c0       	rjmp	.+342    	; 0x6ce2 <eeprom_panel+0x570>
                    break;
                }
                else
                {
                    if (ihex.rectyp == 0)
    6b8c:	d4 01       	movw	r26, r8
    6b8e:	13 96       	adiw	r26, 0x03	; 3
    6b90:	2c 91       	ld	r18, X
    6b92:	13 97       	sbiw	r26, 0x03	; 3
    6b94:	22 23       	and	r18, r18
    6b96:	09 f0       	breq	.+2      	; 0x6b9a <eeprom_panel+0x428>
    6b98:	62 c0       	rjmp	.+196    	; 0x6c5e <eeprom_panel+0x4ec>
                    {
                        // data record
                        nextaddr = ihex.loadofs;
    6b9a:	11 96       	adiw	r26, 0x01	; 1
    6b9c:	2d 90       	ld	r2, X+
    6b9e:	3c 90       	ld	r3, X
    6ba0:	12 97       	sbiw	r26, 0x02	; 2
                        if ((nextaddr >> PAGE_SIZE_SHIFT) != page)
    6ba2:	21 01       	movw	r4, r2
    6ba4:	44 0c       	add	r4, r4
    6ba6:	45 2c       	mov	r4, r5
    6ba8:	44 1c       	adc	r4, r4
    6baa:	55 08       	sbc	r5, r5
    6bac:	51 94       	neg	r5
    6bae:	4a 14       	cp	r4, r10
    6bb0:	5b 04       	cpc	r5, r11
    6bb2:	49 f1       	breq	.+82     	; 0x6c06 <eeprom_panel+0x494>
                        {
                            // this record is for a different page - check if we need to flush the current page
                            if (pagestartaddr != pageendaddr)
    6bb4:	01 17       	cp	r16, r17
    6bb6:	21 f1       	breq	.+72     	; 0x6c00 <eeprom_panel+0x48e>
                            {
                                // flush data in page buffer
                                paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
    6bb8:	a5 01       	movw	r20, r10
    6bba:	56 95       	lsr	r21
    6bbc:	54 2f       	mov	r21, r20
    6bbe:	44 27       	eor	r20, r20
    6bc0:	57 95       	ror	r21
    6bc2:	47 95       	ror	r20
    6bc4:	40 0f       	add	r20, r16
    6bc6:	51 1d       	adc	r21, r1
    6bc8:	60 e0       	ldi	r22, 0x00	; 0
    6bca:	70 e0       	ldi	r23, 0x00	; 0
                                psize = pageendaddr - pagestartaddr;
    6bcc:	21 2f       	mov	r18, r17
    6bce:	20 1b       	sub	r18, r16
                                if (verifyEEPage(twi, paddr, psize, &pagebuff[0])==0)
    6bd0:	c7 01       	movw	r24, r14
    6bd2:	8e 01       	movw	r16, r28
    6bd4:	0f 5f       	subi	r16, 0xFF	; 255
    6bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    6bd8:	0e 94 2f 30 	call	0x605e	; 0x605e <verifyEEPage>
    6bdc:	00 97       	sbiw	r24, 0x00	; 0
    6bde:	81 f4       	brne	.+32     	; 0x6c00 <eeprom_panel+0x48e>
                                    xprintf(PSTR("verify mismatch for page %d\n"), page);
    6be0:	00 d0       	rcall	.+0      	; 0x6be2 <eeprom_panel+0x470>
    6be2:	0f 92       	push	r0
    6be4:	8f e8       	ldi	r24, 0x8F	; 143
    6be6:	9e e0       	ldi	r25, 0x0E	; 14
    6be8:	ed b7       	in	r30, 0x3d	; 61
    6bea:	fe b7       	in	r31, 0x3e	; 62
    6bec:	81 83       	std	Z+1, r24	; 0x01
    6bee:	92 83       	std	Z+2, r25	; 0x02
    6bf0:	a3 82       	std	Z+3, r10	; 0x03
    6bf2:	b4 82       	std	Z+4, r11	; 0x04
    6bf4:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    6bf8:	0f 90       	pop	r0
    6bfa:	0f 90       	pop	r0
    6bfc:	0f 90       	pop	r0
    6bfe:	0f 90       	pop	r0

                            }
                            page = (nextaddr >> PAGE_SIZE_SHIFT);
                            pagestartaddr = pageendaddr = nextaddr & (PAGE_SIZE - 1);
    6c00:	12 2d       	mov	r17, r2
    6c02:	1f 77       	andi	r17, 0x7F	; 127
    6c04:	01 2f       	mov	r16, r17
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
    6c06:	42 2d       	mov	r20, r2
    6c08:	4f 77       	andi	r20, 0x7F	; 127
    6c0a:	40 17       	cp	r20, r16
    6c0c:	08 f4       	brcc	.+2      	; 0x6c10 <eeprom_panel+0x49e>
    6c0e:	04 2f       	mov	r16, r20
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;

                        for (i=0; i<ihex.reclen; i++)
    6c10:	d4 01       	movw	r26, r8
    6c12:	5c 91       	ld	r21, X
    6c14:	c5 57       	subi	r28, 0x75	; 117
    6c16:	dd 4f       	sbci	r29, 0xFD	; 253
    6c18:	a8 81       	ld	r26, Y
    6c1a:	b9 81       	ldd	r27, Y+1	; 0x01
    6c1c:	cb 58       	subi	r28, 0x8B	; 139
    6c1e:	d2 40       	sbci	r29, 0x02	; 2
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    6c20:	e4 2f       	mov	r30, r20
    6c22:	f0 e0       	ldi	r31, 0x00	; 0
    6c24:	35 96       	adiw	r30, 0x05	; 5
    {
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    }
};

void eeprom_panel(uint8_t panel_num)
    6c26:	81 e0       	ldi	r24, 0x01	; 1
    6c28:	90 e0       	ldi	r25, 0x00	; 0
    6c2a:	8c 0f       	add	r24, r28
    6c2c:	9d 1f       	adc	r25, r29
    6c2e:	e8 0f       	add	r30, r24
    6c30:	f9 1f       	adc	r31, r25
    6c32:	cd 01       	movw	r24, r26
    6c34:	85 0f       	add	r24, r21
    6c36:	91 1d       	adc	r25, r1
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;

                        for (i=0; i<ihex.reclen; i++)
    6c38:	02 c0       	rjmp	.+4      	; 0x6c3e <eeprom_panel+0x4cc>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];
    6c3a:	2d 91       	ld	r18, X+
    6c3c:	21 93       	st	Z+, r18
                        }
                        pageoffset = nextaddr & (PAGE_SIZE - 1);
                        if (pageoffset < pagestartaddr)
                            pagestartaddr = pageoffset;

                        for (i=0; i<ihex.reclen; i++)
    6c3e:	a8 17       	cp	r26, r24
    6c40:	b9 07       	cpc	r27, r25
    6c42:	d9 f7       	brne	.-10     	; 0x6c3a <eeprom_panel+0x4c8>
                            pagebuff[pageoffset+i+HEADER_SIZE] = ihex.data[i];

                        if ((pageoffset + ihex.reclen) > pageendaddr)
    6c44:	85 2f       	mov	r24, r21
    6c46:	90 e0       	ldi	r25, 0x00	; 0
    6c48:	84 0f       	add	r24, r20
    6c4a:	91 1d       	adc	r25, r1
    6c4c:	21 2f       	mov	r18, r17
    6c4e:	30 e0       	ldi	r19, 0x00	; 0
    6c50:	28 17       	cp	r18, r24
    6c52:	39 07       	cpc	r19, r25
    6c54:	0c f0       	brlt	.+2      	; 0x6c58 <eeprom_panel+0x4e6>
    6c56:	4e c0       	rjmp	.+156    	; 0x6cf4 <eeprom_panel+0x582>
                            pageendaddr = pageoffset+ihex.reclen;
    6c58:	14 2f       	mov	r17, r20
    6c5a:	15 0f       	add	r17, r21
    6c5c:	4b c0       	rjmp	.+150    	; 0x6cf4 <eeprom_panel+0x582>

                    }
                    else if (ihex.rectyp == 1)
    6c5e:	21 30       	cpi	r18, 0x01	; 1
    6c60:	79 f5       	brne	.+94     	; 0x6cc0 <eeprom_panel+0x54e>
                    {
                        // end of file record
                        if (pagestartaddr != pageendaddr)
    6c62:	01 17       	cp	r16, r17
    6c64:	41 f1       	breq	.+80     	; 0x6cb6 <eeprom_panel+0x544>
                        {
                            // flush the data in page buffer
                            paddr = (page << PAGE_SIZE_SHIFT) + pagestartaddr;
    6c66:	a5 01       	movw	r20, r10
    6c68:	56 95       	lsr	r21
    6c6a:	54 2f       	mov	r21, r20
    6c6c:	44 27       	eor	r20, r20
    6c6e:	57 95       	ror	r21
    6c70:	47 95       	ror	r20
    6c72:	40 0f       	add	r20, r16
    6c74:	51 1d       	adc	r21, r1
    6c76:	60 e0       	ldi	r22, 0x00	; 0
    6c78:	70 e0       	ldi	r23, 0x00	; 0
                            psize = pageendaddr - pagestartaddr;
    6c7a:	21 2f       	mov	r18, r17
    6c7c:	20 1b       	sub	r18, r16
                            if (verifyEEPage(twi, paddr, psize, &pagebuff[0])==0)
    6c7e:	c7 01       	movw	r24, r14
    6c80:	8e 01       	movw	r16, r28
    6c82:	0f 5f       	subi	r16, 0xFF	; 255
    6c84:	1f 4f       	sbci	r17, 0xFF	; 255
    6c86:	0e 94 2f 30 	call	0x605e	; 0x605e <verifyEEPage>
    6c8a:	00 97       	sbiw	r24, 0x00	; 0
    6c8c:	a1 f4       	brne	.+40     	; 0x6cb6 <eeprom_panel+0x544>
                                xprintf(PSTR("verify mismatch for page %d\n"), page);
    6c8e:	00 d0       	rcall	.+0      	; 0x6c90 <eeprom_panel+0x51e>
    6c90:	0f 92       	push	r0
    6c92:	82 e7       	ldi	r24, 0x72	; 114
    6c94:	9e e0       	ldi	r25, 0x0E	; 14
    6c96:	ad b7       	in	r26, 0x3d	; 61
    6c98:	be b7       	in	r27, 0x3e	; 62
    6c9a:	11 96       	adiw	r26, 0x01	; 1
    6c9c:	8d 93       	st	X+, r24
    6c9e:	9c 93       	st	X, r25
    6ca0:	12 97       	sbiw	r26, 0x02	; 2
    6ca2:	13 96       	adiw	r26, 0x03	; 3
    6ca4:	ad 92       	st	X+, r10
    6ca6:	bc 92       	st	X, r11
    6ca8:	14 97       	sbiw	r26, 0x04	; 4
    6caa:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    6cae:	0f 90       	pop	r0
    6cb0:	0f 90       	pop	r0
    6cb2:	0f 90       	pop	r0
    6cb4:	0f 90       	pop	r0

                        }
                        xputs(PSTR("\n"));
    6cb6:	80 e7       	ldi	r24, 0x70	; 112
    6cb8:	9e e0       	ldi	r25, 0x0E	; 14
    6cba:	0e 94 30 4a 	call	0x9460	; 0x9460 <xputs>
                        break;
    6cbe:	25 c0       	rjmp	.+74     	; 0x6d0a <eeprom_panel+0x598>
                    }
                    else
                    {
                        xprintf(PSTR("don't know how to deal with rectype=%d at line %d of eeprom.hex\n"),
    6cc0:	00 d0       	rcall	.+0      	; 0x6cc2 <eeprom_panel+0x550>
    6cc2:	00 d0       	rcall	.+0      	; 0x6cc4 <eeprom_panel+0x552>
    6cc4:	ed b7       	in	r30, 0x3d	; 61
    6cc6:	fe b7       	in	r31, 0x3e	; 62
    6cc8:	31 96       	adiw	r30, 0x01	; 1
    6cca:	8f e2       	ldi	r24, 0x2F	; 47
    6ccc:	9e e0       	ldi	r25, 0x0E	; 14
    6cce:	ad b7       	in	r26, 0x3d	; 61
    6cd0:	be b7       	in	r27, 0x3e	; 62
    6cd2:	11 96       	adiw	r26, 0x01	; 1
    6cd4:	8d 93       	st	X+, r24
    6cd6:	9c 93       	st	X, r25
    6cd8:	12 97       	sbiw	r26, 0x02	; 2
    6cda:	22 83       	std	Z+2, r18	; 0x02
    6cdc:	13 82       	std	Z+3, r1	; 0x03
    6cde:	64 82       	std	Z+4, r6	; 0x04
    6ce0:	75 82       	std	Z+5, r7	; 0x05
    6ce2:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
                                ihex.rectyp, lineno);
                        break;
    6ce6:	ed b7       	in	r30, 0x3d	; 61
    6ce8:	fe b7       	in	r31, 0x3e	; 62
    6cea:	36 96       	adiw	r30, 0x06	; 6
    6cec:	ed bf       	out	0x3d, r30	; 61
    6cee:	fe bf       	out	0x3e, r31	; 62
    6cf0:	0c c0       	rjmp	.+24     	; 0x6d0a <eeprom_panel+0x598>
                lineno++;
                len = strlen(eepromBuff);
                if (eepromBuff[len-1] == '\n')
                    eepromBuff[--len] = 0;

                if (eepromBuff[0] != ':')
    6cf2:	25 01       	movw	r4, r10
    6cf4:	52 01       	movw	r10, r4
            lineno = 0;
            page = 65535;
            pagestartaddr = 0;
            pageendaddr = 0;
            xputs(PSTR("\nverifying: "));
            while (f_gets((char*)eepromBuff, sizeof(eepromBuff), &g_file_eeprom) != NULL)
    6cf6:	c6 01       	movw	r24, r12
    6cf8:	60 e0       	ldi	r22, 0x00	; 0
    6cfa:	71 e0       	ldi	r23, 0x01	; 1
    6cfc:	4a e3       	ldi	r20, 0x3A	; 58
    6cfe:	58 e2       	ldi	r21, 0x28	; 40
    6d00:	0e 94 7f 44 	call	0x88fe	; 0x88fe <f_gets>
    6d04:	00 97       	sbiw	r24, 0x00	; 0
    6d06:	09 f0       	breq	.+2      	; 0x6d0a <eeprom_panel+0x598>
    6d08:	ed ce       	rjmp	.-550    	; 0x6ae4 <eeprom_panel+0x372>
                    }
                }
            }
        }
        // exit bootloader
        pagebuff[0] = 'E';
    6d0a:	85 e4       	ldi	r24, 0x45	; 69
    6d0c:	89 83       	std	Y+1, r24	; 0x01
        TWI_MasterWriteRead(twi, PANEL_BL_ADDR, &pagebuff[0], 1, 0);
    6d0e:	c7 01       	movw	r24, r14
    6d10:	60 e7       	ldi	r22, 0x70	; 112
    6d12:	ae 01       	movw	r20, r28
    6d14:	4f 5f       	subi	r20, 0xFF	; 255
    6d16:	5f 4f       	sbci	r21, 0xFF	; 255
    6d18:	21 e0       	ldi	r18, 0x01	; 1
    6d1a:	00 e0       	ldi	r16, 0x00	; 0
    6d1c:	0e 94 af 39 	call	0x735e	; 0x735e <TWI_MasterWriteRead>
        while (twi->status != TWIM_STATUS_READY)
    6d20:	d7 01       	movw	r26, r14
    6d22:	1d 96       	adiw	r26, 0x0d	; 13
    6d24:	8c 91       	ld	r24, X
    6d26:	1d 97       	sbiw	r26, 0x0d	; 13
    6d28:	88 23       	and	r24, r24
    6d2a:	d1 f7       	brne	.-12     	; 0x6d20 <eeprom_panel+0x5ae>
        {
            /* Wait until transaction is complete. */
        }
        if (twi->result != TWIM_RESULT_OK)
    6d2c:	f7 01       	movw	r30, r14
    6d2e:	86 85       	ldd	r24, Z+14	; 0x0e
    6d30:	81 30       	cpi	r24, 0x01	; 1
    6d32:	09 f1       	breq	.+66     	; 0x6d76 <eeprom_panel+0x604>
            xprintf(PSTR("Bad exit cmd, result = %u\n"), twi->result);
    6d34:	26 85       	ldd	r18, Z+14	; 0x0e
    6d36:	00 d0       	rcall	.+0      	; 0x6d38 <eeprom_panel+0x5c6>
    6d38:	0f 92       	push	r0
    6d3a:	ed b7       	in	r30, 0x3d	; 61
    6d3c:	fe b7       	in	r31, 0x3e	; 62
    6d3e:	31 96       	adiw	r30, 0x01	; 1
    6d40:	84 e1       	ldi	r24, 0x14	; 20
    6d42:	9e e0       	ldi	r25, 0x0E	; 14
    6d44:	ad b7       	in	r26, 0x3d	; 61
    6d46:	be b7       	in	r27, 0x3e	; 62
    6d48:	11 96       	adiw	r26, 0x01	; 1
    6d4a:	8d 93       	st	X+, r24
    6d4c:	9c 93       	st	X, r25
    6d4e:	12 97       	sbiw	r26, 0x02	; 2
    6d50:	22 83       	std	Z+2, r18	; 0x02
    6d52:	13 82       	std	Z+3, r1	; 0x03
    6d54:	0a c0       	rjmp	.+20     	; 0x6d6a <eeprom_panel+0x5f8>
        
    }else{
        xprintf(PSTR("Cannot find the panel %d.\n"), panel_num);
    6d56:	00 d0       	rcall	.+0      	; 0x6d58 <eeprom_panel+0x5e6>
    6d58:	0f 92       	push	r0
    6d5a:	89 ef       	ldi	r24, 0xF9	; 249
    6d5c:	9d e0       	ldi	r25, 0x0D	; 13
    6d5e:	ed b7       	in	r30, 0x3d	; 61
    6d60:	fe b7       	in	r31, 0x3e	; 62
    6d62:	81 83       	std	Z+1, r24	; 0x01
    6d64:	92 83       	std	Z+2, r25	; 0x02
    6d66:	03 83       	std	Z+3, r16	; 0x03
    6d68:	14 83       	std	Z+4, r17	; 0x04
    6d6a:	0e 94 72 4a 	call	0x94e4	; 0x94e4 <xprintf>
    6d6e:	0f 90       	pop	r0
    6d70:	0f 90       	pop	r0
    6d72:	0f 90       	pop	r0
    6d74:	0f 90       	pop	r0
    }
    
};
    6d76:	c1 57       	subi	r28, 0x71	; 113
    6d78:	dd 4f       	sbci	r29, 0xFD	; 253
    6d7a:	e2 e1       	ldi	r30, 0x12	; 18
    6d7c:	0c 94 d3 4b 	jmp	0x97a6	; 0x97a6 <__epilogue_restores__>

00006d80 <createRxBuff>:
rxFIFO rxfifo;


void createRxBuff(uint8_t mode) {

if (mode == 0xff) {
    6d80:	8f 3f       	cpi	r24, 0xFF	; 255
    6d82:	59 f4       	brne	.+22     	; 0x6d9a <createRxBuff+0x1a>
 rxfifo.PRxBuff = malloc(64);
    6d84:	80 e4       	ldi	r24, 0x40	; 64
    6d86:	90 e0       	ldi	r25, 0x00	; 0
    6d88:	0e 94 f1 4b 	call	0x97e2	; 0x97e2 <malloc>
    6d8c:	80 93 6c 24 	sts	0x246C, r24
    6d90:	90 93 6d 24 	sts	0x246D, r25
 rxfifo.size = 64;
    6d94:	80 e4       	ldi	r24, 0x40	; 64
    6d96:	90 e0       	ldi	r25, 0x00	; 0
    6d98:	0a c0       	rjmp	.+20     	; 0x6dae <createRxBuff+0x2e>
}
else {
 rxfifo.PRxBuff = malloc(1550);
    6d9a:	8e e0       	ldi	r24, 0x0E	; 14
    6d9c:	96 e0       	ldi	r25, 0x06	; 6
    6d9e:	0e 94 f1 4b 	call	0x97e2	; 0x97e2 <malloc>
    6da2:	80 93 6c 24 	sts	0x246C, r24
    6da6:	90 93 6d 24 	sts	0x246D, r25
 rxfifo.size = 1550;
    6daa:	8e e0       	ldi	r24, 0x0E	; 14
    6dac:	96 e0       	ldi	r25, 0x06	; 6
    6dae:	80 93 6a 24 	sts	0x246A, r24
    6db2:	90 93 6b 24 	sts	0x246B, r25
    6db6:	08 95       	ret

00006db8 <releaseRxBuff>:
}


void releaseRxBuff( ) {

free(rxfifo.PRxBuff);
    6db8:	80 91 6c 24 	lds	r24, 0x246C
    6dbc:	90 91 6d 24 	lds	r25, 0x246D
    6dc0:	0e 94 8b 4c 	call	0x9916	; 0x9916 <free>

}
    6dc4:	08 95       	ret

00006dc6 <uart_init>:
/* Initialize UART */

void uart_init()
{

  rxfifo.idx_r = 0;
    6dc6:	10 92 66 24 	sts	0x2466, r1
    6dca:	10 92 67 24 	sts	0x2467, r1
  rxfifo.idx_w = 0;
    6dce:	e6 e6       	ldi	r30, 0x66	; 102
    6dd0:	f4 e2       	ldi	r31, 0x24	; 36
    6dd2:	32 97       	sbiw	r30, 0x02	; 2
    6dd4:	11 92       	st	Z+, r1
    6dd6:	10 82       	st	Z, r1
    6dd8:	31 97       	sbiw	r30, 0x01	; 1
  rxfifo.count = 0;
    6dda:	14 82       	std	Z+4, r1	; 0x04
    6ddc:	15 82       	std	Z+5, r1	; 0x05
  txfifo.idx_r = 0;
    6dde:	10 92 22 24 	sts	0x2422, r1
  txfifo.idx_w = 0;
    6de2:	e2 e2       	ldi	r30, 0x22	; 34
    6de4:	f4 e2       	ldi	r31, 0x24	; 36
    6de6:	12 92       	st	-Z, r1
  txfifo.count = 0;
    6de8:	12 82       	std	Z+2, r1	; 0x02
//  USARTC0.BAUDCTRLB = 0xA1;   // ==> 230400 bps 
  
//  USARTC0.BAUDCTRLA = 0xD6;   // BSCALE = -6, BSEL = 214
//  USARTC0.BAUDCTRLB = 0xA0;   // ==> 460800 bps
  
  USARTC0.BAUDCTRLA = 0x4B;   // BSCALE = -6, BSEL = 75
    6dea:	e0 ea       	ldi	r30, 0xA0	; 160
    6dec:	f8 e0       	ldi	r31, 0x08	; 8
    6dee:	8b e4       	ldi	r24, 0x4B	; 75
    6df0:	86 83       	std	Z+6, r24	; 0x06
  USARTC0.BAUDCTRLB = 0xA0;   // ==> 921600 bps
    6df2:	80 ea       	ldi	r24, 0xA0	; 160
    6df4:	87 83       	std	Z+7, r24	; 0x07
  
//  USARTC0.BAUDCTRLA = 0x05;   // BSCALE = -6, BSEL = 5
//  USARTC0.BAUDCTRLB = 0xA0;   // ==> 1843200 bps
  
  USARTC0.CTRLA = 0x10;       // RX is low level interrupt
    6df6:	80 e1       	ldi	r24, 0x10	; 16
    6df8:	83 83       	std	Z+3, r24	; 0x03
  USARTC0.CTRLC = 0x03;       // Async, No Parity, 1 stop bit, 8 data bits
    6dfa:	83 e0       	ldi	r24, 0x03	; 3
    6dfc:	85 83       	std	Z+5, r24	; 0x05
  USARTC0.CTRLB = 0x18;       // Enable RX and TX
    6dfe:	88 e1       	ldi	r24, 0x18	; 24
    6e00:	84 83       	std	Z+4, r24	; 0x04
}
    6e02:	08 95       	ret

00006e04 <uart_test>:

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    6e04:	20 91 68 24 	lds	r18, 0x2468
    6e08:	30 91 69 24 	lds	r19, 0x2469
}
    6e0c:	c9 01       	movw	r24, r18
    6e0e:	08 95       	ret

00006e10 <uart_get>:
uint8_t uart_get ()
{
  uint16_t i;
  uint8_t d;

  i = rxfifo.idx_r;
    6e10:	20 91 66 24 	lds	r18, 0x2466
    6e14:	30 91 67 24 	lds	r19, 0x2467
  while(rxfifo.count == 0);
    6e18:	80 91 68 24 	lds	r24, 0x2468
    6e1c:	90 91 69 24 	lds	r25, 0x2469
    6e20:	00 97       	sbiw	r24, 0x00	; 0
    6e22:	d1 f3       	breq	.-12     	; 0x6e18 <uart_get+0x8>
  d = *(rxfifo.PRxBuff+i++);
    6e24:	e0 91 6c 24 	lds	r30, 0x246C
    6e28:	f0 91 6d 24 	lds	r31, 0x246D
    6e2c:	e2 0f       	add	r30, r18
    6e2e:	f3 1f       	adc	r31, r19
    6e30:	80 81       	ld	r24, Z
    6e32:	2f 5f       	subi	r18, 0xFF	; 255
    6e34:	3f 4f       	sbci	r19, 0xFF	; 255
  cli();
    6e36:	f8 94       	cli
  rxfifo.count--;
    6e38:	40 91 68 24 	lds	r20, 0x2468
    6e3c:	50 91 69 24 	lds	r21, 0x2469
    6e40:	41 50       	subi	r20, 0x01	; 1
    6e42:	50 40       	sbci	r21, 0x00	; 0
    6e44:	40 93 68 24 	sts	0x2468, r20
    6e48:	50 93 69 24 	sts	0x2469, r21
  sei();
    6e4c:	78 94       	sei
  if(i >= rxfifo.size)
    6e4e:	40 91 6a 24 	lds	r20, 0x246A
    6e52:	50 91 6b 24 	lds	r21, 0x246B
    6e56:	24 17       	cp	r18, r20
    6e58:	35 07       	cpc	r19, r21
    6e5a:	10 f0       	brcs	.+4      	; 0x6e60 <uart_get+0x50>
    i = 0;
    6e5c:	20 e0       	ldi	r18, 0x00	; 0
    6e5e:	30 e0       	ldi	r19, 0x00	; 0
  rxfifo.idx_r = i;
    6e60:	20 93 66 24 	sts	0x2466, r18
    6e64:	30 93 67 24 	sts	0x2467, r19

  return d;
}
    6e68:	08 95       	ret

00006e6a <uart_put>:

void uart_put (uint8_t d)
{
  uint8_t i;

  i = txfifo.idx_w;
    6e6a:	90 91 21 24 	lds	r25, 0x2421
  while(txfifo.count >= sizeof(txfifo.buff));
    6e6e:	20 91 23 24 	lds	r18, 0x2423
    6e72:	20 34       	cpi	r18, 0x40	; 64
    6e74:	e0 f7       	brcc	.-8      	; 0x6e6e <uart_put+0x4>
  txfifo.buff[i++] = d;
    6e76:	e9 2f       	mov	r30, r25
    6e78:	f0 e0       	ldi	r31, 0x00	; 0
    6e7a:	ef 5d       	subi	r30, 0xDF	; 223
    6e7c:	fb 4d       	sbci	r31, 0xDB	; 219
    6e7e:	83 83       	std	Z+3, r24	; 0x03
    6e80:	89 2f       	mov	r24, r25
    6e82:	8f 5f       	subi	r24, 0xFF	; 255
  cli();
    6e84:	f8 94       	cli
  txfifo.count++;
    6e86:	90 91 23 24 	lds	r25, 0x2423
    6e8a:	9f 5f       	subi	r25, 0xFF	; 255
    6e8c:	90 93 23 24 	sts	0x2423, r25
  USARTC0.CTRLA = USART_RXCINTLVL0_bm | USART_DREINTLVL0_bm;
    6e90:	91 e1       	ldi	r25, 0x11	; 17
    6e92:	e0 ea       	ldi	r30, 0xA0	; 160
    6e94:	f8 e0       	ldi	r31, 0x08	; 8
    6e96:	93 83       	std	Z+3, r25	; 0x03

  sei();
    6e98:	78 94       	sei
  if(i >= sizeof(txfifo.buff))
    6e9a:	80 34       	cpi	r24, 0x40	; 64
    6e9c:	08 f0       	brcs	.+2      	; 0x6ea0 <uart_put+0x36>
    i = 0;
    6e9e:	80 e0       	ldi	r24, 0x00	; 0
  txfifo.idx_w = i;
    6ea0:	80 93 21 24 	sts	0x2421, r24
}
    6ea4:	08 95       	ret

00006ea6 <uart_putstr>:

// Sends a String to the serial port
void uart_putstr(uint8_t *s)
{
    6ea6:	cf 93       	push	r28
    6ea8:	df 93       	push	r29
    6eaa:	ec 01       	movw	r28, r24
  uint8_t d;
  while(d = pgm_read_byte_near(s)) {
    6eac:	03 c0       	rjmp	.+6      	; 0x6eb4 <uart_putstr+0xe>
    uart_put(d);
    6eae:	0e 94 35 37 	call	0x6e6a	; 0x6e6a <uart_put>
    s++;
    6eb2:	21 96       	adiw	r28, 0x01	; 1

// Sends a String to the serial port
void uart_putstr(uint8_t *s)
{
  uint8_t d;
  while(d = pgm_read_byte_near(s)) {
    6eb4:	fe 01       	movw	r30, r28
    6eb6:	84 91       	lpm	r24, Z+
    6eb8:	88 23       	and	r24, r24
    6eba:	c9 f7       	brne	.-14     	; 0x6eae <uart_putstr+0x8>
    uart_put(d);
    s++;
  }
}
    6ebc:	df 91       	pop	r29
    6ebe:	cf 91       	pop	r28
    6ec0:	08 95       	ret

00006ec2 <uart_crlf>:

// Sends a Carriage Return and Line Feed to the serial port
void uart_crlf()
{
  uart_put(CR);
    6ec2:	8d e0       	ldi	r24, 0x0D	; 13
    6ec4:	0e 94 35 37 	call	0x6e6a	; 0x6e6a <uart_put>
  uart_put(LF);
    6ec8:	8a e0       	ldi	r24, 0x0A	; 10
    6eca:	0e 94 35 37 	call	0x6e6a	; 0x6e6a <uart_put>
}
    6ece:	08 95       	ret

00006ed0 <fill_Rx_buffer>:

//Notes: this function expects the first byte in the buffer to be the length of the message
//only call this after a while(!(uart_test())); command

uint16_t fill_Rx_buffer(uint8_t *Rx_buffer)
{	
    6ed0:	af 92       	push	r10
    6ed2:	bf 92       	push	r11
    6ed4:	df 92       	push	r13
    6ed6:	ef 92       	push	r14
    6ed8:	ff 92       	push	r15
    6eda:	0f 93       	push	r16
    6edc:	1f 93       	push	r17
    6ede:	cf 93       	push	r28
    6ee0:	df 93       	push	r29
    6ee2:	08 2f       	mov	r16, r24
    6ee4:	e9 2e       	mov	r14, r25

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    6ee6:	20 91 68 24 	lds	r18, 0x2468
    6eea:	30 91 69 24 	lds	r19, 0x2469
	uint16_t data_length, i;
	
	message_length = 0;
	//err_flag = 1;
	
	if (uart_test())
    6eee:	21 15       	cp	r18, r1
    6ef0:	31 05       	cpc	r19, r1
    6ef2:	e1 f1       	breq	.+120    	; 0x6f6c <fill_Rx_buffer+0x9c>
	{
		message_length = uart_get();
    6ef4:	0e 94 08 37 	call	0x6e10	; 0x6e10 <uart_get>
    6ef8:	d8 2e       	mov	r13, r24
		
		if (message_length == 50)
    6efa:	82 33       	cpi	r24, 0x32	; 50
    6efc:	31 f0       	breq	.+12     	; 0x6f0a <fill_Rx_buffer+0x3a>
    6efe:	1e 2d       	mov	r17, r14
    6f00:	c0 e0       	ldi	r28, 0x00	; 0
    6f02:	d0 e0       	ldi	r29, 0x00	; 0
			}
			
								
		}	
        else	
			for (i = 0; i < message_length; i++)
    6f04:	ed 2c       	mov	r14, r13
    6f06:	ff 24       	eor	r15, r15
    6f08:	2d c0       	rjmp	.+90     	; 0x6f64 <fill_Rx_buffer+0x94>
		
		if (message_length == 50)
		{
		//dump frame: header and data. read the first two bytes data which are the frame data length

			temp1 = uart_get();
    6f0a:	0e 94 08 37 	call	0x6e10	; 0x6e10 <uart_get>
    6f0e:	18 2f       	mov	r17, r24
			temp2 = uart_get();
    6f10:	0e 94 08 37 	call	0x6e10	; 0x6e10 <uart_get>

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	
    6f14:	e0 e0       	ldi	r30, 0x00	; 0
    6f16:	ef 01       	movw	r28, r30
    6f18:	c1 0f       	add	r28, r17
    6f1a:	d1 1d       	adc	r29, r1
    6f1c:	8e 2d       	mov	r24, r14
    6f1e:	e0 2e       	mov	r14, r16
    6f20:	f8 2e       	mov	r15, r24

			for (i = 0; i < data_length+7; i++)
    6f22:	00 e0       	ldi	r16, 0x00	; 0
    6f24:	10 e0       	ldi	r17, 0x00	; 0
    6f26:	27 96       	adiw	r28, 0x07	; 7
    6f28:	0d c0       	rjmp	.+26     	; 0x6f44 <fill_Rx_buffer+0x74>

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    6f2a:	80 91 68 24 	lds	r24, 0x2468
    6f2e:	90 91 69 24 	lds	r25, 0x2469

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	

			for (i = 0; i < data_length+7; i++)
			{
				while(!(uart_test()));
    6f32:	00 97       	sbiw	r24, 0x00	; 0
    6f34:	d1 f3       	breq	.-12     	; 0x6f2a <fill_Rx_buffer+0x5a>
				Rx_buffer[i] = uart_get();
    6f36:	0e 94 08 37 	call	0x6e10	; 0x6e10 <uart_get>
    6f3a:	f7 01       	movw	r30, r14
    6f3c:	81 93       	st	Z+, r24
    6f3e:	7f 01       	movw	r14, r30
			temp1 = uart_get();
			temp2 = uart_get();

			data_length = (uint16_t)temp1 + 256*(uint16_t)temp2;	

			for (i = 0; i < data_length+7; i++)
    6f40:	0f 5f       	subi	r16, 0xFF	; 255
    6f42:	1f 4f       	sbci	r17, 0xFF	; 255
    6f44:	0c 17       	cp	r16, r28
    6f46:	1d 07       	cpc	r17, r29
    6f48:	80 f3       	brcs	.-32     	; 0x6f2a <fill_Rx_buffer+0x5a>
    6f4a:	11 c0       	rjmp	.+34     	; 0x6f6e <fill_Rx_buffer+0x9e>

/* Get a received character */

uint16_t uart_test ()
{
  return rxfifo.count;
    6f4c:	80 91 68 24 	lds	r24, 0x2468
    6f50:	90 91 69 24 	lds	r25, 0x2469
								
		}	
        else	
			for (i = 0; i < message_length; i++)
			{
				while(!(uart_test()));
    6f54:	00 97       	sbiw	r24, 0x00	; 0
    6f56:	d1 f3       	breq	.-12     	; 0x6f4c <fill_Rx_buffer+0x7c>
				Rx_buffer[i] = uart_get();
    6f58:	0e 94 08 37 	call	0x6e10	; 0x6e10 <uart_get>
    6f5c:	f8 01       	movw	r30, r16
    6f5e:	81 93       	st	Z+, r24
    6f60:	8f 01       	movw	r16, r30
			}
			
								
		}	
        else	
			for (i = 0; i < message_length; i++)
    6f62:	21 96       	adiw	r28, 0x01	; 1
    6f64:	ce 15       	cp	r28, r14
    6f66:	df 05       	cpc	r29, r15
    6f68:	88 f3       	brcs	.-30     	; 0x6f4c <fill_Rx_buffer+0x7c>
    6f6a:	01 c0       	rjmp	.+2      	; 0x6f6e <fill_Rx_buffer+0x9e>
uint16_t fill_Rx_buffer(uint8_t *Rx_buffer)
{	
	uint8_t message_length, temp1, temp2;
	uint16_t data_length, i;
	
	message_length = 0;
    6f6c:	dd 24       	eor	r13, r13
	}
	//else err_flag = 0;  - without other error check, message_length stays at zero.
	//message_length = err_flag*message_length;  - only useful for multiple error sources, but mult is overkill
	return message_length;			

}	
    6f6e:	8d 2d       	mov	r24, r13
    6f70:	90 e0       	ldi	r25, 0x00	; 0
    6f72:	df 91       	pop	r29
    6f74:	cf 91       	pop	r28
    6f76:	1f 91       	pop	r17
    6f78:	0f 91       	pop	r16
    6f7a:	ff 90       	pop	r15
    6f7c:	ef 90       	pop	r14
    6f7e:	df 90       	pop	r13
    6f80:	bf 90       	pop	r11
    6f82:	af 90       	pop	r10
    6f84:	08 95       	ret

00006f86 <send_Tx_buffer>:
//Return Values: none
//Limitations: messages can only be upto 255 bytes in length
//Notes: this function sends the message length as the first byte of the message

void send_Tx_buffer(uint8_t *Tx_buffer, uint8_t message_length)
{		
    6f86:	a1 e0       	ldi	r26, 0x01	; 1
    6f88:	b0 e0       	ldi	r27, 0x00	; 0
    6f8a:	e9 ec       	ldi	r30, 0xC9	; 201
    6f8c:	f7 e3       	ldi	r31, 0x37	; 55
    6f8e:	0c 94 c6 4b 	jmp	0x978c	; 0x978c <__prologue_saves__+0x18>
    6f92:	18 2f       	mov	r17, r24
    6f94:	06 2f       	mov	r16, r22
	uint8_t i;

	uart_put(message_length);
    6f96:	86 2f       	mov	r24, r22
    6f98:	99 83       	std	Y+1, r25	; 0x01
    6f9a:	0e 94 35 37 	call	0x6e6a	; 0x6e6a <uart_put>
	for (i = 0; i < message_length;i++)
    6f9e:	99 81       	ldd	r25, Y+1	; 0x01
    6fa0:	61 2f       	mov	r22, r17
    6fa2:	79 2f       	mov	r23, r25
    6fa4:	7b 01       	movw	r14, r22
    6fa6:	05 c0       	rjmp	.+10     	; 0x6fb2 <send_Tx_buffer+0x2c>
	{
		uart_put(Tx_buffer[i]);
    6fa8:	f7 01       	movw	r30, r14
    6faa:	81 91       	ld	r24, Z+
    6fac:	7f 01       	movw	r14, r30
    6fae:	0e 94 35 37 	call	0x6e6a	; 0x6e6a <uart_put>
void send_Tx_buffer(uint8_t *Tx_buffer, uint8_t message_length)
{		
	uint8_t i;

	uart_put(message_length);
	for (i = 0; i < message_length;i++)
    6fb2:	8e 2d       	mov	r24, r14
    6fb4:	81 1b       	sub	r24, r17
    6fb6:	80 17       	cp	r24, r16
    6fb8:	b8 f3       	brcs	.-18     	; 0x6fa8 <send_Tx_buffer+0x22>
	{
		uart_put(Tx_buffer[i]);
	}	
}
    6fba:	21 96       	adiw	r28, 0x01	; 1
    6fbc:	e6 e0       	ldi	r30, 0x06	; 6
    6fbe:	0c 94 df 4b 	jmp	0x97be	; 0x97be <__epilogue_restores__+0x18>

00006fc2 <__vector_25>:


/* UART RXC interrupt */

ISR(USARTC0_RXC_vect)
{
    6fc2:	1f 92       	push	r1
    6fc4:	0f 92       	push	r0
    6fc6:	0f b6       	in	r0, 0x3f	; 63
    6fc8:	0f 92       	push	r0
    6fca:	08 b6       	in	r0, 0x38	; 56
    6fcc:	0f 92       	push	r0
    6fce:	0b b6       	in	r0, 0x3b	; 59
    6fd0:	0f 92       	push	r0
    6fd2:	11 24       	eor	r1, r1
    6fd4:	18 be       	out	0x38, r1	; 56
    6fd6:	1b be       	out	0x3b, r1	; 59
    6fd8:	2f 93       	push	r18
    6fda:	3f 93       	push	r19
    6fdc:	4f 93       	push	r20
    6fde:	8f 93       	push	r24
    6fe0:	9f 93       	push	r25
    6fe2:	ef 93       	push	r30
    6fe4:	ff 93       	push	r31
  uint8_t d;
  uint16_t n, i;

  d = USARTC0.DATA;
    6fe6:	40 91 a0 08 	lds	r20, 0x08A0
  n = rxfifo.count;
    6fea:	80 91 68 24 	lds	r24, 0x2468
    6fee:	90 91 69 24 	lds	r25, 0x2469
  if(n < rxfifo.size) {
    6ff2:	20 91 6a 24 	lds	r18, 0x246A
    6ff6:	30 91 6b 24 	lds	r19, 0x246B
    6ffa:	82 17       	cp	r24, r18
    6ffc:	93 07       	cpc	r25, r19
    6ffe:	f0 f4       	brcc	.+60     	; 0x703c <__vector_25+0x7a>
    rxfifo.count = ++n;
    7000:	01 96       	adiw	r24, 0x01	; 1
    7002:	80 93 68 24 	sts	0x2468, r24
    7006:	90 93 69 24 	sts	0x2469, r25
    i = rxfifo.idx_w;
    700a:	80 91 64 24 	lds	r24, 0x2464
    700e:	90 91 65 24 	lds	r25, 0x2465
    *(rxfifo.PRxBuff + i++) = d;
    7012:	e0 91 6c 24 	lds	r30, 0x246C
    7016:	f0 91 6d 24 	lds	r31, 0x246D
    701a:	e8 0f       	add	r30, r24
    701c:	f9 1f       	adc	r31, r25
    701e:	40 83       	st	Z, r20
    7020:	01 96       	adiw	r24, 0x01	; 1
    if(i >= rxfifo.size)
    7022:	20 91 6a 24 	lds	r18, 0x246A
    7026:	30 91 6b 24 	lds	r19, 0x246B
    702a:	82 17       	cp	r24, r18
    702c:	93 07       	cpc	r25, r19
    702e:	10 f0       	brcs	.+4      	; 0x7034 <__vector_25+0x72>
      i = 0;
    7030:	80 e0       	ldi	r24, 0x00	; 0
    7032:	90 e0       	ldi	r25, 0x00	; 0
    rxfifo.idx_w = i;
    7034:	80 93 64 24 	sts	0x2464, r24
    7038:	90 93 65 24 	sts	0x2465, r25
  }
}
    703c:	ff 91       	pop	r31
    703e:	ef 91       	pop	r30
    7040:	9f 91       	pop	r25
    7042:	8f 91       	pop	r24
    7044:	4f 91       	pop	r20
    7046:	3f 91       	pop	r19
    7048:	2f 91       	pop	r18
    704a:	0f 90       	pop	r0
    704c:	0b be       	out	0x3b, r0	; 59
    704e:	0f 90       	pop	r0
    7050:	08 be       	out	0x38, r0	; 56
    7052:	0f 90       	pop	r0
    7054:	0f be       	out	0x3f, r0	; 63
    7056:	0f 90       	pop	r0
    7058:	1f 90       	pop	r1
    705a:	18 95       	reti

0000705c <__vector_26>:


/* UART UDRE interrupt */

ISR(USARTC0_DRE_vect)
{
    705c:	1f 92       	push	r1
    705e:	0f 92       	push	r0
    7060:	0f b6       	in	r0, 0x3f	; 63
    7062:	0f 92       	push	r0
    7064:	08 b6       	in	r0, 0x38	; 56
    7066:	0f 92       	push	r0
    7068:	0b b6       	in	r0, 0x3b	; 59
    706a:	0f 92       	push	r0
    706c:	11 24       	eor	r1, r1
    706e:	18 be       	out	0x38, r1	; 56
    7070:	1b be       	out	0x3b, r1	; 59
    7072:	2f 93       	push	r18
    7074:	8f 93       	push	r24
    7076:	9f 93       	push	r25
    7078:	ef 93       	push	r30
    707a:	ff 93       	push	r31
  uint8_t n, i;

  n = txfifo.count;
    707c:	90 91 23 24 	lds	r25, 0x2423
  if(n) {
    7080:	99 23       	and	r25, r25
    7082:	a1 f0       	breq	.+40     	; 0x70ac <__vector_26+0x50>
    txfifo.count = --n;
    7084:	91 50       	subi	r25, 0x01	; 1
    7086:	90 93 23 24 	sts	0x2423, r25
    i = txfifo.idx_r;
    708a:	80 91 22 24 	lds	r24, 0x2422
    USARTC0.DATA = txfifo.buff[i++];
    708e:	e8 2f       	mov	r30, r24
    7090:	f0 e0       	ldi	r31, 0x00	; 0
    7092:	ef 5d       	subi	r30, 0xDF	; 223
    7094:	fb 4d       	sbci	r31, 0xDB	; 219
    7096:	23 81       	ldd	r18, Z+3	; 0x03
    7098:	20 93 a0 08 	sts	0x08A0, r18
    709c:	8f 5f       	subi	r24, 0xFF	; 255
    if(i >= sizeof(txfifo.buff))
    709e:	80 34       	cpi	r24, 0x40	; 64
    70a0:	08 f0       	brcs	.+2      	; 0x70a4 <__vector_26+0x48>
      i = 0;
    70a2:	80 e0       	ldi	r24, 0x00	; 0
    txfifo.idx_r = i;
    70a4:	80 93 22 24 	sts	0x2422, r24
  }
  if(n == 0)
    70a8:	99 23       	and	r25, r25
    70aa:	21 f4       	brne	.+8      	; 0x70b4 <__vector_26+0x58>
    USARTC0.CTRLA = USART_RXCINTLVL0_bm;
    70ac:	80 e1       	ldi	r24, 0x10	; 16
    70ae:	e0 ea       	ldi	r30, 0xA0	; 160
    70b0:	f8 e0       	ldi	r31, 0x08	; 8
    70b2:	83 83       	std	Z+3, r24	; 0x03
}
    70b4:	ff 91       	pop	r31
    70b6:	ef 91       	pop	r30
    70b8:	9f 91       	pop	r25
    70ba:	8f 91       	pop	r24
    70bc:	2f 91       	pop	r18
    70be:	0f 90       	pop	r0
    70c0:	0b be       	out	0x3b, r0	; 59
    70c2:	0f 90       	pop	r0
    70c4:	08 be       	out	0x38, r0	; 56
    70c6:	0f 90       	pop	r0
    70c8:	0f be       	out	0x3f, r0	; 63
    70ca:	0f 90       	pop	r0
    70cc:	1f 90       	pop	r1
    70ce:	18 95       	reti

000070d0 <Handler_Init>:
{
	uint8_t lcv;

	// Initialize enableds to FALSE
	for(lcv=0;lcv<HANDLER_MAX;lcv++)
		g_enabled[lcv] = FALSE;
    70d0:	10 92 87 28 	sts	0x2887, r1
    70d4:	10 92 88 28 	sts	0x2888, r1
    70d8:	10 92 89 28 	sts	0x2889, r1
    70dc:	10 92 8a 28 	sts	0x288A, r1
    70e0:	10 92 8b 28 	sts	0x288B, r1
    70e4:	10 92 8c 28 	sts	0x288C, r1

	// Timer TCE0: set-up to match old system (32MHz/8/512 = 16MHz/8/256):
	//  TCE0.CTRLA = 0x04;      // Prescaler: clk/8
	//JL03092010 change the prescaler from 8 to 2 so the overflowrate inclrease 4 times
	TCE0.CTRLA = 0x02;      // Prescaler: clk/2
    70e8:	e0 e0       	ldi	r30, 0x00	; 0
    70ea:	fa e0       	ldi	r31, 0x0A	; 10
    70ec:	82 e0       	ldi	r24, 0x02	; 2
    70ee:	80 83       	st	Z, r24
	TCE0.PER   = 511;       // 256*2 - 1
    70f0:	8f ef       	ldi	r24, 0xFF	; 255
    70f2:	91 e0       	ldi	r25, 0x01	; 1
    70f4:	86 a3       	std	Z+38, r24	; 0x26
    70f6:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.INTCTRLA = 0x03;   // Timer overflow is a the highest level interrupt
    70f8:	83 e0       	ldi	r24, 0x03	; 3
    70fa:	86 83       	std	Z+6, r24	; 0x06
}
    70fc:	08 95       	ret

000070fe <__vector_47>:
// ISR()
// The interrupt handler function of the timer E0 interrupt.
// Calls the functions in g_p_handler_func[] if they are enabled.
//
ISR(TCE0_OVF_vect)
{
    70fe:	1f 92       	push	r1
    7100:	0f 92       	push	r0
    7102:	0f b6       	in	r0, 0x3f	; 63
    7104:	0f 92       	push	r0
    7106:	08 b6       	in	r0, 0x38	; 56
    7108:	0f 92       	push	r0
    710a:	09 b6       	in	r0, 0x39	; 57
    710c:	0f 92       	push	r0
    710e:	0a b6       	in	r0, 0x3a	; 58
    7110:	0f 92       	push	r0
    7112:	0b b6       	in	r0, 0x3b	; 59
    7114:	0f 92       	push	r0
    7116:	11 24       	eor	r1, r1
    7118:	18 be       	out	0x38, r1	; 56
    711a:	19 be       	out	0x39, r1	; 57
    711c:	1a be       	out	0x3a, r1	; 58
    711e:	1b be       	out	0x3b, r1	; 59
    7120:	cf 92       	push	r12
    7122:	df 92       	push	r13
    7124:	ef 92       	push	r14
    7126:	ff 92       	push	r15
    7128:	0f 93       	push	r16
    712a:	1f 93       	push	r17
    712c:	2f 93       	push	r18
    712e:	3f 93       	push	r19
    7130:	4f 93       	push	r20
    7132:	5f 93       	push	r21
    7134:	6f 93       	push	r22
    7136:	7f 93       	push	r23
    7138:	8f 93       	push	r24
    713a:	9f 93       	push	r25
    713c:	af 93       	push	r26
    713e:	bf 93       	push	r27
    7140:	cf 93       	push	r28
    7142:	df 93       	push	r29
    7144:	ef 93       	push	r30
    7146:	ff 93       	push	r31
    7148:	27 e8       	ldi	r18, 0x87	; 135
    714a:	c2 2e       	mov	r12, r18
    714c:	28 e2       	ldi	r18, 0x28	; 40
    714e:	d2 2e       	mov	r13, r18
    7150:	93 e6       	ldi	r25, 0x63	; 99
    7152:	e9 2e       	mov	r14, r25
    7154:	98 e2       	ldi	r25, 0x28	; 40
    7156:	f9 2e       	mov	r15, r25
    7158:	0b e7       	ldi	r16, 0x7B	; 123
    715a:	18 e2       	ldi	r17, 0x28	; 40
    715c:	c0 e0       	ldi	r28, 0x00	; 0
    715e:	d0 e0       	ldi	r29, 0x00	; 0
	//ledToggle(1);
	//xputs(PSTR("\nISR Works\n"));

	for (lcv=0; lcv<HANDLER_MAX; lcv++)		/* check and act on all vectors */
	{
		if (g_enabled[lcv])			/* if enabled, check count */
    7160:	d6 01       	movw	r26, r12
    7162:	8d 91       	ld	r24, X+
    7164:	6d 01       	movw	r12, r26
    7166:	88 23       	and	r24, r24
    7168:	39 f1       	breq	.+78     	; 0x71b8 <__vector_47+0xba>
		{
			g_count[lcv]--;
    716a:	fe 01       	movw	r30, r28
    716c:	ee 0f       	add	r30, r30
    716e:	ff 1f       	adc	r31, r31
    7170:	ee 0f       	add	r30, r30
    7172:	ff 1f       	adc	r31, r31
    7174:	e3 57       	subi	r30, 0x73	; 115
    7176:	f7 4d       	sbci	r31, 0xD7	; 215
    7178:	80 81       	ld	r24, Z
    717a:	91 81       	ldd	r25, Z+1	; 0x01
    717c:	a2 81       	ldd	r26, Z+2	; 0x02
    717e:	b3 81       	ldd	r27, Z+3	; 0x03
    7180:	01 97       	sbiw	r24, 0x01	; 1
    7182:	a1 09       	sbc	r26, r1
    7184:	b1 09       	sbc	r27, r1
    7186:	80 83       	st	Z, r24
    7188:	91 83       	std	Z+1, r25	; 0x01
    718a:	a2 83       	std	Z+2, r26	; 0x02
    718c:	b3 83       	std	Z+3, r27	; 0x03
			if (g_count[lcv]==0)		/* if g_count=0, perform function call and reset */
    718e:	80 81       	ld	r24, Z
    7190:	91 81       	ldd	r25, Z+1	; 0x01
    7192:	a2 81       	ldd	r26, Z+2	; 0x02
    7194:	b3 81       	ldd	r27, Z+3	; 0x03
    7196:	00 97       	sbiw	r24, 0x00	; 0
    7198:	a1 05       	cpc	r26, r1
    719a:	b1 05       	cpc	r27, r1
    719c:	69 f4       	brne	.+26     	; 0x71b8 <__vector_47+0xba>
			{
				g_count[lcv] = g_count_max[lcv];
    719e:	d7 01       	movw	r26, r14
    71a0:	2d 91       	ld	r18, X+
    71a2:	3d 91       	ld	r19, X+
    71a4:	4d 91       	ld	r20, X+
    71a6:	5c 91       	ld	r21, X
    71a8:	20 83       	st	Z, r18
    71aa:	31 83       	std	Z+1, r19	; 0x01
    71ac:	42 83       	std	Z+2, r20	; 0x02
    71ae:	53 83       	std	Z+3, r21	; 0x03
				(*g_p_handler_func[lcv])();
    71b0:	d8 01       	movw	r26, r16
    71b2:	ed 91       	ld	r30, X+
    71b4:	fc 91       	ld	r31, X
    71b6:	19 95       	eicall
    71b8:	21 96       	adiw	r28, 0x01	; 1
    71ba:	e4 e0       	ldi	r30, 0x04	; 4
    71bc:	f0 e0       	ldi	r31, 0x00	; 0
    71be:	ee 0e       	add	r14, r30
    71c0:	ff 1e       	adc	r15, r31
    71c2:	0e 5f       	subi	r16, 0xFE	; 254
    71c4:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t lcv;

	//ledToggle(1);
	//xputs(PSTR("\nISR Works\n"));

	for (lcv=0; lcv<HANDLER_MAX; lcv++)		/* check and act on all vectors */
    71c6:	c6 30       	cpi	r28, 0x06	; 6
    71c8:	d1 05       	cpc	r29, r1
    71ca:	51 f6       	brne	.-108    	; 0x7160 <__vector_47+0x62>
				g_count[lcv] = g_count_max[lcv];
				(*g_p_handler_func[lcv])();
			}
		}
	}
}
    71cc:	ff 91       	pop	r31
    71ce:	ef 91       	pop	r30
    71d0:	df 91       	pop	r29
    71d2:	cf 91       	pop	r28
    71d4:	bf 91       	pop	r27
    71d6:	af 91       	pop	r26
    71d8:	9f 91       	pop	r25
    71da:	8f 91       	pop	r24
    71dc:	7f 91       	pop	r23
    71de:	6f 91       	pop	r22
    71e0:	5f 91       	pop	r21
    71e2:	4f 91       	pop	r20
    71e4:	3f 91       	pop	r19
    71e6:	2f 91       	pop	r18
    71e8:	1f 91       	pop	r17
    71ea:	0f 91       	pop	r16
    71ec:	ff 90       	pop	r15
    71ee:	ef 90       	pop	r14
    71f0:	df 90       	pop	r13
    71f2:	cf 90       	pop	r12
    71f4:	0f 90       	pop	r0
    71f6:	0b be       	out	0x3b, r0	; 59
    71f8:	0f 90       	pop	r0
    71fa:	0a be       	out	0x3a, r0	; 58
    71fc:	0f 90       	pop	r0
    71fe:	09 be       	out	0x39, r0	; 57
    7200:	0f 90       	pop	r0
    7202:	08 be       	out	0x38, r0	; 56
    7204:	0f 90       	pop	r0
    7206:	0f be       	out	0x3f, r0	; 63
    7208:	0f 90       	pop	r0
    720a:	1f 90       	pop	r1
    720c:	18 95       	reti

0000720e <Reg_Handler>:
//  period: start count of the timer
//  index: index of the interrupt request
//  enabled: TRUE if the function is enabled.
            
void Reg_Handler(void* fptr, uint32_t period, uint8_t index, uint8_t enabled)
{	
    720e:	0f 93       	push	r16
	g_enabled[index] = FALSE;         // disable while modifying vector
    7210:	30 e0       	ldi	r19, 0x00	; 0
	g_p_handler_func[index] = fptr;   // set function pointer
    7212:	f9 01       	movw	r30, r18
    7214:	ee 0f       	add	r30, r30
    7216:	ff 1f       	adc	r31, r31
    7218:	e5 58       	subi	r30, 0x85	; 133
    721a:	f7 4d       	sbci	r31, 0xD7	; 215
    721c:	80 83       	st	Z, r24
    721e:	91 83       	std	Z+1, r25	; 0x01
	g_count_max[index] = period;	  // set start count
    7220:	c9 01       	movw	r24, r18
    7222:	88 0f       	add	r24, r24
    7224:	99 1f       	adc	r25, r25
    7226:	88 0f       	add	r24, r24
    7228:	99 1f       	adc	r25, r25
    722a:	fc 01       	movw	r30, r24
    722c:	ed 59       	subi	r30, 0x9D	; 157
    722e:	f7 4d       	sbci	r31, 0xD7	; 215
    7230:	40 83       	st	Z, r20
    7232:	51 83       	std	Z+1, r21	; 0x01
    7234:	62 83       	std	Z+2, r22	; 0x02
    7236:	73 83       	std	Z+3, r23	; 0x03
	g_count[index] = period;          // set current count
    7238:	83 57       	subi	r24, 0x73	; 115
    723a:	97 4d       	sbci	r25, 0xD7	; 215
    723c:	fc 01       	movw	r30, r24
    723e:	40 83       	st	Z, r20
    7240:	51 83       	std	Z+1, r21	; 0x01
    7242:	62 83       	std	Z+2, r22	; 0x02
    7244:	73 83       	std	Z+3, r23	; 0x03
	g_enabled[index] = enabled;
    7246:	29 57       	subi	r18, 0x79	; 121
    7248:	37 4d       	sbci	r19, 0xD7	; 215
    724a:	f9 01       	movw	r30, r18
    724c:	00 83       	st	Z, r16
}
    724e:	0f 91       	pop	r16
    7250:	08 95       	ret

00007252 <Update_Reg_Handler>:

void Update_Reg_Handler(void* fptr, uint32_t period, uint8_t index, uint8_t enabled)
{	
    7252:	0f 93       	push	r16
	g_enabled[index] = FALSE;         // disable while modifying vector
    7254:	30 e0       	ldi	r19, 0x00	; 0
    7256:	f9 01       	movw	r30, r18
    7258:	e9 57       	subi	r30, 0x79	; 121
    725a:	f7 4d       	sbci	r31, 0xD7	; 215
    725c:	10 82       	st	Z, r1
	g_p_handler_func[index] = fptr;   // set function pointer
    725e:	f9 01       	movw	r30, r18
    7260:	ee 0f       	add	r30, r30
    7262:	ff 1f       	adc	r31, r31
    7264:	e5 58       	subi	r30, 0x85	; 133
    7266:	f7 4d       	sbci	r31, 0xD7	; 215
    7268:	80 83       	st	Z, r24
    726a:	91 83       	std	Z+1, r25	; 0x01
	g_count_max[index] = period;      // set start count
    726c:	f9 01       	movw	r30, r18
    726e:	ee 0f       	add	r30, r30
    7270:	ff 1f       	adc	r31, r31
    7272:	ee 0f       	add	r30, r30
    7274:	ff 1f       	adc	r31, r31
    7276:	df 01       	movw	r26, r30
    7278:	ad 59       	subi	r26, 0x9D	; 157
    727a:	b7 4d       	sbci	r27, 0xD7	; 215
    727c:	4d 93       	st	X+, r20
    727e:	5d 93       	st	X+, r21
    7280:	6d 93       	st	X+, r22
    7282:	7c 93       	st	X, r23
    7284:	13 97       	sbiw	r26, 0x03	; 3

	//if current count is greater than the desired count, then reset current count
	if (g_count[index] > g_count_max[index])
    7286:	e3 57       	subi	r30, 0x73	; 115
    7288:	f7 4d       	sbci	r31, 0xD7	; 215
    728a:	80 81       	ld	r24, Z
    728c:	91 81       	ldd	r25, Z+1	; 0x01
    728e:	a2 81       	ldd	r26, Z+2	; 0x02
    7290:	b3 81       	ldd	r27, Z+3	; 0x03
    7292:	48 17       	cp	r20, r24
    7294:	59 07       	cpc	r21, r25
    7296:	6a 07       	cpc	r22, r26
    7298:	7b 07       	cpc	r23, r27
    729a:	20 f4       	brcc	.+8      	; 0x72a4 <Update_Reg_Handler+0x52>
		g_count[index] = g_count_max[index];      // set count
    729c:	40 83       	st	Z, r20
    729e:	51 83       	std	Z+1, r21	; 0x01
    72a0:	62 83       	std	Z+2, r22	; 0x02
    72a2:	73 83       	std	Z+3, r23	; 0x03

	g_enabled[index] = enabled;
    72a4:	29 57       	subi	r18, 0x79	; 121
    72a6:	37 4d       	sbci	r19, 0xD7	; 215
    72a8:	f9 01       	movw	r30, r18
    72aa:	00 83       	st	Z, r16
}
    72ac:	0f 91       	pop	r16
    72ae:	08 95       	ret

000072b0 <TWI_MasterCreateBuff>:
#include "twi.h"

void TWI_MasterCreateBuff(TWI_Master_t *twi, 
                          uint8_t mode)
{
    72b0:	cf 93       	push	r28
    72b2:	df 93       	push	r29
    72b4:	ec 01       	movw	r28, r24
if (mode == 0xff) {
    72b6:	6f 3f       	cpi	r22, 0xFF	; 255
    72b8:	79 f4       	brne	.+30     	; 0x72d8 <TWI_MasterCreateBuff+0x28>
 twi->PreadData = malloc(136);
    72ba:	88 e8       	ldi	r24, 0x88	; 136
    72bc:	90 e0       	ldi	r25, 0x00	; 0
    72be:	0e 94 f1 4b 	call	0x97e2	; 0x97e2 <malloc>
    72c2:	8d 83       	std	Y+5, r24	; 0x05
    72c4:	9e 83       	std	Y+6, r25	; 0x06
 twi->PwriteData = malloc(136);
    72c6:	88 e8       	ldi	r24, 0x88	; 136
    72c8:	90 e0       	ldi	r25, 0x00	; 0
    72ca:	0e 94 f1 4b 	call	0x97e2	; 0x97e2 <malloc>
    72ce:	8b 83       	std	Y+3, r24	; 0x03
    72d0:	9c 83       	std	Y+4, r25	; 0x04
 twi->writeBuffSize = 136;
    72d2:	88 e8       	ldi	r24, 0x88	; 136
    72d4:	8f 83       	std	Y+7, r24	; 0x07
    72d6:	0f c0       	rjmp	.+30     	; 0x72f6 <TWI_MasterCreateBuff+0x46>
 twi->readBuffSize = 136;
}
else {
 twi->PreadData = malloc(30);
    72d8:	8e e1       	ldi	r24, 0x1E	; 30
    72da:	90 e0       	ldi	r25, 0x00	; 0
    72dc:	0e 94 f1 4b 	call	0x97e2	; 0x97e2 <malloc>
    72e0:	8d 83       	std	Y+5, r24	; 0x05
    72e2:	9e 83       	std	Y+6, r25	; 0x06
 twi->PwriteData = malloc(50);
    72e4:	82 e3       	ldi	r24, 0x32	; 50
    72e6:	90 e0       	ldi	r25, 0x00	; 0
    72e8:	0e 94 f1 4b 	call	0x97e2	; 0x97e2 <malloc>
    72ec:	8b 83       	std	Y+3, r24	; 0x03
    72ee:	9c 83       	std	Y+4, r25	; 0x04
 twi->writeBuffSize = 100;
    72f0:	84 e6       	ldi	r24, 0x64	; 100
    72f2:	8f 83       	std	Y+7, r24	; 0x07
 twi->readBuffSize = 50;
    72f4:	82 e3       	ldi	r24, 0x32	; 50
    72f6:	88 87       	std	Y+8, r24	; 0x08
 }
}
    72f8:	df 91       	pop	r29
    72fa:	cf 91       	pop	r28
    72fc:	08 95       	ret

000072fe <TWI_MasterReleaseBuff>:


void TWI_MasterReleaseBuff(TWI_Master_t *twi)
{
    72fe:	cf 93       	push	r28
    7300:	df 93       	push	r29
    7302:	ec 01       	movw	r28, r24
 free(twi->PreadData);
    7304:	8d 81       	ldd	r24, Y+5	; 0x05
    7306:	9e 81       	ldd	r25, Y+6	; 0x06
    7308:	0e 94 8b 4c 	call	0x9916	; 0x9916 <free>
 free(twi->PwriteData);
    730c:	8b 81       	ldd	r24, Y+3	; 0x03
    730e:	9c 81       	ldd	r25, Y+4	; 0x04
    7310:	0e 94 8b 4c 	call	0x9916	; 0x9916 <free>
}
    7314:	df 91       	pop	r29
    7316:	cf 91       	pop	r28
    7318:	08 95       	ret

0000731a <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
    731a:	fc 01       	movw	r30, r24
	twi->interface = module;
    731c:	60 83       	st	Z, r22
    731e:	71 83       	std	Z+1, r23	; 0x01
	twi->interface->MASTER.CTRLA = intLevel |
    7320:	48 63       	ori	r20, 0x38	; 56
    7322:	db 01       	movw	r26, r22
    7324:	11 96       	adiw	r26, 0x01	; 1
    7326:	4c 93       	st	X, r20
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
    7328:	a0 81       	ld	r26, Z
    732a:	b1 81       	ldd	r27, Z+1	; 0x01
    732c:	15 96       	adiw	r26, 0x05	; 5
    732e:	2c 93       	st	X, r18
    7330:	15 97       	sbiw	r26, 0x05	; 5
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    7332:	01 90       	ld	r0, Z+
    7334:	f0 81       	ld	r31, Z
    7336:	e0 2d       	mov	r30, r0
    7338:	81 e0       	ldi	r24, 0x01	; 1
    733a:	84 83       	std	Z+4, r24	; 0x04
}
    733c:	08 95       	ret

0000733e <TWI_MasterState>:
 *  \retval TWI_MASTER_BUSSTATE_BUSY_gc    Bus state is busy.
 */
TWI_MASTER_BUSSTATE_t TWI_MasterState(TWI_Master_t *twi)
{
	TWI_MASTER_BUSSTATE_t twi_status;
	twi_status = (TWI_MASTER_BUSSTATE_t) (twi->interface->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm);
    733e:	dc 01       	movw	r26, r24
    7340:	ed 91       	ld	r30, X+
    7342:	fc 91       	ld	r31, X
    7344:	11 97       	sbiw	r26, 0x01	; 1
    7346:	24 81       	ldd	r18, Z+4	; 0x04
    7348:	30 e0       	ldi	r19, 0x00	; 0
    734a:	23 70       	andi	r18, 0x03	; 3
    734c:	30 70       	andi	r19, 0x00	; 0
	return twi_status;
}
    734e:	c9 01       	movw	r24, r18
    7350:	08 95       	ret

00007352 <TWI_MasterReady>:
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
	bool twi_status = (twi->status == TWIM_STATUS_READY);
    7352:	fc 01       	movw	r30, r24
    7354:	95 85       	ldd	r25, Z+13	; 0x0d
    7356:	81 e0       	ldi	r24, 0x01	; 1
    7358:	91 11       	cpse	r25, r1
    735a:	80 e0       	ldi	r24, 0x00	; 0
	return twi_status;
}
    735c:	08 95       	ret

0000735e <TWI_MasterWriteRead>:
bool TWI_MasterWriteRead(TWI_Master_t *twi,
                         uint8_t address,
                         uint8_t *writeData,
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
    735e:	0f 93       	push	r16
    7360:	cf 93       	push	r28
    7362:	df 93       	push	r29
    7364:	fc 01       	movw	r30, r24
  /*Parameter sanity check. */
  if (bytesToWrite > twi->writeBuffSize) {
    7366:	87 81       	ldd	r24, Z+7	; 0x07
    7368:	82 17       	cp	r24, r18
    736a:	70 f1       	brcs	.+92     	; 0x73c8 <TWI_MasterWriteRead+0x6a>
    return false;
  }
  if (bytesToRead > twi->readBuffSize) {
    736c:	80 85       	ldd	r24, Z+8	; 0x08
    736e:	80 17       	cp	r24, r16
    7370:	58 f1       	brcs	.+86     	; 0x73c8 <TWI_MasterWriteRead+0x6a>
    return false;
  }

  /*Initiate transaction if bus is ready. */
  if (twi->status == TWIM_STATUS_READY) {
    7372:	85 85       	ldd	r24, Z+13	; 0x0d
    7374:	88 23       	and	r24, r24
    7376:	41 f5       	brne	.+80     	; 0x73c8 <TWI_MasterWriteRead+0x6a>

    twi->status = TWIM_STATUS_BUSY;
    7378:	81 e0       	ldi	r24, 0x01	; 1
    737a:	85 87       	std	Z+13, r24	; 0x0d
    twi->result = TWIM_RESULT_UNKNOWN;
    737c:	16 86       	std	Z+14, r1	; 0x0e

    twi->address = address<<1;
    737e:	66 0f       	add	r22, r22
    7380:	62 83       	std	Z+2, r22	; 0x02
    7382:	84 2f       	mov	r24, r20
    7384:	95 2f       	mov	r25, r21
    7386:	ec 01       	movw	r28, r24

    /* Fill write data buffer. */
    for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    7388:	80 e0       	ldi	r24, 0x00	; 0
    738a:	90 e0       	ldi	r25, 0x00	; 0
    738c:	07 c0       	rjmp	.+14     	; 0x739c <TWI_MasterWriteRead+0x3e>
      *(twi->PwriteData + bufferIndex) = writeData[bufferIndex];
    738e:	39 91       	ld	r19, Y+
    7390:	a3 81       	ldd	r26, Z+3	; 0x03
    7392:	b4 81       	ldd	r27, Z+4	; 0x04
    7394:	a8 0f       	add	r26, r24
    7396:	b9 1f       	adc	r27, r25
    7398:	3c 93       	st	X, r19
    739a:	01 96       	adiw	r24, 0x01	; 1
    twi->result = TWIM_RESULT_UNKNOWN;

    twi->address = address<<1;

    /* Fill write data buffer. */
    for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    739c:	82 17       	cp	r24, r18
    739e:	b8 f3       	brcs	.-18     	; 0x738e <TWI_MasterWriteRead+0x30>
      *(twi->PwriteData + bufferIndex) = writeData[bufferIndex];
    }

    twi->bytesToWrite = bytesToWrite;
    73a0:	21 87       	std	Z+9, r18	; 0x09
    twi->bytesToRead = bytesToRead;
    73a2:	02 87       	std	Z+10, r16	; 0x0a
    twi->bytesWritten = 0;
    73a4:	13 86       	std	Z+11, r1	; 0x0b
    twi->bytesRead = 0;
    73a6:	14 86       	std	Z+12, r1	; 0x0c

    /* If write command, send the START condition + Address + 'R/_W = 0' */
    if (twi->bytesToWrite > 0) {
    73a8:	81 85       	ldd	r24, Z+9	; 0x09
    73aa:	88 23       	and	r24, r24
    73ac:	19 f0       	breq	.+6      	; 0x73b4 <TWI_MasterWriteRead+0x56>
      uint8_t writeAddress = twi->address & ~0x01;
    73ae:	82 81       	ldd	r24, Z+2	; 0x02
    73b0:	8e 7f       	andi	r24, 0xFE	; 254
    73b2:	05 c0       	rjmp	.+10     	; 0x73be <TWI_MasterWriteRead+0x60>
      twi->interface->MASTER.ADDR = writeAddress;
    }

    /* If read command, send the START condition + Address + 'R/_W = 1' */
    else if (twi->bytesToRead > 0) {
    73b4:	82 85       	ldd	r24, Z+10	; 0x0a
    73b6:	88 23       	and	r24, r24
    73b8:	49 f0       	breq	.+18     	; 0x73cc <TWI_MasterWriteRead+0x6e>
      uint8_t readAddress = twi->address | 0x01;
    73ba:	82 81       	ldd	r24, Z+2	; 0x02
    73bc:	81 60       	ori	r24, 0x01	; 1
      twi->interface->MASTER.ADDR = readAddress;
    73be:	01 90       	ld	r0, Z+
    73c0:	f0 81       	ld	r31, Z
    73c2:	e0 2d       	mov	r30, r0
    73c4:	86 83       	std	Z+6, r24	; 0x06
    73c6:	02 c0       	rjmp	.+4      	; 0x73cc <TWI_MasterWriteRead+0x6e>
    }
    return true;
  } else {
    return false;
    73c8:	80 e0       	ldi	r24, 0x00	; 0
    73ca:	01 c0       	rjmp	.+2      	; 0x73ce <TWI_MasterWriteRead+0x70>
    /* If read command, send the START condition + Address + 'R/_W = 1' */
    else if (twi->bytesToRead > 0) {
      uint8_t readAddress = twi->address | 0x01;
      twi->interface->MASTER.ADDR = readAddress;
    }
    return true;
    73cc:	81 e0       	ldi	r24, 0x01	; 1
  } else {
    return false;
  }
}
    73ce:	df 91       	pop	r29
    73d0:	cf 91       	pop	r28
    73d2:	0f 91       	pop	r16
    73d4:	08 95       	ret

000073d6 <TWI_MasterRead>:
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi,
                    uint8_t address,
                    uint8_t bytesToRead)
{
    73d6:	0f 93       	push	r16
    73d8:	04 2f       	mov	r16, r20
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
    73da:	40 e0       	ldi	r20, 0x00	; 0
    73dc:	50 e0       	ldi	r21, 0x00	; 0
    73de:	20 e0       	ldi	r18, 0x00	; 0
    73e0:	0e 94 af 39 	call	0x735e	; 0x735e <TWI_MasterWriteRead>
	return twi_status;
}
    73e4:	0f 91       	pop	r16
    73e6:	08 95       	ret

000073e8 <TWI_MasterWrite>:
 */
bool TWI_MasterWrite(TWI_Master_t *twi,
                     uint8_t address,
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
    73e8:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
    73ea:	00 e0       	ldi	r16, 0x00	; 0
    73ec:	0e 94 af 39 	call	0x735e	; 0x735e <TWI_MasterWriteRead>
	return twi_status;
}
    73f0:	0f 91       	pop	r16
    73f2:	08 95       	ret

000073f4 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
    73f4:	fc 01       	movw	r30, r24
  uint8_t currentStatus = twi->interface->MASTER.STATUS;
    73f6:	a0 81       	ld	r26, Z
    73f8:	b1 81       	ldd	r27, Z+1	; 0x01
    73fa:	14 96       	adiw	r26, 0x04	; 4
    73fc:	8c 91       	ld	r24, X
    73fe:	14 97       	sbiw	r26, 0x04	; 4

  /* If bus error. */
  if (currentStatus & TWI_MASTER_BUSERR_bm) {
    7400:	82 ff       	sbrs	r24, 2
    7402:	02 c0       	rjmp	.+4      	; 0x7408 <TWI_MasterArbitrationLostBusErrorHandler+0x14>
    twi->result = TWIM_RESULT_BUS_ERROR;
    7404:	94 e0       	ldi	r25, 0x04	; 4
    7406:	01 c0       	rjmp	.+2      	; 0x740a <TWI_MasterArbitrationLostBusErrorHandler+0x16>
  }
  /* If arbitration lost. */
  else {
    twi->result = TWIM_RESULT_ARBITRATION_LOST;
    7408:	93 e0       	ldi	r25, 0x03	; 3
    740a:	96 87       	std	Z+14, r25	; 0x0e
  }

  /* Clear interrupt flag. */
  twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    740c:	88 60       	ori	r24, 0x08	; 8
    740e:	14 96       	adiw	r26, 0x04	; 4
    7410:	8c 93       	st	X, r24
    7412:	14 97       	sbiw	r26, 0x04	; 4
  twi->status = TWIM_STATUS_READY;
    7414:	15 86       	std	Z+13, r1	; 0x0d
}
    7416:	08 95       	ret

00007418 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    7418:	cf 93       	push	r28
    741a:	df 93       	push	r29
    741c:	fc 01       	movw	r30, r24
  /* Local variables used in if tests to avoid compiler warning. */
  uint8_t bytesToWrite  = twi->bytesToWrite;
    741e:	91 85       	ldd	r25, Z+9	; 0x09
  uint8_t bytesToRead   = twi->bytesToRead;
    7420:	82 85       	ldd	r24, Z+10	; 0x0a

  /* If NOT acknowledged (NACK) by slave cancel the transaction. */
  if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    7422:	a0 81       	ld	r26, Z
    7424:	b1 81       	ldd	r27, Z+1	; 0x01
    7426:	14 96       	adiw	r26, 0x04	; 4
    7428:	2c 91       	ld	r18, X
    742a:	14 97       	sbiw	r26, 0x04	; 4
    742c:	24 ff       	sbrs	r18, 4
    742e:	06 c0       	rjmp	.+12     	; 0x743c <TWI_MasterWriteHandler+0x24>
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    7430:	83 e0       	ldi	r24, 0x03	; 3
    7432:	13 96       	adiw	r26, 0x03	; 3
    7434:	8c 93       	st	X, r24
    7436:	13 97       	sbiw	r26, 0x03	; 3
    twi->result = TWIM_RESULT_NACK_RECEIVED;
    7438:	85 e0       	ldi	r24, 0x05	; 5
    743a:	1e c0       	rjmp	.+60     	; 0x7478 <TWI_MasterWriteHandler+0x60>
    twi->status = TWIM_STATUS_READY;
  }

  /* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    743c:	23 85       	ldd	r18, Z+11	; 0x0b
    743e:	29 17       	cp	r18, r25
    7440:	68 f4       	brcc	.+26     	; 0x745c <TWI_MasterWriteHandler+0x44>
    uint8_t data = *(twi->PwriteData + twi->bytesWritten);
    7442:	83 85       	ldd	r24, Z+11	; 0x0b
    7444:	c3 81       	ldd	r28, Z+3	; 0x03
    7446:	d4 81       	ldd	r29, Z+4	; 0x04
    7448:	c8 0f       	add	r28, r24
    744a:	d1 1d       	adc	r29, r1
    744c:	88 81       	ld	r24, Y
    twi->interface->MASTER.DATA = data;
    744e:	17 96       	adiw	r26, 0x07	; 7
    7450:	8c 93       	st	X, r24
    7452:	17 97       	sbiw	r26, 0x07	; 7
    ++twi->bytesWritten;
    7454:	83 85       	ldd	r24, Z+11	; 0x0b
    7456:	8f 5f       	subi	r24, 0xFF	; 255
    7458:	83 87       	std	Z+11, r24	; 0x0b
    745a:	10 c0       	rjmp	.+32     	; 0x747c <TWI_MasterWriteHandler+0x64>
  }

  /* If bytes to read, send repeated START condition + Address + 'R/_W = 1' */
  else if (twi->bytesRead < bytesToRead) {
    745c:	94 85       	ldd	r25, Z+12	; 0x0c
    745e:	98 17       	cp	r25, r24
    7460:	30 f4       	brcc	.+12     	; 0x746e <TWI_MasterWriteHandler+0x56>
    uint8_t readAddress = twi->address | 0x01;
    7462:	82 81       	ldd	r24, Z+2	; 0x02
    7464:	81 60       	ori	r24, 0x01	; 1
    twi->interface->MASTER.ADDR = readAddress;
    7466:	16 96       	adiw	r26, 0x06	; 6
    7468:	8c 93       	st	X, r24
    746a:	16 97       	sbiw	r26, 0x06	; 6
    746c:	07 c0       	rjmp	.+14     	; 0x747c <TWI_MasterWriteHandler+0x64>
  }

  /* If transaction finished, send STOP condition and set RESULT OK. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    746e:	83 e0       	ldi	r24, 0x03	; 3
    7470:	13 96       	adiw	r26, 0x03	; 3
    7472:	8c 93       	st	X, r24
    7474:	13 97       	sbiw	r26, 0x03	; 3
	  twi->result = TWIM_RESULT_OK;
    7476:	81 e0       	ldi	r24, 0x01	; 1
    7478:	86 87       	std	Z+14, r24	; 0x0e
	  twi->status = TWIM_STATUS_READY;
    747a:	15 86       	std	Z+13, r1	; 0x0d
	}
}
    747c:	df 91       	pop	r29
    747e:	cf 91       	pop	r28
    7480:	08 95       	ret

00007482 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
    7482:	fc 01       	movw	r30, r24
  /* Fetch data if bytes to be read. */
  if (twi->bytesRead < twi->readBuffSize) {
    7484:	94 85       	ldd	r25, Z+12	; 0x0c
    7486:	80 85       	ldd	r24, Z+8	; 0x08
    7488:	a0 81       	ld	r26, Z
    748a:	b1 81       	ldd	r27, Z+1	; 0x01
    748c:	98 17       	cp	r25, r24
    748e:	60 f4       	brcc	.+24     	; 0x74a8 <TWI_MasterReadHandler+0x26>
    uint8_t data = twi->interface->MASTER.DATA;
    7490:	17 96       	adiw	r26, 0x07	; 7
    7492:	8c 91       	ld	r24, X
    *(twi->PreadData + twi->bytesRead) = data;
    7494:	94 85       	ldd	r25, Z+12	; 0x0c
    7496:	a5 81       	ldd	r26, Z+5	; 0x05
    7498:	b6 81       	ldd	r27, Z+6	; 0x06
    749a:	a9 0f       	add	r26, r25
    749c:	b1 1d       	adc	r27, r1
    749e:	8c 93       	st	X, r24
    twi->bytesRead++;
    74a0:	84 85       	ldd	r24, Z+12	; 0x0c
    74a2:	8f 5f       	subi	r24, 0xFF	; 255
    74a4:	84 87       	std	Z+12, r24	; 0x0c
    74a6:	06 c0       	rjmp	.+12     	; 0x74b4 <TWI_MasterReadHandler+0x32>
  }

  /* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    74a8:	83 e0       	ldi	r24, 0x03	; 3
    74aa:	13 96       	adiw	r26, 0x03	; 3
    74ac:	8c 93       	st	X, r24
	  twi->result = TWIM_RESULT_BUFFER_OVERFLOW;
    74ae:	82 e0       	ldi	r24, 0x02	; 2
    74b0:	86 87       	std	Z+14, r24	; 0x0e
	  twi->status = TWIM_STATUS_READY;
    74b2:	15 86       	std	Z+13, r1	; 0x0d
  }

  /* Local variable used in if test to avoid compiler warning. */
  uint8_t bytesToRead = twi->bytesToRead;
    74b4:	82 85       	ldd	r24, Z+10	; 0x0a

  /* If more bytes to read, issue ACK and start a byte read. */
  if (twi->bytesRead < bytesToRead) {
    74b6:	94 85       	ldd	r25, Z+12	; 0x0c
    74b8:	a0 81       	ld	r26, Z
    74ba:	b1 81       	ldd	r27, Z+1	; 0x01
    74bc:	98 17       	cp	r25, r24
    74be:	28 f4       	brcc	.+10     	; 0x74ca <TWI_MasterReadHandler+0x48>
    twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    74c0:	82 e0       	ldi	r24, 0x02	; 2
    74c2:	13 96       	adiw	r26, 0x03	; 3
    74c4:	8c 93       	st	X, r24
    74c6:	13 97       	sbiw	r26, 0x03	; 3
    74c8:	08 95       	ret
  }

  /* If transaction finished, issue NACK and STOP condition. */
  else {
    twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    74ca:	87 e0       	ldi	r24, 0x07	; 7
    74cc:	13 96       	adiw	r26, 0x03	; 3
    74ce:	8c 93       	st	X, r24
    74d0:	13 97       	sbiw	r26, 0x03	; 3
	  twi->result = TWIM_RESULT_OK;
    74d2:	81 e0       	ldi	r24, 0x01	; 1
    74d4:	86 87       	std	Z+14, r24	; 0x0e
	  twi->status = TWIM_STATUS_READY;
    74d6:	15 86       	std	Z+13, r1	; 0x0d
    74d8:	08 95       	ret

000074da <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    74da:	dc 01       	movw	r26, r24
    74dc:	ed 91       	ld	r30, X+
    74de:	fc 91       	ld	r31, X
    74e0:	11 97       	sbiw	r26, 0x01	; 1
    74e2:	64 81       	ldd	r22, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    74e4:	26 2f       	mov	r18, r22
    74e6:	30 e0       	ldi	r19, 0x00	; 0
 *
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
    74e8:	a9 01       	movw	r20, r18
    74ea:	4c 70       	andi	r20, 0x0C	; 12
    74ec:	50 70       	andi	r21, 0x00	; 0
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    74ee:	41 15       	cp	r20, r1
    74f0:	51 05       	cpc	r21, r1
    74f2:	19 f0       	breq	.+6      	; 0x74fa <TWI_MasterInterruptHandler+0x20>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    74f4:	0e 94 fa 39 	call	0x73f4	; 0x73f4 <TWI_MasterArbitrationLostBusErrorHandler>
    74f8:	08 95       	ret
  }

  /* If master write interrupt. */
  else if (currentStatus & TWI_MASTER_WIF_bm) {
    74fa:	66 ff       	sbrs	r22, 6
    74fc:	03 c0       	rjmp	.+6      	; 0x7504 <TWI_MasterInterruptHandler+0x2a>
    TWI_MasterWriteHandler(twi);
    74fe:	0e 94 0c 3a 	call	0x7418	; 0x7418 <TWI_MasterWriteHandler>
    7502:	08 95       	ret
  }

	/* If master read interrupt. */
  else if (currentStatus & TWI_MASTER_RIF_bm) {
    7504:	67 ff       	sbrs	r22, 7
    7506:	03 c0       	rjmp	.+6      	; 0x750e <TWI_MasterInterruptHandler+0x34>
    TWI_MasterReadHandler(twi);
    7508:	0e 94 41 3a 	call	0x7482	; 0x7482 <TWI_MasterReadHandler>
    750c:	08 95       	ret
  }

	/* If unexpected state. */
  else {
    twi->result = TWIM_RESULT_FAIL;
    750e:	26 e0       	ldi	r18, 0x06	; 6
    7510:	fc 01       	movw	r30, r24
    7512:	26 87       	std	Z+14, r18	; 0x0e
    twi->status = TWIM_STATUS_READY;
    7514:	15 86       	std	Z+13, r1	; 0x0d
    7516:	08 95       	ret

00007518 <validate>:
)
{
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
    7518:	fc 01       	movw	r30, r24
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
    751a:	a0 81       	ld	r26, Z
    751c:	b1 81       	ldd	r27, Z+1	; 0x01
    751e:	10 97       	sbiw	r26, 0x00	; 0
    7520:	a9 f0       	breq	.+42     	; 0x754c <validate+0x34>
    7522:	8c 91       	ld	r24, X
    7524:	88 23       	and	r24, r24
    7526:	91 f0       	breq	.+36     	; 0x754c <validate+0x34>
    7528:	16 96       	adiw	r26, 0x06	; 6
    752a:	2d 91       	ld	r18, X+
    752c:	3c 91       	ld	r19, X
    752e:	17 97       	sbiw	r26, 0x07	; 7
    7530:	82 81       	ldd	r24, Z+2	; 0x02
    7532:	93 81       	ldd	r25, Z+3	; 0x03
    7534:	28 17       	cp	r18, r24
    7536:	39 07       	cpc	r19, r25
    7538:	49 f4       	brne	.+18     	; 0x754c <validate+0x34>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
    753a:	11 96       	adiw	r26, 0x01	; 1
    753c:	8c 91       	ld	r24, X
    753e:	0e 94 48 46 	call	0x8c90	; 0x8c90 <disk_status>
    7542:	80 ff       	sbrs	r24, 0
    7544:	06 c0       	rjmp	.+12     	; 0x7552 <validate+0x3a>
		return FR_NOT_READY;
    7546:	23 e0       	ldi	r18, 0x03	; 3
    7548:	30 e0       	ldi	r19, 0x00	; 0
    754a:	05 c0       	rjmp	.+10     	; 0x7556 <validate+0x3e>
	FIL *fil;


	fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
	if (!fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
    754c:	29 e0       	ldi	r18, 0x09	; 9
    754e:	30 e0       	ldi	r19, 0x00	; 0
    7550:	02 c0       	rjmp	.+4      	; 0x7556 <validate+0x3e>
	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
    7552:	20 e0       	ldi	r18, 0x00	; 0
    7554:	30 e0       	ldi	r19, 0x00	; 0
}
    7556:	c9 01       	movw	r24, r18
    7558:	08 95       	ret

0000755a <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    755a:	cf 92       	push	r12
    755c:	df 92       	push	r13
    755e:	ef 92       	push	r14
    7560:	ff 92       	push	r15
    7562:	0f 93       	push	r16
    7564:	cf 93       	push	r28
    7566:	df 93       	push	r29
    7568:	ec 01       	movw	r28, r24
    756a:	6a 01       	movw	r12, r20
    756c:	7b 01       	movw	r14, r22
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
    756e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7570:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7572:	a8 a1       	ldd	r26, Y+32	; 0x20
    7574:	b9 a1       	ldd	r27, Y+33	; 0x21
    7576:	84 17       	cp	r24, r20
    7578:	95 07       	cpc	r25, r21
    757a:	a6 07       	cpc	r26, r22
    757c:	b7 07       	cpc	r27, r23
    757e:	a1 f0       	breq	.+40     	; 0x75a8 <move_window+0x4e>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    7580:	41 15       	cp	r20, r1
    7582:	51 05       	cpc	r21, r1
    7584:	61 05       	cpc	r22, r1
    7586:	71 05       	cpc	r23, r1
    7588:	79 f0       	breq	.+30     	; 0x75a8 <move_window+0x4e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    758a:	be 01       	movw	r22, r28
    758c:	6e 5d       	subi	r22, 0xDE	; 222
    758e:	7f 4f       	sbci	r23, 0xFF	; 255
    7590:	89 81       	ldd	r24, Y+1	; 0x01
    7592:	a7 01       	movw	r20, r14
    7594:	96 01       	movw	r18, r12
    7596:	01 e0       	ldi	r16, 0x01	; 1
    7598:	0e 94 4f 46 	call	0x8c9e	; 0x8c9e <disk_read>
    759c:	00 97       	sbiw	r24, 0x00	; 0
    759e:	39 f4       	brne	.+14     	; 0x75ae <move_window+0x54>
				return FR_DISK_ERR;
			fs->winsect = sector;
    75a0:	ce 8e       	std	Y+30, r12	; 0x1e
    75a2:	df 8e       	std	Y+31, r13	; 0x1f
    75a4:	e8 a2       	std	Y+32, r14	; 0x20
    75a6:	f9 a2       	std	Y+33, r15	; 0x21
		}
	}

	return FR_OK;
    75a8:	20 e0       	ldi	r18, 0x00	; 0
    75aa:	30 e0       	ldi	r19, 0x00	; 0
    75ac:	02 c0       	rjmp	.+4      	; 0x75b2 <move_window+0x58>
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
    75ae:	21 e0       	ldi	r18, 0x01	; 1
    75b0:	30 e0       	ldi	r19, 0x00	; 0
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
    75b2:	c9 01       	movw	r24, r18
    75b4:	df 91       	pop	r29
    75b6:	cf 91       	pop	r28
    75b8:	0f 91       	pop	r16
    75ba:	ff 90       	pop	r15
    75bc:	ef 90       	pop	r14
    75be:	df 90       	pop	r13
    75c0:	cf 90       	pop	r12
    75c2:	08 95       	ret

000075c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    75c4:	0f 93       	push	r16
    75c6:	cf 93       	push	r28
    75c8:	df 93       	push	r29
    75ca:	ec 01       	movw	r28, r24
    75cc:	9a 01       	movw	r18, r20
    75ce:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    75d0:	bc 01       	movw	r22, r24
    75d2:	6e 5d       	subi	r22, 0xDE	; 222
    75d4:	7f 4f       	sbci	r23, 0xFF	; 255
    75d6:	89 81       	ldd	r24, Y+1	; 0x01
    75d8:	01 e0       	ldi	r16, 0x01	; 1
    75da:	0e 94 4f 46 	call	0x8c9e	; 0x8c9e <disk_read>
    75de:	00 97       	sbiw	r24, 0x00	; 0
    75e0:	09 f0       	breq	.+2      	; 0x75e4 <check_fs+0x20>
    75e2:	82 c0       	rjmp	.+260    	; 0x76e8 <check_fs+0x124>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    75e4:	fe 01       	movw	r30, r28
    75e6:	ef 5d       	subi	r30, 0xDF	; 223
    75e8:	fd 4f       	sbci	r31, 0xFD	; 253
    75ea:	30 81       	ld	r19, Z
    75ec:	20 e0       	ldi	r18, 0x00	; 0
    75ee:	fe 01       	movw	r30, r28
    75f0:	e0 5e       	subi	r30, 0xE0	; 224
    75f2:	fd 4f       	sbci	r31, 0xFD	; 253
    75f4:	80 81       	ld	r24, Z
    75f6:	90 e0       	ldi	r25, 0x00	; 0
    75f8:	82 2b       	or	r24, r18
    75fa:	93 2b       	or	r25, r19
    75fc:	2a ea       	ldi	r18, 0xAA	; 170
    75fe:	85 35       	cpi	r24, 0x55	; 85
    7600:	92 07       	cpc	r25, r18
    7602:	09 f0       	breq	.+2      	; 0x7606 <check_fs+0x42>
    7604:	73 c0       	rjmp	.+230    	; 0x76ec <check_fs+0x128>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    7606:	fe 01       	movw	r30, r28
    7608:	e5 5a       	subi	r30, 0xA5	; 165
    760a:	ff 4f       	sbci	r31, 0xFF	; 255
    760c:	80 81       	ld	r24, Z
    760e:	90 e0       	ldi	r25, 0x00	; 0
    7610:	a0 e0       	ldi	r26, 0x00	; 0
    7612:	b0 e0       	ldi	r27, 0x00	; 0
    7614:	b8 2f       	mov	r27, r24
    7616:	aa 27       	eor	r26, r26
    7618:	99 27       	eor	r25, r25
    761a:	88 27       	eor	r24, r24
    761c:	fe 01       	movw	r30, r28
    761e:	e6 5a       	subi	r30, 0xA6	; 166
    7620:	ff 4f       	sbci	r31, 0xFF	; 255
    7622:	20 81       	ld	r18, Z
    7624:	30 e0       	ldi	r19, 0x00	; 0
    7626:	40 e0       	ldi	r20, 0x00	; 0
    7628:	50 e0       	ldi	r21, 0x00	; 0
    762a:	a9 01       	movw	r20, r18
    762c:	33 27       	eor	r19, r19
    762e:	22 27       	eor	r18, r18
    7630:	82 2b       	or	r24, r18
    7632:	93 2b       	or	r25, r19
    7634:	a4 2b       	or	r26, r20
    7636:	b5 2b       	or	r27, r21
    7638:	fe 01       	movw	r30, r28
    763a:	e8 5a       	subi	r30, 0xA8	; 168
    763c:	ff 4f       	sbci	r31, 0xFF	; 255
    763e:	20 81       	ld	r18, Z
    7640:	30 e0       	ldi	r19, 0x00	; 0
    7642:	40 e0       	ldi	r20, 0x00	; 0
    7644:	50 e0       	ldi	r21, 0x00	; 0
    7646:	82 2b       	or	r24, r18
    7648:	93 2b       	or	r25, r19
    764a:	a4 2b       	or	r26, r20
    764c:	b5 2b       	or	r27, r21
    764e:	fe 01       	movw	r30, r28
    7650:	e7 5a       	subi	r30, 0xA7	; 167
    7652:	ff 4f       	sbci	r31, 0xFF	; 255
    7654:	30 81       	ld	r19, Z
    7656:	20 e0       	ldi	r18, 0x00	; 0
    7658:	40 e0       	ldi	r20, 0x00	; 0
    765a:	50 e0       	ldi	r21, 0x00	; 0
    765c:	82 2b       	or	r24, r18
    765e:	93 2b       	or	r25, r19
    7660:	a4 2b       	or	r26, r20
    7662:	b5 2b       	or	r27, r21
    7664:	b0 70       	andi	r27, 0x00	; 0
    7666:	86 34       	cpi	r24, 0x46	; 70
    7668:	21 e4       	ldi	r18, 0x41	; 65
    766a:	92 07       	cpc	r25, r18
    766c:	24 e5       	ldi	r18, 0x54	; 84
    766e:	a2 07       	cpc	r26, r18
    7670:	20 e0       	ldi	r18, 0x00	; 0
    7672:	b2 07       	cpc	r27, r18
    7674:	e9 f1       	breq	.+122    	; 0x76f0 <check_fs+0x12c>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    7676:	fe 01       	movw	r30, r28
    7678:	e9 58       	subi	r30, 0x89	; 137
    767a:	ff 4f       	sbci	r31, 0xFF	; 255
    767c:	20 81       	ld	r18, Z
    767e:	30 e0       	ldi	r19, 0x00	; 0
    7680:	40 e0       	ldi	r20, 0x00	; 0
    7682:	50 e0       	ldi	r21, 0x00	; 0
    7684:	52 2f       	mov	r21, r18
    7686:	44 27       	eor	r20, r20
    7688:	33 27       	eor	r19, r19
    768a:	22 27       	eor	r18, r18
    768c:	fe 01       	movw	r30, r28
    768e:	ea 58       	subi	r30, 0x8A	; 138
    7690:	ff 4f       	sbci	r31, 0xFF	; 255
    7692:	80 81       	ld	r24, Z
    7694:	90 e0       	ldi	r25, 0x00	; 0
    7696:	a0 e0       	ldi	r26, 0x00	; 0
    7698:	b0 e0       	ldi	r27, 0x00	; 0
    769a:	dc 01       	movw	r26, r24
    769c:	99 27       	eor	r25, r25
    769e:	88 27       	eor	r24, r24
    76a0:	28 2b       	or	r18, r24
    76a2:	39 2b       	or	r19, r25
    76a4:	4a 2b       	or	r20, r26
    76a6:	5b 2b       	or	r21, r27
    76a8:	fe 01       	movw	r30, r28
    76aa:	ec 58       	subi	r30, 0x8C	; 140
    76ac:	ff 4f       	sbci	r31, 0xFF	; 255
    76ae:	80 81       	ld	r24, Z
    76b0:	90 e0       	ldi	r25, 0x00	; 0
    76b2:	a0 e0       	ldi	r26, 0x00	; 0
    76b4:	b0 e0       	ldi	r27, 0x00	; 0
    76b6:	28 2b       	or	r18, r24
    76b8:	39 2b       	or	r19, r25
    76ba:	4a 2b       	or	r20, r26
    76bc:	5b 2b       	or	r21, r27
    76be:	cb 58       	subi	r28, 0x8B	; 139
    76c0:	df 4f       	sbci	r29, 0xFF	; 255
    76c2:	98 81       	ld	r25, Y
    76c4:	80 e0       	ldi	r24, 0x00	; 0
    76c6:	a0 e0       	ldi	r26, 0x00	; 0
    76c8:	b0 e0       	ldi	r27, 0x00	; 0
    76ca:	28 2b       	or	r18, r24
    76cc:	39 2b       	or	r19, r25
    76ce:	4a 2b       	or	r20, r26
    76d0:	5b 2b       	or	r21, r27
    76d2:	50 70       	andi	r21, 0x00	; 0
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
    76d4:	81 e0       	ldi	r24, 0x01	; 1
    76d6:	26 34       	cpi	r18, 0x46	; 70
    76d8:	91 e4       	ldi	r25, 0x41	; 65
    76da:	39 07       	cpc	r19, r25
    76dc:	94 e5       	ldi	r25, 0x54	; 84
    76de:	49 07       	cpc	r20, r25
    76e0:	90 e0       	ldi	r25, 0x00	; 0
    76e2:	59 07       	cpc	r21, r25
    76e4:	31 f4       	brne	.+12     	; 0x76f2 <check_fs+0x12e>
    76e6:	04 c0       	rjmp	.+8      	; 0x76f0 <check_fs+0x12c>
    76e8:	83 e0       	ldi	r24, 0x03	; 3
    76ea:	03 c0       	rjmp	.+6      	; 0x76f2 <check_fs+0x12e>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
    76ec:	82 e0       	ldi	r24, 0x02	; 2
    76ee:	01 c0       	rjmp	.+2      	; 0x76f2 <check_fs+0x12e>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
    76f0:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    76f2:	df 91       	pop	r29
    76f4:	cf 91       	pop	r28
    76f6:	0f 91       	pop	r16
    76f8:	08 95       	ret

000076fa <ld_clust.clone.0>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Load/Store start cluster number                  */
/*-----------------------------------------------------------------------*/

static
DWORD ld_clust (
    76fa:	fb 01       	movw	r30, r22
	BYTE *dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
    76fc:	53 8d       	ldd	r21, Z+27	; 0x1b
    76fe:	40 e0       	ldi	r20, 0x00	; 0
    7700:	22 8d       	ldd	r18, Z+26	; 0x1a
    7702:	30 e0       	ldi	r19, 0x00	; 0
    7704:	24 2b       	or	r18, r20
    7706:	35 2b       	or	r19, r21
    7708:	40 e0       	ldi	r20, 0x00	; 0
    770a:	50 e0       	ldi	r21, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
    770c:	83 30       	cpi	r24, 0x03	; 3
    770e:	79 f4       	brne	.+30     	; 0x772e <ld_clust.clone.0+0x34>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
    7710:	75 89       	ldd	r23, Z+21	; 0x15
    7712:	60 e0       	ldi	r22, 0x00	; 0
    7714:	84 89       	ldd	r24, Z+20	; 0x14
    7716:	90 e0       	ldi	r25, 0x00	; 0
    7718:	86 2b       	or	r24, r22
    771a:	97 2b       	or	r25, r23
    771c:	a0 e0       	ldi	r26, 0x00	; 0
    771e:	b0 e0       	ldi	r27, 0x00	; 0
    7720:	dc 01       	movw	r26, r24
    7722:	99 27       	eor	r25, r25
    7724:	88 27       	eor	r24, r24
    7726:	28 2b       	or	r18, r24
    7728:	39 2b       	or	r19, r25
    772a:	4a 2b       	or	r20, r26
    772c:	5b 2b       	or	r21, r27

	return cl;
}
    772e:	b9 01       	movw	r22, r18
    7730:	ca 01       	movw	r24, r20
    7732:	08 95       	ret

00007734 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    7734:	cf 93       	push	r28
    7736:	df 93       	push	r29
    7738:	ec 01       	movw	r28, r24
    773a:	cb 01       	movw	r24, r22
    773c:	ba 01       	movw	r22, r20
	clst -= 2;
    773e:	62 50       	subi	r22, 0x02	; 2
    7740:	70 40       	sbci	r23, 0x00	; 0
    7742:	80 40       	sbci	r24, 0x00	; 0
    7744:	90 40       	sbci	r25, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    7746:	2a 85       	ldd	r18, Y+10	; 0x0a
    7748:	3b 85       	ldd	r19, Y+11	; 0x0b
    774a:	4c 85       	ldd	r20, Y+12	; 0x0c
    774c:	5d 85       	ldd	r21, Y+13	; 0x0d
    774e:	22 50       	subi	r18, 0x02	; 2
    7750:	30 40       	sbci	r19, 0x00	; 0
    7752:	40 40       	sbci	r20, 0x00	; 0
    7754:	50 40       	sbci	r21, 0x00	; 0
    7756:	62 17       	cp	r22, r18
    7758:	73 07       	cpc	r23, r19
    775a:	84 07       	cpc	r24, r20
    775c:	95 07       	cpc	r25, r21
    775e:	88 f4       	brcc	.+34     	; 0x7782 <clust2sect+0x4e>
	return clst * fs->csize + fs->database;
    7760:	2a 81       	ldd	r18, Y+2	; 0x02
    7762:	30 e0       	ldi	r19, 0x00	; 0
    7764:	40 e0       	ldi	r20, 0x00	; 0
    7766:	50 e0       	ldi	r21, 0x00	; 0
    7768:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    776c:	9b 01       	movw	r18, r22
    776e:	ac 01       	movw	r20, r24
    7770:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7772:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7774:	ac 8d       	ldd	r26, Y+28	; 0x1c
    7776:	bd 8d       	ldd	r27, Y+29	; 0x1d
    7778:	28 0f       	add	r18, r24
    777a:	39 1f       	adc	r19, r25
    777c:	4a 1f       	adc	r20, r26
    777e:	5b 1f       	adc	r21, r27
    7780:	03 c0       	rjmp	.+6      	; 0x7788 <clust2sect+0x54>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    7782:	20 e0       	ldi	r18, 0x00	; 0
    7784:	30 e0       	ldi	r19, 0x00	; 0
    7786:	a9 01       	movw	r20, r18
	return clst * fs->csize + fs->database;
}
    7788:	b9 01       	movw	r22, r18
    778a:	ca 01       	movw	r24, r20
    778c:	df 91       	pop	r29
    778e:	cf 91       	pop	r28
    7790:	08 95       	ret

00007792 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    7792:	a0 e0       	ldi	r26, 0x00	; 0
    7794:	b0 e0       	ldi	r27, 0x00	; 0
    7796:	ef ec       	ldi	r30, 0xCF	; 207
    7798:	fb e3       	ldi	r31, 0x3B	; 59
    779a:	0c 94 c3 4b 	jmp	0x9786	; 0x9786 <__prologue_saves__+0x12>
    779e:	ec 01       	movw	r28, r24
    77a0:	6a 01       	movw	r12, r20
    77a2:	7b 01       	movw	r14, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
    77a4:	42 30       	cpi	r20, 0x02	; 2
    77a6:	51 05       	cpc	r21, r1
    77a8:	61 05       	cpc	r22, r1
    77aa:	71 05       	cpc	r23, r1
    77ac:	08 f4       	brcc	.+2      	; 0x77b0 <get_fat+0x1e>
    77ae:	ca c0       	rjmp	.+404    	; 0x7944 <get_fat+0x1b2>
    77b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    77b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    77b4:	ac 85       	ldd	r26, Y+12	; 0x0c
    77b6:	bd 85       	ldd	r27, Y+13	; 0x0d
    77b8:	48 17       	cp	r20, r24
    77ba:	59 07       	cpc	r21, r25
    77bc:	6a 07       	cpc	r22, r26
    77be:	7b 07       	cpc	r23, r27
    77c0:	08 f0       	brcs	.+2      	; 0x77c4 <get_fat+0x32>
    77c2:	c0 c0       	rjmp	.+384    	; 0x7944 <get_fat+0x1b2>
		return 1;

	switch (fs->fs_type) {
    77c4:	88 81       	ld	r24, Y
    77c6:	82 30       	cpi	r24, 0x02	; 2
    77c8:	09 f4       	brne	.+2      	; 0x77cc <get_fat+0x3a>
    77ca:	55 c0       	rjmp	.+170    	; 0x7876 <get_fat+0xe4>
    77cc:	83 30       	cpi	r24, 0x03	; 3
    77ce:	09 f4       	brne	.+2      	; 0x77d2 <get_fat+0x40>
    77d0:	74 c0       	rjmp	.+232    	; 0x78ba <get_fat+0x128>
    77d2:	81 30       	cpi	r24, 0x01	; 1
    77d4:	09 f0       	breq	.+2      	; 0x77d8 <get_fat+0x46>
    77d6:	bb c0       	rjmp	.+374    	; 0x794e <get_fat+0x1bc>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    77d8:	8a 01       	movw	r16, r20
    77da:	16 95       	lsr	r17
    77dc:	07 95       	ror	r16
    77de:	04 0f       	add	r16, r20
    77e0:	15 1f       	adc	r17, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    77e2:	a8 01       	movw	r20, r16
    77e4:	45 2f       	mov	r20, r21
    77e6:	55 27       	eor	r21, r21
    77e8:	46 95       	lsr	r20
    77ea:	60 e0       	ldi	r22, 0x00	; 0
    77ec:	70 e0       	ldi	r23, 0x00	; 0
    77ee:	8a 89       	ldd	r24, Y+18	; 0x12
    77f0:	9b 89       	ldd	r25, Y+19	; 0x13
    77f2:	ac 89       	ldd	r26, Y+20	; 0x14
    77f4:	bd 89       	ldd	r27, Y+21	; 0x15
    77f6:	48 0f       	add	r20, r24
    77f8:	59 1f       	adc	r21, r25
    77fa:	6a 1f       	adc	r22, r26
    77fc:	7b 1f       	adc	r23, r27
    77fe:	ce 01       	movw	r24, r28
    7800:	0e 94 ad 3a 	call	0x755a	; 0x755a <move_window>
    7804:	00 97       	sbiw	r24, 0x00	; 0
    7806:	09 f0       	breq	.+2      	; 0x780a <get_fat+0x78>
    7808:	a2 c0       	rjmp	.+324    	; 0x794e <get_fat+0x1bc>
		wc = fs->win[bc % SS(fs)]; bc++;
    780a:	f8 01       	movw	r30, r16
    780c:	f1 70       	andi	r31, 0x01	; 1
    780e:	ec 0f       	add	r30, r28
    7810:	fd 1f       	adc	r31, r29
    7812:	b2 a0       	ldd	r11, Z+34	; 0x22
    7814:	0f 5f       	subi	r16, 0xFF	; 255
    7816:	1f 4f       	sbci	r17, 0xFF	; 255
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7818:	a8 01       	movw	r20, r16
    781a:	45 2f       	mov	r20, r21
    781c:	55 27       	eor	r21, r21
    781e:	46 95       	lsr	r20
    7820:	60 e0       	ldi	r22, 0x00	; 0
    7822:	70 e0       	ldi	r23, 0x00	; 0
    7824:	8a 89       	ldd	r24, Y+18	; 0x12
    7826:	9b 89       	ldd	r25, Y+19	; 0x13
    7828:	ac 89       	ldd	r26, Y+20	; 0x14
    782a:	bd 89       	ldd	r27, Y+21	; 0x15
    782c:	48 0f       	add	r20, r24
    782e:	59 1f       	adc	r21, r25
    7830:	6a 1f       	adc	r22, r26
    7832:	7b 1f       	adc	r23, r27
    7834:	ce 01       	movw	r24, r28
    7836:	0e 94 ad 3a 	call	0x755a	; 0x755a <move_window>
    783a:	00 97       	sbiw	r24, 0x00	; 0
    783c:	09 f0       	breq	.+2      	; 0x7840 <get_fat+0xae>
    783e:	87 c0       	rjmp	.+270    	; 0x794e <get_fat+0x1bc>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    7840:	2b 2d       	mov	r18, r11
    7842:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    7844:	11 70       	andi	r17, 0x01	; 1
    7846:	0c 0f       	add	r16, r28
    7848:	1d 1f       	adc	r17, r29
    784a:	f8 01       	movw	r30, r16
    784c:	92 a1       	ldd	r25, Z+34	; 0x22
    784e:	80 e0       	ldi	r24, 0x00	; 0
    7850:	28 2b       	or	r18, r24
    7852:	39 2b       	or	r19, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    7854:	e6 01       	movw	r28, r12
    7856:	c1 70       	andi	r28, 0x01	; 1
    7858:	d0 70       	andi	r29, 0x00	; 0
    785a:	20 97       	sbiw	r28, 0x00	; 0
    785c:	31 f0       	breq	.+12     	; 0x786a <get_fat+0xd8>
    785e:	54 e0       	ldi	r21, 0x04	; 4
    7860:	36 95       	lsr	r19
    7862:	27 95       	ror	r18
    7864:	5a 95       	dec	r21
    7866:	e1 f7       	brne	.-8      	; 0x7860 <get_fat+0xce>
    7868:	25 c0       	rjmp	.+74     	; 0x78b4 <get_fat+0x122>
    786a:	40 e0       	ldi	r20, 0x00	; 0
    786c:	50 e0       	ldi	r21, 0x00	; 0
    786e:	3f 70       	andi	r19, 0x0F	; 15
    7870:	40 70       	andi	r20, 0x00	; 0
    7872:	50 70       	andi	r21, 0x00	; 0
    7874:	70 c0       	rjmp	.+224    	; 0x7956 <get_fat+0x1c4>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    7876:	77 27       	eor	r23, r23
    7878:	6f 2d       	mov	r22, r15
    787a:	5e 2d       	mov	r21, r14
    787c:	4d 2d       	mov	r20, r13
    787e:	8a 89       	ldd	r24, Y+18	; 0x12
    7880:	9b 89       	ldd	r25, Y+19	; 0x13
    7882:	ac 89       	ldd	r26, Y+20	; 0x14
    7884:	bd 89       	ldd	r27, Y+21	; 0x15
    7886:	48 0f       	add	r20, r24
    7888:	59 1f       	adc	r21, r25
    788a:	6a 1f       	adc	r22, r26
    788c:	7b 1f       	adc	r23, r27
    788e:	ce 01       	movw	r24, r28
    7890:	0e 94 ad 3a 	call	0x755a	; 0x755a <move_window>
    7894:	00 97       	sbiw	r24, 0x00	; 0
    7896:	09 f0       	breq	.+2      	; 0x789a <get_fat+0x108>
    7898:	5a c0       	rjmp	.+180    	; 0x794e <get_fat+0x1bc>
		p = &fs->win[clst * 2 % SS(fs)];
    789a:	b6 01       	movw	r22, r12
    789c:	66 0f       	add	r22, r22
    789e:	77 1f       	adc	r23, r23
    78a0:	71 70       	andi	r23, 0x01	; 1
		return LD_WORD(p);
    78a2:	fe 01       	movw	r30, r28
    78a4:	e6 0f       	add	r30, r22
    78a6:	f7 1f       	adc	r31, r23
    78a8:	22 a1       	ldd	r18, Z+34	; 0x22
    78aa:	30 e0       	ldi	r19, 0x00	; 0
    78ac:	93 a1       	ldd	r25, Z+35	; 0x23
    78ae:	80 e0       	ldi	r24, 0x00	; 0
    78b0:	28 2b       	or	r18, r24
    78b2:	39 2b       	or	r19, r25
    78b4:	40 e0       	ldi	r20, 0x00	; 0
    78b6:	50 e0       	ldi	r21, 0x00	; 0
    78b8:	4e c0       	rjmp	.+156    	; 0x7956 <get_fat+0x1c4>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    78ba:	27 e0       	ldi	r18, 0x07	; 7
    78bc:	76 95       	lsr	r23
    78be:	67 95       	ror	r22
    78c0:	57 95       	ror	r21
    78c2:	47 95       	ror	r20
    78c4:	2a 95       	dec	r18
    78c6:	d1 f7       	brne	.-12     	; 0x78bc <get_fat+0x12a>
    78c8:	8a 89       	ldd	r24, Y+18	; 0x12
    78ca:	9b 89       	ldd	r25, Y+19	; 0x13
    78cc:	ac 89       	ldd	r26, Y+20	; 0x14
    78ce:	bd 89       	ldd	r27, Y+21	; 0x15
    78d0:	48 0f       	add	r20, r24
    78d2:	59 1f       	adc	r21, r25
    78d4:	6a 1f       	adc	r22, r26
    78d6:	7b 1f       	adc	r23, r27
    78d8:	ce 01       	movw	r24, r28
    78da:	0e 94 ad 3a 	call	0x755a	; 0x755a <move_window>
    78de:	00 97       	sbiw	r24, 0x00	; 0
    78e0:	b1 f5       	brne	.+108    	; 0x794e <get_fat+0x1bc>
		p = &fs->win[clst * 4 % SS(fs)];
    78e2:	b6 01       	movw	r22, r12
    78e4:	66 0f       	add	r22, r22
    78e6:	77 1f       	adc	r23, r23
    78e8:	66 0f       	add	r22, r22
    78ea:	77 1f       	adc	r23, r23
    78ec:	71 70       	andi	r23, 0x01	; 1
    78ee:	fb 01       	movw	r30, r22
    78f0:	b2 96       	adiw	r30, 0x22	; 34
    78f2:	ec 0f       	add	r30, r28
    78f4:	fd 1f       	adc	r31, r29
		return LD_DWORD(p) & 0x0FFFFFFF;
    78f6:	22 81       	ldd	r18, Z+2	; 0x02
    78f8:	30 e0       	ldi	r19, 0x00	; 0
    78fa:	40 e0       	ldi	r20, 0x00	; 0
    78fc:	50 e0       	ldi	r21, 0x00	; 0
    78fe:	a9 01       	movw	r20, r18
    7900:	33 27       	eor	r19, r19
    7902:	22 27       	eor	r18, r18
    7904:	83 81       	ldd	r24, Z+3	; 0x03
    7906:	90 e0       	ldi	r25, 0x00	; 0
    7908:	a0 e0       	ldi	r26, 0x00	; 0
    790a:	b0 e0       	ldi	r27, 0x00	; 0
    790c:	b8 2f       	mov	r27, r24
    790e:	aa 27       	eor	r26, r26
    7910:	99 27       	eor	r25, r25
    7912:	88 27       	eor	r24, r24
    7914:	28 2b       	or	r18, r24
    7916:	39 2b       	or	r19, r25
    7918:	4a 2b       	or	r20, r26
    791a:	5b 2b       	or	r21, r27
    791c:	91 81       	ldd	r25, Z+1	; 0x01
    791e:	80 e0       	ldi	r24, 0x00	; 0
    7920:	a0 e0       	ldi	r26, 0x00	; 0
    7922:	b0 e0       	ldi	r27, 0x00	; 0
    7924:	28 2b       	or	r18, r24
    7926:	39 2b       	or	r19, r25
    7928:	4a 2b       	or	r20, r26
    792a:	5b 2b       	or	r21, r27
    792c:	c6 0f       	add	r28, r22
    792e:	d7 1f       	adc	r29, r23
    7930:	8a a1       	ldd	r24, Y+34	; 0x22
    7932:	90 e0       	ldi	r25, 0x00	; 0
    7934:	a0 e0       	ldi	r26, 0x00	; 0
    7936:	b0 e0       	ldi	r27, 0x00	; 0
    7938:	28 2b       	or	r18, r24
    793a:	39 2b       	or	r19, r25
    793c:	4a 2b       	or	r20, r26
    793e:	5b 2b       	or	r21, r27
    7940:	5f 70       	andi	r21, 0x0F	; 15
    7942:	09 c0       	rjmp	.+18     	; 0x7956 <get_fat+0x1c4>
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
		return 1;
    7944:	21 e0       	ldi	r18, 0x01	; 1
    7946:	30 e0       	ldi	r19, 0x00	; 0
    7948:	40 e0       	ldi	r20, 0x00	; 0
    794a:	50 e0       	ldi	r21, 0x00	; 0
    794c:	04 c0       	rjmp	.+8      	; 0x7956 <get_fat+0x1c4>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    794e:	2f ef       	ldi	r18, 0xFF	; 255
    7950:	3f ef       	ldi	r19, 0xFF	; 255
    7952:	4f ef       	ldi	r20, 0xFF	; 255
    7954:	5f ef       	ldi	r21, 0xFF	; 255
}
    7956:	b9 01       	movw	r22, r18
    7958:	ca 01       	movw	r24, r20
    795a:	cd b7       	in	r28, 0x3d	; 61
    795c:	de b7       	in	r29, 0x3e	; 62
    795e:	e9 e0       	ldi	r30, 0x09	; 9
    7960:	0c 94 dc 4b 	jmp	0x97b8	; 0x97b8 <__epilogue_restores__+0x12>

00007964 <dir_sdi.clone.4>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Set directory index                              */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_sdi (
    7964:	0f 93       	push	r16
    7966:	1f 93       	push	r17
    7968:	cf 93       	push	r28
    796a:	df 93       	push	r29
    796c:	ec 01       	movw	r28, r24
{
	DWORD clst;
	WORD ic;


	dj->index = idx;
    796e:	1c 82       	std	Y+4, r1	; 0x04
    7970:	1d 82       	std	Y+5, r1	; 0x05
	clst = dj->sclust;
    7972:	4e 81       	ldd	r20, Y+6	; 0x06
    7974:	5f 81       	ldd	r21, Y+7	; 0x07
    7976:	68 85       	ldd	r22, Y+8	; 0x08
    7978:	79 85       	ldd	r23, Y+9	; 0x09
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    797a:	41 30       	cpi	r20, 0x01	; 1
    797c:	51 05       	cpc	r21, r1
    797e:	61 05       	cpc	r22, r1
    7980:	71 05       	cpc	r23, r1
    7982:	09 f4       	brne	.+2      	; 0x7986 <dir_sdi.clone.4+0x22>
    7984:	69 c0       	rjmp	.+210    	; 0x7a58 <dir_sdi.clone.4+0xf4>
    7986:	08 81       	ld	r16, Y
    7988:	19 81       	ldd	r17, Y+1	; 0x01
    798a:	f8 01       	movw	r30, r16
    798c:	82 85       	ldd	r24, Z+10	; 0x0a
    798e:	93 85       	ldd	r25, Z+11	; 0x0b
    7990:	a4 85       	ldd	r26, Z+12	; 0x0c
    7992:	b5 85       	ldd	r27, Z+13	; 0x0d
    7994:	48 17       	cp	r20, r24
    7996:	59 07       	cpc	r21, r25
    7998:	6a 07       	cpc	r22, r26
    799a:	7b 07       	cpc	r23, r27
    799c:	08 f0       	brcs	.+2      	; 0x79a0 <dir_sdi.clone.4+0x3c>
    799e:	5c c0       	rjmp	.+184    	; 0x7a58 <dir_sdi.clone.4+0xf4>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    79a0:	41 15       	cp	r20, r1
    79a2:	51 05       	cpc	r21, r1
    79a4:	61 05       	cpc	r22, r1
    79a6:	71 05       	cpc	r23, r1
    79a8:	f9 f4       	brne	.+62     	; 0x79e8 <dir_sdi.clone.4+0x84>
    79aa:	80 81       	ld	r24, Z
    79ac:	83 30       	cpi	r24, 0x03	; 3
    79ae:	49 f4       	brne	.+18     	; 0x79c2 <dir_sdi.clone.4+0x5e>
		clst = dj->fs->dirbase;
    79b0:	46 89       	ldd	r20, Z+22	; 0x16
    79b2:	57 89       	ldd	r21, Z+23	; 0x17
    79b4:	60 8d       	ldd	r22, Z+24	; 0x18
    79b6:	71 8d       	ldd	r23, Z+25	; 0x19

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    79b8:	41 15       	cp	r20, r1
    79ba:	51 05       	cpc	r21, r1
    79bc:	61 05       	cpc	r22, r1
    79be:	71 05       	cpc	r23, r1
    79c0:	99 f4       	brne	.+38     	; 0x79e8 <dir_sdi.clone.4+0x84>
		dj->clust = clst;
    79c2:	1a 86       	std	Y+10, r1	; 0x0a
    79c4:	1b 86       	std	Y+11, r1	; 0x0b
    79c6:	1c 86       	std	Y+12, r1	; 0x0c
    79c8:	1d 86       	std	Y+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    79ca:	f8 01       	movw	r30, r16
    79cc:	80 85       	ldd	r24, Z+8	; 0x08
    79ce:	91 85       	ldd	r25, Z+9	; 0x09
    79d0:	00 97       	sbiw	r24, 0x00	; 0
    79d2:	09 f4       	brne	.+2      	; 0x79d6 <dir_sdi.clone.4+0x72>
    79d4:	41 c0       	rjmp	.+130    	; 0x7a58 <dir_sdi.clone.4+0xf4>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    79d6:	86 89       	ldd	r24, Z+22	; 0x16
    79d8:	97 89       	ldd	r25, Z+23	; 0x17
    79da:	a0 8d       	ldd	r26, Z+24	; 0x18
    79dc:	b1 8d       	ldd	r27, Z+25	; 0x19
    79de:	8e 87       	std	Y+14, r24	; 0x0e
    79e0:	9f 87       	std	Y+15, r25	; 0x0f
    79e2:	a8 8b       	std	Y+16, r26	; 0x10
    79e4:	b9 8b       	std	Y+17, r27	; 0x11
    79e6:	2e c0       	rjmp	.+92     	; 0x7a44 <dir_sdi.clone.4+0xe0>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    79e8:	f8 01       	movw	r30, r16
    79ea:	82 81       	ldd	r24, Z+2	; 0x02
		while (idx >= ic) {	/* Follow cluster chain */
    79ec:	88 23       	and	r24, r24
    79ee:	f9 f4       	brne	.+62     	; 0x7a2e <dir_sdi.clone.4+0xca>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    79f0:	88 81       	ld	r24, Y
    79f2:	99 81       	ldd	r25, Y+1	; 0x01
    79f4:	0e 94 c9 3b 	call	0x7792	; 0x7792 <get_fat>
    79f8:	ab 01       	movw	r20, r22
    79fa:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    79fc:	4f 3f       	cpi	r20, 0xFF	; 255
    79fe:	ff ef       	ldi	r31, 0xFF	; 255
    7a00:	5f 07       	cpc	r21, r31
    7a02:	ff ef       	ldi	r31, 0xFF	; 255
    7a04:	6f 07       	cpc	r22, r31
    7a06:	ff ef       	ldi	r31, 0xFF	; 255
    7a08:	7f 07       	cpc	r23, r31
    7a0a:	19 f1       	breq	.+70     	; 0x7a52 <dir_sdi.clone.4+0xee>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    7a0c:	42 30       	cpi	r20, 0x02	; 2
    7a0e:	51 05       	cpc	r21, r1
    7a10:	61 05       	cpc	r22, r1
    7a12:	71 05       	cpc	r23, r1
    7a14:	08 f1       	brcs	.+66     	; 0x7a58 <dir_sdi.clone.4+0xf4>
    7a16:	e8 81       	ld	r30, Y
    7a18:	f9 81       	ldd	r31, Y+1	; 0x01
    7a1a:	82 85       	ldd	r24, Z+10	; 0x0a
    7a1c:	93 85       	ldd	r25, Z+11	; 0x0b
    7a1e:	a4 85       	ldd	r26, Z+12	; 0x0c
    7a20:	b5 85       	ldd	r27, Z+13	; 0x0d
    7a22:	48 17       	cp	r20, r24
    7a24:	59 07       	cpc	r21, r25
    7a26:	6a 07       	cpc	r22, r26
    7a28:	7b 07       	cpc	r23, r27
    7a2a:	10 f3       	brcs	.-60     	; 0x79f0 <dir_sdi.clone.4+0x8c>
    7a2c:	15 c0       	rjmp	.+42     	; 0x7a58 <dir_sdi.clone.4+0xf4>
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    7a2e:	4a 87       	std	Y+10, r20	; 0x0a
    7a30:	5b 87       	std	Y+11, r21	; 0x0b
    7a32:	6c 87       	std	Y+12, r22	; 0x0c
    7a34:	7d 87       	std	Y+13, r23	; 0x0d
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7a36:	c8 01       	movw	r24, r16
    7a38:	0e 94 9a 3b 	call	0x7734	; 0x7734 <clust2sect>
    7a3c:	6e 87       	std	Y+14, r22	; 0x0e
    7a3e:	7f 87       	std	Y+15, r23	; 0x0f
    7a40:	88 8b       	std	Y+16, r24	; 0x10
    7a42:	99 8b       	std	Y+17, r25	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    7a44:	0e 5d       	subi	r16, 0xDE	; 222
    7a46:	1f 4f       	sbci	r17, 0xFF	; 255
    7a48:	0a 8b       	std	Y+18, r16	; 0x12
    7a4a:	1b 8b       	std	Y+19, r17	; 0x13

	return FR_OK;	/* Seek succeeded */
    7a4c:	20 e0       	ldi	r18, 0x00	; 0
    7a4e:	30 e0       	ldi	r19, 0x00	; 0
    7a50:	05 c0       	rjmp	.+10     	; 0x7a5c <dir_sdi.clone.4+0xf8>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    7a52:	21 e0       	ldi	r18, 0x01	; 1
    7a54:	30 e0       	ldi	r19, 0x00	; 0
    7a56:	02 c0       	rjmp	.+4      	; 0x7a5c <dir_sdi.clone.4+0xf8>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
    7a58:	22 e0       	ldi	r18, 0x02	; 2
    7a5a:	30 e0       	ldi	r19, 0x00	; 0
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
    7a5c:	c9 01       	movw	r24, r18
    7a5e:	df 91       	pop	r29
    7a60:	cf 91       	pop	r28
    7a62:	1f 91       	pop	r17
    7a64:	0f 91       	pop	r16
    7a66:	08 95       	ret

00007a68 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    7a68:	88 23       	and	r24, r24
    7a6a:	99 f4       	brne	.+38     	; 0x7a92 <f_mount+0x2a>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];			/* Get current fs object */
    7a6c:	e0 91 6e 24 	lds	r30, 0x246E
    7a70:	f0 91 6f 24 	lds	r31, 0x246F

	if (rfs) {
    7a74:	30 97       	sbiw	r30, 0x00	; 0
    7a76:	09 f0       	breq	.+2      	; 0x7a7a <f_mount+0x12>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    7a78:	10 82       	st	Z, r1
	}

	if (fs) {
    7a7a:	61 15       	cp	r22, r1
    7a7c:	71 05       	cpc	r23, r1
    7a7e:	11 f0       	breq	.+4      	; 0x7a84 <f_mount+0x1c>
		fs->fs_type = 0;		/* Clear new fs object */
    7a80:	fb 01       	movw	r30, r22
    7a82:	10 82       	st	Z, r1
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    7a84:	60 93 6e 24 	sts	0x246E, r22
    7a88:	70 93 6f 24 	sts	0x246F, r23

	return FR_OK;
    7a8c:	20 e0       	ldi	r18, 0x00	; 0
    7a8e:	30 e0       	ldi	r19, 0x00	; 0
    7a90:	02 c0       	rjmp	.+4      	; 0x7a96 <f_mount+0x2e>
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    7a92:	2b e0       	ldi	r18, 0x0B	; 11
    7a94:	30 e0       	ldi	r19, 0x00	; 0
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    7a96:	c9 01       	movw	r24, r18
    7a98:	08 95       	ret

00007a9a <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    7a9a:	a4 e3       	ldi	r26, 0x34	; 52
    7a9c:	b0 e0       	ldi	r27, 0x00	; 0
    7a9e:	e3 e5       	ldi	r30, 0x53	; 83
    7aa0:	fd e3       	ldi	r31, 0x3D	; 61
    7aa2:	0c 94 ba 4b 	jmp	0x9774	; 0x9774 <__prologue_saves__>
    7aa6:	8f a3       	std	Y+39, r24	; 0x27
    7aa8:	98 a7       	std	Y+40, r25	; 0x28
    7aaa:	69 a7       	std	Y+41, r22	; 0x29
    7aac:	7a a7       	std	Y+42, r23	; 0x2a
    7aae:	4c ab       	std	Y+52, r20	; 0x34
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    7ab0:	00 97       	sbiw	r24, 0x00	; 0
    7ab2:	09 f4       	brne	.+2      	; 0x7ab6 <f_open+0x1c>
    7ab4:	2d c4       	rjmp	.+2138   	; 0x8310 <f_open+0x876>
	fp->fs = 0;			/* Clear file object */
    7ab6:	dc 01       	movw	r26, r24
    7ab8:	1d 92       	st	X+, r1
    7aba:	1c 92       	st	X, r1
    7abc:	11 97       	sbiw	r26, 0x01	; 1
	const TCHAR *p = *path;
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    7abe:	fb 01       	movw	r30, r22
    7ac0:	80 81       	ld	r24, Z
    7ac2:	99 27       	eor	r25, r25
    7ac4:	87 fd       	sbrc	r24, 7
    7ac6:	90 95       	com	r25
    7ac8:	c0 97       	sbiw	r24, 0x30	; 48
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    7aca:	8a 30       	cpi	r24, 0x0A	; 10
    7acc:	91 05       	cpc	r25, r1
    7ace:	38 f4       	brcc	.+14     	; 0x7ade <f_open+0x44>
    7ad0:	21 81       	ldd	r18, Z+1	; 0x01
    7ad2:	2a 33       	cpi	r18, 0x3A	; 58
    7ad4:	21 f4       	brne	.+8      	; 0x7ade <f_open+0x44>
		p += 2; *path = p;				/* Return pointer to the path name */
    7ad6:	32 96       	adiw	r30, 0x02	; 2
    7ad8:	e9 a7       	std	Y+41, r30	; 0x29
    7ada:	fa a7       	std	Y+42, r31	; 0x2a
    7adc:	02 c0       	rjmp	.+4      	; 0x7ae2 <f_open+0x48>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    7ade:	80 e0       	ldi	r24, 0x00	; 0
    7ae0:	90 e0       	ldi	r25, 0x00	; 0
#endif
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    7ae2:	00 97       	sbiw	r24, 0x00	; 0
    7ae4:	09 f0       	breq	.+2      	; 0x7ae8 <f_open+0x4e>
    7ae6:	56 c2       	rjmp	.+1196   	; 0x7f94 <f_open+0x4fa>
		return FR_INVALID_DRIVE;
	fs = FatFs[vol];					/* Get corresponding file system object */
    7ae8:	00 91 6e 24 	lds	r16, 0x246E
    7aec:	10 91 6f 24 	lds	r17, 0x246F
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    7af0:	01 15       	cp	r16, r1
    7af2:	11 05       	cpc	r17, r1
    7af4:	09 f4       	brne	.+2      	; 0x7af8 <f_open+0x5e>
    7af6:	51 c2       	rjmp	.+1186   	; 0x7f9a <f_open+0x500>

	ENTER_FF(fs);						/* Lock file system */

	*rfs = fs;							/* Return pointer to the corresponding file system object */
    7af8:	0d 87       	std	Y+13, r16	; 0x0d
    7afa:	1e 87       	std	Y+14, r17	; 0x0e
	if (fs->fs_type) {					/* If the volume has been mounted */
    7afc:	d8 01       	movw	r26, r16
    7afe:	8c 91       	ld	r24, X
    7b00:	88 23       	and	r24, r24
    7b02:	31 f0       	breq	.+12     	; 0x7b10 <f_open+0x76>
		stat = disk_status(fs->drv);
    7b04:	11 96       	adiw	r26, 0x01	; 1
    7b06:	8c 91       	ld	r24, X
    7b08:	0e 94 48 46 	call	0x8c90	; 0x8c90 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    7b0c:	80 ff       	sbrs	r24, 0
    7b0e:	07 c4       	rjmp	.+2062   	; 0x831e <f_open+0x884>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    7b10:	f8 01       	movw	r30, r16
    7b12:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    7b14:	11 82       	std	Z+1, r1	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
    7b16:	80 e0       	ldi	r24, 0x00	; 0
    7b18:	0e 94 8e 45 	call	0x8b1c	; 0x8b1c <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    7b1c:	80 fd       	sbrc	r24, 0
    7b1e:	40 c2       	rjmp	.+1152   	; 0x7fa0 <f_open+0x506>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    7b20:	c8 01       	movw	r24, r16
    7b22:	40 e0       	ldi	r20, 0x00	; 0
    7b24:	50 e0       	ldi	r21, 0x00	; 0
    7b26:	ba 01       	movw	r22, r20
    7b28:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <check_fs>
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    7b2c:	81 30       	cpi	r24, 0x01	; 1
    7b2e:	e1 f5       	brne	.+120    	; 0x7ba8 <f_open+0x10e>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
		if (pi) pi--;
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
		if (tbl[4]) {						/* Is the partition existing? */
    7b30:	f8 01       	movw	r30, r16
    7b32:	ec 51       	subi	r30, 0x1C	; 28
    7b34:	fe 4f       	sbci	r31, 0xFE	; 254
    7b36:	80 81       	ld	r24, Z
    7b38:	88 23       	and	r24, r24
    7b3a:	09 f4       	brne	.+2      	; 0x7b3e <f_open+0xa4>
    7b3c:	37 c2       	rjmp	.+1134   	; 0x7fac <f_open+0x512>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    7b3e:	f8 01       	movw	r30, r16
    7b40:	e5 51       	subi	r30, 0x15	; 21
    7b42:	fe 4f       	sbci	r31, 0xFE	; 254
    7b44:	40 80       	ld	r4, Z
    7b46:	55 24       	eor	r5, r5
    7b48:	66 24       	eor	r6, r6
    7b4a:	77 24       	eor	r7, r7
    7b4c:	74 2c       	mov	r7, r4
    7b4e:	66 24       	eor	r6, r6
    7b50:	55 24       	eor	r5, r5
    7b52:	44 24       	eor	r4, r4
    7b54:	f8 01       	movw	r30, r16
    7b56:	e6 51       	subi	r30, 0x16	; 22
    7b58:	fe 4f       	sbci	r31, 0xFE	; 254
    7b5a:	80 81       	ld	r24, Z
    7b5c:	90 e0       	ldi	r25, 0x00	; 0
    7b5e:	a0 e0       	ldi	r26, 0x00	; 0
    7b60:	b0 e0       	ldi	r27, 0x00	; 0
    7b62:	dc 01       	movw	r26, r24
    7b64:	99 27       	eor	r25, r25
    7b66:	88 27       	eor	r24, r24
    7b68:	48 2a       	or	r4, r24
    7b6a:	59 2a       	or	r5, r25
    7b6c:	6a 2a       	or	r6, r26
    7b6e:	7b 2a       	or	r7, r27
    7b70:	f8 01       	movw	r30, r16
    7b72:	e8 51       	subi	r30, 0x18	; 24
    7b74:	fe 4f       	sbci	r31, 0xFE	; 254
    7b76:	80 81       	ld	r24, Z
    7b78:	90 e0       	ldi	r25, 0x00	; 0
    7b7a:	a0 e0       	ldi	r26, 0x00	; 0
    7b7c:	b0 e0       	ldi	r27, 0x00	; 0
    7b7e:	48 2a       	or	r4, r24
    7b80:	59 2a       	or	r5, r25
    7b82:	6a 2a       	or	r6, r26
    7b84:	7b 2a       	or	r7, r27
    7b86:	f8 01       	movw	r30, r16
    7b88:	e7 51       	subi	r30, 0x17	; 23
    7b8a:	fe 4f       	sbci	r31, 0xFE	; 254
    7b8c:	90 81       	ld	r25, Z
    7b8e:	80 e0       	ldi	r24, 0x00	; 0
    7b90:	a0 e0       	ldi	r26, 0x00	; 0
    7b92:	b0 e0       	ldi	r27, 0x00	; 0
    7b94:	48 2a       	or	r4, r24
    7b96:	59 2a       	or	r5, r25
    7b98:	6a 2a       	or	r6, r26
    7b9a:	7b 2a       	or	r7, r27
			fmt = check_fs(fs, bsect);		/* Check the partition */
    7b9c:	c8 01       	movw	r24, r16
    7b9e:	b3 01       	movw	r22, r6
    7ba0:	a2 01       	movw	r20, r4
    7ba2:	0e 94 e2 3a 	call	0x75c4	; 0x75c4 <check_fs>
    7ba6:	03 c0       	rjmp	.+6      	; 0x7bae <f_open+0x114>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    7ba8:	44 24       	eor	r4, r4
    7baa:	55 24       	eor	r5, r5
    7bac:	32 01       	movw	r6, r4
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    7bae:	83 30       	cpi	r24, 0x03	; 3
    7bb0:	09 f4       	brne	.+2      	; 0x7bb4 <f_open+0x11a>
    7bb2:	f9 c1       	rjmp	.+1010   	; 0x7fa6 <f_open+0x50c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    7bb4:	88 23       	and	r24, r24
    7bb6:	09 f0       	breq	.+2      	; 0x7bba <f_open+0x120>
    7bb8:	f9 c1       	rjmp	.+1010   	; 0x7fac <f_open+0x512>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    7bba:	d8 01       	movw	r26, r16
    7bbc:	9e 96       	adiw	r26, 0x2e	; 46
    7bbe:	3c 91       	ld	r19, X
    7bc0:	9e 97       	sbiw	r26, 0x2e	; 46
    7bc2:	20 e0       	ldi	r18, 0x00	; 0
    7bc4:	9d 96       	adiw	r26, 0x2d	; 45
    7bc6:	8c 91       	ld	r24, X
    7bc8:	9d 97       	sbiw	r26, 0x2d	; 45
    7bca:	90 e0       	ldi	r25, 0x00	; 0
    7bcc:	82 2b       	or	r24, r18
    7bce:	93 2b       	or	r25, r19
    7bd0:	b2 e0       	ldi	r27, 0x02	; 2
    7bd2:	80 30       	cpi	r24, 0x00	; 0
    7bd4:	9b 07       	cpc	r25, r27
    7bd6:	09 f0       	breq	.+2      	; 0x7bda <f_open+0x140>
    7bd8:	e9 c1       	rjmp	.+978    	; 0x7fac <f_open+0x512>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    7bda:	f8 01       	movw	r30, r16
    7bdc:	31 ad       	ldd	r19, Z+57	; 0x39
    7bde:	20 e0       	ldi	r18, 0x00	; 0
    7be0:	80 ad       	ldd	r24, Z+56	; 0x38
    7be2:	90 e0       	ldi	r25, 0x00	; 0
    7be4:	82 2b       	or	r24, r18
    7be6:	93 2b       	or	r25, r19
    7be8:	9c 01       	movw	r18, r24
    7bea:	40 e0       	ldi	r20, 0x00	; 0
    7bec:	50 e0       	ldi	r21, 0x00	; 0
    7bee:	2b a3       	std	Y+35, r18	; 0x23
    7bf0:	3c a3       	std	Y+36, r19	; 0x24
    7bf2:	4d a3       	std	Y+37, r20	; 0x25
    7bf4:	5e a3       	std	Y+38, r21	; 0x26
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    7bf6:	21 15       	cp	r18, r1
    7bf8:	31 05       	cpc	r19, r1
    7bfa:	41 05       	cpc	r20, r1
    7bfc:	51 05       	cpc	r21, r1
    7bfe:	91 f5       	brne	.+100    	; 0x7c64 <f_open+0x1ca>
    7c00:	e7 5b       	subi	r30, 0xB7	; 183
    7c02:	ff 4f       	sbci	r31, 0xFF	; 255
    7c04:	80 81       	ld	r24, Z
    7c06:	90 e0       	ldi	r25, 0x00	; 0
    7c08:	a0 e0       	ldi	r26, 0x00	; 0
    7c0a:	b0 e0       	ldi	r27, 0x00	; 0
    7c0c:	58 2f       	mov	r21, r24
    7c0e:	44 27       	eor	r20, r20
    7c10:	33 27       	eor	r19, r19
    7c12:	22 27       	eor	r18, r18
    7c14:	f8 01       	movw	r30, r16
    7c16:	e8 5b       	subi	r30, 0xB8	; 184
    7c18:	ff 4f       	sbci	r31, 0xFF	; 255
    7c1a:	80 81       	ld	r24, Z
    7c1c:	90 e0       	ldi	r25, 0x00	; 0
    7c1e:	a0 e0       	ldi	r26, 0x00	; 0
    7c20:	b0 e0       	ldi	r27, 0x00	; 0
    7c22:	dc 01       	movw	r26, r24
    7c24:	99 27       	eor	r25, r25
    7c26:	88 27       	eor	r24, r24
    7c28:	28 2b       	or	r18, r24
    7c2a:	39 2b       	or	r19, r25
    7c2c:	4a 2b       	or	r20, r26
    7c2e:	5b 2b       	or	r21, r27
    7c30:	f8 01       	movw	r30, r16
    7c32:	ea 5b       	subi	r30, 0xBA	; 186
    7c34:	ff 4f       	sbci	r31, 0xFF	; 255
    7c36:	80 81       	ld	r24, Z
    7c38:	90 e0       	ldi	r25, 0x00	; 0
    7c3a:	a0 e0       	ldi	r26, 0x00	; 0
    7c3c:	b0 e0       	ldi	r27, 0x00	; 0
    7c3e:	28 2b       	or	r18, r24
    7c40:	39 2b       	or	r19, r25
    7c42:	4a 2b       	or	r20, r26
    7c44:	5b 2b       	or	r21, r27
    7c46:	f8 01       	movw	r30, r16
    7c48:	e9 5b       	subi	r30, 0xB9	; 185
    7c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    7c4c:	90 81       	ld	r25, Z
    7c4e:	80 e0       	ldi	r24, 0x00	; 0
    7c50:	a0 e0       	ldi	r26, 0x00	; 0
    7c52:	b0 e0       	ldi	r27, 0x00	; 0
    7c54:	28 2b       	or	r18, r24
    7c56:	39 2b       	or	r19, r25
    7c58:	4a 2b       	or	r20, r26
    7c5a:	5b 2b       	or	r21, r27
    7c5c:	2b a3       	std	Y+35, r18	; 0x23
    7c5e:	3c a3       	std	Y+36, r19	; 0x24
    7c60:	4d a3       	std	Y+37, r20	; 0x25
    7c62:	5e a3       	std	Y+38, r21	; 0x26
	fs->fsize = fasize;
    7c64:	8b a1       	ldd	r24, Y+35	; 0x23
    7c66:	9c a1       	ldd	r25, Y+36	; 0x24
    7c68:	ad a1       	ldd	r26, Y+37	; 0x25
    7c6a:	be a1       	ldd	r27, Y+38	; 0x26
    7c6c:	f8 01       	movw	r30, r16
    7c6e:	86 87       	std	Z+14, r24	; 0x0e
    7c70:	97 87       	std	Z+15, r25	; 0x0f
    7c72:	a0 8b       	std	Z+16, r26	; 0x10
    7c74:	b1 8b       	std	Z+17, r27	; 0x11

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    7c76:	42 a9       	ldd	r20, Z+50	; 0x32
    7c78:	43 83       	std	Z+3, r20	; 0x03
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    7c7a:	84 2f       	mov	r24, r20
    7c7c:	81 50       	subi	r24, 0x01	; 1
    7c7e:	82 30       	cpi	r24, 0x02	; 2
    7c80:	08 f0       	brcs	.+2      	; 0x7c84 <f_open+0x1ea>
    7c82:	94 c1       	rjmp	.+808    	; 0x7fac <f_open+0x512>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    7c84:	f7 a5       	ldd	r31, Z+47	; 0x2f
    7c86:	fb a7       	std	Y+43, r31	; 0x2b
    7c88:	d8 01       	movw	r26, r16
    7c8a:	12 96       	adiw	r26, 0x02	; 2
    7c8c:	fc 93       	st	X, r31
    7c8e:	12 97       	sbiw	r26, 0x02	; 2
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    7c90:	ff 23       	and	r31, r31
    7c92:	09 f4       	brne	.+2      	; 0x7c96 <f_open+0x1fc>
    7c94:	8b c1       	rjmp	.+790    	; 0x7fac <f_open+0x512>
    7c96:	2f 2f       	mov	r18, r31
    7c98:	30 e0       	ldi	r19, 0x00	; 0
    7c9a:	c9 01       	movw	r24, r18
    7c9c:	01 97       	sbiw	r24, 0x01	; 1
    7c9e:	82 23       	and	r24, r18
    7ca0:	93 23       	and	r25, r19
    7ca2:	00 97       	sbiw	r24, 0x00	; 0
    7ca4:	09 f0       	breq	.+2      	; 0x7ca8 <f_open+0x20e>
    7ca6:	82 c1       	rjmp	.+772    	; 0x7fac <f_open+0x512>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    7ca8:	d4 96       	adiw	r26, 0x34	; 52
    7caa:	9c 91       	ld	r25, X
    7cac:	d4 97       	sbiw	r26, 0x34	; 52
    7cae:	80 e0       	ldi	r24, 0x00	; 0
    7cb0:	d3 96       	adiw	r26, 0x33	; 51
    7cb2:	2c 90       	ld	r2, X
    7cb4:	d3 97       	sbiw	r26, 0x33	; 51
    7cb6:	33 24       	eor	r3, r3
    7cb8:	28 2a       	or	r2, r24
    7cba:	39 2a       	or	r3, r25
    7cbc:	18 96       	adiw	r26, 0x08	; 8
    7cbe:	2d 92       	st	X+, r2
    7cc0:	3c 92       	st	X, r3
    7cc2:	19 97       	sbiw	r26, 0x09	; 9
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    7cc4:	c1 01       	movw	r24, r2
    7cc6:	8f 70       	andi	r24, 0x0F	; 15
    7cc8:	90 70       	andi	r25, 0x00	; 0
    7cca:	00 97       	sbiw	r24, 0x00	; 0
    7ccc:	09 f0       	breq	.+2      	; 0x7cd0 <f_open+0x236>
    7cce:	6e c1       	rjmp	.+732    	; 0x7fac <f_open+0x512>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    7cd0:	d6 96       	adiw	r26, 0x36	; 54
    7cd2:	9c 91       	ld	r25, X
    7cd4:	d6 97       	sbiw	r26, 0x36	; 54
    7cd6:	80 e0       	ldi	r24, 0x00	; 0
    7cd8:	d5 96       	adiw	r26, 0x35	; 53
    7cda:	cc 90       	ld	r12, X
    7cdc:	d5 97       	sbiw	r26, 0x35	; 53
    7cde:	dd 24       	eor	r13, r13
    7ce0:	c8 2a       	or	r12, r24
    7ce2:	d9 2a       	or	r13, r25
    7ce4:	ee 24       	eor	r14, r14
    7ce6:	ff 24       	eor	r15, r15
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    7ce8:	c1 14       	cp	r12, r1
    7cea:	d1 04       	cpc	r13, r1
    7cec:	e1 04       	cpc	r14, r1
    7cee:	f1 04       	cpc	r15, r1
    7cf0:	79 f5       	brne	.+94     	; 0x7d50 <f_open+0x2b6>
    7cf2:	f8 01       	movw	r30, r16
    7cf4:	eb 5b       	subi	r30, 0xBB	; 187
    7cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    7cf8:	c0 80       	ld	r12, Z
    7cfa:	dd 24       	eor	r13, r13
    7cfc:	ee 24       	eor	r14, r14
    7cfe:	ff 24       	eor	r15, r15
    7d00:	fc 2c       	mov	r15, r12
    7d02:	ee 24       	eor	r14, r14
    7d04:	dd 24       	eor	r13, r13
    7d06:	cc 24       	eor	r12, r12
    7d08:	f8 01       	movw	r30, r16
    7d0a:	ec 5b       	subi	r30, 0xBC	; 188
    7d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    7d0e:	80 81       	ld	r24, Z
    7d10:	90 e0       	ldi	r25, 0x00	; 0
    7d12:	a0 e0       	ldi	r26, 0x00	; 0
    7d14:	b0 e0       	ldi	r27, 0x00	; 0
    7d16:	dc 01       	movw	r26, r24
    7d18:	99 27       	eor	r25, r25
    7d1a:	88 27       	eor	r24, r24
    7d1c:	c8 2a       	or	r12, r24
    7d1e:	d9 2a       	or	r13, r25
    7d20:	ea 2a       	or	r14, r26
    7d22:	fb 2a       	or	r15, r27
    7d24:	f8 01       	movw	r30, r16
    7d26:	ee 5b       	subi	r30, 0xBE	; 190
    7d28:	ff 4f       	sbci	r31, 0xFF	; 255
    7d2a:	80 81       	ld	r24, Z
    7d2c:	90 e0       	ldi	r25, 0x00	; 0
    7d2e:	a0 e0       	ldi	r26, 0x00	; 0
    7d30:	b0 e0       	ldi	r27, 0x00	; 0
    7d32:	c8 2a       	or	r12, r24
    7d34:	d9 2a       	or	r13, r25
    7d36:	ea 2a       	or	r14, r26
    7d38:	fb 2a       	or	r15, r27
    7d3a:	f8 01       	movw	r30, r16
    7d3c:	ed 5b       	subi	r30, 0xBD	; 189
    7d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    7d40:	90 81       	ld	r25, Z
    7d42:	80 e0       	ldi	r24, 0x00	; 0
    7d44:	a0 e0       	ldi	r26, 0x00	; 0
    7d46:	b0 e0       	ldi	r27, 0x00	; 0
    7d48:	c8 2a       	or	r12, r24
    7d4a:	d9 2a       	or	r13, r25
    7d4c:	ea 2a       	or	r14, r26
    7d4e:	fb 2a       	or	r15, r27

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    7d50:	d8 01       	movw	r26, r16
    7d52:	d1 96       	adiw	r26, 0x31	; 49
    7d54:	9c 91       	ld	r25, X
    7d56:	d1 97       	sbiw	r26, 0x31	; 49
    7d58:	80 e0       	ldi	r24, 0x00	; 0
    7d5a:	d0 96       	adiw	r26, 0x30	; 48
    7d5c:	8c 90       	ld	r8, X
    7d5e:	d0 97       	sbiw	r26, 0x30	; 48
    7d60:	99 24       	eor	r9, r9
    7d62:	88 2a       	or	r8, r24
    7d64:	99 2a       	or	r9, r25
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    7d66:	81 14       	cp	r8, r1
    7d68:	91 04       	cpc	r9, r1
    7d6a:	09 f4       	brne	.+2      	; 0x7d6e <f_open+0x2d4>
    7d6c:	1f c1       	rjmp	.+574    	; 0x7fac <f_open+0x512>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    7d6e:	24 2f       	mov	r18, r20
    7d70:	30 e0       	ldi	r19, 0x00	; 0
    7d72:	40 e0       	ldi	r20, 0x00	; 0
    7d74:	50 e0       	ldi	r21, 0x00	; 0
    7d76:	6b a1       	ldd	r22, Y+35	; 0x23
    7d78:	7c a1       	ldd	r23, Y+36	; 0x24
    7d7a:	8d a1       	ldd	r24, Y+37	; 0x25
    7d7c:	9e a1       	ldd	r25, Y+38	; 0x26
    7d7e:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    7d82:	6c a7       	std	Y+44, r22	; 0x2c
    7d84:	7d a7       	std	Y+45, r23	; 0x2d
    7d86:	8e a7       	std	Y+46, r24	; 0x2e
    7d88:	9f a7       	std	Y+47, r25	; 0x2f

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    7d8a:	94 01       	movw	r18, r8
    7d8c:	40 e0       	ldi	r20, 0x00	; 0
    7d8e:	50 e0       	ldi	r21, 0x00	; 0
    7d90:	28 ab       	std	Y+48, r18	; 0x30
    7d92:	39 ab       	std	Y+49, r19	; 0x31
    7d94:	4a ab       	std	Y+50, r20	; 0x32
    7d96:	5b ab       	std	Y+51, r21	; 0x33
    7d98:	41 01       	movw	r8, r2
    7d9a:	a4 e0       	ldi	r26, 0x04	; 4
    7d9c:	96 94       	lsr	r9
    7d9e:	87 94       	ror	r8
    7da0:	aa 95       	dec	r26
    7da2:	e1 f7       	brne	.-8      	; 0x7d9c <f_open+0x302>
    7da4:	aa 24       	eor	r10, r10
    7da6:	bb 24       	eor	r11, r11
    7da8:	82 0e       	add	r8, r18
    7daa:	93 1e       	adc	r9, r19
    7dac:	a4 1e       	adc	r10, r20
    7dae:	b5 1e       	adc	r11, r21
    7db0:	86 0e       	add	r8, r22
    7db2:	97 1e       	adc	r9, r23
    7db4:	a8 1e       	adc	r10, r24
    7db6:	b9 1e       	adc	r11, r25
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    7db8:	c8 14       	cp	r12, r8
    7dba:	d9 04       	cpc	r13, r9
    7dbc:	ea 04       	cpc	r14, r10
    7dbe:	fb 04       	cpc	r15, r11
    7dc0:	08 f4       	brcc	.+2      	; 0x7dc4 <f_open+0x32a>
    7dc2:	f4 c0       	rjmp	.+488    	; 0x7fac <f_open+0x512>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    7dc4:	c7 01       	movw	r24, r14
    7dc6:	b6 01       	movw	r22, r12
    7dc8:	68 19       	sub	r22, r8
    7dca:	79 09       	sbc	r23, r9
    7dcc:	8a 09       	sbc	r24, r10
    7dce:	9b 09       	sbc	r25, r11
    7dd0:	ab a5       	ldd	r26, Y+43	; 0x2b
    7dd2:	2a 2f       	mov	r18, r26
    7dd4:	30 e0       	ldi	r19, 0x00	; 0
    7dd6:	40 e0       	ldi	r20, 0x00	; 0
    7dd8:	50 e0       	ldi	r21, 0x00	; 0
    7dda:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    7dde:	21 15       	cp	r18, r1
    7de0:	31 05       	cpc	r19, r1
    7de2:	41 05       	cpc	r20, r1
    7de4:	51 05       	cpc	r21, r1
    7de6:	09 f4       	brne	.+2      	; 0x7dea <f_open+0x350>
    7de8:	e1 c0       	rjmp	.+450    	; 0x7fac <f_open+0x512>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    7dea:	26 3f       	cpi	r18, 0xF6	; 246
    7dec:	bf e0       	ldi	r27, 0x0F	; 15
    7dee:	3b 07       	cpc	r19, r27
    7df0:	b0 e0       	ldi	r27, 0x00	; 0
    7df2:	4b 07       	cpc	r20, r27
    7df4:	b0 e0       	ldi	r27, 0x00	; 0
    7df6:	5b 07       	cpc	r21, r27
    7df8:	50 f0       	brcs	.+20     	; 0x7e0e <f_open+0x374>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    7dfa:	26 3f       	cpi	r18, 0xF6	; 246
    7dfc:	ef ef       	ldi	r30, 0xFF	; 255
    7dfe:	3e 07       	cpc	r19, r30
    7e00:	e0 e0       	ldi	r30, 0x00	; 0
    7e02:	4e 07       	cpc	r20, r30
    7e04:	e0 e0       	ldi	r30, 0x00	; 0
    7e06:	5e 07       	cpc	r21, r30
    7e08:	20 f4       	brcc	.+8      	; 0x7e12 <f_open+0x378>
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    7e0a:	62 e0       	ldi	r22, 0x02	; 2
    7e0c:	03 c0       	rjmp	.+6      	; 0x7e14 <f_open+0x37a>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
    7e0e:	61 e0       	ldi	r22, 0x01	; 1
    7e10:	01 c0       	rjmp	.+2      	; 0x7e14 <f_open+0x37a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    7e12:	63 e0       	ldi	r22, 0x03	; 3

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    7e14:	f2 e0       	ldi	r31, 0x02	; 2
    7e16:	cf 2e       	mov	r12, r31
    7e18:	d1 2c       	mov	r13, r1
    7e1a:	e1 2c       	mov	r14, r1
    7e1c:	f1 2c       	mov	r15, r1
    7e1e:	c2 0e       	add	r12, r18
    7e20:	d3 1e       	adc	r13, r19
    7e22:	e4 1e       	adc	r14, r20
    7e24:	f5 1e       	adc	r15, r21
    7e26:	d8 01       	movw	r26, r16
    7e28:	1a 96       	adiw	r26, 0x0a	; 10
    7e2a:	cd 92       	st	X+, r12
    7e2c:	dd 92       	st	X+, r13
    7e2e:	ed 92       	st	X+, r14
    7e30:	fc 92       	st	X, r15
    7e32:	1d 97       	sbiw	r26, 0x0d	; 13
	fs->database = bsect + sysect;						/* Data start sector */
    7e34:	84 0c       	add	r8, r4
    7e36:	95 1c       	adc	r9, r5
    7e38:	a6 1c       	adc	r10, r6
    7e3a:	b7 1c       	adc	r11, r7
    7e3c:	f8 01       	movw	r30, r16
    7e3e:	82 8e       	std	Z+26, r8	; 0x1a
    7e40:	93 8e       	std	Z+27, r9	; 0x1b
    7e42:	a4 8e       	std	Z+28, r10	; 0x1c
    7e44:	b5 8e       	std	Z+29, r11	; 0x1d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    7e46:	28 a9       	ldd	r18, Y+48	; 0x30
    7e48:	39 a9       	ldd	r19, Y+49	; 0x31
    7e4a:	4a a9       	ldd	r20, Y+50	; 0x32
    7e4c:	5b a9       	ldd	r21, Y+51	; 0x33
    7e4e:	42 0e       	add	r4, r18
    7e50:	53 1e       	adc	r5, r19
    7e52:	64 1e       	adc	r6, r20
    7e54:	75 1e       	adc	r7, r21
    7e56:	52 96       	adiw	r26, 0x12	; 18
    7e58:	4d 92       	st	X+, r4
    7e5a:	5d 92       	st	X+, r5
    7e5c:	6d 92       	st	X+, r6
    7e5e:	7c 92       	st	X, r7
    7e60:	55 97       	sbiw	r26, 0x15	; 21
	if (fmt == FS_FAT32) {
    7e62:	63 30       	cpi	r22, 0x03	; 3
    7e64:	09 f0       	breq	.+2      	; 0x7e68 <f_open+0x3ce>
    7e66:	41 c0       	rjmp	.+130    	; 0x7eea <f_open+0x450>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    7e68:	21 14       	cp	r2, r1
    7e6a:	31 04       	cpc	r3, r1
    7e6c:	09 f0       	breq	.+2      	; 0x7e70 <f_open+0x3d6>
    7e6e:	9e c0       	rjmp	.+316    	; 0x7fac <f_open+0x512>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    7e70:	ef 5a       	subi	r30, 0xAF	; 175
    7e72:	ff 4f       	sbci	r31, 0xFF	; 255
    7e74:	80 81       	ld	r24, Z
    7e76:	90 e0       	ldi	r25, 0x00	; 0
    7e78:	a0 e0       	ldi	r26, 0x00	; 0
    7e7a:	b0 e0       	ldi	r27, 0x00	; 0
    7e7c:	b8 2f       	mov	r27, r24
    7e7e:	aa 27       	eor	r26, r26
    7e80:	99 27       	eor	r25, r25
    7e82:	88 27       	eor	r24, r24
    7e84:	f8 01       	movw	r30, r16
    7e86:	e0 5b       	subi	r30, 0xB0	; 176
    7e88:	ff 4f       	sbci	r31, 0xFF	; 255
    7e8a:	20 81       	ld	r18, Z
    7e8c:	30 e0       	ldi	r19, 0x00	; 0
    7e8e:	40 e0       	ldi	r20, 0x00	; 0
    7e90:	50 e0       	ldi	r21, 0x00	; 0
    7e92:	a9 01       	movw	r20, r18
    7e94:	33 27       	eor	r19, r19
    7e96:	22 27       	eor	r18, r18
    7e98:	82 2b       	or	r24, r18
    7e9a:	93 2b       	or	r25, r19
    7e9c:	a4 2b       	or	r26, r20
    7e9e:	b5 2b       	or	r27, r21
    7ea0:	f8 01       	movw	r30, r16
    7ea2:	e2 5b       	subi	r30, 0xB2	; 178
    7ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    7ea6:	20 81       	ld	r18, Z
    7ea8:	30 e0       	ldi	r19, 0x00	; 0
    7eaa:	40 e0       	ldi	r20, 0x00	; 0
    7eac:	50 e0       	ldi	r21, 0x00	; 0
    7eae:	82 2b       	or	r24, r18
    7eb0:	93 2b       	or	r25, r19
    7eb2:	a4 2b       	or	r26, r20
    7eb4:	b5 2b       	or	r27, r21
    7eb6:	f8 01       	movw	r30, r16
    7eb8:	e1 5b       	subi	r30, 0xB1	; 177
    7eba:	ff 4f       	sbci	r31, 0xFF	; 255
    7ebc:	30 81       	ld	r19, Z
    7ebe:	20 e0       	ldi	r18, 0x00	; 0
    7ec0:	40 e0       	ldi	r20, 0x00	; 0
    7ec2:	50 e0       	ldi	r21, 0x00	; 0
    7ec4:	82 2b       	or	r24, r18
    7ec6:	93 2b       	or	r25, r19
    7ec8:	a4 2b       	or	r26, r20
    7eca:	b5 2b       	or	r27, r21
    7ecc:	f8 01       	movw	r30, r16
    7ece:	86 8b       	std	Z+22, r24	; 0x16
    7ed0:	97 8b       	std	Z+23, r25	; 0x17
    7ed2:	a0 8f       	std	Z+24, r26	; 0x18
    7ed4:	b1 8f       	std	Z+25, r27	; 0x19
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    7ed6:	d7 01       	movw	r26, r14
    7ed8:	c6 01       	movw	r24, r12
    7eda:	52 e0       	ldi	r21, 0x02	; 2
    7edc:	88 0f       	add	r24, r24
    7ede:	99 1f       	adc	r25, r25
    7ee0:	aa 1f       	adc	r26, r26
    7ee2:	bb 1f       	adc	r27, r27
    7ee4:	5a 95       	dec	r21
    7ee6:	d1 f7       	brne	.-12     	; 0x7edc <f_open+0x442>
    7ee8:	2b c0       	rjmp	.+86     	; 0x7f40 <f_open+0x4a6>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    7eea:	21 14       	cp	r2, r1
    7eec:	31 04       	cpc	r3, r1
    7eee:	09 f4       	brne	.+2      	; 0x7ef2 <f_open+0x458>
    7ef0:	5d c0       	rjmp	.+186    	; 0x7fac <f_open+0x512>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    7ef2:	8c a5       	ldd	r24, Y+44	; 0x2c
    7ef4:	9d a5       	ldd	r25, Y+45	; 0x2d
    7ef6:	ae a5       	ldd	r26, Y+46	; 0x2e
    7ef8:	bf a5       	ldd	r27, Y+47	; 0x2f
    7efa:	84 0d       	add	r24, r4
    7efc:	95 1d       	adc	r25, r5
    7efe:	a6 1d       	adc	r26, r6
    7f00:	b7 1d       	adc	r27, r7
    7f02:	f8 01       	movw	r30, r16
    7f04:	86 8b       	std	Z+22, r24	; 0x16
    7f06:	97 8b       	std	Z+23, r25	; 0x17
    7f08:	a0 8f       	std	Z+24, r26	; 0x18
    7f0a:	b1 8f       	std	Z+25, r27	; 0x19
    7f0c:	d7 01       	movw	r26, r14
    7f0e:	c6 01       	movw	r24, r12
    7f10:	88 0f       	add	r24, r24
    7f12:	99 1f       	adc	r25, r25
    7f14:	aa 1f       	adc	r26, r26
    7f16:	bb 1f       	adc	r27, r27
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    7f18:	62 30       	cpi	r22, 0x02	; 2
    7f1a:	91 f0       	breq	.+36     	; 0x7f40 <f_open+0x4a6>
    7f1c:	8c 0d       	add	r24, r12
    7f1e:	9d 1d       	adc	r25, r13
    7f20:	ae 1d       	adc	r26, r14
    7f22:	bf 1d       	adc	r27, r15
    7f24:	b6 95       	lsr	r27
    7f26:	a7 95       	ror	r26
    7f28:	97 95       	ror	r25
    7f2a:	87 95       	ror	r24
    7f2c:	a7 01       	movw	r20, r14
    7f2e:	96 01       	movw	r18, r12
    7f30:	21 70       	andi	r18, 0x01	; 1
    7f32:	30 70       	andi	r19, 0x00	; 0
    7f34:	40 70       	andi	r20, 0x00	; 0
    7f36:	50 70       	andi	r21, 0x00	; 0
    7f38:	82 0f       	add	r24, r18
    7f3a:	93 1f       	adc	r25, r19
    7f3c:	a4 1f       	adc	r26, r20
    7f3e:	b5 1f       	adc	r27, r21
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    7f40:	81 50       	subi	r24, 0x01	; 1
    7f42:	9e 4f       	sbci	r25, 0xFE	; 254
    7f44:	af 4f       	sbci	r26, 0xFF	; 255
    7f46:	bf 4f       	sbci	r27, 0xFF	; 255
    7f48:	29 e0       	ldi	r18, 0x09	; 9
    7f4a:	b6 95       	lsr	r27
    7f4c:	a7 95       	ror	r26
    7f4e:	97 95       	ror	r25
    7f50:	87 95       	ror	r24
    7f52:	2a 95       	dec	r18
    7f54:	d1 f7       	brne	.-12     	; 0x7f4a <f_open+0x4b0>
    7f56:	2b a1       	ldd	r18, Y+35	; 0x23
    7f58:	3c a1       	ldd	r19, Y+36	; 0x24
    7f5a:	4d a1       	ldd	r20, Y+37	; 0x25
    7f5c:	5e a1       	ldd	r21, Y+38	; 0x26
    7f5e:	28 17       	cp	r18, r24
    7f60:	39 07       	cpc	r19, r25
    7f62:	4a 07       	cpc	r20, r26
    7f64:	5b 07       	cpc	r21, r27
    7f66:	10 f1       	brcs	.+68     	; 0x7fac <f_open+0x512>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    7f68:	d8 01       	movw	r26, r16
    7f6a:	6c 93       	st	X, r22
	fs->id = ++Fsid;		/* File system mount ID */
    7f6c:	80 91 70 24 	lds	r24, 0x2470
    7f70:	90 91 71 24 	lds	r25, 0x2471
    7f74:	01 96       	adiw	r24, 0x01	; 1
    7f76:	80 93 70 24 	sts	0x2470, r24
    7f7a:	90 93 71 24 	sts	0x2471, r25
    7f7e:	16 96       	adiw	r26, 0x06	; 6
    7f80:	8d 93       	st	X+, r24
    7f82:	9c 93       	st	X, r25
    7f84:	17 97       	sbiw	r26, 0x07	; 7
	fs->winsect = 0;		/* Invalidate sector cache */
    7f86:	f8 01       	movw	r30, r16
    7f88:	16 8e       	std	Z+30, r1	; 0x1e
    7f8a:	17 8e       	std	Z+31, r1	; 0x1f
    7f8c:	10 a2       	std	Z+32, r1	; 0x20
    7f8e:	11 a2       	std	Z+33, r1	; 0x21
	fs->wflag = 0;
    7f90:	14 82       	std	Z+4, r1	; 0x04
    7f92:	c5 c1       	rjmp	.+906    	; 0x831e <f_open+0x884>
	}

	/* Check if the file system object is valid or not */
	*rfs = 0;
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
    7f94:	0b e0       	ldi	r16, 0x0B	; 11
    7f96:	10 e0       	ldi	r17, 0x00	; 0
    7f98:	bd c1       	rjmp	.+890    	; 0x8314 <f_open+0x87a>
	fs = FatFs[vol];					/* Get corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    7f9a:	0c e0       	ldi	r16, 0x0C	; 12
    7f9c:	10 e0       	ldi	r17, 0x00	; 0
    7f9e:	ba c1       	rjmp	.+884    	; 0x8314 <f_open+0x87a>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    7fa0:	03 e0       	ldi	r16, 0x03	; 3
    7fa2:	10 e0       	ldi	r17, 0x00	; 0
    7fa4:	b7 c1       	rjmp	.+878    	; 0x8314 <f_open+0x87a>
		if (tbl[4]) {						/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);		/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    7fa6:	01 e0       	ldi	r16, 0x01	; 1
    7fa8:	10 e0       	ldi	r17, 0x00	; 0
    7faa:	b4 c1       	rjmp	.+872    	; 0x8314 <f_open+0x87a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
		return FR_NO_FILESYSTEM;
    7fac:	0d e0       	ldi	r16, 0x0D	; 13
    7fae:	10 e0       	ldi	r17, 0x00	; 0
    7fb0:	b1 c1       	rjmp	.+866    	; 0x8314 <f_open+0x87a>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    7fb2:	8c 35       	cpi	r24, 0x5C	; 92
    7fb4:	31 f4       	brne	.+12     	; 0x7fc2 <f_open+0x528>
		path++;
    7fb6:	29 a5       	ldd	r18, Y+41	; 0x29
    7fb8:	3a a5       	ldd	r19, Y+42	; 0x2a
    7fba:	2f 5f       	subi	r18, 0xFF	; 255
    7fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    7fbe:	29 a7       	std	Y+41, r18	; 0x29
    7fc0:	3a a7       	std	Y+42, r19	; 0x2a
	dj->sclust = 0;						/* Start from the root dir */
    7fc2:	1b 8a       	std	Y+19, r1	; 0x13
    7fc4:	1c 8a       	std	Y+20, r1	; 0x14
    7fc6:	1d 8a       	std	Y+21, r1	; 0x15
    7fc8:	1e 8a       	std	Y+22, r1	; 0x16
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    7fca:	a9 a5       	ldd	r26, Y+41	; 0x29
    7fcc:	ba a5       	ldd	r27, Y+42	; 0x2a
    7fce:	8c 91       	ld	r24, X
    7fd0:	80 32       	cpi	r24, 0x20	; 32
    7fd2:	40 f4       	brcc	.+16     	; 0x7fe4 <f_open+0x54a>
		res = dir_sdi(dj, 0);
    7fd4:	ce 01       	movw	r24, r28
    7fd6:	0d 96       	adiw	r24, 0x0d	; 13
    7fd8:	0e 94 b2 3c 	call	0x7964	; 0x7964 <dir_sdi.clone.4>
    7fdc:	8c 01       	movw	r16, r24
		dj->dir = 0;
    7fde:	1f 8e       	std	Y+31, r1	; 0x1f
    7fe0:	18 a2       	std	Y+32, r1	; 0x20
    7fe2:	82 c1       	rjmp	.+772    	; 0x82e8 <f_open+0x84e>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    7fe4:	90 e2       	ldi	r25, 0x20	; 32
    7fe6:	79 2e       	mov	r7, r25
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    7fe8:	85 e0       	ldi	r24, 0x05	; 5
    7fea:	68 2e       	mov	r6, r24
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
    7fec:	0d e0       	ldi	r16, 0x0D	; 13
    7fee:	20 2e       	mov	r2, r16
    7ff0:	31 2c       	mov	r3, r1
    7ff2:	2c 0e       	add	r2, r28
    7ff4:	3d 1e       	adc	r3, r29
    7ff6:	c9 a4       	ldd	r12, Y+41	; 0x29
    7ff8:	da a4       	ldd	r13, Y+42	; 0x2a
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
		res = dir_sdi(dj, 0);
		dj->dir = 0;
    7ffa:	46 01       	movw	r8, r12
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    7ffc:	f6 01       	movw	r30, r12
    7ffe:	80 81       	ld	r24, Z
    8000:	08 94       	sec
    8002:	c1 1c       	adc	r12, r1
    8004:	d1 1c       	adc	r13, r1
    8006:	8f 32       	cpi	r24, 0x2F	; 47
    8008:	c1 f3       	breq	.-16     	; 0x7ffa <f_open+0x560>
    800a:	8c 35       	cpi	r24, 0x5C	; 92
    800c:	b1 f3       	breq	.-20     	; 0x7ffa <f_open+0x560>
	sfn = dj->fn;
    800e:	e9 a1       	ldd	r30, Y+33	; 0x21
    8010:	fa a1       	ldd	r31, Y+34	; 0x22
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    8012:	df 01       	movw	r26, r30
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	sfn = dj->fn;
    8014:	8c e0       	ldi	r24, 0x0C	; 12
    8016:	90 e0       	ldi	r25, 0x00	; 0
    8018:	01 c0       	rjmp	.+2      	; 0x801c <f_open+0x582>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    801a:	7d 92       	st	X+, r7
    801c:	01 97       	sbiw	r24, 0x01	; 1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    801e:	e9 f7       	brne	.-6      	; 0x801a <f_open+0x580>
    8020:	80 e0       	ldi	r24, 0x00	; 0
    8022:	90 e0       	ldi	r25, 0x00	; 0
    8024:	cc 24       	eor	r12, r12
    8026:	dd 24       	eor	r13, r13
    8028:	28 e0       	ldi	r18, 0x08	; 8
    802a:	30 e0       	ldi	r19, 0x00	; 0
    802c:	60 e0       	ldi	r22, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    802e:	d4 01       	movw	r26, r8
    8030:	ac 0d       	add	r26, r12
    8032:	bd 1d       	adc	r27, r13
    8034:	7c 91       	ld	r23, X
    8036:	08 94       	sec
    8038:	c1 1c       	adc	r12, r1
    803a:	d1 1c       	adc	r13, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    803c:	71 32       	cpi	r23, 0x21	; 33
    803e:	08 f4       	brcc	.+2      	; 0x8042 <f_open+0x5a8>
    8040:	62 c0       	rjmp	.+196    	; 0x8106 <f_open+0x66c>
    8042:	7f 32       	cpi	r23, 0x2F	; 47
    8044:	09 f4       	brne	.+2      	; 0x8048 <f_open+0x5ae>
    8046:	61 c0       	rjmp	.+194    	; 0x810a <f_open+0x670>
    8048:	7c 35       	cpi	r23, 0x5C	; 92
    804a:	09 f4       	brne	.+2      	; 0x804e <f_open+0x5b4>
    804c:	5e c0       	rjmp	.+188    	; 0x810a <f_open+0x670>
		if (c == '.' || i >= ni) {
    804e:	7e 32       	cpi	r23, 0x2E	; 46
    8050:	19 f0       	breq	.+6      	; 0x8058 <f_open+0x5be>
    8052:	82 17       	cp	r24, r18
    8054:	93 07       	cpc	r25, r19
    8056:	70 f0       	brcs	.+28     	; 0x8074 <f_open+0x5da>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    8058:	28 30       	cpi	r18, 0x08	; 8
    805a:	31 05       	cpc	r19, r1
    805c:	09 f0       	breq	.+2      	; 0x8060 <f_open+0x5c6>
    805e:	3f c1       	rjmp	.+638    	; 0x82de <f_open+0x844>
    8060:	7e 32       	cpi	r23, 0x2E	; 46
    8062:	09 f0       	breq	.+2      	; 0x8066 <f_open+0x5cc>
    8064:	3c c1       	rjmp	.+632    	; 0x82de <f_open+0x844>
			i = 8; ni = 11;
			b <<= 2; continue;
    8066:	66 0f       	add	r22, r22
    8068:	66 0f       	add	r22, r22
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    806a:	88 e0       	ldi	r24, 0x08	; 8
    806c:	90 e0       	ldi	r25, 0x00	; 0
    806e:	2b e0       	ldi	r18, 0x0B	; 11
    8070:	30 e0       	ldi	r19, 0x00	; 0
    8072:	dd cf       	rjmp	.-70     	; 0x802e <f_open+0x594>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char? */
    8074:	77 fd       	sbrc	r23, 7
			b |= 3;						/* Eliminate NT flag */
    8076:	63 60       	ori	r22, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    8078:	47 2f       	mov	r20, r23
    807a:	41 58       	subi	r20, 0x81	; 129
    807c:	4f 31       	cpi	r20, 0x1F	; 31
    807e:	18 f0       	brcs	.+6      	; 0x8086 <f_open+0x5ec>
    8080:	4f 55       	subi	r20, 0x5F	; 95
    8082:	4d 31       	cpi	r20, 0x1D	; 29
    8084:	00 f5       	brcc	.+64     	; 0x80c6 <f_open+0x62c>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    8086:	d4 01       	movw	r26, r8
    8088:	ac 0d       	add	r26, r12
    808a:	bd 1d       	adc	r27, r13
    808c:	1c 91       	ld	r17, X
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    808e:	41 2f       	mov	r20, r17
    8090:	40 54       	subi	r20, 0x40	; 64
    8092:	4f 33       	cpi	r20, 0x3F	; 63
    8094:	20 f0       	brcs	.+8      	; 0x809e <f_open+0x604>
    8096:	40 54       	subi	r20, 0x40	; 64
    8098:	4d 37       	cpi	r20, 0x7D	; 125
    809a:	08 f0       	brcs	.+2      	; 0x809e <f_open+0x604>
    809c:	20 c1       	rjmp	.+576    	; 0x82de <f_open+0x844>
    809e:	a9 01       	movw	r20, r18
    80a0:	41 50       	subi	r20, 0x01	; 1
    80a2:	50 40       	sbci	r21, 0x00	; 0
    80a4:	84 17       	cp	r24, r20
    80a6:	95 07       	cpc	r25, r21
    80a8:	08 f0       	brcs	.+2      	; 0x80ac <f_open+0x612>
    80aa:	19 c1       	rjmp	.+562    	; 0x82de <f_open+0x844>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    80ac:	08 94       	sec
    80ae:	c1 1c       	adc	r12, r1
    80b0:	d1 1c       	adc	r13, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    80b2:	df 01       	movw	r26, r30
    80b4:	a8 0f       	add	r26, r24
    80b6:	b9 1f       	adc	r27, r25
    80b8:	7c 93       	st	X, r23
    80ba:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    80bc:	df 01       	movw	r26, r30
    80be:	a8 0f       	add	r26, r24
    80c0:	b9 1f       	adc	r27, r25
    80c2:	1c 93       	st	X, r17
    80c4:	1e c0       	rjmp	.+60     	; 0x8102 <f_open+0x668>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    80c6:	07 2f       	mov	r16, r23
    80c8:	10 e0       	ldi	r17, 0x00	; 0
    80ca:	aa e9       	ldi	r26, 0x9A	; 154
    80cc:	b3 e2       	ldi	r27, 0x23	; 35
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    80ce:	4d 91       	ld	r20, X+
    80d0:	44 23       	and	r20, r20
    80d2:	39 f0       	breq	.+14     	; 0x80e2 <f_open+0x648>
    80d4:	55 27       	eor	r21, r21
    80d6:	47 fd       	sbrc	r20, 7
    80d8:	50 95       	com	r21
    80da:	40 17       	cp	r20, r16
    80dc:	51 07       	cpc	r21, r17
    80de:	b9 f7       	brne	.-18     	; 0x80ce <f_open+0x634>
    80e0:	fe c0       	rjmp	.+508    	; 0x82de <f_open+0x844>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    80e2:	47 2f       	mov	r20, r23
    80e4:	41 54       	subi	r20, 0x41	; 65
    80e6:	4a 31       	cpi	r20, 0x1A	; 26
    80e8:	10 f4       	brcc	.+4      	; 0x80ee <f_open+0x654>
				b |= 2;
    80ea:	62 60       	ori	r22, 0x02	; 2
    80ec:	06 c0       	rjmp	.+12     	; 0x80fa <f_open+0x660>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    80ee:	47 2f       	mov	r20, r23
    80f0:	41 56       	subi	r20, 0x61	; 97
    80f2:	4a 31       	cpi	r20, 0x1A	; 26
    80f4:	10 f4       	brcc	.+4      	; 0x80fa <f_open+0x660>
					b |= 1; c -= 0x20;
    80f6:	61 60       	ori	r22, 0x01	; 1
    80f8:	70 52       	subi	r23, 0x20	; 32
				}
			}
			sfn[i++] = c;
    80fa:	df 01       	movw	r26, r30
    80fc:	a8 0f       	add	r26, r24
    80fe:	b9 1f       	adc	r27, r25
    8100:	7c 93       	st	X, r23
    8102:	01 96       	adiw	r24, 0x01	; 1
    8104:	94 cf       	rjmp	.-216    	; 0x802e <f_open+0x594>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    8106:	44 e0       	ldi	r20, 0x04	; 4
    8108:	01 c0       	rjmp	.+2      	; 0x810c <f_open+0x672>
    810a:	40 e0       	ldi	r20, 0x00	; 0

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    810c:	00 97       	sbiw	r24, 0x00	; 0
    810e:	09 f4       	brne	.+2      	; 0x8112 <f_open+0x678>
    8110:	e6 c0       	rjmp	.+460    	; 0x82de <f_open+0x844>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    8112:	80 81       	ld	r24, Z
    8114:	85 3e       	cpi	r24, 0xE5	; 229
    8116:	09 f4       	brne	.+2      	; 0x811a <f_open+0x680>
    8118:	60 82       	st	Z, r6

	if (ni == 8) b <<= 2;
    811a:	28 30       	cpi	r18, 0x08	; 8
    811c:	31 05       	cpc	r19, r1
    811e:	11 f4       	brne	.+4      	; 0x8124 <f_open+0x68a>
    8120:	66 0f       	add	r22, r22
    8122:	66 0f       	add	r22, r22
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    8124:	70 e0       	ldi	r23, 0x00	; 0
    8126:	cb 01       	movw	r24, r22
    8128:	83 70       	andi	r24, 0x03	; 3
    812a:	90 70       	andi	r25, 0x00	; 0
    812c:	81 30       	cpi	r24, 0x01	; 1
    812e:	91 05       	cpc	r25, r1
    8130:	09 f4       	brne	.+2      	; 0x8134 <f_open+0x69a>
    8132:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    8134:	6c 70       	andi	r22, 0x0C	; 12
    8136:	70 70       	andi	r23, 0x00	; 0
    8138:	64 30       	cpi	r22, 0x04	; 4
    813a:	71 05       	cpc	r23, r1
    813c:	09 f4       	brne	.+2      	; 0x8140 <f_open+0x6a6>
    813e:	48 60       	ori	r20, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    8140:	43 87       	std	Z+11, r20	; 0x0b
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    8142:	c1 01       	movw	r24, r2
    8144:	0e 94 b2 3c 	call	0x7964	; 0x7964 <dir_sdi.clone.4>
    8148:	8c 01       	movw	r16, r24
	if (res != FR_OK) return res;
    814a:	00 97       	sbiw	r24, 0x00	; 0
    814c:	09 f0       	breq	.+2      	; 0x8150 <f_open+0x6b6>
    814e:	a7 c0       	rjmp	.+334    	; 0x829e <f_open+0x804>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    8150:	4b 8d       	ldd	r20, Y+27	; 0x1b
    8152:	5c 8d       	ldd	r21, Y+28	; 0x1c
    8154:	6d 8d       	ldd	r22, Y+29	; 0x1d
    8156:	7e 8d       	ldd	r23, Y+30	; 0x1e
    8158:	8d 85       	ldd	r24, Y+13	; 0x0d
    815a:	9e 85       	ldd	r25, Y+14	; 0x0e
    815c:	0e 94 ad 3a 	call	0x755a	; 0x755a <move_window>
    8160:	8c 01       	movw	r16, r24
		if (res != FR_OK) break;
    8162:	00 97       	sbiw	r24, 0x00	; 0
    8164:	09 f0       	breq	.+2      	; 0x8168 <f_open+0x6ce>
    8166:	9b c0       	rjmp	.+310    	; 0x829e <f_open+0x804>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    8168:	ef 8d       	ldd	r30, Y+31	; 0x1f
    816a:	f8 a1       	ldd	r31, Y+32	; 0x20
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    816c:	80 81       	ld	r24, Z
    816e:	88 23       	and	r24, r24
    8170:	09 f4       	brne	.+2      	; 0x8174 <f_open+0x6da>
    8172:	93 c0       	rjmp	.+294    	; 0x829a <f_open+0x800>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    8174:	83 85       	ldd	r24, Z+11	; 0x0b
    8176:	83 fd       	sbrc	r24, 3
    8178:	0c c0       	rjmp	.+24     	; 0x8192 <f_open+0x6f8>
    817a:	a9 a1       	ldd	r26, Y+33	; 0x21
    817c:	ba a1       	ldd	r27, Y+34	; 0x22

/*-----------------------------------------------------------------------*/
/* Open or Create a File                                                 */
/*-----------------------------------------------------------------------*/

FRESULT f_open (
    817e:	cf 01       	movw	r24, r30
    8180:	0b 96       	adiw	r24, 0x0b	; 11
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    8182:	e8 17       	cp	r30, r24
    8184:	f9 07       	cpc	r31, r25
    8186:	09 f4       	brne	.+2      	; 0x818a <f_open+0x6f0>
    8188:	8a c0       	rjmp	.+276    	; 0x829e <f_open+0x804>
    818a:	31 91       	ld	r19, Z+
    818c:	2d 91       	ld	r18, X+
    818e:	32 17       	cp	r19, r18
    8190:	c1 f3       	breq	.-16     	; 0x8182 <f_open+0x6e8>
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    8192:	e9 88       	ldd	r14, Y+17	; 0x11
    8194:	fa 88       	ldd	r15, Y+18	; 0x12
    8196:	08 94       	sec
    8198:	e1 1c       	adc	r14, r1
    819a:	f1 1c       	adc	r15, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    819c:	e1 14       	cp	r14, r1
    819e:	f1 04       	cpc	r15, r1
    81a0:	09 f4       	brne	.+2      	; 0x81a4 <f_open+0x70a>
    81a2:	7b c0       	rjmp	.+246    	; 0x829a <f_open+0x800>
    81a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    81a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    81a8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    81aa:	be 8d       	ldd	r27, Y+30	; 0x1e
    81ac:	00 97       	sbiw	r24, 0x00	; 0
    81ae:	a1 05       	cpc	r26, r1
    81b0:	b1 05       	cpc	r27, r1
    81b2:	09 f4       	brne	.+2      	; 0x81b6 <f_open+0x71c>
    81b4:	72 c0       	rjmp	.+228    	; 0x829a <f_open+0x800>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    81b6:	1f e0       	ldi	r17, 0x0F	; 15
    81b8:	41 2e       	mov	r4, r17
    81ba:	51 2c       	mov	r5, r1
    81bc:	4e 20       	and	r4, r14
    81be:	5f 20       	and	r5, r15
    81c0:	41 14       	cp	r4, r1
    81c2:	51 04       	cpc	r5, r1
    81c4:	09 f0       	breq	.+2      	; 0x81c8 <f_open+0x72e>
    81c6:	54 c0       	rjmp	.+168    	; 0x8270 <f_open+0x7d6>
		dj->sect++;					/* Next sector */
    81c8:	01 96       	adiw	r24, 0x01	; 1
    81ca:	a1 1d       	adc	r26, r1
    81cc:	b1 1d       	adc	r27, r1
    81ce:	8b 8f       	std	Y+27, r24	; 0x1b
    81d0:	9c 8f       	std	Y+28, r25	; 0x1c
    81d2:	ad 8f       	std	Y+29, r26	; 0x1d
    81d4:	be 8f       	std	Y+30, r27	; 0x1e

		if (dj->clust == 0) {	/* Static table */
    81d6:	4f 89       	ldd	r20, Y+23	; 0x17
    81d8:	58 8d       	ldd	r21, Y+24	; 0x18
    81da:	69 8d       	ldd	r22, Y+25	; 0x19
    81dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    81de:	8d 85       	ldd	r24, Y+13	; 0x0d
    81e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    81e2:	41 15       	cp	r20, r1
    81e4:	51 05       	cpc	r21, r1
    81e6:	61 05       	cpc	r22, r1
    81e8:	71 05       	cpc	r23, r1
    81ea:	49 f4       	brne	.+18     	; 0x81fe <f_open+0x764>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    81ec:	dc 01       	movw	r26, r24
    81ee:	18 96       	adiw	r26, 0x08	; 8
    81f0:	8d 91       	ld	r24, X+
    81f2:	9c 91       	ld	r25, X
    81f4:	19 97       	sbiw	r26, 0x09	; 9
    81f6:	e8 16       	cp	r14, r24
    81f8:	f9 06       	cpc	r15, r25
    81fa:	d0 f1       	brcs	.+116    	; 0x8270 <f_open+0x7d6>
    81fc:	4e c0       	rjmp	.+156    	; 0x829a <f_open+0x800>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    81fe:	fc 01       	movw	r30, r24
    8200:	22 81       	ldd	r18, Z+2	; 0x02
    8202:	30 e0       	ldi	r19, 0x00	; 0
    8204:	21 50       	subi	r18, 0x01	; 1
    8206:	30 40       	sbci	r19, 0x00	; 0
    8208:	f7 01       	movw	r30, r14
    820a:	a4 e0       	ldi	r26, 0x04	; 4
    820c:	f6 95       	lsr	r31
    820e:	e7 95       	ror	r30
    8210:	aa 95       	dec	r26
    8212:	e1 f7       	brne	.-8      	; 0x820c <f_open+0x772>
    8214:	2e 23       	and	r18, r30
    8216:	3f 23       	and	r19, r31
    8218:	21 15       	cp	r18, r1
    821a:	31 05       	cpc	r19, r1
    821c:	49 f5       	brne	.+82     	; 0x8270 <f_open+0x7d6>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    821e:	0e 94 c9 3b 	call	0x7792	; 0x7792 <get_fat>
    8222:	ab 01       	movw	r20, r22
    8224:	bc 01       	movw	r22, r24
				if (clst <= 1) return FR_INT_ERR;
    8226:	42 30       	cpi	r20, 0x02	; 2
    8228:	51 05       	cpc	r21, r1
    822a:	61 05       	cpc	r22, r1
    822c:	71 05       	cpc	r23, r1
    822e:	78 f1       	brcs	.+94     	; 0x828e <f_open+0x7f4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    8230:	4f 3f       	cpi	r20, 0xFF	; 255
    8232:	ff ef       	ldi	r31, 0xFF	; 255
    8234:	5f 07       	cpc	r21, r31
    8236:	ff ef       	ldi	r31, 0xFF	; 255
    8238:	6f 07       	cpc	r22, r31
    823a:	ff ef       	ldi	r31, 0xFF	; 255
    823c:	7f 07       	cpc	r23, r31
    823e:	51 f1       	breq	.+84     	; 0x8294 <f_open+0x7fa>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    8240:	8d 85       	ldd	r24, Y+13	; 0x0d
    8242:	9e 85       	ldd	r25, Y+14	; 0x0e
    8244:	dc 01       	movw	r26, r24
    8246:	1a 96       	adiw	r26, 0x0a	; 10
    8248:	0d 91       	ld	r16, X+
    824a:	1d 91       	ld	r17, X+
    824c:	2d 91       	ld	r18, X+
    824e:	3c 91       	ld	r19, X
    8250:	1d 97       	sbiw	r26, 0x0d	; 13
    8252:	40 17       	cp	r20, r16
    8254:	51 07       	cpc	r21, r17
    8256:	62 07       	cpc	r22, r18
    8258:	73 07       	cpc	r23, r19
    825a:	f8 f4       	brcc	.+62     	; 0x829a <f_open+0x800>
					dj->fs->winsect -= c;						/* Rewind window address */
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    825c:	4f 8b       	std	Y+23, r20	; 0x17
    825e:	58 8f       	std	Y+24, r21	; 0x18
    8260:	69 8f       	std	Y+25, r22	; 0x19
    8262:	7a 8f       	std	Y+26, r23	; 0x1a
				dj->sect = clust2sect(dj->fs, clst);
    8264:	0e 94 9a 3b 	call	0x7734	; 0x7734 <clust2sect>
    8268:	6b 8f       	std	Y+27, r22	; 0x1b
    826a:	7c 8f       	std	Y+28, r23	; 0x1c
    826c:	8d 8f       	std	Y+29, r24	; 0x1d
    826e:	9e 8f       	std	Y+30, r25	; 0x1e
			}
		}
	}

	dj->index = i;
    8270:	e9 8a       	std	Y+17, r14	; 0x11
    8272:	fa 8a       	std	Y+18, r15	; 0x12
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    8274:	8d 85       	ldd	r24, Y+13	; 0x0d
    8276:	9e 85       	ldd	r25, Y+14	; 0x0e
    8278:	82 96       	adiw	r24, 0x22	; 34
    827a:	e5 e0       	ldi	r30, 0x05	; 5
    827c:	44 0c       	add	r4, r4
    827e:	55 1c       	adc	r5, r5
    8280:	ea 95       	dec	r30
    8282:	e1 f7       	brne	.-8      	; 0x827c <f_open+0x7e2>
    8284:	84 0d       	add	r24, r4
    8286:	95 1d       	adc	r25, r5
    8288:	8f 8f       	std	Y+31, r24	; 0x1f
    828a:	98 a3       	std	Y+32, r25	; 0x20
    828c:	61 cf       	rjmp	.-318    	; 0x8150 <f_open+0x6b6>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    828e:	02 e0       	ldi	r16, 0x02	; 2
    8290:	10 e0       	ldi	r17, 0x00	; 0
    8292:	05 c0       	rjmp	.+10     	; 0x829e <f_open+0x804>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    8294:	01 e0       	ldi	r16, 0x01	; 1
    8296:	10 e0       	ldi	r17, 0x00	; 0
    8298:	02 c0       	rjmp	.+4      	; 0x829e <f_open+0x804>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    829a:	04 e0       	ldi	r16, 0x04	; 4
    829c:	10 e0       	ldi	r17, 0x00	; 0
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    829e:	e9 a1       	ldd	r30, Y+33	; 0x21
    82a0:	fa a1       	ldd	r31, Y+34	; 0x22
    82a2:	83 85       	ldd	r24, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
    82a4:	01 15       	cp	r16, r1
    82a6:	11 05       	cpc	r17, r1
    82a8:	31 f0       	breq	.+12     	; 0x82b6 <f_open+0x81c>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
    82aa:	04 30       	cpi	r16, 0x04	; 4
    82ac:	11 05       	cpc	r17, r1
    82ae:	e1 f4       	brne	.+56     	; 0x82e8 <f_open+0x84e>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    82b0:	82 ff       	sbrs	r24, 2
    82b2:	18 c0       	rjmp	.+48     	; 0x82e4 <f_open+0x84a>
    82b4:	19 c0       	rjmp	.+50     	; 0x82e8 <f_open+0x84e>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    82b6:	82 fd       	sbrc	r24, 2
    82b8:	17 c0       	rjmp	.+46     	; 0x82e8 <f_open+0x84e>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    82ba:	6f 8d       	ldd	r22, Y+31	; 0x1f
    82bc:	78 a1       	ldd	r23, Y+32	; 0x20
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    82be:	fb 01       	movw	r30, r22
    82c0:	83 85       	ldd	r24, Z+11	; 0x0b
    82c2:	84 ff       	sbrs	r24, 4
    82c4:	0f c0       	rjmp	.+30     	; 0x82e4 <f_open+0x84a>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    82c6:	c8 0c       	add	r12, r8
    82c8:	d9 1c       	adc	r13, r9
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
}
    82ca:	ed 85       	ldd	r30, Y+13	; 0x0d
    82cc:	fe 85       	ldd	r31, Y+14	; 0x0e
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ld_clust(dj->fs, dir);
    82ce:	80 81       	ld	r24, Z
    82d0:	0e 94 7d 3b 	call	0x76fa	; 0x76fa <ld_clust.clone.0>
    82d4:	6b 8b       	std	Y+19, r22	; 0x13
    82d6:	7c 8b       	std	Y+20, r23	; 0x14
    82d8:	8d 8b       	std	Y+21, r24	; 0x15
    82da:	9e 8b       	std	Y+22, r25	; 0x16
    82dc:	8e ce       	rjmp	.-740    	; 0x7ffa <f_open+0x560>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    82de:	06 e0       	ldi	r16, 0x06	; 6
    82e0:	10 e0       	ldi	r17, 0x00	; 0
    82e2:	02 c0       	rjmp	.+4      	; 0x82e8 <f_open+0x84e>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
    82e4:	05 e0       	ldi	r16, 0x05	; 5
    82e6:	10 e0       	ldi	r17, 0x00	; 0
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    82e8:	ef 8c       	ldd	r14, Y+31	; 0x1f
    82ea:	f8 a0       	ldd	r15, Y+32	; 0x20
			if (!fp->lockid) res = FR_INT_ERR;
#endif
		}

#else				/* R/O configuration */
		if (res == FR_OK) {					/* Follow succeeded */
    82ec:	01 15       	cp	r16, r1
    82ee:	11 05       	cpc	r17, r1
    82f0:	89 f4       	brne	.+34     	; 0x8314 <f_open+0x87a>
			dir = dj.dir;
			if (!dir) {						/* Current dir itself */
    82f2:	e1 14       	cp	r14, r1
    82f4:	f1 04       	cpc	r15, r1
    82f6:	49 f0       	breq	.+18     	; 0x830a <f_open+0x870>
				res = FR_INVALID_NAME;
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
    82f8:	d7 01       	movw	r26, r14
    82fa:	1b 96       	adiw	r26, 0x0b	; 11
    82fc:	8c 91       	ld	r24, X
    82fe:	1b 97       	sbiw	r26, 0x0b	; 11
    8300:	84 ff       	sbrs	r24, 4
    8302:	18 c0       	rjmp	.+48     	; 0x8334 <f_open+0x89a>
					res = FR_NO_FILE;
    8304:	04 e0       	ldi	r16, 0x04	; 4
    8306:	10 e0       	ldi	r17, 0x00	; 0
    8308:	05 c0       	rjmp	.+10     	; 0x8314 <f_open+0x87a>

#else				/* R/O configuration */
		if (res == FR_OK) {					/* Follow succeeded */
			dir = dj.dir;
			if (!dir) {						/* Current dir itself */
				res = FR_INVALID_NAME;
    830a:	06 e0       	ldi	r16, 0x06	; 6
    830c:	10 e0       	ldi	r17, 0x00	; 0
    830e:	02 c0       	rjmp	.+4      	; 0x8314 <f_open+0x87a>
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    8310:	09 e0       	ldi	r16, 0x09	; 9
    8312:	10 e0       	ldi	r17, 0x00	; 0
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
		}
	}

	LEAVE_FF(dj.fs, res);
}
    8314:	c8 01       	movw	r24, r16
    8316:	e4 96       	adiw	r28, 0x34	; 52
    8318:	e2 e1       	ldi	r30, 0x12	; 18
    831a:	0c 94 d3 4b 	jmp	0x97a6	; 0x97a6 <__epilogue_restores__>
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
    831e:	ce 01       	movw	r24, r28
    8320:	01 96       	adiw	r24, 0x01	; 1
    8322:	89 a3       	std	Y+33, r24	; 0x21
    8324:	9a a3       	std	Y+34, r25	; 0x22
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    8326:	e9 a5       	ldd	r30, Y+41	; 0x29
    8328:	fa a5       	ldd	r31, Y+42	; 0x2a
    832a:	80 81       	ld	r24, Z
    832c:	8f 32       	cpi	r24, 0x2F	; 47
    832e:	09 f0       	breq	.+2      	; 0x8332 <f_open+0x898>
    8330:	40 ce       	rjmp	.-896    	; 0x7fb2 <f_open+0x518>
    8332:	41 ce       	rjmp	.-894    	; 0x7fb6 <f_open+0x51c>

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
#else
	mode &= FA_READ;
    8334:	8c a9       	ldd	r24, Y+52	; 0x34
    8336:	81 70       	andi	r24, 0x01	; 1
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    8338:	af a1       	ldd	r26, Y+39	; 0x27
    833a:	b8 a5       	ldd	r27, Y+40	; 0x28
    833c:	14 96       	adiw	r26, 0x04	; 4
    833e:	8c 93       	st	X, r24
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    8340:	cd 84       	ldd	r12, Y+13	; 0x0d
    8342:	de 84       	ldd	r13, Y+14	; 0x0e
    8344:	f6 01       	movw	r30, r12
    8346:	80 81       	ld	r24, Z
    8348:	b7 01       	movw	r22, r14
    834a:	0e 94 7d 3b 	call	0x76fa	; 0x76fa <ld_clust.clone.0>
    834e:	af a1       	ldd	r26, Y+39	; 0x27
    8350:	b8 a5       	ldd	r27, Y+40	; 0x28
    8352:	1e 96       	adiw	r26, 0x0e	; 14
    8354:	6d 93       	st	X+, r22
    8356:	7d 93       	st	X+, r23
    8358:	8d 93       	st	X+, r24
    835a:	9c 93       	st	X, r25
    835c:	51 97       	sbiw	r26, 0x11	; 17
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    835e:	f7 01       	movw	r30, r14
    8360:	87 8d       	ldd	r24, Z+31	; 0x1f
    8362:	90 e0       	ldi	r25, 0x00	; 0
    8364:	a0 e0       	ldi	r26, 0x00	; 0
    8366:	b0 e0       	ldi	r27, 0x00	; 0
    8368:	b8 2f       	mov	r27, r24
    836a:	aa 27       	eor	r26, r26
    836c:	99 27       	eor	r25, r25
    836e:	88 27       	eor	r24, r24
    8370:	26 8d       	ldd	r18, Z+30	; 0x1e
    8372:	30 e0       	ldi	r19, 0x00	; 0
    8374:	40 e0       	ldi	r20, 0x00	; 0
    8376:	50 e0       	ldi	r21, 0x00	; 0
    8378:	a9 01       	movw	r20, r18
    837a:	33 27       	eor	r19, r19
    837c:	22 27       	eor	r18, r18
    837e:	82 2b       	or	r24, r18
    8380:	93 2b       	or	r25, r19
    8382:	a4 2b       	or	r26, r20
    8384:	b5 2b       	or	r27, r21
    8386:	24 8d       	ldd	r18, Z+28	; 0x1c
    8388:	30 e0       	ldi	r19, 0x00	; 0
    838a:	40 e0       	ldi	r20, 0x00	; 0
    838c:	50 e0       	ldi	r21, 0x00	; 0
    838e:	82 2b       	or	r24, r18
    8390:	93 2b       	or	r25, r19
    8392:	a4 2b       	or	r26, r20
    8394:	b5 2b       	or	r27, r21
    8396:	35 8d       	ldd	r19, Z+29	; 0x1d
    8398:	20 e0       	ldi	r18, 0x00	; 0
    839a:	40 e0       	ldi	r20, 0x00	; 0
    839c:	50 e0       	ldi	r21, 0x00	; 0
    839e:	82 2b       	or	r24, r18
    83a0:	93 2b       	or	r25, r19
    83a2:	a4 2b       	or	r26, r20
    83a4:	b5 2b       	or	r27, r21
    83a6:	ef a1       	ldd	r30, Y+39	; 0x27
    83a8:	f8 a5       	ldd	r31, Y+40	; 0x28
    83aa:	82 87       	std	Z+10, r24	; 0x0a
    83ac:	93 87       	std	Z+11, r25	; 0x0b
    83ae:	a4 87       	std	Z+12, r26	; 0x0c
    83b0:	b5 87       	std	Z+13, r27	; 0x0d
			fp->fptr = 0;						/* File pointer */
    83b2:	16 82       	std	Z+6, r1	; 0x06
    83b4:	17 82       	std	Z+7, r1	; 0x07
    83b6:	10 86       	std	Z+8, r1	; 0x08
    83b8:	11 86       	std	Z+9, r1	; 0x09
			fp->dsect = 0;
    83ba:	16 8a       	std	Z+22, r1	; 0x16
    83bc:	17 8a       	std	Z+23, r1	; 0x17
    83be:	10 8e       	std	Z+24, r1	; 0x18
    83c0:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    83c2:	c0 82       	st	Z, r12
    83c4:	d1 82       	std	Z+1, r13	; 0x01
    83c6:	d6 01       	movw	r26, r12
    83c8:	16 96       	adiw	r26, 0x06	; 6
    83ca:	8d 91       	ld	r24, X+
    83cc:	9c 91       	ld	r25, X
    83ce:	17 97       	sbiw	r26, 0x07	; 7
    83d0:	82 83       	std	Z+2, r24	; 0x02
    83d2:	93 83       	std	Z+3, r25	; 0x03
    83d4:	9f cf       	rjmp	.-194    	; 0x8314 <f_open+0x87a>

000083d6 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    83d6:	a4 e0       	ldi	r26, 0x04	; 4
    83d8:	b0 e0       	ldi	r27, 0x00	; 0
    83da:	e1 ef       	ldi	r30, 0xF1	; 241
    83dc:	f1 e4       	ldi	r31, 0x41	; 65
    83de:	0c 94 ba 4b 	jmp	0x9774	; 0x9774 <__prologue_saves__>
    83e2:	8b 83       	std	Y+3, r24	; 0x03
    83e4:	9c 83       	std	Y+4, r25	; 0x04
    83e6:	5a 01       	movw	r10, r20
    83e8:	19 01       	movw	r2, r18
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Clear read byte counter */
    83ea:	d9 01       	movw	r26, r18
    83ec:	1d 92       	st	X+, r1
    83ee:	1c 92       	st	X, r1

	res = validate(fp);							/* Check validity */
    83f0:	69 83       	std	Y+1, r22	; 0x01
    83f2:	7a 83       	std	Y+2, r23	; 0x02
    83f4:	0e 94 8c 3a 	call	0x7518	; 0x7518 <validate>
    83f8:	7c 01       	movw	r14, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    83fa:	69 81       	ldd	r22, Y+1	; 0x01
    83fc:	7a 81       	ldd	r23, Y+2	; 0x02
    83fe:	00 97       	sbiw	r24, 0x00	; 0
    8400:	09 f0       	breq	.+2      	; 0x8404 <f_read+0x2e>
    8402:	24 c1       	rjmp	.+584    	; 0x864c <f_read+0x276>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    8404:	eb 81       	ldd	r30, Y+3	; 0x03
    8406:	fc 81       	ldd	r31, Y+4	; 0x04
    8408:	84 81       	ldd	r24, Z+4	; 0x04
    840a:	87 fd       	sbrc	r24, 7
    840c:	18 c1       	rjmp	.+560    	; 0x863e <f_read+0x268>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    840e:	80 ff       	sbrs	r24, 0
    8410:	1a c1       	rjmp	.+564    	; 0x8646 <f_read+0x270>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    8412:	82 85       	ldd	r24, Z+10	; 0x0a
    8414:	93 85       	ldd	r25, Z+11	; 0x0b
    8416:	a4 85       	ldd	r26, Z+12	; 0x0c
    8418:	b5 85       	ldd	r27, Z+13	; 0x0d
    841a:	26 81       	ldd	r18, Z+6	; 0x06
    841c:	37 81       	ldd	r19, Z+7	; 0x07
    841e:	40 85       	ldd	r20, Z+8	; 0x08
    8420:	51 85       	ldd	r21, Z+9	; 0x09
    8422:	82 1b       	sub	r24, r18
    8424:	93 0b       	sbc	r25, r19
    8426:	a4 0b       	sbc	r26, r20
    8428:	b5 0b       	sbc	r27, r21
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    842a:	95 01       	movw	r18, r10
    842c:	40 e0       	ldi	r20, 0x00	; 0
    842e:	50 e0       	ldi	r21, 0x00	; 0
    8430:	82 17       	cp	r24, r18
    8432:	93 07       	cpc	r25, r19
    8434:	a4 07       	cpc	r26, r20
    8436:	b5 07       	cpc	r27, r21
    8438:	08 f4       	brcc	.+2      	; 0x843c <f_read+0x66>
    843a:	5c 01       	movw	r10, r24
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    843c:	46 2e       	mov	r4, r22
    843e:	57 2e       	mov	r5, r23
    8440:	f9 c0       	rjmp	.+498    	; 0x8634 <f_read+0x25e>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    8442:	ab 81       	ldd	r26, Y+3	; 0x03
    8444:	bc 81       	ldd	r27, Y+4	; 0x04
    8446:	16 96       	adiw	r26, 0x06	; 6
    8448:	2d 91       	ld	r18, X+
    844a:	3d 91       	ld	r19, X+
    844c:	4d 91       	ld	r20, X+
    844e:	5c 91       	ld	r21, X
    8450:	19 97       	sbiw	r26, 0x09	; 9
    8452:	da 01       	movw	r26, r20
    8454:	c9 01       	movw	r24, r18
    8456:	91 70       	andi	r25, 0x01	; 1
    8458:	a0 70       	andi	r26, 0x00	; 0
    845a:	b0 70       	andi	r27, 0x00	; 0
    845c:	00 97       	sbiw	r24, 0x00	; 0
    845e:	a1 05       	cpc	r26, r1
    8460:	b1 05       	cpc	r27, r1
    8462:	09 f0       	breq	.+2      	; 0x8466 <f_read+0x90>
    8464:	8c c0       	rjmp	.+280    	; 0x857e <f_read+0x1a8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    8466:	eb 81       	ldd	r30, Y+3	; 0x03
    8468:	fc 81       	ldd	r31, Y+4	; 0x04
    846a:	80 81       	ld	r24, Z
    846c:	91 81       	ldd	r25, Z+1	; 0x01
    846e:	39 01       	movw	r6, r18
    8470:	4a 01       	movw	r8, r20
    8472:	79 e0       	ldi	r23, 0x09	; 9
    8474:	96 94       	lsr	r9
    8476:	87 94       	ror	r8
    8478:	77 94       	ror	r7
    847a:	67 94       	ror	r6
    847c:	7a 95       	dec	r23
    847e:	d1 f7       	brne	.-12     	; 0x8474 <f_read+0x9e>
    8480:	dc 01       	movw	r26, r24
    8482:	12 96       	adiw	r26, 0x02	; 2
    8484:	1c 91       	ld	r17, X
    8486:	12 97       	sbiw	r26, 0x02	; 2
    8488:	11 50       	subi	r17, 0x01	; 1
    848a:	16 21       	and	r17, r6
			if (!csect) {						/* On the cluster boundary? */
    848c:	41 f5       	brne	.+80     	; 0x84de <f_read+0x108>
				if (fp->fptr == 0) {			/* On the top of the file? */
    848e:	21 15       	cp	r18, r1
    8490:	31 05       	cpc	r19, r1
    8492:	41 05       	cpc	r20, r1
    8494:	51 05       	cpc	r21, r1
    8496:	29 f4       	brne	.+10     	; 0x84a2 <f_read+0xcc>
					clst = fp->sclust;			/* Follow from the origin */
    8498:	66 85       	ldd	r22, Z+14	; 0x0e
    849a:	77 85       	ldd	r23, Z+15	; 0x0f
    849c:	80 89       	ldd	r24, Z+16	; 0x10
    849e:	91 89       	ldd	r25, Z+17	; 0x11
    84a0:	08 c0       	rjmp	.+16     	; 0x84b2 <f_read+0xdc>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    84a2:	eb 81       	ldd	r30, Y+3	; 0x03
    84a4:	fc 81       	ldd	r31, Y+4	; 0x04
    84a6:	42 89       	ldd	r20, Z+18	; 0x12
    84a8:	53 89       	ldd	r21, Z+19	; 0x13
    84aa:	64 89       	ldd	r22, Z+20	; 0x14
    84ac:	75 89       	ldd	r23, Z+21	; 0x15
    84ae:	0e 94 c9 3b 	call	0x7792	; 0x7792 <get_fat>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    84b2:	62 30       	cpi	r22, 0x02	; 2
    84b4:	71 05       	cpc	r23, r1
    84b6:	81 05       	cpc	r24, r1
    84b8:	91 05       	cpc	r25, r1
    84ba:	18 f1       	brcs	.+70     	; 0x8502 <f_read+0x12c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    84bc:	6f 3f       	cpi	r22, 0xFF	; 255
    84be:	bf ef       	ldi	r27, 0xFF	; 255
    84c0:	7b 07       	cpc	r23, r27
    84c2:	bf ef       	ldi	r27, 0xFF	; 255
    84c4:	8b 07       	cpc	r24, r27
    84c6:	bf ef       	ldi	r27, 0xFF	; 255
    84c8:	9b 07       	cpc	r25, r27
    84ca:	09 f4       	brne	.+2      	; 0x84ce <f_read+0xf8>
    84cc:	46 c0       	rjmp	.+140    	; 0x855a <f_read+0x184>
				fp->clust = clst;				/* Update current cluster */
    84ce:	ab 81       	ldd	r26, Y+3	; 0x03
    84d0:	bc 81       	ldd	r27, Y+4	; 0x04
    84d2:	52 96       	adiw	r26, 0x12	; 18
    84d4:	6d 93       	st	X+, r22
    84d6:	7d 93       	st	X+, r23
    84d8:	8d 93       	st	X+, r24
    84da:	9c 93       	st	X, r25
    84dc:	55 97       	sbiw	r26, 0x15	; 21
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    84de:	eb 81       	ldd	r30, Y+3	; 0x03
    84e0:	fc 81       	ldd	r31, Y+4	; 0x04
    84e2:	80 80       	ld	r8, Z
    84e4:	91 80       	ldd	r9, Z+1	; 0x01
    84e6:	42 89       	ldd	r20, Z+18	; 0x12
    84e8:	53 89       	ldd	r21, Z+19	; 0x13
    84ea:	64 89       	ldd	r22, Z+20	; 0x14
    84ec:	75 89       	ldd	r23, Z+21	; 0x15
    84ee:	c4 01       	movw	r24, r8
    84f0:	0e 94 9a 3b 	call	0x7734	; 0x7734 <clust2sect>
    84f4:	9b 01       	movw	r18, r22
    84f6:	ac 01       	movw	r20, r24
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    84f8:	61 15       	cp	r22, r1
    84fa:	71 05       	cpc	r23, r1
    84fc:	81 05       	cpc	r24, r1
    84fe:	91 05       	cpc	r25, r1
    8500:	51 f4       	brne	.+20     	; 0x8516 <f_read+0x140>
    8502:	ab 81       	ldd	r26, Y+3	; 0x03
    8504:	bc 81       	ldd	r27, Y+4	; 0x04
    8506:	14 96       	adiw	r26, 0x04	; 4
    8508:	8c 91       	ld	r24, X
    850a:	14 97       	sbiw	r26, 0x04	; 4
    850c:	80 68       	ori	r24, 0x80	; 128
    850e:	14 96       	adiw	r26, 0x04	; 4
    8510:	8c 93       	st	X, r24
    8512:	14 97       	sbiw	r26, 0x04	; 4
    8514:	94 c0       	rjmp	.+296    	; 0x863e <f_read+0x268>
			sect += csect;
    8516:	21 0f       	add	r18, r17
    8518:	31 1d       	adc	r19, r1
    851a:	41 1d       	adc	r20, r1
    851c:	51 1d       	adc	r21, r1
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    851e:	65 01       	movw	r12, r10
    8520:	cd 2c       	mov	r12, r13
    8522:	dd 24       	eor	r13, r13
    8524:	c6 94       	lsr	r12
			if (cc) {							/* Read maximum contiguous sectors directly */
    8526:	c1 14       	cp	r12, r1
    8528:	d1 04       	cpc	r13, r1
    852a:	09 f1       	breq	.+66     	; 0x856e <f_read+0x198>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    852c:	f4 01       	movw	r30, r8
    852e:	62 81       	ldd	r22, Z+2	; 0x02
    8530:	81 2f       	mov	r24, r17
    8532:	90 e0       	ldi	r25, 0x00	; 0
    8534:	f6 01       	movw	r30, r12
    8536:	e8 0f       	add	r30, r24
    8538:	f9 1f       	adc	r31, r25
    853a:	70 e0       	ldi	r23, 0x00	; 0
    853c:	6e 17       	cp	r22, r30
    853e:	7f 07       	cpc	r23, r31
    8540:	18 f4       	brcc	.+6      	; 0x8548 <f_read+0x172>
					cc = fp->fs->csize - csect;
    8542:	6b 01       	movw	r12, r22
    8544:	c8 1a       	sub	r12, r24
    8546:	d9 0a       	sbc	r13, r25
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    8548:	d4 01       	movw	r26, r8
    854a:	11 96       	adiw	r26, 0x01	; 1
    854c:	8c 91       	ld	r24, X
    854e:	b2 01       	movw	r22, r4
    8550:	0c 2d       	mov	r16, r12
    8552:	0e 94 4f 46 	call	0x8c9e	; 0x8c9e <disk_read>
    8556:	00 97       	sbiw	r24, 0x00	; 0
    8558:	31 f0       	breq	.+12     	; 0x8566 <f_read+0x190>
					ABORT(fp->fs, FR_DISK_ERR);
    855a:	eb 81       	ldd	r30, Y+3	; 0x03
    855c:	fc 81       	ldd	r31, Y+4	; 0x04
    855e:	84 81       	ldd	r24, Z+4	; 0x04
    8560:	80 68       	ori	r24, 0x80	; 128
    8562:	84 83       	std	Z+4, r24	; 0x04
    8564:	25 c0       	rjmp	.+74     	; 0x85b0 <f_read+0x1da>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    8566:	dc 2c       	mov	r13, r12
    8568:	cc 24       	eor	r12, r12
    856a:	dd 0c       	add	r13, r13
				continue;
    856c:	45 c0       	rjmp	.+138    	; 0x85f8 <f_read+0x222>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    856e:	ab 81       	ldd	r26, Y+3	; 0x03
    8570:	bc 81       	ldd	r27, Y+4	; 0x04
    8572:	56 96       	adiw	r26, 0x16	; 22
    8574:	2d 93       	st	X+, r18
    8576:	3d 93       	st	X+, r19
    8578:	4d 93       	st	X+, r20
    857a:	5c 93       	st	X, r21
    857c:	59 97       	sbiw	r26, 0x19	; 25
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    857e:	eb 81       	ldd	r30, Y+3	; 0x03
    8580:	fc 81       	ldd	r31, Y+4	; 0x04
    8582:	66 80       	ldd	r6, Z+6	; 0x06
    8584:	77 80       	ldd	r7, Z+7	; 0x07
    8586:	80 84       	ldd	r8, Z+8	; 0x08
    8588:	91 84       	ldd	r9, Z+9	; 0x09
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    858a:	46 89       	ldd	r20, Z+22	; 0x16
    858c:	57 89       	ldd	r21, Z+23	; 0x17
    858e:	60 8d       	ldd	r22, Z+24	; 0x18
    8590:	71 8d       	ldd	r23, Z+25	; 0x19
    8592:	80 81       	ld	r24, Z
    8594:	91 81       	ldd	r25, Z+1	; 0x01
    8596:	0e 94 ad 3a 	call	0x755a	; 0x755a <move_window>
    859a:	00 97       	sbiw	r24, 0x00	; 0
    859c:	69 f0       	breq	.+26     	; 0x85b8 <f_read+0x1e2>
			ABORT(fp->fs, FR_DISK_ERR);
    859e:	ab 81       	ldd	r26, Y+3	; 0x03
    85a0:	bc 81       	ldd	r27, Y+4	; 0x04
    85a2:	14 96       	adiw	r26, 0x04	; 4
    85a4:	8c 91       	ld	r24, X
    85a6:	14 97       	sbiw	r26, 0x04	; 4
    85a8:	80 68       	ori	r24, 0x80	; 128
    85aa:	14 96       	adiw	r26, 0x04	; 4
    85ac:	8c 93       	st	X, r24
    85ae:	14 97       	sbiw	r26, 0x04	; 4
    85b0:	81 e0       	ldi	r24, 0x01	; 1
    85b2:	e8 2e       	mov	r14, r24
    85b4:	f1 2c       	mov	r15, r1
    85b6:	4a c0       	rjmp	.+148    	; 0x864c <f_read+0x276>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    85b8:	c3 01       	movw	r24, r6
    85ba:	91 70       	andi	r25, 0x01	; 1
    85bc:	e0 e0       	ldi	r30, 0x00	; 0
    85be:	f2 e0       	ldi	r31, 0x02	; 2
    85c0:	e8 1b       	sub	r30, r24
    85c2:	f9 0b       	sbc	r31, r25
    85c4:	65 01       	movw	r12, r10
    85c6:	ea 15       	cp	r30, r10
    85c8:	fb 05       	cpc	r31, r11
    85ca:	08 f4       	brcc	.+2      	; 0x85ce <f_read+0x1f8>
    85cc:	6f 01       	movw	r12, r30
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    85ce:	ab 81       	ldd	r26, Y+3	; 0x03
    85d0:	bc 81       	ldd	r27, Y+4	; 0x04
    85d2:	ed 91       	ld	r30, X+
    85d4:	fc 91       	ld	r31, X
    85d6:	11 97       	sbiw	r26, 0x01	; 1
    85d8:	b2 96       	adiw	r30, 0x22	; 34
    85da:	16 96       	adiw	r26, 0x06	; 6
    85dc:	8d 91       	ld	r24, X+
    85de:	9c 91       	ld	r25, X
    85e0:	17 97       	sbiw	r26, 0x07	; 7
    85e2:	91 70       	andi	r25, 0x01	; 1
    85e4:	e8 0f       	add	r30, r24
    85e6:	f9 1f       	adc	r31, r25
    85e8:	c6 01       	movw	r24, r12
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    85ea:	d2 01       	movw	r26, r4
    85ec:	03 c0       	rjmp	.+6      	; 0x85f4 <f_read+0x21e>
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
    85ee:	21 91       	ld	r18, Z+
    85f0:	2d 93       	st	X+, r18
    85f2:	01 97       	sbiw	r24, 0x01	; 1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    85f4:	00 97       	sbiw	r24, 0x00	; 0
    85f6:	d9 f7       	brne	.-10     	; 0x85ee <f_read+0x218>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    85f8:	4c 0c       	add	r4, r12
    85fa:	5d 1c       	adc	r5, r13
    85fc:	96 01       	movw	r18, r12
    85fe:	40 e0       	ldi	r20, 0x00	; 0
    8600:	50 e0       	ldi	r21, 0x00	; 0
    8602:	eb 81       	ldd	r30, Y+3	; 0x03
    8604:	fc 81       	ldd	r31, Y+4	; 0x04
    8606:	86 81       	ldd	r24, Z+6	; 0x06
    8608:	97 81       	ldd	r25, Z+7	; 0x07
    860a:	a0 85       	ldd	r26, Z+8	; 0x08
    860c:	b1 85       	ldd	r27, Z+9	; 0x09
    860e:	82 0f       	add	r24, r18
    8610:	93 1f       	adc	r25, r19
    8612:	a4 1f       	adc	r26, r20
    8614:	b5 1f       	adc	r27, r21
    8616:	86 83       	std	Z+6, r24	; 0x06
    8618:	97 83       	std	Z+7, r25	; 0x07
    861a:	a0 87       	std	Z+8, r26	; 0x08
    861c:	b1 87       	std	Z+9, r27	; 0x09
    861e:	d1 01       	movw	r26, r2
    8620:	8d 91       	ld	r24, X+
    8622:	9c 91       	ld	r25, X
    8624:	11 97       	sbiw	r26, 0x01	; 1
    8626:	8c 0d       	add	r24, r12
    8628:	9d 1d       	adc	r25, r13
    862a:	8d 93       	st	X+, r24
    862c:	9c 93       	st	X, r25
    862e:	11 97       	sbiw	r26, 0x01	; 1
    8630:	ac 18       	sub	r10, r12
    8632:	bd 08       	sbc	r11, r13
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    8634:	a1 14       	cp	r10, r1
    8636:	b1 04       	cpc	r11, r1
    8638:	09 f0       	breq	.+2      	; 0x863c <f_read+0x266>
    863a:	03 cf       	rjmp	.-506    	; 0x8442 <f_read+0x6c>
    863c:	07 c0       	rjmp	.+14     	; 0x864c <f_read+0x276>
	*br = 0;	/* Clear read byte counter */

	res = validate(fp);							/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)					/* Aborted file? */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    863e:	b2 e0       	ldi	r27, 0x02	; 2
    8640:	eb 2e       	mov	r14, r27
    8642:	f1 2c       	mov	r15, r1
    8644:	03 c0       	rjmp	.+6      	; 0x864c <f_read+0x276>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    8646:	a7 e0       	ldi	r26, 0x07	; 7
    8648:	ea 2e       	mov	r14, r26
    864a:	f1 2c       	mov	r15, r1
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    864c:	c7 01       	movw	r24, r14
    864e:	24 96       	adiw	r28, 0x04	; 4
    8650:	e2 e1       	ldi	r30, 0x12	; 18
    8652:	0c 94 d3 4b 	jmp	0x97a6	; 0x97a6 <__epilogue_restores__>

00008656 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    8656:	cf 93       	push	r28
    8658:	df 93       	push	r29
    865a:	ec 01       	movw	r28, r24
	FRESULT res;


#if _FS_READONLY
	res = validate(fp);
    865c:	0e 94 8c 3a 	call	0x7518	; 0x7518 <validate>
    8660:	9c 01       	movw	r18, r24
	{
#if _FS_REENTRANT
		FATFS *fs = fp->fs;
#endif
		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    8662:	00 97       	sbiw	r24, 0x00	; 0
    8664:	11 f4       	brne	.+4      	; 0x866a <f_close+0x14>
    8666:	18 82       	st	Y, r1
    8668:	19 82       	std	Y+1, r1	; 0x01
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	return res;
#endif
}
    866a:	c9 01       	movw	r24, r18
    866c:	df 91       	pop	r29
    866e:	cf 91       	pop	r28
    8670:	08 95       	ret

00008672 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    8672:	a8 e0       	ldi	r26, 0x08	; 8
    8674:	b0 e0       	ldi	r27, 0x00	; 0
    8676:	ef e3       	ldi	r30, 0x3F	; 63
    8678:	f3 e4       	ldi	r31, 0x43	; 67
    867a:	0c 94 ba 4b 	jmp	0x9774	; 0x9774 <__prologue_saves__>
    867e:	1c 01       	movw	r2, r24
	FRESULT res;


	res = validate(fp);					/* Check validity of the object */
    8680:	4d 83       	std	Y+5, r20	; 0x05
    8682:	5e 83       	std	Y+6, r21	; 0x06
    8684:	6f 83       	std	Y+7, r22	; 0x07
    8686:	78 87       	std	Y+8, r23	; 0x08
    8688:	0e 94 8c 3a 	call	0x7518	; 0x7518 <validate>
    868c:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    868e:	4d 81       	ldd	r20, Y+5	; 0x05
    8690:	5e 81       	ldd	r21, Y+6	; 0x06
    8692:	6f 81       	ldd	r22, Y+7	; 0x07
    8694:	78 85       	ldd	r23, Y+8	; 0x08
    8696:	00 97       	sbiw	r24, 0x00	; 0
    8698:	09 f0       	breq	.+2      	; 0x869c <f_lseek+0x2a>
    869a:	2c c1       	rjmp	.+600    	; 0x88f4 <f_lseek+0x282>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    869c:	d1 01       	movw	r26, r2
    869e:	14 96       	adiw	r26, 0x04	; 4
    86a0:	8c 91       	ld	r24, X
    86a2:	14 97       	sbiw	r26, 0x04	; 4
    86a4:	87 fd       	sbrc	r24, 7
    86a6:	23 c1       	rjmp	.+582    	; 0x88ee <f_lseek+0x27c>
    86a8:	1a 96       	adiw	r26, 0x0a	; 10
    86aa:	8d 91       	ld	r24, X+
    86ac:	9d 91       	ld	r25, X+
    86ae:	0d 90       	ld	r0, X+
    86b0:	bc 91       	ld	r27, X
    86b2:	a0 2d       	mov	r26, r0
    86b4:	e4 2e       	mov	r14, r20
    86b6:	f5 2e       	mov	r15, r21
    86b8:	06 2f       	mov	r16, r22
    86ba:	17 2f       	mov	r17, r23
    86bc:	8e 15       	cp	r24, r14
    86be:	9f 05       	cpc	r25, r15
    86c0:	a0 07       	cpc	r26, r16
    86c2:	b1 07       	cpc	r27, r17
    86c4:	10 f4       	brcc	.+4      	; 0x86ca <f_lseek+0x58>
    86c6:	7c 01       	movw	r14, r24
    86c8:	8d 01       	movw	r16, r26
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    86ca:	f1 01       	movw	r30, r2
    86cc:	86 81       	ldd	r24, Z+6	; 0x06
    86ce:	97 81       	ldd	r25, Z+7	; 0x07
    86d0:	a0 85       	ldd	r26, Z+8	; 0x08
    86d2:	b1 85       	ldd	r27, Z+9	; 0x09
		fp->fptr = nsect = 0;
    86d4:	16 82       	std	Z+6, r1	; 0x06
    86d6:	17 82       	std	Z+7, r1	; 0x07
    86d8:	10 86       	std	Z+8, r1	; 0x08
    86da:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    86dc:	e1 14       	cp	r14, r1
    86de:	f1 04       	cpc	r15, r1
    86e0:	01 05       	cpc	r16, r1
    86e2:	11 05       	cpc	r17, r1
    86e4:	09 f4       	brne	.+2      	; 0x86e8 <f_lseek+0x76>
    86e6:	e3 c0       	rjmp	.+454    	; 0x88ae <f_lseek+0x23c>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    86e8:	20 81       	ld	r18, Z
    86ea:	31 81       	ldd	r19, Z+1	; 0x01
    86ec:	f9 01       	movw	r30, r18
    86ee:	a2 80       	ldd	r10, Z+2	; 0x02
    86f0:	bb 24       	eor	r11, r11
    86f2:	cc 24       	eor	r12, r12
    86f4:	dd 24       	eor	r13, r13
    86f6:	29 e0       	ldi	r18, 0x09	; 9
    86f8:	aa 0c       	add	r10, r10
    86fa:	bb 1c       	adc	r11, r11
    86fc:	cc 1c       	adc	r12, r12
    86fe:	dd 1c       	adc	r13, r13
    8700:	2a 95       	dec	r18
    8702:	d1 f7       	brne	.-12     	; 0x86f8 <f_lseek+0x86>
			if (ifptr > 0 &&
    8704:	00 97       	sbiw	r24, 0x00	; 0
    8706:	a1 05       	cpc	r26, r1
    8708:	b1 05       	cpc	r27, r1
    870a:	e9 f1       	breq	.+122    	; 0x8786 <f_lseek+0x114>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    870c:	2c 01       	movw	r4, r24
    870e:	3d 01       	movw	r6, r26
    8710:	08 94       	sec
    8712:	41 08       	sbc	r4, r1
    8714:	51 08       	sbc	r5, r1
    8716:	61 08       	sbc	r6, r1
    8718:	71 08       	sbc	r7, r1
    871a:	c8 01       	movw	r24, r16
    871c:	b7 01       	movw	r22, r14
    871e:	61 50       	subi	r22, 0x01	; 1
    8720:	70 40       	sbci	r23, 0x00	; 0
    8722:	80 40       	sbci	r24, 0x00	; 0
    8724:	90 40       	sbci	r25, 0x00	; 0
    8726:	a6 01       	movw	r20, r12
    8728:	95 01       	movw	r18, r10
    872a:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    872e:	29 83       	std	Y+1, r18	; 0x01
    8730:	3a 83       	std	Y+2, r19	; 0x02
    8732:	4b 83       	std	Y+3, r20	; 0x03
    8734:	5c 83       	std	Y+4, r21	; 0x04
    8736:	c3 01       	movw	r24, r6
    8738:	b2 01       	movw	r22, r4
    873a:	a6 01       	movw	r20, r12
    873c:	95 01       	movw	r18, r10
    873e:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    8742:	89 81       	ldd	r24, Y+1	; 0x01
    8744:	9a 81       	ldd	r25, Y+2	; 0x02
    8746:	ab 81       	ldd	r26, Y+3	; 0x03
    8748:	bc 81       	ldd	r27, Y+4	; 0x04
    874a:	82 17       	cp	r24, r18
    874c:	93 07       	cpc	r25, r19
    874e:	a4 07       	cpc	r26, r20
    8750:	b5 07       	cpc	r27, r21
    8752:	c8 f0       	brcs	.+50     	; 0x8786 <f_lseek+0x114>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    8754:	88 27       	eor	r24, r24
    8756:	99 27       	eor	r25, r25
    8758:	dc 01       	movw	r26, r24
    875a:	8a 19       	sub	r24, r10
    875c:	9b 09       	sbc	r25, r11
    875e:	ac 09       	sbc	r26, r12
    8760:	bd 09       	sbc	r27, r13
    8762:	84 21       	and	r24, r4
    8764:	95 21       	and	r25, r5
    8766:	a6 21       	and	r26, r6
    8768:	b7 21       	and	r27, r7
    876a:	f1 01       	movw	r30, r2
    876c:	86 83       	std	Z+6, r24	; 0x06
    876e:	97 83       	std	Z+7, r25	; 0x07
    8770:	a0 87       	std	Z+8, r26	; 0x08
    8772:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    8774:	e8 1a       	sub	r14, r24
    8776:	f9 0a       	sbc	r15, r25
    8778:	0a 0b       	sbc	r16, r26
    877a:	1b 0b       	sbc	r17, r27
				clst = fp->clust;
    877c:	42 89       	ldd	r20, Z+18	; 0x12
    877e:	53 89       	ldd	r21, Z+19	; 0x13
    8780:	64 89       	ldd	r22, Z+20	; 0x14
    8782:	75 89       	ldd	r23, Z+21	; 0x15
    8784:	0c c0       	rjmp	.+24     	; 0x879e <f_lseek+0x12c>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    8786:	d1 01       	movw	r26, r2
    8788:	1e 96       	adiw	r26, 0x0e	; 14
    878a:	4d 91       	ld	r20, X+
    878c:	5d 91       	ld	r21, X+
    878e:	6d 91       	ld	r22, X+
    8790:	7c 91       	ld	r23, X
    8792:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
    8794:	f1 01       	movw	r30, r2
    8796:	42 8b       	std	Z+18, r20	; 0x12
    8798:	53 8b       	std	Z+19, r21	; 0x13
    879a:	64 8b       	std	Z+20, r22	; 0x14
    879c:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    879e:	41 15       	cp	r20, r1
    87a0:	51 05       	cpc	r21, r1
    87a2:	61 05       	cpc	r22, r1
    87a4:	71 05       	cpc	r23, r1
    87a6:	09 f4       	brne	.+2      	; 0x87aa <f_lseek+0x138>
    87a8:	82 c0       	rjmp	.+260    	; 0x88ae <f_lseek+0x23c>
    87aa:	47 c0       	rjmp	.+142    	; 0x883a <f_lseek+0x1c8>
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    87ac:	d1 01       	movw	r26, r2
    87ae:	8d 91       	ld	r24, X+
    87b0:	9c 91       	ld	r25, X
    87b2:	0e 94 c9 3b 	call	0x7792	; 0x7792 <get_fat>
    87b6:	ab 01       	movw	r20, r22
    87b8:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    87ba:	4f 3f       	cpi	r20, 0xFF	; 255
    87bc:	bf ef       	ldi	r27, 0xFF	; 255
    87be:	5b 07       	cpc	r21, r27
    87c0:	bf ef       	ldi	r27, 0xFF	; 255
    87c2:	6b 07       	cpc	r22, r27
    87c4:	bf ef       	ldi	r27, 0xFF	; 255
    87c6:	7b 07       	cpc	r23, r27
    87c8:	41 f4       	brne	.+16     	; 0x87da <f_lseek+0x168>
    87ca:	f1 01       	movw	r30, r2
    87cc:	84 81       	ldd	r24, Z+4	; 0x04
    87ce:	80 68       	ori	r24, 0x80	; 128
    87d0:	84 83       	std	Z+4, r24	; 0x04
    87d2:	a1 e0       	ldi	r26, 0x01	; 1
    87d4:	8a 2e       	mov	r8, r26
    87d6:	91 2c       	mov	r9, r1
    87d8:	8d c0       	rjmp	.+282    	; 0x88f4 <f_lseek+0x282>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    87da:	42 30       	cpi	r20, 0x02	; 2
    87dc:	51 05       	cpc	r21, r1
    87de:	61 05       	cpc	r22, r1
    87e0:	71 05       	cpc	r23, r1
    87e2:	60 f0       	brcs	.+24     	; 0x87fc <f_lseek+0x18a>
    87e4:	d1 01       	movw	r26, r2
    87e6:	ed 91       	ld	r30, X+
    87e8:	fc 91       	ld	r31, X
    87ea:	82 85       	ldd	r24, Z+10	; 0x0a
    87ec:	93 85       	ldd	r25, Z+11	; 0x0b
    87ee:	a4 85       	ldd	r26, Z+12	; 0x0c
    87f0:	b5 85       	ldd	r27, Z+13	; 0x0d
    87f2:	48 17       	cp	r20, r24
    87f4:	59 07       	cpc	r21, r25
    87f6:	6a 07       	cpc	r22, r26
    87f8:	7b 07       	cpc	r23, r27
    87fa:	28 f0       	brcs	.+10     	; 0x8806 <f_lseek+0x194>
    87fc:	f1 01       	movw	r30, r2
    87fe:	84 81       	ldd	r24, Z+4	; 0x04
    8800:	80 68       	ori	r24, 0x80	; 128
    8802:	84 83       	std	Z+4, r24	; 0x04
    8804:	74 c0       	rjmp	.+232    	; 0x88ee <f_lseek+0x27c>
					fp->clust = clst;
    8806:	d1 01       	movw	r26, r2
    8808:	52 96       	adiw	r26, 0x12	; 18
    880a:	4d 93       	st	X+, r20
    880c:	5d 93       	st	X+, r21
    880e:	6d 93       	st	X+, r22
    8810:	7c 93       	st	X, r23
    8812:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    8814:	16 96       	adiw	r26, 0x06	; 6
    8816:	8d 91       	ld	r24, X+
    8818:	9d 91       	ld	r25, X+
    881a:	0d 90       	ld	r0, X+
    881c:	bc 91       	ld	r27, X
    881e:	a0 2d       	mov	r26, r0
    8820:	8a 0d       	add	r24, r10
    8822:	9b 1d       	adc	r25, r11
    8824:	ac 1d       	adc	r26, r12
    8826:	bd 1d       	adc	r27, r13
    8828:	f1 01       	movw	r30, r2
    882a:	86 83       	std	Z+6, r24	; 0x06
    882c:	97 83       	std	Z+7, r25	; 0x07
    882e:	a0 87       	std	Z+8, r26	; 0x08
    8830:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    8832:	ea 18       	sub	r14, r10
    8834:	fb 08       	sbc	r15, r11
    8836:	0c 09       	sbc	r16, r12
    8838:	1d 09       	sbc	r17, r13
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    883a:	ae 14       	cp	r10, r14
    883c:	bf 04       	cpc	r11, r15
    883e:	c0 06       	cpc	r12, r16
    8840:	d1 06       	cpc	r13, r17
    8842:	08 f4       	brcc	.+2      	; 0x8846 <f_lseek+0x1d4>
    8844:	b3 cf       	rjmp	.-154    	; 0x87ac <f_lseek+0x13a>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    8846:	f1 01       	movw	r30, r2
    8848:	86 81       	ldd	r24, Z+6	; 0x06
    884a:	97 81       	ldd	r25, Z+7	; 0x07
    884c:	a0 85       	ldd	r26, Z+8	; 0x08
    884e:	b1 85       	ldd	r27, Z+9	; 0x09
    8850:	8e 0d       	add	r24, r14
    8852:	9f 1d       	adc	r25, r15
    8854:	a0 1f       	adc	r26, r16
    8856:	b1 1f       	adc	r27, r17
    8858:	86 83       	std	Z+6, r24	; 0x06
    885a:	97 83       	std	Z+7, r25	; 0x07
    885c:	a0 87       	std	Z+8, r26	; 0x08
    885e:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    8860:	d8 01       	movw	r26, r16
    8862:	c7 01       	movw	r24, r14
    8864:	91 70       	andi	r25, 0x01	; 1
    8866:	a0 70       	andi	r26, 0x00	; 0
    8868:	b0 70       	andi	r27, 0x00	; 0
    886a:	00 97       	sbiw	r24, 0x00	; 0
    886c:	a1 05       	cpc	r26, r1
    886e:	b1 05       	cpc	r27, r1
    8870:	f1 f0       	breq	.+60     	; 0x88ae <f_lseek+0x23c>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    8872:	80 81       	ld	r24, Z
    8874:	91 81       	ldd	r25, Z+1	; 0x01
    8876:	0e 94 9a 3b 	call	0x7734	; 0x7734 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    887a:	61 15       	cp	r22, r1
    887c:	71 05       	cpc	r23, r1
    887e:	81 05       	cpc	r24, r1
    8880:	91 05       	cpc	r25, r1
    8882:	49 f4       	brne	.+18     	; 0x8896 <f_lseek+0x224>
    8884:	d1 01       	movw	r26, r2
    8886:	14 96       	adiw	r26, 0x04	; 4
    8888:	8c 91       	ld	r24, X
    888a:	14 97       	sbiw	r26, 0x04	; 4
    888c:	80 68       	ori	r24, 0x80	; 128
    888e:	14 96       	adiw	r26, 0x04	; 4
    8890:	8c 93       	st	X, r24
    8892:	14 97       	sbiw	r26, 0x04	; 4
    8894:	2c c0       	rjmp	.+88     	; 0x88ee <f_lseek+0x27c>
					nsect += ofs / SS(fp->fs);
    8896:	f9 e0       	ldi	r31, 0x09	; 9
    8898:	16 95       	lsr	r17
    889a:	07 95       	ror	r16
    889c:	f7 94       	ror	r15
    889e:	e7 94       	ror	r14
    88a0:	fa 95       	dec	r31
    88a2:	d1 f7       	brne	.-12     	; 0x8898 <f_lseek+0x226>
    88a4:	e6 0e       	add	r14, r22
    88a6:	f7 1e       	adc	r15, r23
    88a8:	08 1f       	adc	r16, r24
    88aa:	19 1f       	adc	r17, r25
    88ac:	03 c0       	rjmp	.+6      	; 0x88b4 <f_lseek+0x242>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    88ae:	ee 24       	eor	r14, r14
    88b0:	ff 24       	eor	r15, r15
    88b2:	87 01       	movw	r16, r14
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    88b4:	f1 01       	movw	r30, r2
    88b6:	86 81       	ldd	r24, Z+6	; 0x06
    88b8:	97 81       	ldd	r25, Z+7	; 0x07
    88ba:	a0 85       	ldd	r26, Z+8	; 0x08
    88bc:	b1 85       	ldd	r27, Z+9	; 0x09
    88be:	91 70       	andi	r25, 0x01	; 1
    88c0:	a0 70       	andi	r26, 0x00	; 0
    88c2:	b0 70       	andi	r27, 0x00	; 0
    88c4:	00 97       	sbiw	r24, 0x00	; 0
    88c6:	a1 05       	cpc	r26, r1
    88c8:	b1 05       	cpc	r27, r1
    88ca:	a1 f0       	breq	.+40     	; 0x88f4 <f_lseek+0x282>
    88cc:	86 89       	ldd	r24, Z+22	; 0x16
    88ce:	97 89       	ldd	r25, Z+23	; 0x17
    88d0:	a0 8d       	ldd	r26, Z+24	; 0x18
    88d2:	b1 8d       	ldd	r27, Z+25	; 0x19
    88d4:	e8 16       	cp	r14, r24
    88d6:	f9 06       	cpc	r15, r25
    88d8:	0a 07       	cpc	r16, r26
    88da:	1b 07       	cpc	r17, r27
    88dc:	59 f0       	breq	.+22     	; 0x88f4 <f_lseek+0x282>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    88de:	d1 01       	movw	r26, r2
    88e0:	56 96       	adiw	r26, 0x16	; 22
    88e2:	ed 92       	st	X+, r14
    88e4:	fd 92       	st	X+, r15
    88e6:	0d 93       	st	X+, r16
    88e8:	1c 93       	st	X, r17
    88ea:	59 97       	sbiw	r26, 0x19	; 25
    88ec:	03 c0       	rjmp	.+6      	; 0x88f4 <f_lseek+0x282>


	res = validate(fp);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
    88ee:	e2 e0       	ldi	r30, 0x02	; 2
    88f0:	8e 2e       	mov	r8, r30
    88f2:	91 2c       	mov	r9, r1
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    88f4:	c4 01       	movw	r24, r8
    88f6:	28 96       	adiw	r28, 0x08	; 8
    88f8:	e2 e1       	ldi	r30, 0x12	; 18
    88fa:	0c 94 d3 4b 	jmp	0x97a6	; 0x97a6 <__epilogue_restores__>

000088fe <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fil		/* Pointer to the file object */
)
{
    88fe:	a4 e0       	ldi	r26, 0x04	; 4
    8900:	b0 e0       	ldi	r27, 0x00	; 0
    8902:	e5 e8       	ldi	r30, 0x85	; 133
    8904:	f4 e4       	ldi	r31, 0x44	; 68
    8906:	0c 94 bc 4b 	jmp	0x9778	; 0x9778 <__prologue_saves__+0x4>
    890a:	5c 01       	movw	r10, r24
    890c:	7b 01       	movw	r14, r22
    890e:	3a 01       	movw	r6, r20
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    8910:	6c 01       	movw	r12, r24
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fil		/* Pointer to the file object */
)
{
	int n = 0;
    8912:	00 e0       	ldi	r16, 0x00	; 0
    8914:	10 e0       	ldi	r17, 0x00	; 0
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    8916:	08 94       	sec
    8918:	e1 08       	sbc	r14, r1
    891a:	f1 08       	sbc	r15, r1
		f_read(fil, s, 1, &rc);
    891c:	33 e0       	ldi	r19, 0x03	; 3
    891e:	43 2e       	mov	r4, r19
    8920:	51 2c       	mov	r5, r1
    8922:	4c 0e       	add	r4, r28
    8924:	5d 1e       	adc	r5, r29
    8926:	4e 01       	movw	r8, r28
    8928:	08 94       	sec
    892a:	81 1c       	adc	r8, r1
    892c:	91 1c       	adc	r9, r1
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    892e:	16 c0       	rjmp	.+44     	; 0x895c <f_gets+0x5e>
		f_read(fil, s, 1, &rc);
    8930:	c3 01       	movw	r24, r6
    8932:	b4 01       	movw	r22, r8
    8934:	41 e0       	ldi	r20, 0x01	; 1
    8936:	50 e0       	ldi	r21, 0x00	; 0
    8938:	92 01       	movw	r18, r4
    893a:	0e 94 eb 41 	call	0x83d6	; 0x83d6 <f_read>
		if (rc != 1) break;			/* Break on EOF or error */
    893e:	8b 81       	ldd	r24, Y+3	; 0x03
    8940:	9c 81       	ldd	r25, Y+4	; 0x04
    8942:	81 30       	cpi	r24, 0x01	; 1
    8944:	91 05       	cpc	r25, r1
    8946:	69 f4       	brne	.+26     	; 0x8962 <f_gets+0x64>
		c = s[0];
    8948:	89 81       	ldd	r24, Y+1	; 0x01
				}
			}
		}
#endif
#if _USE_STRFUNC >= 2
		if (c == '\r') continue;	/* Strip '\r' */
    894a:	8d 30       	cpi	r24, 0x0D	; 13
    894c:	39 f0       	breq	.+14     	; 0x895c <f_gets+0x5e>
#endif
		*p++ = c;
    894e:	f6 01       	movw	r30, r12
    8950:	81 93       	st	Z+, r24
    8952:	6f 01       	movw	r12, r30
		n++;
    8954:	0f 5f       	subi	r16, 0xFF	; 255
    8956:	1f 4f       	sbci	r17, 0xFF	; 255
		if (c == '\n') break;		/* Break on EOL */
    8958:	8a 30       	cpi	r24, 0x0A	; 10
    895a:	19 f0       	breq	.+6      	; 0x8962 <f_gets+0x64>
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    895c:	0e 15       	cp	r16, r14
    895e:	1f 05       	cpc	r17, r15
    8960:	3c f3       	brlt	.-50     	; 0x8930 <f_gets+0x32>
#endif
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
    8962:	f6 01       	movw	r30, r12
    8964:	10 82       	st	Z, r1
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    8966:	01 15       	cp	r16, r1
    8968:	11 05       	cpc	r17, r1
    896a:	11 f4       	brne	.+4      	; 0x8970 <f_gets+0x72>
    896c:	aa 24       	eor	r10, r10
    896e:	bb 24       	eor	r11, r11
}
    8970:	c5 01       	movw	r24, r10
    8972:	24 96       	adiw	r28, 0x04	; 4
    8974:	e0 e1       	ldi	r30, 0x10	; 16
    8976:	0c 94 d5 4b 	jmp	0x97aa	; 0x97aa <__epilogue_restores__+0x4>

0000897a <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPIE.DATA = dat;
    897a:	e0 ec       	ldi	r30, 0xC0	; 192
    897c:	fa e0       	ldi	r31, 0x0A	; 10
    897e:	83 83       	std	Z+3, r24	; 0x03
	loop_until_bit_is_set(SPIE.STATUS, 7);
    8980:	80 91 c2 0a 	lds	r24, 0x0AC2
    8984:	87 ff       	sbrs	r24, 7
    8986:	fc cf       	rjmp	.-8      	; 0x8980 <xchg_spi+0x6>
	return SPIE.DATA;
    8988:	80 91 c3 0a 	lds	r24, 0x0AC3
}
    898c:	08 95       	ret

0000898e <wait_ready>:
int wait_ready (void)
{
	BYTE d;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
    898e:	82 e3       	ldi	r24, 0x32	; 50
    8990:	80 93 73 24 	sts	0x2473, r24
	do
		d = xchg_spi(0xFF);
    8994:	8f ef       	ldi	r24, 0xFF	; 255
    8996:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>
	while (d != 0xFF && Timer2);
    899a:	8f 3f       	cpi	r24, 0xFF	; 255
    899c:	21 f0       	breq	.+8      	; 0x89a6 <wait_ready+0x18>
    899e:	90 91 73 24 	lds	r25, 0x2473
    89a2:	99 23       	and	r25, r25
    89a4:	b9 f7       	brne	.-18     	; 0x8994 <wait_ready+0x6>

	return (d == 0xFF) ? 1 : 0;
    89a6:	21 e0       	ldi	r18, 0x01	; 1
    89a8:	30 e0       	ldi	r19, 0x00	; 0
    89aa:	8f 3f       	cpi	r24, 0xFF	; 255
    89ac:	11 f0       	breq	.+4      	; 0x89b2 <wait_ready+0x24>
    89ae:	20 e0       	ldi	r18, 0x00	; 0
    89b0:	30 e0       	ldi	r19, 0x00	; 0
}
    89b2:	c9 01       	movw	r24, r18
    89b4:	08 95       	ret

000089b6 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    89b6:	80 e1       	ldi	r24, 0x10	; 16
    89b8:	e0 e8       	ldi	r30, 0x80	; 128
    89ba:	f6 e0       	ldi	r31, 0x06	; 6
    89bc:	85 83       	std	Z+5, r24	; 0x05
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    89be:	8f ef       	ldi	r24, 0xFF	; 255
    89c0:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>
}
    89c4:	08 95       	ret

000089c6 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
    89c6:	80 e1       	ldi	r24, 0x10	; 16
    89c8:	e0 e8       	ldi	r30, 0x80	; 128
    89ca:	f6 e0       	ldi	r31, 0x06	; 6
    89cc:	86 83       	std	Z+6, r24	; 0x06
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    89ce:	8f ef       	ldi	r24, 0xFF	; 255
    89d0:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>

	if (wait_ready()) return 1;	/* OK */
    89d4:	0e 94 c7 44 	call	0x898e	; 0x898e <wait_ready>
    89d8:	00 97       	sbiw	r24, 0x00	; 0
    89da:	29 f4       	brne	.+10     	; 0x89e6 <select+0x20>
	deselect();
    89dc:	0e 94 db 44 	call	0x89b6	; 0x89b6 <deselect>
	return 0;	/* Timeout */
    89e0:	20 e0       	ldi	r18, 0x00	; 0
    89e2:	30 e0       	ldi	r19, 0x00	; 0
    89e4:	02 c0       	rjmp	.+4      	; 0x89ea <select+0x24>
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready()) return 1;	/* OK */
    89e6:	21 e0       	ldi	r18, 0x01	; 1
    89e8:	30 e0       	ldi	r19, 0x00	; 0
	deselect();
	return 0;	/* Timeout */
}
    89ea:	c9 01       	movw	r24, r18
    89ec:	08 95       	ret

000089ee <power_off>:
}

static
void power_off (void)
{
  CS_LOW();        /* Wait for card ready */
    89ee:	80 e1       	ldi	r24, 0x10	; 16
    89f0:	e0 e8       	ldi	r30, 0x80	; 128
    89f2:	f6 e0       	ldi	r31, 0x06	; 6
    89f4:	86 83       	std	Z+6, r24	; 0x06
  wait_ready();
    89f6:	0e 94 c7 44 	call	0x898e	; 0x898e <wait_ready>
  deselect();
    89fa:	0e 94 db 44 	call	0x89b6	; 0x89b6 <deselect>
  Stat |= STA_NOINIT;    /* Set STA_NOINIT */
    89fe:	80 91 a9 23 	lds	r24, 0x23A9
    8a02:	81 60       	ori	r24, 0x01	; 1
    8a04:	80 93 a9 23 	sts	0x23A9, r24
	}
    8a08:	08 95       	ret

00008a0a <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    8a0a:	0f 93       	push	r16
    8a0c:	1f 93       	push	r17
    8a0e:	cf 93       	push	r28
    8a10:	df 93       	push	r29
    8a12:	ec 01       	movw	r28, r24
    8a14:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    8a16:	84 e1       	ldi	r24, 0x14	; 20
    8a18:	80 93 72 24 	sts	0x2472, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    8a1c:	8f ef       	ldi	r24, 0xFF	; 255
    8a1e:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    8a22:	8f 3f       	cpi	r24, 0xFF	; 255
    8a24:	29 f4       	brne	.+10     	; 0x8a30 <rcvr_datablock+0x26>
    8a26:	80 91 72 24 	lds	r24, 0x2472
    8a2a:	88 23       	and	r24, r24
    8a2c:	b9 f7       	brne	.-18     	; 0x8a1c <rcvr_datablock+0x12>
    8a2e:	23 c0       	rjmp	.+70     	; 0x8a76 <rcvr_datablock+0x6c>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    8a30:	8e 3f       	cpi	r24, 0xFE	; 254
    8a32:	09 f5       	brne	.+66     	; 0x8a76 <rcvr_datablock+0x6c>
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block */
)
{
	do {
		SPIE.DATA = 0xFF; loop_until_bit_is_set(SPIE.STATUS,7); *p++ = SPIE.DATA;
    8a34:	e0 ec       	ldi	r30, 0xC0	; 192
    8a36:	fa e0       	ldi	r31, 0x0A	; 10
    8a38:	8f ef       	ldi	r24, 0xFF	; 255
    8a3a:	83 83       	std	Z+3, r24	; 0x03
    8a3c:	90 91 c2 0a 	lds	r25, 0x0AC2
    8a40:	97 ff       	sbrs	r25, 7
    8a42:	fc cf       	rjmp	.-8      	; 0x8a3c <rcvr_datablock+0x32>
    8a44:	90 91 c3 0a 	lds	r25, 0x0AC3
    8a48:	98 83       	st	Y, r25
		SPIE.DATA = 0xFF; loop_until_bit_is_set(SPIE.STATUS,7); *p++ = SPIE.DATA;
    8a4a:	83 83       	std	Z+3, r24	; 0x03
    8a4c:	90 91 c2 0a 	lds	r25, 0x0AC2
    8a50:	97 ff       	sbrs	r25, 7
    8a52:	fc cf       	rjmp	.-8      	; 0x8a4c <rcvr_datablock+0x42>
    8a54:	90 91 c3 0a 	lds	r25, 0x0AC3
    8a58:	99 83       	std	Y+1, r25	; 0x01
	} while (cnt -= 2);
    8a5a:	02 50       	subi	r16, 0x02	; 2
    8a5c:	10 40       	sbci	r17, 0x00	; 0
    8a5e:	11 f0       	breq	.+4      	; 0x8a64 <rcvr_datablock+0x5a>
/*-----------------------------------------------------------------------*/
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static
int rcvr_datablock (
    8a60:	22 96       	adiw	r28, 0x02	; 2
    8a62:	eb cf       	rjmp	.-42     	; 0x8a3a <rcvr_datablock+0x30>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    8a64:	8f ef       	ldi	r24, 0xFF	; 255
    8a66:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>
	xchg_spi(0xFF);
    8a6a:	8f ef       	ldi	r24, 0xFF	; 255
    8a6c:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>

	return 1;						/* Return with success */
    8a70:	21 e0       	ldi	r18, 0x01	; 1
    8a72:	30 e0       	ldi	r19, 0x00	; 0
    8a74:	02 c0       	rjmp	.+4      	; 0x8a7a <rcvr_datablock+0x70>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    8a76:	20 e0       	ldi	r18, 0x00	; 0
    8a78:	30 e0       	ldi	r19, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    8a7a:	c9 01       	movw	r24, r18
    8a7c:	df 91       	pop	r29
    8a7e:	cf 91       	pop	r28
    8a80:	1f 91       	pop	r17
    8a82:	0f 91       	pop	r16
    8a84:	08 95       	ret

00008a86 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    8a86:	df 92       	push	r13
    8a88:	ef 92       	push	r14
    8a8a:	ff 92       	push	r15
    8a8c:	0f 93       	push	r16
    8a8e:	1f 93       	push	r17
    8a90:	18 2f       	mov	r17, r24
    8a92:	04 2f       	mov	r16, r20
    8a94:	f5 2e       	mov	r15, r21
    8a96:	e6 2e       	mov	r14, r22
    8a98:	d7 2e       	mov	r13, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    8a9a:	87 ff       	sbrs	r24, 7
    8a9c:	09 c0       	rjmp	.+18     	; 0x8ab0 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    8a9e:	87 e3       	ldi	r24, 0x37	; 55
    8aa0:	40 e0       	ldi	r20, 0x00	; 0
    8aa2:	50 e0       	ldi	r21, 0x00	; 0
    8aa4:	ba 01       	movw	r22, r20
    8aa6:	0e 94 43 45 	call	0x8a86	; 0x8a86 <send_cmd>
		if (res > 1) return res;
    8aaa:	82 30       	cpi	r24, 0x02	; 2
    8aac:	88 f5       	brcc	.+98     	; 0x8b10 <send_cmd+0x8a>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    8aae:	1f 77       	andi	r17, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
    8ab0:	0e 94 db 44 	call	0x89b6	; 0x89b6 <deselect>
  if (!select()) return 0xFF;
    8ab4:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <select>
    8ab8:	00 97       	sbiw	r24, 0x00	; 0
    8aba:	49 f1       	breq	.+82     	; 0x8b0e <send_cmd+0x88>

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    8abc:	81 2f       	mov	r24, r17
    8abe:	80 64       	ori	r24, 0x40	; 64
    8ac0:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    8ac4:	8d 2d       	mov	r24, r13
    8ac6:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    8aca:	8e 2d       	mov	r24, r14
    8acc:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    8ad0:	8f 2d       	mov	r24, r15
    8ad2:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    8ad6:	80 2f       	mov	r24, r16
    8ad8:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    8adc:	11 23       	and	r17, r17
    8ade:	21 f0       	breq	.+8      	; 0x8ae8 <send_cmd+0x62>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    8ae0:	18 30       	cpi	r17, 0x08	; 8
    8ae2:	21 f0       	breq	.+8      	; 0x8aec <send_cmd+0x66>
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    8ae4:	81 e0       	ldi	r24, 0x01	; 1
    8ae6:	03 c0       	rjmp	.+6      	; 0x8aee <send_cmd+0x68>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    8ae8:	85 e9       	ldi	r24, 0x95	; 149
    8aea:	01 c0       	rjmp	.+2      	; 0x8aee <send_cmd+0x68>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    8aec:	87 e8       	ldi	r24, 0x87	; 135
	xchg_spi(n);
    8aee:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    8af2:	1c 30       	cpi	r17, 0x0C	; 12
    8af4:	19 f4       	brne	.+6      	; 0x8afc <send_cmd+0x76>
    8af6:	8f ef       	ldi	r24, 0xFF	; 255
    8af8:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    8afc:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
    8afe:	8f ef       	ldi	r24, 0xFF	; 255
    8b00:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>
	while ((res & 0x80) && --n);
    8b04:	87 ff       	sbrs	r24, 7
    8b06:	04 c0       	rjmp	.+8      	; 0x8b10 <send_cmd+0x8a>
    8b08:	11 50       	subi	r17, 0x01	; 1
    8b0a:	c9 f7       	brne	.-14     	; 0x8afe <send_cmd+0x78>
    8b0c:	01 c0       	rjmp	.+2      	; 0x8b10 <send_cmd+0x8a>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
  if (!select()) return 0xFF;
    8b0e:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    8b10:	1f 91       	pop	r17
    8b12:	0f 91       	pop	r16
    8b14:	ff 90       	pop	r15
    8b16:	ef 90       	pop	r14
    8b18:	df 90       	pop	r13
    8b1a:	08 95       	ret

00008b1c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    8b1c:	a4 e0       	ldi	r26, 0x04	; 4
    8b1e:	b0 e0       	ldi	r27, 0x00	; 0
    8b20:	e4 e9       	ldi	r30, 0x94	; 148
    8b22:	f5 e4       	ldi	r31, 0x45	; 69
    8b24:	0c 94 c4 4b 	jmp	0x9788	; 0x9788 <__prologue_saves__+0x14>
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    8b28:	88 23       	and	r24, r24
    8b2a:	09 f0       	breq	.+2      	; 0x8b2e <disk_initialize+0x12>
    8b2c:	ac c0       	rjmp	.+344    	; 0x8c86 <disk_initialize+0x16a>
	//power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    8b2e:	80 91 a9 23 	lds	r24, 0x23A9
    8b32:	81 fd       	sbrc	r24, 1
    8b34:	a5 c0       	rjmp	.+330    	; 0x8c80 <disk_initialize+0x164>
}

static
void power_on (void)
{
  for (Timer1 = 3; Timer1; );  /* Wait for 30ms */
    8b36:	83 e0       	ldi	r24, 0x03	; 3
    8b38:	80 93 72 24 	sts	0x2472, r24
    8b3c:	80 91 72 24 	lds	r24, 0x2472
    8b40:	88 23       	and	r24, r24
    8b42:	e1 f7       	brne	.-8      	; 0x8b3c <disk_initialize+0x20>
  SPIE.CTRL = 0x53;      /* Enable Master Mode, clkper/128 */
    8b44:	83 e5       	ldi	r24, 0x53	; 83
    8b46:	80 93 c0 0a 	sts	0x0AC0, r24
	if (drv) return STA_NOINIT;			/* Supports only single drive */
	//power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
 //CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc));  /* 16MHz */
	FCLK_SLOW();
    8b4a:	80 93 c0 0a 	sts	0x0AC0, r24
    8b4e:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    8b50:	8f ef       	ldi	r24, 0xFF	; 255
    8b52:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>
    8b56:	11 50       	subi	r17, 0x01	; 1
    8b58:	d9 f7       	brne	.-10     	; 0x8b50 <disk_initialize+0x34>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    8b5a:	80 e0       	ldi	r24, 0x00	; 0
    8b5c:	40 e0       	ldi	r20, 0x00	; 0
    8b5e:	50 e0       	ldi	r21, 0x00	; 0
    8b60:	ba 01       	movw	r22, r20
    8b62:	0e 94 43 45 	call	0x8a86	; 0x8a86 <send_cmd>
    8b66:	81 30       	cpi	r24, 0x01	; 1
    8b68:	09 f0       	breq	.+2      	; 0x8b6c <disk_initialize+0x50>
    8b6a:	78 c0       	rjmp	.+240    	; 0x8c5c <disk_initialize+0x140>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    8b6c:	84 e6       	ldi	r24, 0x64	; 100
    8b6e:	80 93 72 24 	sts	0x2472, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    8b72:	88 e0       	ldi	r24, 0x08	; 8
    8b74:	4a ea       	ldi	r20, 0xAA	; 170
    8b76:	51 e0       	ldi	r21, 0x01	; 1
    8b78:	60 e0       	ldi	r22, 0x00	; 0
    8b7a:	70 e0       	ldi	r23, 0x00	; 0
    8b7c:	0e 94 43 45 	call	0x8a86	; 0x8a86 <send_cmd>
    8b80:	81 30       	cpi	r24, 0x01	; 1
    8b82:	09 f0       	breq	.+2      	; 0x8b86 <disk_initialize+0x6a>
    8b84:	42 c0       	rjmp	.+132    	; 0x8c0a <disk_initialize+0xee>
    8b86:	8e 01       	movw	r16, r28
    8b88:	0f 5f       	subi	r16, 0xFF	; 255
    8b8a:	1f 4f       	sbci	r17, 0xFF	; 255

/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
    8b8c:	85 e0       	ldi	r24, 0x05	; 5
    8b8e:	e8 2e       	mov	r14, r24
    8b90:	f1 2c       	mov	r15, r1
    8b92:	ec 0e       	add	r14, r28
    8b94:	fd 1e       	adc	r15, r29
    8b96:	68 01       	movw	r12, r16

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    8b98:	8f ef       	ldi	r24, 0xFF	; 255
    8b9a:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>
    8b9e:	f6 01       	movw	r30, r12
    8ba0:	81 93       	st	Z+, r24
    8ba2:	6f 01       	movw	r12, r30
    8ba4:	ee 15       	cp	r30, r14
    8ba6:	ff 05       	cpc	r31, r15
    8ba8:	b9 f7       	brne	.-18     	; 0x8b98 <disk_initialize+0x7c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    8baa:	8b 81       	ldd	r24, Y+3	; 0x03
    8bac:	81 30       	cpi	r24, 0x01	; 1
    8bae:	09 f0       	breq	.+2      	; 0x8bb2 <disk_initialize+0x96>
    8bb0:	55 c0       	rjmp	.+170    	; 0x8c5c <disk_initialize+0x140>
    8bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    8bb4:	8a 3a       	cpi	r24, 0xAA	; 170
    8bb6:	09 f0       	breq	.+2      	; 0x8bba <disk_initialize+0x9e>
    8bb8:	51 c0       	rjmp	.+162    	; 0x8c5c <disk_initialize+0x140>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    8bba:	80 91 72 24 	lds	r24, 0x2472
    8bbe:	88 23       	and	r24, r24
    8bc0:	49 f0       	breq	.+18     	; 0x8bd4 <disk_initialize+0xb8>
    8bc2:	89 ea       	ldi	r24, 0xA9	; 169
    8bc4:	40 e0       	ldi	r20, 0x00	; 0
    8bc6:	50 e0       	ldi	r21, 0x00	; 0
    8bc8:	60 e0       	ldi	r22, 0x00	; 0
    8bca:	70 e4       	ldi	r23, 0x40	; 64
    8bcc:	0e 94 43 45 	call	0x8a86	; 0x8a86 <send_cmd>
    8bd0:	88 23       	and	r24, r24
    8bd2:	99 f7       	brne	.-26     	; 0x8bba <disk_initialize+0x9e>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    8bd4:	80 91 72 24 	lds	r24, 0x2472
    8bd8:	88 23       	and	r24, r24
    8bda:	09 f4       	brne	.+2      	; 0x8bde <disk_initialize+0xc2>
    8bdc:	3f c0       	rjmp	.+126    	; 0x8c5c <disk_initialize+0x140>
    8bde:	8a e3       	ldi	r24, 0x3A	; 58
    8be0:	40 e0       	ldi	r20, 0x00	; 0
    8be2:	50 e0       	ldi	r21, 0x00	; 0
    8be4:	ba 01       	movw	r22, r20
    8be6:	0e 94 43 45 	call	0x8a86	; 0x8a86 <send_cmd>
    8bea:	88 23       	and	r24, r24
    8bec:	b9 f5       	brne	.+110    	; 0x8c5c <disk_initialize+0x140>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    8bee:	8f ef       	ldi	r24, 0xFF	; 255
    8bf0:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>
    8bf4:	f8 01       	movw	r30, r16
    8bf6:	81 93       	st	Z+, r24
    8bf8:	8f 01       	movw	r16, r30
    8bfa:	ee 15       	cp	r30, r14
    8bfc:	ff 05       	cpc	r31, r15
    8bfe:	b9 f7       	brne	.-18     	; 0x8bee <disk_initialize+0xd2>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    8c00:	89 81       	ldd	r24, Y+1	; 0x01
    8c02:	86 ff       	sbrs	r24, 6
    8c04:	29 c0       	rjmp	.+82     	; 0x8c58 <disk_initialize+0x13c>
    8c06:	0c e0       	ldi	r16, 0x0C	; 12
    8c08:	2a c0       	rjmp	.+84     	; 0x8c5e <disk_initialize+0x142>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    8c0a:	89 ea       	ldi	r24, 0xA9	; 169
    8c0c:	40 e0       	ldi	r20, 0x00	; 0
    8c0e:	50 e0       	ldi	r21, 0x00	; 0
    8c10:	ba 01       	movw	r22, r20
    8c12:	0e 94 43 45 	call	0x8a86	; 0x8a86 <send_cmd>
    8c16:	82 30       	cpi	r24, 0x02	; 2
    8c18:	18 f4       	brcc	.+6      	; 0x8c20 <disk_initialize+0x104>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    8c1a:	02 e0       	ldi	r16, 0x02	; 2
    8c1c:	19 ea       	ldi	r17, 0xA9	; 169
    8c1e:	02 c0       	rjmp	.+4      	; 0x8c24 <disk_initialize+0x108>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    8c20:	01 e0       	ldi	r16, 0x01	; 1
    8c22:	11 e0       	ldi	r17, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    8c24:	80 91 72 24 	lds	r24, 0x2472
    8c28:	88 23       	and	r24, r24
    8c2a:	41 f0       	breq	.+16     	; 0x8c3c <disk_initialize+0x120>
    8c2c:	81 2f       	mov	r24, r17
    8c2e:	40 e0       	ldi	r20, 0x00	; 0
    8c30:	50 e0       	ldi	r21, 0x00	; 0
    8c32:	ba 01       	movw	r22, r20
    8c34:	0e 94 43 45 	call	0x8a86	; 0x8a86 <send_cmd>
    8c38:	88 23       	and	r24, r24
    8c3a:	a1 f7       	brne	.-24     	; 0x8c24 <disk_initialize+0x108>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    8c3c:	80 91 72 24 	lds	r24, 0x2472
    8c40:	88 23       	and	r24, r24
    8c42:	61 f0       	breq	.+24     	; 0x8c5c <disk_initialize+0x140>
    8c44:	80 e1       	ldi	r24, 0x10	; 16
    8c46:	40 e0       	ldi	r20, 0x00	; 0
    8c48:	52 e0       	ldi	r21, 0x02	; 2
    8c4a:	60 e0       	ldi	r22, 0x00	; 0
    8c4c:	70 e0       	ldi	r23, 0x00	; 0
    8c4e:	0e 94 43 45 	call	0x8a86	; 0x8a86 <send_cmd>
    8c52:	88 23       	and	r24, r24
    8c54:	19 f4       	brne	.+6      	; 0x8c5c <disk_initialize+0x140>
    8c56:	03 c0       	rjmp	.+6      	; 0x8c5e <disk_initialize+0x142>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    8c58:	04 e0       	ldi	r16, 0x04	; 4
    8c5a:	01 c0       	rjmp	.+2      	; 0x8c5e <disk_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    8c5c:	00 e0       	ldi	r16, 0x00	; 0
		}
	}
	CardType = ty;
    8c5e:	00 93 74 24 	sts	0x2474, r16
	deselect();
    8c62:	0e 94 db 44 	call	0x89b6	; 0x89b6 <deselect>

	if (ty) {			/* Initialization succeded */
    8c66:	00 23       	and	r16, r16
    8c68:	49 f0       	breq	.+18     	; 0x8c7c <disk_initialize+0x160>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    8c6a:	80 91 a9 23 	lds	r24, 0x23A9
    8c6e:	8e 7f       	andi	r24, 0xFE	; 254
    8c70:	80 93 a9 23 	sts	0x23A9, r24
		FCLK_FAST();
    8c74:	80 ed       	ldi	r24, 0xD0	; 208
    8c76:	80 93 c0 0a 	sts	0x0AC0, r24
    8c7a:	02 c0       	rjmp	.+4      	; 0x8c80 <disk_initialize+0x164>
	} else {			/* Initialization failed */
		power_off();
    8c7c:	0e 94 f7 44 	call	0x89ee	; 0x89ee <power_off>
	}

 //CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc));  /* 32MHz */
	return Stat;
    8c80:	80 91 a9 23 	lds	r24, 0x23A9
    8c84:	01 c0       	rjmp	.+2      	; 0x8c88 <disk_initialize+0x16c>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (drv) return STA_NOINIT;			/* Supports only single drive */
    8c86:	81 e0       	ldi	r24, 0x01	; 1
		power_off();
	}

 //CCPWrite(&CLK.PSCTRL, (CLK_PSADIV_1_gc | CLK_PSBCDIV_1_1_gc));  /* 32MHz */
	return Stat;
}
    8c88:	24 96       	adiw	r28, 0x04	; 4
    8c8a:	e8 e0       	ldi	r30, 0x08	; 8
    8c8c:	0c 94 dd 4b 	jmp	0x97ba	; 0x97ba <__epilogue_restores__+0x14>

00008c90 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    8c90:	88 23       	and	r24, r24
    8c92:	19 f4       	brne	.+6      	; 0x8c9a <disk_status+0xa>
	return Stat;
    8c94:	80 91 a9 23 	lds	r24, 0x23A9
    8c98:	08 95       	ret

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
    8c9a:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    8c9c:	08 95       	ret

00008c9e <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    8c9e:	0f 93       	push	r16
    8ca0:	cf 93       	push	r28
    8ca2:	df 93       	push	r29
    8ca4:	eb 01       	movw	r28, r22
    8ca6:	ba 01       	movw	r22, r20
    8ca8:	a9 01       	movw	r20, r18
	if (drv || !count) return RES_PARERR;
    8caa:	88 23       	and	r24, r24
    8cac:	09 f0       	breq	.+2      	; 0x8cb0 <disk_read+0x12>
    8cae:	43 c0       	rjmp	.+134    	; 0x8d36 <disk_read+0x98>
    8cb0:	00 23       	and	r16, r16
    8cb2:	09 f4       	brne	.+2      	; 0x8cb6 <disk_read+0x18>
    8cb4:	40 c0       	rjmp	.+128    	; 0x8d36 <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    8cb6:	80 91 a9 23 	lds	r24, 0x23A9
    8cba:	80 fd       	sbrc	r24, 0
    8cbc:	3f c0       	rjmp	.+126    	; 0x8d3c <disk_read+0x9e>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    8cbe:	80 91 74 24 	lds	r24, 0x2474
    8cc2:	83 fd       	sbrc	r24, 3
    8cc4:	07 c0       	rjmp	.+14     	; 0x8cd4 <disk_read+0x36>
    8cc6:	99 e0       	ldi	r25, 0x09	; 9
    8cc8:	44 0f       	add	r20, r20
    8cca:	55 1f       	adc	r21, r21
    8ccc:	66 1f       	adc	r22, r22
    8cce:	77 1f       	adc	r23, r23
    8cd0:	9a 95       	dec	r25
    8cd2:	d1 f7       	brne	.-12     	; 0x8cc8 <disk_read+0x2a>

	if (count == 1) {	/* Single block read */
    8cd4:	01 30       	cpi	r16, 0x01	; 1
    8cd6:	69 f4       	brne	.+26     	; 0x8cf2 <disk_read+0x54>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    8cd8:	81 e1       	ldi	r24, 0x11	; 17
    8cda:	0e 94 43 45 	call	0x8a86	; 0x8a86 <send_cmd>
    8cde:	88 23       	and	r24, r24
    8ce0:	09 f5       	brne	.+66     	; 0x8d24 <disk_read+0x86>
			&& rcvr_datablock(buff, 512))
    8ce2:	ce 01       	movw	r24, r28
    8ce4:	60 e0       	ldi	r22, 0x00	; 0
    8ce6:	72 e0       	ldi	r23, 0x02	; 2
    8ce8:	0e 94 05 45 	call	0x8a0a	; 0x8a0a <rcvr_datablock>
    8cec:	00 97       	sbiw	r24, 0x00	; 0
    8cee:	c9 f4       	brne	.+50     	; 0x8d22 <disk_read+0x84>
    8cf0:	19 c0       	rjmp	.+50     	; 0x8d24 <disk_read+0x86>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    8cf2:	82 e1       	ldi	r24, 0x12	; 18
    8cf4:	0e 94 43 45 	call	0x8a86	; 0x8a86 <send_cmd>
    8cf8:	88 23       	and	r24, r24
    8cfa:	a1 f4       	brne	.+40     	; 0x8d24 <disk_read+0x86>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    8cfc:	ce 01       	movw	r24, r28
    8cfe:	60 e0       	ldi	r22, 0x00	; 0
    8d00:	72 e0       	ldi	r23, 0x02	; 2
    8d02:	0e 94 05 45 	call	0x8a0a	; 0x8a0a <rcvr_datablock>
    8d06:	00 97       	sbiw	r24, 0x00	; 0
    8d08:	29 f0       	breq	.+10     	; 0x8d14 <disk_read+0x76>
				buff += 512;
			} while (--count);
    8d0a:	01 50       	subi	r16, 0x01	; 1
    8d0c:	19 f0       	breq	.+6      	; 0x8d14 <disk_read+0x76>
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
    8d0e:	c0 50       	subi	r28, 0x00	; 0
    8d10:	de 4f       	sbci	r29, 0xFE	; 254
    8d12:	f4 cf       	rjmp	.-24     	; 0x8cfc <disk_read+0x5e>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    8d14:	8c e0       	ldi	r24, 0x0C	; 12
    8d16:	40 e0       	ldi	r20, 0x00	; 0
    8d18:	50 e0       	ldi	r21, 0x00	; 0
    8d1a:	ba 01       	movw	r22, r20
    8d1c:	0e 94 43 45 	call	0x8a86	; 0x8a86 <send_cmd>
    8d20:	01 c0       	rjmp	.+2      	; 0x8d24 <disk_read+0x86>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block read */
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
			&& rcvr_datablock(buff, 512))
			count = 0;
    8d22:	00 e0       	ldi	r16, 0x00	; 0
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
    8d24:	0e 94 db 44 	call	0x89b6	; 0x89b6 <deselect>

	return count ? RES_ERROR : RES_OK;
    8d28:	21 e0       	ldi	r18, 0x01	; 1
    8d2a:	30 e0       	ldi	r19, 0x00	; 0
    8d2c:	00 23       	and	r16, r16
    8d2e:	41 f4       	brne	.+16     	; 0x8d40 <disk_read+0xa2>
    8d30:	20 e0       	ldi	r18, 0x00	; 0
    8d32:	30 e0       	ldi	r19, 0x00	; 0
    8d34:	05 c0       	rjmp	.+10     	; 0x8d40 <disk_read+0xa2>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
    8d36:	24 e0       	ldi	r18, 0x04	; 4
    8d38:	30 e0       	ldi	r19, 0x00	; 0
    8d3a:	02 c0       	rjmp	.+4      	; 0x8d40 <disk_read+0xa2>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    8d3c:	23 e0       	ldi	r18, 0x03	; 3
    8d3e:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    8d40:	c9 01       	movw	r24, r18
    8d42:	df 91       	pop	r29
    8d44:	cf 91       	pop	r28
    8d46:	0f 91       	pop	r16
    8d48:	08 95       	ret

00008d4a <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    8d4a:	a0 e1       	ldi	r26, 0x10	; 16
    8d4c:	b0 e0       	ldi	r27, 0x00	; 0
    8d4e:	eb ea       	ldi	r30, 0xAB	; 171
    8d50:	f6 e4       	ldi	r31, 0x46	; 70
    8d52:	0c 94 c6 4b 	jmp	0x978c	; 0x978c <__prologue_saves__+0x18>
    8d56:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (drv) return RES_PARERR;
    8d58:	88 23       	and	r24, r24
    8d5a:	09 f0       	breq	.+2      	; 0x8d5e <disk_ioctl+0x14>
    8d5c:	5e c1       	rjmp	.+700    	; 0x901a <disk_ioctl+0x2d0>
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
    8d5e:	7a 01       	movw	r14, r20

	if (drv) return RES_PARERR;

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
    8d60:	65 30       	cpi	r22, 0x05	; 5
    8d62:	81 f4       	brne	.+32     	; 0x8d84 <disk_ioctl+0x3a>
		switch (ptr[0]) {
    8d64:	fa 01       	movw	r30, r20
    8d66:	80 81       	ld	r24, Z
    8d68:	88 23       	and	r24, r24
    8d6a:	21 f0       	breq	.+8      	; 0x8d74 <disk_ioctl+0x2a>
    8d6c:	81 30       	cpi	r24, 0x01	; 1
    8d6e:	09 f0       	breq	.+2      	; 0x8d72 <disk_ioctl+0x28>
    8d70:	54 c1       	rjmp	.+680    	; 0x901a <disk_ioctl+0x2d0>
    8d72:	03 c0       	rjmp	.+6      	; 0x8d7a <disk_ioctl+0x30>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
    8d74:	0e 94 f7 44 	call	0x89ee	; 0x89ee <power_off>
    8d78:	02 c0       	rjmp	.+4      	; 0x8d7e <disk_ioctl+0x34>
			res = RES_OK;
			break;
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
    8d7a:	fa 01       	movw	r30, r20
    8d7c:	81 83       	std	Z+1, r24	; 0x01
			res = RES_OK;
    8d7e:	00 e0       	ldi	r16, 0x00	; 0
    8d80:	10 e0       	ldi	r17, 0x00	; 0
			break;
    8d82:	50 c1       	rjmp	.+672    	; 0x9024 <disk_ioctl+0x2da>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    8d84:	80 91 a9 23 	lds	r24, 0x23A9
    8d88:	80 fd       	sbrc	r24, 0
    8d8a:	4a c1       	rjmp	.+660    	; 0x9020 <disk_ioctl+0x2d6>

		switch (ctrl) {
    8d8c:	e6 2f       	mov	r30, r22
    8d8e:	f0 e0       	ldi	r31, 0x00	; 0
    8d90:	ef 30       	cpi	r30, 0x0F	; 15
    8d92:	f1 05       	cpc	r31, r1
    8d94:	08 f0       	brcs	.+2      	; 0x8d98 <disk_ioctl+0x4e>
    8d96:	36 c1       	rjmp	.+620    	; 0x9004 <disk_ioctl+0x2ba>
    8d98:	e6 5f       	subi	r30, 0xF6	; 246
    8d9a:	fe 4f       	sbci	r31, 0xFE	; 254
    8d9c:	0c 94 eb 4b 	jmp	0x97d6	; 0x97d6 <__tablejump2__>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) {
    8da0:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <select>
    8da4:	00 97       	sbiw	r24, 0x00	; 0
    8da6:	09 f4       	brne	.+2      	; 0x8daa <disk_ioctl+0x60>
    8da8:	30 c1       	rjmp	.+608    	; 0x900a <disk_ioctl+0x2c0>
				deselect();
    8daa:	0e 94 db 44 	call	0x89b6	; 0x89b6 <deselect>
    8dae:	30 c1       	rjmp	.+608    	; 0x9010 <disk_ioctl+0x2c6>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    8db0:	89 e0       	ldi	r24, 0x09	; 9
    8db2:	40 e0       	ldi	r20, 0x00	; 0
    8db4:	50 e0       	ldi	r21, 0x00	; 0
    8db6:	ba 01       	movw	r22, r20
    8db8:	0e 94 43 45 	call	0x8a86	; 0x8a86 <send_cmd>
    8dbc:	88 23       	and	r24, r24
    8dbe:	09 f0       	breq	.+2      	; 0x8dc2 <disk_ioctl+0x78>
    8dc0:	24 c1       	rjmp	.+584    	; 0x900a <disk_ioctl+0x2c0>
    8dc2:	ce 01       	movw	r24, r28
    8dc4:	01 96       	adiw	r24, 0x01	; 1
    8dc6:	60 e1       	ldi	r22, 0x10	; 16
    8dc8:	70 e0       	ldi	r23, 0x00	; 0
    8dca:	0e 94 05 45 	call	0x8a0a	; 0x8a0a <rcvr_datablock>
    8dce:	00 97       	sbiw	r24, 0x00	; 0
    8dd0:	09 f4       	brne	.+2      	; 0x8dd4 <disk_ioctl+0x8a>
    8dd2:	1b c1       	rjmp	.+566    	; 0x900a <disk_ioctl+0x2c0>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    8dd4:	99 81       	ldd	r25, Y+1	; 0x01
    8dd6:	92 95       	swap	r25
    8dd8:	96 95       	lsr	r25
    8dda:	96 95       	lsr	r25
    8ddc:	93 70       	andi	r25, 0x03	; 3
    8dde:	88 85       	ldd	r24, Y+8	; 0x08
    8de0:	49 85       	ldd	r20, Y+9	; 0x09
    8de2:	5a 85       	ldd	r21, Y+10	; 0x0a
    8de4:	91 30       	cpi	r25, 0x01	; 1
    8de6:	f9 f4       	brne	.+62     	; 0x8e26 <disk_ioctl+0xdc>
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    8de8:	90 e0       	ldi	r25, 0x00	; 0
    8dea:	a0 e0       	ldi	r26, 0x00	; 0
    8dec:	b0 e0       	ldi	r27, 0x00	; 0
    8dee:	8f 73       	andi	r24, 0x3F	; 63
    8df0:	90 70       	andi	r25, 0x00	; 0
    8df2:	a0 70       	andi	r26, 0x00	; 0
    8df4:	b0 70       	andi	r27, 0x00	; 0
    8df6:	dc 01       	movw	r26, r24
    8df8:	99 27       	eor	r25, r25
    8dfa:	88 27       	eor	r24, r24
    8dfc:	01 96       	adiw	r24, 0x01	; 1
    8dfe:	a1 1d       	adc	r26, r1
    8e00:	b1 1d       	adc	r27, r1
    8e02:	34 2f       	mov	r19, r20
    8e04:	20 e0       	ldi	r18, 0x00	; 0
    8e06:	25 0f       	add	r18, r21
    8e08:	31 1d       	adc	r19, r1
    8e0a:	40 e0       	ldi	r20, 0x00	; 0
    8e0c:	50 e0       	ldi	r21, 0x00	; 0
    8e0e:	82 0f       	add	r24, r18
    8e10:	93 1f       	adc	r25, r19
    8e12:	a4 1f       	adc	r26, r20
    8e14:	b5 1f       	adc	r27, r21
					*(DWORD*)buff = csize << 10;
    8e16:	2a e0       	ldi	r18, 0x0A	; 10
    8e18:	88 0f       	add	r24, r24
    8e1a:	99 1f       	adc	r25, r25
    8e1c:	aa 1f       	adc	r26, r26
    8e1e:	bb 1f       	adc	r27, r27
    8e20:	2a 95       	dec	r18
    8e22:	d1 f7       	brne	.-12     	; 0x8e18 <disk_ioctl+0xce>
    8e24:	af c0       	rjmp	.+350    	; 0x8f84 <disk_ioctl+0x23a>
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    8e26:	42 95       	swap	r20
    8e28:	46 95       	lsr	r20
    8e2a:	46 95       	lsr	r20
    8e2c:	43 70       	andi	r20, 0x03	; 3
    8e2e:	90 e0       	ldi	r25, 0x00	; 0
    8e30:	88 0f       	add	r24, r24
    8e32:	99 1f       	adc	r25, r25
    8e34:	88 0f       	add	r24, r24
    8e36:	99 1f       	adc	r25, r25
    8e38:	84 0f       	add	r24, r20
    8e3a:	91 1d       	adc	r25, r1
    8e3c:	01 96       	adiw	r24, 0x01	; 1
    8e3e:	2f 81       	ldd	r18, Y+7	; 0x07
    8e40:	30 e0       	ldi	r19, 0x00	; 0
    8e42:	23 70       	andi	r18, 0x03	; 3
    8e44:	30 70       	andi	r19, 0x00	; 0
    8e46:	32 2f       	mov	r19, r18
    8e48:	22 27       	eor	r18, r18
    8e4a:	33 0f       	add	r19, r19
    8e4c:	33 0f       	add	r19, r19
    8e4e:	82 0f       	add	r24, r18
    8e50:	93 1f       	adc	r25, r19
    8e52:	a0 e0       	ldi	r26, 0x00	; 0
    8e54:	b0 e0       	ldi	r27, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    8e56:	2e 81       	ldd	r18, Y+6	; 0x06
    8e58:	2f 70       	andi	r18, 0x0F	; 15
    8e5a:	4b 85       	ldd	r20, Y+11	; 0x0b
    8e5c:	44 1f       	adc	r20, r20
    8e5e:	44 27       	eor	r20, r20
    8e60:	44 1f       	adc	r20, r20
    8e62:	24 0f       	add	r18, r20
    8e64:	2e 5f       	subi	r18, 0xFE	; 254
    8e66:	35 2f       	mov	r19, r21
    8e68:	33 70       	andi	r19, 0x03	; 3
    8e6a:	33 0f       	add	r19, r19
    8e6c:	23 0f       	add	r18, r19
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = csize << (n - 9);
    8e6e:	30 e0       	ldi	r19, 0x00	; 0
    8e70:	29 50       	subi	r18, 0x09	; 9
    8e72:	30 40       	sbci	r19, 0x00	; 0
    8e74:	2d c0       	rjmp	.+90     	; 0x8ed0 <disk_ioctl+0x186>
				res = RES_OK;
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
    8e76:	80 e0       	ldi	r24, 0x00	; 0
    8e78:	92 e0       	ldi	r25, 0x02	; 2
    8e7a:	fa 01       	movw	r30, r20
    8e7c:	80 83       	st	Z, r24
    8e7e:	91 83       	std	Z+1, r25	; 0x01
    8e80:	c7 c0       	rjmp	.+398    	; 0x9010 <disk_ioctl+0x2c6>
			res = RES_OK;
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
    8e82:	e0 90 74 24 	lds	r14, 0x2474
    8e86:	e2 fe       	sbrs	r14, 2
    8e88:	2b c0       	rjmp	.+86     	; 0x8ee0 <disk_ioctl+0x196>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    8e8a:	8d e8       	ldi	r24, 0x8D	; 141
    8e8c:	40 e0       	ldi	r20, 0x00	; 0
    8e8e:	50 e0       	ldi	r21, 0x00	; 0
    8e90:	ba 01       	movw	r22, r20
    8e92:	0e 94 43 45 	call	0x8a86	; 0x8a86 <send_cmd>
    8e96:	88 23       	and	r24, r24
    8e98:	09 f0       	breq	.+2      	; 0x8e9c <disk_ioctl+0x152>
    8e9a:	b7 c0       	rjmp	.+366    	; 0x900a <disk_ioctl+0x2c0>
					xchg_spi(0xFF);
    8e9c:	8f ef       	ldi	r24, 0xFF	; 255
    8e9e:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    8ea2:	ce 01       	movw	r24, r28
    8ea4:	01 96       	adiw	r24, 0x01	; 1
    8ea6:	60 e1       	ldi	r22, 0x10	; 16
    8ea8:	70 e0       	ldi	r23, 0x00	; 0
    8eaa:	0e 94 05 45 	call	0x8a0a	; 0x8a0a <rcvr_datablock>
    8eae:	00 97       	sbiw	r24, 0x00	; 0
    8eb0:	09 f4       	brne	.+2      	; 0x8eb4 <disk_ioctl+0x16a>
    8eb2:	ab c0       	rjmp	.+342    	; 0x900a <disk_ioctl+0x2c0>
    8eb4:	f0 e3       	ldi	r31, 0x30	; 48
    8eb6:	ef 2e       	mov	r14, r31
						for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    8eb8:	8f ef       	ldi	r24, 0xFF	; 255
    8eba:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>
    8ebe:	ea 94       	dec	r14
    8ec0:	d9 f7       	brne	.-10     	; 0x8eb8 <disk_ioctl+0x16e>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    8ec2:	2b 85       	ldd	r18, Y+11	; 0x0b
    8ec4:	22 95       	swap	r18
    8ec6:	2f 70       	andi	r18, 0x0F	; 15
    8ec8:	80 e1       	ldi	r24, 0x10	; 16
    8eca:	90 e0       	ldi	r25, 0x00	; 0
    8ecc:	a0 e0       	ldi	r26, 0x00	; 0
    8ece:	b0 e0       	ldi	r27, 0x00	; 0
    8ed0:	04 c0       	rjmp	.+8      	; 0x8eda <disk_ioctl+0x190>
    8ed2:	88 0f       	add	r24, r24
    8ed4:	99 1f       	adc	r25, r25
    8ed6:	aa 1f       	adc	r26, r26
    8ed8:	bb 1f       	adc	r27, r27
    8eda:	2a 95       	dec	r18
    8edc:	d2 f7       	brpl	.-12     	; 0x8ed2 <disk_ioctl+0x188>
    8ede:	52 c0       	rjmp	.+164    	; 0x8f84 <disk_ioctl+0x23a>
						res = RES_OK;
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    8ee0:	89 e0       	ldi	r24, 0x09	; 9
    8ee2:	40 e0       	ldi	r20, 0x00	; 0
    8ee4:	50 e0       	ldi	r21, 0x00	; 0
    8ee6:	ba 01       	movw	r22, r20
    8ee8:	0e 94 43 45 	call	0x8a86	; 0x8a86 <send_cmd>
    8eec:	88 23       	and	r24, r24
    8eee:	09 f0       	breq	.+2      	; 0x8ef2 <disk_ioctl+0x1a8>
    8ef0:	8c c0       	rjmp	.+280    	; 0x900a <disk_ioctl+0x2c0>
    8ef2:	ce 01       	movw	r24, r28
    8ef4:	01 96       	adiw	r24, 0x01	; 1
    8ef6:	60 e1       	ldi	r22, 0x10	; 16
    8ef8:	70 e0       	ldi	r23, 0x00	; 0
    8efa:	0e 94 05 45 	call	0x8a0a	; 0x8a0a <rcvr_datablock>
    8efe:	00 97       	sbiw	r24, 0x00	; 0
    8f00:	09 f4       	brne	.+2      	; 0x8f04 <disk_ioctl+0x1ba>
    8f02:	83 c0       	rjmp	.+262    	; 0x900a <disk_ioctl+0x2c0>
    8f04:	4b 85       	ldd	r20, Y+11	; 0x0b
    8f06:	8c 85       	ldd	r24, Y+12	; 0x0c
					if (CardType & CT_SD1) {	/* SDv1 */
    8f08:	e1 fe       	sbrs	r14, 1
    8f0a:	1a c0       	rjmp	.+52     	; 0x8f40 <disk_ioctl+0x1f6>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    8f0c:	88 1f       	adc	r24, r24
    8f0e:	88 27       	eor	r24, r24
    8f10:	88 1f       	adc	r24, r24
    8f12:	90 e0       	ldi	r25, 0x00	; 0
    8f14:	01 96       	adiw	r24, 0x01	; 1
    8f16:	50 e0       	ldi	r21, 0x00	; 0
    8f18:	4f 73       	andi	r20, 0x3F	; 63
    8f1a:	50 70       	andi	r21, 0x00	; 0
    8f1c:	44 0f       	add	r20, r20
    8f1e:	55 1f       	adc	r21, r21
    8f20:	84 0f       	add	r24, r20
    8f22:	95 1f       	adc	r25, r21
    8f24:	2e 85       	ldd	r18, Y+14	; 0x0e
    8f26:	22 95       	swap	r18
    8f28:	26 95       	lsr	r18
    8f2a:	26 95       	lsr	r18
    8f2c:	23 70       	andi	r18, 0x03	; 3
    8f2e:	30 e0       	ldi	r19, 0x00	; 0
    8f30:	21 50       	subi	r18, 0x01	; 1
    8f32:	30 40       	sbci	r19, 0x00	; 0
    8f34:	02 c0       	rjmp	.+4      	; 0x8f3a <disk_ioctl+0x1f0>
    8f36:	88 0f       	add	r24, r24
    8f38:	99 1f       	adc	r25, r25
    8f3a:	2a 95       	dec	r18
    8f3c:	e2 f7       	brpl	.-8      	; 0x8f36 <disk_ioctl+0x1ec>
    8f3e:	20 c0       	rjmp	.+64     	; 0x8f80 <disk_ioctl+0x236>
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    8f40:	28 2f       	mov	r18, r24
    8f42:	30 e0       	ldi	r19, 0x00	; 0
    8f44:	23 70       	andi	r18, 0x03	; 3
    8f46:	30 70       	andi	r19, 0x00	; 0
    8f48:	73 e0       	ldi	r23, 0x03	; 3
    8f4a:	22 0f       	add	r18, r18
    8f4c:	33 1f       	adc	r19, r19
    8f4e:	7a 95       	dec	r23
    8f50:	e1 f7       	brne	.-8      	; 0x8f4a <disk_ioctl+0x200>
    8f52:	82 95       	swap	r24
    8f54:	86 95       	lsr	r24
    8f56:	87 70       	andi	r24, 0x07	; 7
    8f58:	28 0f       	add	r18, r24
    8f5a:	31 1d       	adc	r19, r1
    8f5c:	2f 5f       	subi	r18, 0xFF	; 255
    8f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    8f60:	50 e0       	ldi	r21, 0x00	; 0
    8f62:	4c 77       	andi	r20, 0x7C	; 124
    8f64:	50 70       	andi	r21, 0x00	; 0
    8f66:	55 95       	asr	r21
    8f68:	47 95       	ror	r20
    8f6a:	55 95       	asr	r21
    8f6c:	47 95       	ror	r20
    8f6e:	4f 5f       	subi	r20, 0xFF	; 255
    8f70:	5f 4f       	sbci	r21, 0xFF	; 255
    8f72:	24 9f       	mul	r18, r20
    8f74:	c0 01       	movw	r24, r0
    8f76:	25 9f       	mul	r18, r21
    8f78:	90 0d       	add	r25, r0
    8f7a:	34 9f       	mul	r19, r20
    8f7c:	90 0d       	add	r25, r0
    8f7e:	11 24       	eor	r1, r1
    8f80:	a0 e0       	ldi	r26, 0x00	; 0
    8f82:	b0 e0       	ldi	r27, 0x00	; 0
    8f84:	f8 01       	movw	r30, r16
    8f86:	80 83       	st	Z, r24
    8f88:	91 83       	std	Z+1, r25	; 0x01
    8f8a:	a2 83       	std	Z+2, r26	; 0x02
    8f8c:	b3 83       	std	Z+3, r27	; 0x03
    8f8e:	40 c0       	rjmp	.+128    	; 0x9010 <disk_ioctl+0x2c6>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    8f90:	80 91 74 24 	lds	r24, 0x2474
    8f94:	fa 01       	movw	r30, r20
    8f96:	80 83       	st	Z, r24
    8f98:	3b c0       	rjmp	.+118    	; 0x9010 <disk_ioctl+0x2c6>
			res = RES_OK;
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    8f9a:	89 e0       	ldi	r24, 0x09	; 9
    8f9c:	01 c0       	rjmp	.+2      	; 0x8fa0 <disk_ioctl+0x256>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    8f9e:	8a e0       	ldi	r24, 0x0A	; 10
    8fa0:	40 e0       	ldi	r20, 0x00	; 0
    8fa2:	50 e0       	ldi	r21, 0x00	; 0
    8fa4:	ba 01       	movw	r22, r20
    8fa6:	0e 94 43 45 	call	0x8a86	; 0x8a86 <send_cmd>
    8faa:	88 23       	and	r24, r24
    8fac:	71 f5       	brne	.+92     	; 0x900a <disk_ioctl+0x2c0>
				&& rcvr_datablock(ptr, 16))
    8fae:	c8 01       	movw	r24, r16
    8fb0:	60 e1       	ldi	r22, 0x10	; 16
    8fb2:	70 e0       	ldi	r23, 0x00	; 0
    8fb4:	22 c0       	rjmp	.+68     	; 0x8ffa <disk_ioctl+0x2b0>
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    8fb6:	8a e3       	ldi	r24, 0x3A	; 58
    8fb8:	40 e0       	ldi	r20, 0x00	; 0
    8fba:	50 e0       	ldi	r21, 0x00	; 0
    8fbc:	ba 01       	movw	r22, r20
    8fbe:	0e 94 43 45 	call	0x8a86	; 0x8a86 <send_cmd>
    8fc2:	88 23       	and	r24, r24
    8fc4:	11 f5       	brne	.+68     	; 0x900a <disk_ioctl+0x2c0>
/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

#if _USE_IOCTL
DRESULT disk_ioctl (
    8fc6:	0c 5f       	subi	r16, 0xFC	; 252
    8fc8:	1f 4f       	sbci	r17, 0xFF	; 255
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    8fca:	8f ef       	ldi	r24, 0xFF	; 255
    8fcc:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>
    8fd0:	f7 01       	movw	r30, r14
    8fd2:	81 93       	st	Z+, r24
    8fd4:	7f 01       	movw	r14, r30
    8fd6:	e0 17       	cp	r30, r16
    8fd8:	f1 07       	cpc	r31, r17
    8fda:	b9 f7       	brne	.-18     	; 0x8fca <disk_ioctl+0x280>
    8fdc:	19 c0       	rjmp	.+50     	; 0x9010 <disk_ioctl+0x2c6>
				res = RES_OK;
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    8fde:	8d e8       	ldi	r24, 0x8D	; 141
    8fe0:	40 e0       	ldi	r20, 0x00	; 0
    8fe2:	50 e0       	ldi	r21, 0x00	; 0
    8fe4:	ba 01       	movw	r22, r20
    8fe6:	0e 94 43 45 	call	0x8a86	; 0x8a86 <send_cmd>
    8fea:	88 23       	and	r24, r24
    8fec:	71 f4       	brne	.+28     	; 0x900a <disk_ioctl+0x2c0>
				xchg_spi(0xFF);
    8fee:	8f ef       	ldi	r24, 0xFF	; 255
    8ff0:	0e 94 bd 44 	call	0x897a	; 0x897a <xchg_spi>
				if (rcvr_datablock(ptr, 64))
    8ff4:	c8 01       	movw	r24, r16
    8ff6:	60 e4       	ldi	r22, 0x40	; 64
    8ff8:	70 e0       	ldi	r23, 0x00	; 0
    8ffa:	0e 94 05 45 	call	0x8a0a	; 0x8a0a <rcvr_datablock>
    8ffe:	00 97       	sbiw	r24, 0x00	; 0
    9000:	39 f4       	brne	.+14     	; 0x9010 <disk_ioctl+0x2c6>
    9002:	03 c0       	rjmp	.+6      	; 0x900a <disk_ioctl+0x2c0>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
    9004:	04 e0       	ldi	r16, 0x04	; 4
    9006:	10 e0       	ldi	r17, 0x00	; 0
    9008:	05 c0       	rjmp	.+10     	; 0x9014 <disk_ioctl+0x2ca>
	DWORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
    900a:	01 e0       	ldi	r16, 0x01	; 1
    900c:	10 e0       	ldi	r17, 0x00	; 0
    900e:	02 c0       	rjmp	.+4      	; 0x9014 <disk_ioctl+0x2ca>

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				xchg_spi(0xFF);
				if (rcvr_datablock(ptr, 64))
					res = RES_OK;
    9010:	00 e0       	ldi	r16, 0x00	; 0
    9012:	10 e0       	ldi	r17, 0x00	; 0

		default:
			res = RES_PARERR;
		}

		deselect();
    9014:	0e 94 db 44 	call	0x89b6	; 0x89b6 <deselect>
    9018:	05 c0       	rjmp	.+10     	; 0x9024 <disk_ioctl+0x2da>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
    901a:	04 e0       	ldi	r16, 0x04	; 4
    901c:	10 e0       	ldi	r17, 0x00	; 0
    901e:	02 c0       	rjmp	.+4      	; 0x9024 <disk_ioctl+0x2da>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    9020:	03 e0       	ldi	r16, 0x03	; 3
    9022:	10 e0       	ldi	r17, 0x00	; 0

		deselect();
	}

	return res;
}
    9024:	c8 01       	movw	r24, r16
    9026:	60 96       	adiw	r28, 0x10	; 16
    9028:	e6 e0       	ldi	r30, 0x06	; 6
    902a:	0c 94 df 4b 	jmp	0x97be	; 0x97be <__epilogue_restores__+0x18>

0000902e <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    902e:	80 91 72 24 	lds	r24, 0x2472
	if (n) Timer1 = --n;
    9032:	88 23       	and	r24, r24
    9034:	19 f0       	breq	.+6      	; 0x903c <disk_timerproc+0xe>
    9036:	81 50       	subi	r24, 0x01	; 1
    9038:	80 93 72 24 	sts	0x2472, r24
	n = Timer2;
    903c:	80 91 73 24 	lds	r24, 0x2473
	if (n) Timer2 = --n;
    9040:	88 23       	and	r24, r24
    9042:	19 f0       	breq	.+6      	; 0x904a <disk_timerproc+0x1c>
    9044:	81 50       	subi	r24, 0x01	; 1
    9046:	80 93 73 24 	sts	0x2473, r24

	s = Stat;
    904a:	80 91 a9 23 	lds	r24, 0x23A9

	if (SOCKWP)				/* Write protected */
    904e:	90 91 e8 06 	lds	r25, 0x06E8
    9052:	90 ff       	sbrs	r25, 0
    9054:	02 c0       	rjmp	.+4      	; 0x905a <disk_timerproc+0x2c>
		s |= STA_PROTECT;
    9056:	84 60       	ori	r24, 0x04	; 4
    9058:	01 c0       	rjmp	.+2      	; 0x905c <disk_timerproc+0x2e>
	else					/* Write enabled */
		s &= ~STA_PROTECT;
    905a:	8b 7f       	andi	r24, 0xFB	; 251

	if (SOCKINS)			/* Card inserted */
    905c:	90 91 e8 06 	lds	r25, 0x06E8
    9060:	91 ff       	sbrs	r25, 1
    9062:	02 c0       	rjmp	.+4      	; 0x9068 <disk_timerproc+0x3a>
      s |= (STA_NODISK | STA_NOINIT);
    9064:	83 60       	ori	r24, 0x03	; 3
    9066:	01 c0       	rjmp	.+2      	; 0x906a <disk_timerproc+0x3c>
	else					/* Socket empty */
      s &= ~STA_NODISK;
    9068:	8d 7f       	andi	r24, 0xFD	; 253

	Stat = s;				/* Update MMC status */
    906a:	80 93 a9 23 	sts	0x23A9, r24
}
    906e:	08 95       	ret

00009070 <__vector_53>:
/*---------------------------------------------------------*/
/* 100Hz timer interrupt generated by TCE1                 */
/*---------------------------------------------------------*/

ISR(TCE1_OVF_vect)
{
    9070:	1f 92       	push	r1
    9072:	0f 92       	push	r0
    9074:	0f b6       	in	r0, 0x3f	; 63
    9076:	0f 92       	push	r0
    9078:	08 b6       	in	r0, 0x38	; 56
    907a:	0f 92       	push	r0
    907c:	09 b6       	in	r0, 0x39	; 57
    907e:	0f 92       	push	r0
    9080:	0b b6       	in	r0, 0x3b	; 59
    9082:	0f 92       	push	r0
    9084:	11 24       	eor	r1, r1
    9086:	18 be       	out	0x38, r1	; 56
    9088:	19 be       	out	0x39, r1	; 57
    908a:	1b be       	out	0x3b, r1	; 59
    908c:	2f 93       	push	r18
    908e:	3f 93       	push	r19
    9090:	4f 93       	push	r20
    9092:	5f 93       	push	r21
    9094:	6f 93       	push	r22
    9096:	7f 93       	push	r23
    9098:	8f 93       	push	r24
    909a:	9f 93       	push	r25
    909c:	af 93       	push	r26
    909e:	bf 93       	push	r27
    90a0:	ef 93       	push	r30
    90a2:	ff 93       	push	r31
  disk_timerproc();  /* Drive timer procedure of low level disk I/O module */
    90a4:	0e 94 17 48 	call	0x902e	; 0x902e <disk_timerproc>
}
    90a8:	ff 91       	pop	r31
    90aa:	ef 91       	pop	r30
    90ac:	bf 91       	pop	r27
    90ae:	af 91       	pop	r26
    90b0:	9f 91       	pop	r25
    90b2:	8f 91       	pop	r24
    90b4:	7f 91       	pop	r23
    90b6:	6f 91       	pop	r22
    90b8:	5f 91       	pop	r21
    90ba:	4f 91       	pop	r20
    90bc:	3f 91       	pop	r19
    90be:	2f 91       	pop	r18
    90c0:	0f 90       	pop	r0
    90c2:	0b be       	out	0x3b, r0	; 59
    90c4:	0f 90       	pop	r0
    90c6:	09 be       	out	0x39, r0	; 57
    90c8:	0f 90       	pop	r0
    90ca:	08 be       	out	0x38, r0	; 56
    90cc:	0f 90       	pop	r0
    90ce:	0f be       	out	0x3f, r0	; 63
    90d0:	0f 90       	pop	r0
    90d2:	1f 90       	pop	r1
    90d4:	18 95       	reti

000090d6 <rtc_gettime>:
#include <string.h>
#include "rtc.h"


BOOL rtc_gettime (RTCLK *rtc)
{
    90d6:	fc 01       	movw	r30, r24
	rtc->sec = 30;
    90d8:	8e e1       	ldi	r24, 0x1E	; 30
    90da:	87 83       	std	Z+7, r24	; 0x07
	rtc->min = 59;
    90dc:	8b e3       	ldi	r24, 0x3B	; 59
    90de:	86 83       	std	Z+6, r24	; 0x06
	rtc->hour = 11;
    90e0:	8b e0       	ldi	r24, 0x0B	; 11
    90e2:	85 83       	std	Z+5, r24	; 0x05
	rtc->mday = 3;
    90e4:	83 e0       	ldi	r24, 0x03	; 3
    90e6:	83 83       	std	Z+3, r24	; 0x03
	rtc->month = 9;
    90e8:	89 e0       	ldi	r24, 0x09	; 9
    90ea:	82 83       	std	Z+2, r24	; 0x02
	rtc->year = 2009;
    90ec:	89 ed       	ldi	r24, 0xD9	; 217
    90ee:	97 e0       	ldi	r25, 0x07	; 7
    90f0:	80 83       	st	Z, r24
    90f2:	91 83       	std	Z+1, r25	; 0x01

	return TRUE;
}
    90f4:	81 e0       	ldi	r24, 0x01	; 1
    90f6:	90 e0       	ldi	r25, 0x00	; 0
    90f8:	08 95       	ret

000090fa <rtc_settime>:
	buf[4] = rtc->mday / 10 * 16 + rtc->mday % 10;
	buf[5] = rtc->month / 10 * 16 + rtc->month % 10;
	buf[6] = (rtc->year - 2000) / 10 * 16 + (rtc->year - 2000) % 10;

	return TRUE;
}
    90fa:	81 e0       	ldi	r24, 0x01	; 1
    90fc:	90 e0       	ldi	r25, 0x00	; 0
    90fe:	08 95       	ret

00009100 <rtc_init>:

BOOL rtc_init (void)
{
	return TRUE;
}
    9100:	81 e0       	ldi	r24, 0x01	; 1
    9102:	90 e0       	ldi	r25, 0x00	; 0
    9104:	08 95       	ret

00009106 <get_fattime>:
			| ((DWORD)rtc.month << 21)
			| ((DWORD)rtc.mday << 16)
			| ((DWORD)rtc.hour << 11)
			| ((DWORD)rtc.min << 5)
			| ((DWORD)rtc.sec >> 1);
    9106:	6f e6       	ldi	r22, 0x6F	; 111
    9108:	7f e5       	ldi	r23, 0x5F	; 95
    910a:	83 e2       	ldi	r24, 0x23	; 35
    910c:	9b e3       	ldi	r25, 0x3B	; 59
    910e:	08 95       	ret

00009110 <__vector_108>:

volatile uint32_t ticks=0;


ISR(TCF0_OVF_vect)			/*signal Handler for timer ovf 0 */
{
    9110:	1f 92       	push	r1
    9112:	0f 92       	push	r0
    9114:	0f b6       	in	r0, 0x3f	; 63
    9116:	0f 92       	push	r0
    9118:	08 b6       	in	r0, 0x38	; 56
    911a:	0f 92       	push	r0
    911c:	09 b6       	in	r0, 0x39	; 57
    911e:	0f 92       	push	r0
    9120:	11 24       	eor	r1, r1
    9122:	18 be       	out	0x38, r1	; 56
    9124:	19 be       	out	0x39, r1	; 57
    9126:	8f 93       	push	r24
    9128:	9f 93       	push	r25
    912a:	af 93       	push	r26
    912c:	bf 93       	push	r27
	ticks++;
    912e:	80 91 75 24 	lds	r24, 0x2475
    9132:	90 91 76 24 	lds	r25, 0x2476
    9136:	a0 91 77 24 	lds	r26, 0x2477
    913a:	b0 91 78 24 	lds	r27, 0x2478
    913e:	01 96       	adiw	r24, 0x01	; 1
    9140:	a1 1d       	adc	r26, r1
    9142:	b1 1d       	adc	r27, r1
    9144:	80 93 75 24 	sts	0x2475, r24
    9148:	90 93 76 24 	sts	0x2476, r25
    914c:	a0 93 77 24 	sts	0x2477, r26
    9150:	b0 93 78 24 	sts	0x2478, r27
}
    9154:	bf 91       	pop	r27
    9156:	af 91       	pop	r26
    9158:	9f 91       	pop	r25
    915a:	8f 91       	pop	r24
    915c:	0f 90       	pop	r0
    915e:	09 be       	out	0x39, r0	; 57
    9160:	0f 90       	pop	r0
    9162:	08 be       	out	0x38, r0	; 56
    9164:	0f 90       	pop	r0
    9166:	0f be       	out	0x3f, r0	; 63
    9168:	0f 90       	pop	r0
    916a:	1f 90       	pop	r1
    916c:	18 95       	reti

0000916e <timer_init>:


void timer_init(void)
{	
	ticks=0;
    916e:	10 92 75 24 	sts	0x2475, r1
    9172:	10 92 76 24 	sts	0x2476, r1
    9176:	10 92 77 24 	sts	0x2477, r1
    917a:	10 92 78 24 	sts	0x2478, r1
  TCF0.CTRLA = 0x04;      // Prescaler: clk/8
    917e:	e0 e0       	ldi	r30, 0x00	; 0
    9180:	fb e0       	ldi	r31, 0x0B	; 11
    9182:	84 e0       	ldi	r24, 0x04	; 4
    9184:	80 83       	st	Z, r24
  TCF0.PER   = 3999;     // 1000Hz
    9186:	8f e9       	ldi	r24, 0x9F	; 159
    9188:	9f e0       	ldi	r25, 0x0F	; 15
    918a:	86 a3       	std	Z+38, r24	; 0x26
    918c:	97 a3       	std	Z+39, r25	; 0x27
  TCF0.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    918e:	82 e0       	ldi	r24, 0x02	; 2
    9190:	86 83       	std	Z+6, r24	; 0x06
}
    9192:	08 95       	ret

00009194 <Wait>:

void Wait(uint16_t delay)
{
    9194:	ef 92       	push	r14
    9196:	ff 92       	push	r15
    9198:	0f 93       	push	r16
    919a:	1f 93       	push	r17
	uint32_t temp=ticks;
    919c:	20 91 75 24 	lds	r18, 0x2475
    91a0:	30 91 76 24 	lds	r19, 0x2476
    91a4:	40 91 77 24 	lds	r20, 0x2477
    91a8:	50 91 78 24 	lds	r21, 0x2478

	while(ticks - temp < delay);
    91ac:	7c 01       	movw	r14, r24
    91ae:	00 e0       	ldi	r16, 0x00	; 0
    91b0:	10 e0       	ldi	r17, 0x00	; 0
    91b2:	80 91 75 24 	lds	r24, 0x2475
    91b6:	90 91 76 24 	lds	r25, 0x2476
    91ba:	a0 91 77 24 	lds	r26, 0x2477
    91be:	b0 91 78 24 	lds	r27, 0x2478
    91c2:	82 1b       	sub	r24, r18
    91c4:	93 0b       	sbc	r25, r19
    91c6:	a4 0b       	sbc	r26, r20
    91c8:	b5 0b       	sbc	r27, r21
    91ca:	8e 15       	cp	r24, r14
    91cc:	9f 05       	cpc	r25, r15
    91ce:	a0 07       	cpc	r26, r16
    91d0:	b1 07       	cpc	r27, r17
    91d2:	78 f3       	brcs	.-34     	; 0x91b2 <Wait+0x1e>
}
    91d4:	1f 91       	pop	r17
    91d6:	0f 91       	pop	r16
    91d8:	ff 90       	pop	r15
    91da:	ef 90       	pop	r14
    91dc:	08 95       	ret

000091de <timer_fine_tic>:
{
// set the 16 bit timer to zero, also set the prescaler to 64
// with prescaler = 64, counts happen every 32E6/64, so 1 counts are 2 us
// full count is (2^16)*(64)/(32E6) = 128 ms

TCF1.CTRLA = 0x05;     /*Prescaler = 64*/
    91de:	e0 e4       	ldi	r30, 0x40	; 64
    91e0:	fb e0       	ldi	r31, 0x0B	; 11
    91e2:	85 e0       	ldi	r24, 0x05	; 5
    91e4:	80 83       	st	Z, r24
TCF1.CNT = 0; //reset TCF1 
    91e6:	10 a2       	std	Z+32, r1	; 0x20
    91e8:	11 a2       	std	Z+33, r1	; 0x21
}
    91ea:	08 95       	ret

000091ec <timer_fine_toc>:

uint16_t timer_fine_toc(void)
{
// read and return the 16 bit timer
	uint16_t del_t;
	del_t = TCF1.CNT * 2;
    91ec:	e0 e4       	ldi	r30, 0x40	; 64
    91ee:	fb e0       	ldi	r31, 0x0B	; 11
    91f0:	20 a1       	ldd	r18, Z+32	; 0x20
    91f2:	31 a1       	ldd	r19, Z+33	; 0x21
    91f4:	22 0f       	add	r18, r18
    91f6:	33 1f       	adc	r19, r19
	return del_t;
}	
    91f8:	c9 01       	movw	r24, r18
    91fa:	08 95       	ret

000091fc <timer_coarse_tic>:
{
// set the 16 bit timer to zero, also set the prescaler to 8
// with prescaler = 8, and per = 4000, overflow happens every 1ms

	
	ticks=0;
    91fc:	10 92 75 24 	sts	0x2475, r1
    9200:	10 92 76 24 	sts	0x2476, r1
    9204:	10 92 77 24 	sts	0x2477, r1
    9208:	10 92 78 24 	sts	0x2478, r1

  TCF0.CTRLA = 0x04;      // Prescaler: 8
    920c:	e0 e0       	ldi	r30, 0x00	; 0
    920e:	fb e0       	ldi	r31, 0x0B	; 11
    9210:	84 e0       	ldi	r24, 0x04	; 4
    9212:	80 83       	st	Z, r24
  TCF0.PER   = 3999;     // 1000Hz
    9214:	8f e9       	ldi	r24, 0x9F	; 159
    9216:	9f e0       	ldi	r25, 0x0F	; 15
    9218:	86 a3       	std	Z+38, r24	; 0x26
    921a:	97 a3       	std	Z+39, r25	; 0x27
  TCF0.INTCTRLA = 0x02;   // Timer overflow is a medium level interrupt
    921c:	82 e0       	ldi	r24, 0x02	; 2
    921e:	86 83       	std	Z+6, r24	; 0x06
  TCF0.CNT = 0;            //reset TCF0
    9220:	10 a2       	std	Z+32, r1	; 0x20
    9222:	11 a2       	std	Z+33, r1	; 0x21
}
    9224:	08 95       	ret

00009226 <timer_coarse_toc>:
uint32_t timer_coarse_toc(void)
{
// read and return the ticks counter
// to convert this value to ms - divide by 
	unsigned long del_t;	
	del_t = (uint32_t)ticks;
    9226:	20 91 75 24 	lds	r18, 0x2475
    922a:	30 91 76 24 	lds	r19, 0x2476
    922e:	40 91 77 24 	lds	r20, 0x2477
    9232:	50 91 78 24 	lds	r21, 0x2478
	return del_t;
}	
    9236:	b9 01       	movw	r22, r18
    9238:	ca 01       	movw	r24, r20
    923a:	08 95       	ret

0000923c <NVM_EXEC>:

static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
    923c:	eb ec       	ldi	r30, 0xCB	; 203
    923e:	f1 e0       	ldi	r31, 0x01	; 1
    9240:	21 e0       	ldi	r18, 0x01	; 1
    9242:	30 e0       	ldi	r19, 0x00	; 0
    9244:	88 ed       	ldi	r24, 0xD8	; 216
    9246:	90 e0       	ldi	r25, 0x00	; 0
    9248:	84 bf       	out	0x34, r24	; 52
    924a:	20 83       	st	Z, r18
        : [ccp] "I" (_SFR_IO_ADDR(CCP)),
        [ioreg] "d" (CCP_IOREG_gc),
                     [cmdex] "r" (NVM_CMDEX_bm),
                     [z] "z" (z)
                     );
}
    924c:	08 95       	ret

0000924e <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    924e:	80 91 cf 01 	lds	r24, 0x01CF
    9252:	87 fd       	sbrc	r24, 7
    9254:	fc cf       	rjmp	.-8      	; 0x924e <EEPROM_WaitForNVM>
}
    9256:	08 95       	ret

00009258 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    9258:	a2 e0       	ldi	r26, 0x02	; 2
    925a:	b0 e0       	ldi	r27, 0x00	; 0
    925c:	e2 e3       	ldi	r30, 0x32	; 50
    925e:	f9 e4       	ldi	r31, 0x49	; 73
    9260:	0c 94 c8 4b 	jmp	0x9790	; 0x9790 <__prologue_saves__+0x1c>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    9264:	6a 83       	std	Y+2, r22	; 0x02
    9266:	89 83       	std	Y+1, r24	; 0x01
    9268:	0e 94 27 49 	call	0x924e	; 0x924e <EEPROM_WaitForNVM>

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));
    926c:	6a 81       	ldd	r22, Y+2	; 0x02
    926e:	70 e0       	ldi	r23, 0x00	; 0
    9270:	6f 71       	andi	r22, 0x1F	; 31
    9272:	70 70       	andi	r23, 0x00	; 0
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
    9274:	89 81       	ldd	r24, Y+1	; 0x01
    9276:	90 e0       	ldi	r25, 0x00	; 0
    9278:	25 e0       	ldi	r18, 0x05	; 5
    927a:	88 0f       	add	r24, r24
    927c:	99 1f       	adc	r25, r25
    927e:	2a 95       	dec	r18
    9280:	e1 f7       	brne	.-8      	; 0x927a <EEPROM_ReadByte+0x22>
    9282:	68 2b       	or	r22, r24
    9284:	79 2b       	or	r23, r25
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    9286:	00 ec       	ldi	r16, 0xC0	; 192
    9288:	11 e0       	ldi	r17, 0x01	; 1
    928a:	f8 01       	movw	r30, r16
    928c:	60 83       	st	Z, r22
	NVM.ADDR1 = (address >> 8) & 0x1F;
    928e:	87 2f       	mov	r24, r23
    9290:	8f 71       	andi	r24, 0x1F	; 31
    9292:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    9294:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    9296:	86 e0       	ldi	r24, 0x06	; 6
    9298:	82 87       	std	Z+10, r24	; 0x0a
        NVM_EXEC();
    929a:	0e 94 1e 49 	call	0x923c	; 0x923c <NVM_EXEC>

	return NVM.DATA0;
    929e:	f8 01       	movw	r30, r16
    92a0:	84 81       	ldd	r24, Z+4	; 0x04
}
    92a2:	22 96       	adiw	r28, 0x02	; 2
    92a4:	e4 e0       	ldi	r30, 0x04	; 4
    92a6:	0c 94 e1 4b 	jmp	0x97c2	; 0x97c2 <__epilogue_restores__+0x1c>

000092aa <EEPROM_FlushBuffer>:
 *  \note The EEPROM write operations will automatically flush the buffer for you.
 */
void EEPROM_FlushBuffer( void )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    92aa:	0e 94 27 49 	call	0x924e	; 0x924e <EEPROM_WaitForNVM>

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    92ae:	80 91 cf 01 	lds	r24, 0x01CF
    92b2:	81 ff       	sbrs	r24, 1
    92b4:	06 c0       	rjmp	.+12     	; 0x92c2 <EEPROM_FlushBuffer+0x18>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    92b6:	86 e3       	ldi	r24, 0x36	; 54
    92b8:	e0 ec       	ldi	r30, 0xC0	; 192
    92ba:	f1 e0       	ldi	r31, 0x01	; 1
    92bc:	82 87       	std	Z+10, r24	; 0x0a
                NVM_EXEC();
    92be:	0e 94 1e 49 	call	0x923c	; 0x923c <NVM_EXEC>
    92c2:	08 95       	ret

000092c4 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    92c4:	a3 e0       	ldi	r26, 0x03	; 3
    92c6:	b0 e0       	ldi	r27, 0x00	; 0
    92c8:	e8 e6       	ldi	r30, 0x68	; 104
    92ca:	f9 e4       	ldi	r31, 0x49	; 73
    92cc:	0c 94 ca 4b 	jmp	0x9794	; 0x9794 <__prologue_saves__+0x20>
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    92d0:	4b 83       	std	Y+3, r20	; 0x03
    92d2:	6a 83       	std	Y+2, r22	; 0x02
    92d4:	89 83       	std	Y+1, r24	; 0x01
    92d6:	0e 94 55 49 	call	0x92aa	; 0x92aa <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    92da:	e0 ec       	ldi	r30, 0xC0	; 192
    92dc:	f1 e0       	ldi	r31, 0x01	; 1
    92de:	93 e3       	ldi	r25, 0x33	; 51
    92e0:	92 87       	std	Z+10, r25	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));
    92e2:	6a 81       	ldd	r22, Y+2	; 0x02
    92e4:	70 e0       	ldi	r23, 0x00	; 0
    92e6:	6f 71       	andi	r22, 0x1F	; 31
    92e8:	70 70       	andi	r23, 0x00	; 0
	 */
	EEPROM_FlushBuffer();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE)
    92ea:	89 81       	ldd	r24, Y+1	; 0x01
    92ec:	90 e0       	ldi	r25, 0x00	; 0
    92ee:	35 e0       	ldi	r19, 0x05	; 5
    92f0:	88 0f       	add	r24, r24
    92f2:	99 1f       	adc	r25, r25
    92f4:	3a 95       	dec	r19
    92f6:	e1 f7       	brne	.-8      	; 0x92f0 <EEPROM_WriteByte+0x2c>
    92f8:	68 2b       	or	r22, r24
    92fa:	79 2b       	or	r23, r25
	                            |(byteAddr & (EEPROM_PAGE_SIZE-1));

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    92fc:	60 83       	st	Z, r22
	NVM.ADDR1 = (address >> 8) & 0x1F;
    92fe:	87 2f       	mov	r24, r23
    9300:	8f 71       	andi	r24, 0x1F	; 31
    9302:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    9304:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    9306:	4b 81       	ldd	r20, Y+3	; 0x03
    9308:	44 83       	std	Z+4, r20	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    930a:	85 e3       	ldi	r24, 0x35	; 53
    930c:	82 87       	std	Z+10, r24	; 0x0a
        NVM_EXEC_WRAPPER();
    930e:	0e 94 1e 49 	call	0x923c	; 0x923c <NVM_EXEC>
}
    9312:	23 96       	adiw	r28, 0x03	; 3
    9314:	e2 e0       	ldi	r30, 0x02	; 2
    9316:	0c 94 e3 4b 	jmp	0x97c6	; 0x97c6 <__epilogue_restores__+0x20>

0000931a <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGE_SIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    931a:	a2 e0       	ldi	r26, 0x02	; 2
    931c:	b0 e0       	ldi	r27, 0x00	; 0
    931e:	e3 e9       	ldi	r30, 0x93	; 147
    9320:	f9 e4       	ldi	r31, 0x49	; 73
    9322:	0c 94 ca 4b 	jmp	0x9794	; 0x9794 <__prologue_saves__+0x20>
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
    9326:	6a 83       	std	Y+2, r22	; 0x02
    9328:	89 83       	std	Y+1, r24	; 0x01
    932a:	0e 94 27 49 	call	0x924e	; 0x924e <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    932e:	e0 ec       	ldi	r30, 0xC0	; 192
    9330:	f1 e0       	ldi	r31, 0x01	; 1
    9332:	93 e3       	ldi	r25, 0x33	; 51
    9334:	92 87       	std	Z+10, r25	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    9336:	89 81       	ldd	r24, Y+1	; 0x01
    9338:	80 83       	st	Z, r24
	NVM.ADDR1 = 0x00;
    933a:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    933c:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    933e:	6a 81       	ldd	r22, Y+2	; 0x02
    9340:	64 83       	std	Z+4, r22	; 0x04
}
    9342:	22 96       	adiw	r28, 0x02	; 2
    9344:	e2 e0       	ldi	r30, 0x02	; 2
    9346:	0c 94 e3 4b 	jmp	0x97c6	; 0x97c6 <__epilogue_restores__+0x20>

0000934a <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    934a:	cf 93       	push	r28
    934c:	df 93       	push	r29
    934e:	ec 01       	movw	r28, r24
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    9350:	0e 94 27 49 	call	0x924e	; 0x924e <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    9354:	e0 ec       	ldi	r30, 0xC0	; 192
    9356:	f1 e0       	ldi	r31, 0x01	; 1
    9358:	83 e3       	ldi	r24, 0x33	; 51
    935a:	82 87       	std	Z+10, r24	; 0x0a

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    935c:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    935e:	12 82       	std	Z+2, r1	; 0x02

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    9360:	80 e0       	ldi	r24, 0x00	; 0
		NVM.ADDR0 = i;
    9362:	80 93 c0 01 	sts	0x01C0, r24
		NVM.DATA0 = *values;
    9366:	99 91       	ld	r25, Y+
    9368:	94 83       	std	Z+4, r25	; 0x04
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    936a:	8f 5f       	subi	r24, 0xFF	; 255
    936c:	80 32       	cpi	r24, 0x20	; 32
    936e:	c9 f7       	brne	.-14     	; 0x9362 <EEPROM_LoadPage+0x18>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    9370:	df 91       	pop	r29
    9372:	cf 91       	pop	r28
    9374:	08 95       	ret

00009376 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    9376:	a1 e0       	ldi	r26, 0x01	; 1
    9378:	b0 e0       	ldi	r27, 0x00	; 0
    937a:	e1 ec       	ldi	r30, 0xC1	; 193
    937c:	f9 e4       	ldi	r31, 0x49	; 73
    937e:	0c 94 ca 4b 	jmp	0x9794	; 0x9794 <__prologue_saves__+0x20>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    9382:	89 83       	std	Y+1, r24	; 0x01
    9384:	0e 94 27 49 	call	0x924e	; 0x924e <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    9388:	89 81       	ldd	r24, Y+1	; 0x01
    938a:	90 e0       	ldi	r25, 0x00	; 0
    938c:	45 e0       	ldi	r20, 0x05	; 5
    938e:	88 0f       	add	r24, r24
    9390:	99 1f       	adc	r25, r25
    9392:	4a 95       	dec	r20
    9394:	e1 f7       	brne	.-8      	; 0x938e <EEPROM_AtomicWritePage+0x18>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    9396:	e0 ec       	ldi	r30, 0xC0	; 192
    9398:	f1 e0       	ldi	r31, 0x01	; 1
    939a:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    939c:	89 2f       	mov	r24, r25
    939e:	8f 71       	andi	r24, 0x1F	; 31
    93a0:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    93a2:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    93a4:	85 e3       	ldi	r24, 0x35	; 53
    93a6:	82 87       	std	Z+10, r24	; 0x0a
        NVM_EXEC();
    93a8:	0e 94 1e 49 	call	0x923c	; 0x923c <NVM_EXEC>
}
    93ac:	21 96       	adiw	r28, 0x01	; 1
    93ae:	e2 e0       	ldi	r30, 0x02	; 2
    93b0:	0c 94 e3 4b 	jmp	0x97c6	; 0x97c6 <__epilogue_restores__+0x20>

000093b4 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    93b4:	a1 e0       	ldi	r26, 0x01	; 1
    93b6:	b0 e0       	ldi	r27, 0x00	; 0
    93b8:	e0 ee       	ldi	r30, 0xE0	; 224
    93ba:	f9 e4       	ldi	r31, 0x49	; 73
    93bc:	0c 94 ca 4b 	jmp	0x9794	; 0x9794 <__prologue_saves__+0x20>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    93c0:	89 83       	std	Y+1, r24	; 0x01
    93c2:	0e 94 27 49 	call	0x924e	; 0x924e <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    93c6:	89 81       	ldd	r24, Y+1	; 0x01
    93c8:	90 e0       	ldi	r25, 0x00	; 0
    93ca:	55 e0       	ldi	r21, 0x05	; 5
    93cc:	88 0f       	add	r24, r24
    93ce:	99 1f       	adc	r25, r25
    93d0:	5a 95       	dec	r21
    93d2:	e1 f7       	brne	.-8      	; 0x93cc <EEPROM_ErasePage+0x18>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    93d4:	e0 ec       	ldi	r30, 0xC0	; 192
    93d6:	f1 e0       	ldi	r31, 0x01	; 1
    93d8:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    93da:	89 2f       	mov	r24, r25
    93dc:	8f 71       	andi	r24, 0x1F	; 31
    93de:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    93e0:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    93e2:	82 e3       	ldi	r24, 0x32	; 50
    93e4:	82 87       	std	Z+10, r24	; 0x0a
        NVM_EXEC_WRAPPER();
    93e6:	0e 94 1e 49 	call	0x923c	; 0x923c <NVM_EXEC>
}
    93ea:	21 96       	adiw	r28, 0x01	; 1
    93ec:	e2 e0       	ldi	r30, 0x02	; 2
    93ee:	0c 94 e3 4b 	jmp	0x97c6	; 0x97c6 <__epilogue_restores__+0x20>

000093f2 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    93f2:	a1 e0       	ldi	r26, 0x01	; 1
    93f4:	b0 e0       	ldi	r27, 0x00	; 0
    93f6:	ef ef       	ldi	r30, 0xFF	; 255
    93f8:	f9 e4       	ldi	r31, 0x49	; 73
    93fa:	0c 94 ca 4b 	jmp	0x9794	; 0x9794 <__prologue_saves__+0x20>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    93fe:	89 83       	std	Y+1, r24	; 0x01
    9400:	0e 94 27 49 	call	0x924e	; 0x924e <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGE_SIZE);
    9404:	89 81       	ldd	r24, Y+1	; 0x01
    9406:	90 e0       	ldi	r25, 0x00	; 0
    9408:	65 e0       	ldi	r22, 0x05	; 5
    940a:	88 0f       	add	r24, r24
    940c:	99 1f       	adc	r25, r25
    940e:	6a 95       	dec	r22
    9410:	e1 f7       	brne	.-8      	; 0x940a <EEPROM_SplitWritePage+0x18>

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    9412:	e0 ec       	ldi	r30, 0xC0	; 192
    9414:	f1 e0       	ldi	r31, 0x01	; 1
    9416:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    9418:	89 2f       	mov	r24, r25
    941a:	8f 71       	andi	r24, 0x1F	; 31
    941c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    941e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
        NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    9420:	84 e3       	ldi	r24, 0x34	; 52
    9422:	82 87       	std	Z+10, r24	; 0x0a
        NVM_EXEC_WRAPPER();
    9424:	0e 94 1e 49 	call	0x923c	; 0x923c <NVM_EXEC>
}
    9428:	21 96       	adiw	r28, 0x01	; 1
    942a:	e2 e0       	ldi	r30, 0x02	; 2
    942c:	0c 94 e3 4b 	jmp	0x97c6	; 0x97c6 <__epilogue_restores__+0x20>

00009430 <EEPROM_EraseAll>:
 *  This function erases the entire EEPROM memory block to 0xFF.
 */
void EEPROM_EraseAll( void )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    9430:	0e 94 27 49 	call	0x924e	; 0x924e <EEPROM_WaitForNVM>

	/* Issue EEPROM Erase All command. */
        NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    9434:	80 e3       	ldi	r24, 0x30	; 48
    9436:	e0 ec       	ldi	r30, 0xC0	; 192
    9438:	f1 e0       	ldi	r31, 0x01	; 1
    943a:	82 87       	std	Z+10, r24	; 0x0a
        NVM_EXEC_WRAPPER();
    943c:	0e 94 1e 49 	call	0x923c	; 0x923c <NVM_EXEC>
}
    9440:	08 95       	ret

00009442 <xputc>:

.global xputc
.func xputc
xputc:
#ifdef CR_CRLF
	cpi	r24, 10		;LF --> CRLF
    9442:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
    9444:	19 f4       	brne	.+6      	; 0x944c <xputc+0xa>
	ldi	r24, 13		;
    9446:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
    9448:	01 d0       	rcall	.+2      	; 0x944c <xputc+0xa>
	ldi	r24, 10		;/
    944a:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
    944c:	ff 93       	push	r31
	push	ZL
    944e:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    9450:	e0 91 79 24 	lds	r30, 0x2479
	lds	ZH, xfunc_out+1	;/
    9454:	f0 91 7a 24 	lds	r31, 0x247A
	icall
    9458:	09 95       	icall
	pop	ZL
    945a:	ef 91       	pop	r30
	pop	ZH
    945c:	ff 91       	pop	r31
	ret
    945e:	08 95       	ret

00009460 <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    9460:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    9462:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    9464:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    9466:	11 f0       	breq	.+4      	; 0x946c <xputs+0xc>
	rcall	xputc
    9468:	ec df       	rcall	.-40     	; 0x9442 <xputc>
	rjmp	1b
    946a:	fb cf       	rjmp	.-10     	; 0x9462 <xputs+0x2>
2:	ret
    946c:	08 95       	ret

0000946e <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    946e:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    9470:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    9472:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    9474:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    9476:	0c c0       	rjmp	.+24     	; 0x9490 <xitoa+0x22>
	neg	r20		;
    9478:	41 95       	neg	r20
	sbrs	r25, 7		;
    947a:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    947c:	09 c0       	rjmp	.+18     	; 0x9490 <xitoa+0x22>
	ldi	r30, '-'	;
    947e:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    9480:	60 95       	com	r22
	com	r23		;
    9482:	70 95       	com	r23
	com	r24		;
    9484:	80 95       	com	r24
	com	r25		;
    9486:	90 95       	com	r25
	adc	r22, r1		;
    9488:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    948a:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    948c:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    948e:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    9490:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    9492:	02 c0       	rjmp	.+4      	; 0x9498 <xitoa+0x2a>
	neg	r18		;
    9494:	21 95       	neg	r18
	ldi	r19, '0'	;/
    9496:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    9498:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    949a:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    949c:	66 0f       	add	r22, r22
	rol	r23		;
    949e:	77 1f       	adc	r23, r23
	rol	r24		;
    94a0:	88 1f       	adc	r24, r24
	rol	r25		;
    94a2:	99 1f       	adc	r25, r25
	rol	r26		;
    94a4:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    94a6:	a4 17       	cp	r26, r20
	brcs	3f		;
    94a8:	10 f0       	brcs	.+4      	; 0x94ae <xitoa+0x40>
	sub	r26, r20	;
    94aa:	a4 1b       	sub	r26, r20
	inc	r22		;
    94ac:	63 95       	inc	r22
3:	dec	r21		;
    94ae:	5a 95       	dec	r21
	brne	2b		;/
    94b0:	a9 f7       	brne	.-22     	; 0x949c <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    94b2:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    94b4:	08 f0       	brcs	.+2      	; 0x94b8 <xitoa+0x4a>
	subi	r26, -7		;
    94b6:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    94b8:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    94ba:	af 93       	push	r26
	inc	r31		;/
    94bc:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    94be:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    94c0:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    94c2:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    94c4:	91 05       	cpc	r25, r1
	brne	1b		;/
    94c6:	41 f7       	brne	.-48     	; 0x9498 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    94c8:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    94ca:	11 f4       	brne	.+4      	; 0x94d0 <xitoa+0x62>
	push	r30		;
    94cc:	ef 93       	push	r30
	inc	r31		;/
    94ce:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    94d0:	f2 17       	cp	r31, r18
	brcc	6f		;
    94d2:	18 f4       	brcc	.+6      	; 0x94da <xitoa+0x6c>
	push	r19		;
    94d4:	3f 93       	push	r19
	inc	r31		;
    94d6:	f3 95       	inc	r31
	rjmp	5b		;/
    94d8:	fb cf       	rjmp	.-10     	; 0x94d0 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    94da:	8f 91       	pop	r24
	rcall	xputc		;
    94dc:	b2 df       	rcall	.-156    	; 0x9442 <xputc>
	dec	r31		;
    94de:	fa 95       	dec	r31
	brne	6b		;/
    94e0:	e1 f7       	brne	.-8      	; 0x94da <xitoa+0x6c>

	ret
    94e2:	08 95       	ret

000094e4 <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
    94e4:	df 93       	push	r29
	push	YL
    94e6:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    94e8:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    94ea:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
    94ec:	26 96       	adiw	r28, 0x06	; 6
#else
	adiw	YL, 5		;Y = pointer to arguments
#endif
	ld	ZL, Y+		;Z = pointer to format string
    94ee:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    94f0:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    94f2:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    94f4:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    94f6:	21 f0       	breq	.+8      	; 0x9500 <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
    94f8:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    94fa:	29 f0       	breq	.+10     	; 0x9506 <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
    94fc:	a2 df       	rcall	.-188    	; 0x9442 <xputc>
	rjmp	0b		;/
    94fe:	f9 cf       	rjmp	.-14     	; 0x94f2 <xprintf+0xe>
90:	pop	YL
    9500:	cf 91       	pop	r28
	pop	YH
    9502:	df 91       	pop	r29
	ret
    9504:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    9506:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    9508:	e8 94       	clt
	_LPMI	r21		;Get flags
    950a:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    950c:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    950e:	b1 f3       	breq	.-20     	; 0x94fc <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
    9510:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    9512:	11 f4       	brne	.+4      	; 0x9518 <xprintf+0x34>
	set			;/
    9514:	68 94       	set
22:	_LPMI	r21		;Get width
    9516:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    9518:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    951a:	48 f4       	brcc	.+18     	; 0x952e <xprintf+0x4a>
	subi	r21, '0'	;
    951c:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    951e:	80 f3       	brcs	.-32     	; 0x9500 <xprintf+0x1c>
	lsl	r18		;
    9520:	22 0f       	add	r18, r18
	mov	r0, r18		;
    9522:	02 2e       	mov	r0, r18
	lsl	r18		;
    9524:	22 0f       	add	r18, r18
	lsl	r18		;
    9526:	22 0f       	add	r18, r18
	add	r18, r0		;
    9528:	20 0d       	add	r18, r0
	add	r18, r21	;
    952a:	25 0f       	add	r18, r21
	rjmp	22b		;/
    952c:	f4 cf       	rjmp	.-24     	; 0x9516 <xprintf+0x32>

24:	brtc	25f		;get value (low word)
    952e:	0e f4       	brtc	.+2      	; 0x9532 <xprintf+0x4e>
	neg	r18		;
    9530:	21 95       	neg	r18
25:	ld	r24, Y+		;
    9532:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    9534:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    9536:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    9538:	09 f3       	breq	.-62     	; 0x94fc <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
    953a:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    953c:	29 f1       	breq	.+74     	; 0x9588 <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
    953e:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    9540:	59 f1       	breq	.+86     	; 0x9598 <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    9542:	bc 01       	movw	r22, r24
	clr	r24		;
    9544:	88 27       	eor	r24, r24
	clr	r25		;
    9546:	99 27       	eor	r25, r25
	clt			;/
    9548:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    954a:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    954c:	21 f4       	brne	.+8      	; 0x9556 <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
    954e:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    9550:	99 91       	ld	r25, Y+
	set			;
    9552:	68 94       	set
	_LPMI	r21		;/
    9554:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    9556:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    9558:	39 f4       	brne	.+14     	; 0x9568 <xprintf+0x84>
	ldi	r20, -10	;
    955a:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    955c:	7e f0       	brts	.+30     	; 0x957c <xprintf+0x98>
	sbrs	r23, 7		;
    955e:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    9560:	0d c0       	rjmp	.+26     	; 0x957c <xprintf+0x98>
	ldi	r24, -1		;
    9562:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    9564:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    9566:	0a c0       	rjmp	.+20     	; 0x957c <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    9568:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    956a:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    956c:	39 f0       	breq	.+14     	; 0x957c <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
    956e:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    9570:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    9572:	21 f0       	breq	.+8      	; 0x957c <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
    9574:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    9576:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    9578:	09 f0       	breq	.+2      	; 0x957c <xprintf+0x98>
	rjmp	90b		;abort
    957a:	c2 cf       	rjmp	.-124    	; 0x9500 <xprintf+0x1c>
40:	push	ZH		;Output the value
    957c:	ff 93       	push	r31
	push	ZL		;
    957e:	ef 93       	push	r30
	rcall	xitoa		;
    9580:	76 df       	rcall	.-276    	; 0x946e <xitoa>
42:	pop	ZL		;
    9582:	ef 91       	pop	r30
	pop	ZH		;
    9584:	ff 91       	pop	r31
	rjmp	0b		;/
    9586:	b5 cf       	rjmp	.-150    	; 0x94f2 <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
    9588:	ff 93       	push	r31
	push	ZL
    958a:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    958c:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    958e:	81 91       	ld	r24, Z+
	cpi	r24, 0
    9590:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    9592:	b9 f3       	breq	.-18     	; 0x9582 <xprintf+0x9e>
	rcall	xputc
    9594:	56 df       	rcall	.-340    	; 0x9442 <xputc>
	rjmp	51b
    9596:	fb cf       	rjmp	.-10     	; 0x958e <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
    9598:	ff 93       	push	r31
	push	ZL
    959a:	ef 93       	push	r30
	rcall	xputs
    959c:	61 df       	rcall	.-318    	; 0x9460 <xputs>
	rjmp	42b
    959e:	f1 cf       	rjmp	.-30     	; 0x9582 <xprintf+0x9e>

000095a0 <xatoi>:

#ifdef USE_XATOI
.global xatoi
.func xatoi
xatoi:
	_MOVW	r1, r0, r23, r22
    95a0:	0b 01       	movw	r0, r22
	_MOVW	XH, XL, r25, r24
    95a2:	dc 01       	movw	r26, r24
	ld	ZL, X+
    95a4:	ed 91       	ld	r30, X+
	ld	ZH, X+
    95a6:	fd 91       	ld	r31, X+
	clr	r18		;r21:r18 = 0;
    95a8:	22 27       	eor	r18, r18
	clr	r19		;
    95aa:	33 27       	eor	r19, r19
	clr	r20		;
    95ac:	44 27       	eor	r20, r20
	clr	r21		;/
    95ae:	55 27       	eor	r21, r21
	clt			;T = 0;
    95b0:	e8 94       	clt

	ldi	r25, 10		;r25 = 10;
    95b2:	9a e0       	ldi	r25, 0x0A	; 10
	rjmp	41f		;/
    95b4:	01 c0       	rjmp	.+2      	; 0x95b8 <xatoi+0x18>
40:	adiw	ZL, 1		;Z++;
    95b6:	31 96       	adiw	r30, 0x01	; 1
41:	ld	r22, Z		;r22 = *Z;
    95b8:	60 81       	ld	r22, Z
	cpi	r22, ' '	;if(r22 == ' ') continue
    95ba:	60 32       	cpi	r22, 0x20	; 32
	breq	40b		;/
    95bc:	e1 f3       	breq	.-8      	; 0x95b6 <xatoi+0x16>
	brcs	70f		;if(r22 < ' ') error;
    95be:	a8 f1       	brcs	.+106    	; 0x962a <xatoi+0x8a>
	cpi	r22, '-'	;if(r22 == '-') {
    95c0:	6d 32       	cpi	r22, 0x2D	; 45
	brne	42f		; T = 1;
    95c2:	11 f4       	brne	.+4      	; 0x95c8 <xatoi+0x28>
	set			; continue;
    95c4:	68 94       	set
	rjmp	40b		;}
    95c6:	f7 cf       	rjmp	.-18     	; 0x95b6 <xatoi+0x16>
42:	cpi	r22, '9'+1	;if(r22 > '9') error;
    95c8:	6a 33       	cpi	r22, 0x3A	; 58
	brcc	70f		;/
    95ca:	78 f5       	brcc	.+94     	; 0x962a <xatoi+0x8a>
	cpi	r22, '0'	;if(r22 < '0') error;
    95cc:	60 33       	cpi	r22, 0x30	; 48
	brcs	70f		;/
    95ce:	68 f1       	brcs	.+90     	; 0x962a <xatoi+0x8a>
	brne	51f		;if(r22 > '0') cv_start;
    95d0:	71 f4       	brne	.+28     	; 0x95ee <xatoi+0x4e>
	ldi	r25, 8		;r25 = 8;
    95d2:	98 e0       	ldi	r25, 0x08	; 8
	adiw	ZL, 1		;r22 = *(++Z);
    95d4:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;/
    95d6:	60 81       	ld	r22, Z
	cpi	r22, ' '+1	;if(r22 <= ' ') exit;
    95d8:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    95da:	48 f1       	brcs	.+82     	; 0x962e <xatoi+0x8e>
	cpi	r22, 'b'	;if(r22 == 'b') {
    95dc:	62 36       	cpi	r22, 0x62	; 98
	brne	43f		; r25 = 2;
    95de:	11 f4       	brne	.+4      	; 0x95e4 <xatoi+0x44>
	ldi	r25, 2		; cv_start;
    95e0:	92 e0       	ldi	r25, 0x02	; 2
	rjmp	50f		;}
    95e2:	03 c0       	rjmp	.+6      	; 0x95ea <xatoi+0x4a>
43:	cpi	r22, 'x'	;if(r22 != 'x') error;
    95e4:	68 37       	cpi	r22, 0x78	; 120
	brne	51f		;/
    95e6:	19 f4       	brne	.+6      	; 0x95ee <xatoi+0x4e>
	ldi	r25, 16		;r25 = 16;
    95e8:	90 e1       	ldi	r25, 0x10	; 16

50:	adiw	ZL, 1		;Z++;
    95ea:	31 96       	adiw	r30, 0x01	; 1
	ld	r22, Z		;r22 = *Z;
    95ec:	60 81       	ld	r22, Z
51:	cpi	r22, ' '+1	;if(r22 <= ' ') break;
    95ee:	61 32       	cpi	r22, 0x21	; 33
	brcs	80f		;/
    95f0:	f0 f0       	brcs	.+60     	; 0x962e <xatoi+0x8e>
	cpi	r22, 'a'	;if(r22 >= 'a') r22 =- 0x20;
    95f2:	61 36       	cpi	r22, 0x61	; 97
	brcs	52f		;
    95f4:	08 f0       	brcs	.+2      	; 0x95f8 <xatoi+0x58>
	subi	r22, 0x20	;/
    95f6:	60 52       	subi	r22, 0x20	; 32
52:	subi	r22, '0'	;if((r22 -= '0') < 0) error;
    95f8:	60 53       	subi	r22, 0x30	; 48
	brcs	70f		;/
    95fa:	b8 f0       	brcs	.+46     	; 0x962a <xatoi+0x8a>
	cpi	r22, 10		;if(r22 >= 10) {
    95fc:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	53f		; r22 -= 7;
    95fe:	18 f0       	brcs	.+6      	; 0x9606 <xatoi+0x66>
	subi	r22, 7		; if(r22 < 10) 
    9600:	67 50       	subi	r22, 0x07	; 7
	cpi	r22, 10		;
    9602:	6a 30       	cpi	r22, 0x0A	; 10
	brcs	70f		;}
    9604:	90 f0       	brcs	.+36     	; 0x962a <xatoi+0x8a>
53:	cp	r22, r25	;if(r22 >= r25) error;
    9606:	69 17       	cp	r22, r25
	brcc	70f		;/
    9608:	80 f4       	brcc	.+32     	; 0x962a <xatoi+0x8a>
60:	ldi	r24, 33		;r21:r18 *= r25;
    960a:	81 e2       	ldi	r24, 0x21	; 33
	sub	r23, r23	;
    960c:	77 1b       	sub	r23, r23
61:	brcc	62f		;
    960e:	08 f4       	brcc	.+2      	; 0x9612 <xatoi+0x72>
	add	r23, r25	;
    9610:	79 0f       	add	r23, r25
62:	lsr	r23		;
    9612:	76 95       	lsr	r23
	ror	r21		;
    9614:	57 95       	ror	r21
	ror	r20		;
    9616:	47 95       	ror	r20
	ror	r19		;
    9618:	37 95       	ror	r19
	ror	r18		;
    961a:	27 95       	ror	r18
	dec	r24		;
    961c:	8a 95       	dec	r24
	brne	61b		;/
    961e:	b9 f7       	brne	.-18     	; 0x960e <xatoi+0x6e>
	add	r18, r22	;r21:r18 += r22;
    9620:	26 0f       	add	r18, r22
	adc	r19, r24	;
    9622:	38 1f       	adc	r19, r24
	adc	r20, r24	;
    9624:	48 1f       	adc	r20, r24
	adc	r21, r24	;/
    9626:	58 1f       	adc	r21, r24
	rjmp	50b		;repeat
    9628:	e0 cf       	rjmp	.-64     	; 0x95ea <xatoi+0x4a>

70:	ldi	r24, 0
    962a:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	81f
    962c:	01 c0       	rjmp	.+2      	; 0x9630 <xatoi+0x90>
80:	ldi	r24, 1
    962e:	81 e0       	ldi	r24, 0x01	; 1
81:	brtc	82f
    9630:	4e f4       	brtc	.+18     	; 0x9644 <xatoi+0xa4>
	clr	r22
    9632:	66 27       	eor	r22, r22
	com	r18
    9634:	20 95       	com	r18
	com	r19
    9636:	30 95       	com	r19
	com	r20
    9638:	40 95       	com	r20
	com	r21
    963a:	50 95       	com	r21
	adc	r18, r22
    963c:	26 1f       	adc	r18, r22
	adc	r19, r22
    963e:	36 1f       	adc	r19, r22
	adc	r20, r22
    9640:	46 1f       	adc	r20, r22
	adc	r21, r22
    9642:	56 1f       	adc	r21, r22
82:	st	-X, ZH
    9644:	fe 93       	st	-X, r31
	st	-X, ZL
    9646:	ee 93       	st	-X, r30
	_MOVW	XH, XL, r1, r0
    9648:	d0 01       	movw	r26, r0
	st	X+, r18
    964a:	2d 93       	st	X+, r18
	st	X+, r19
    964c:	3d 93       	st	X+, r19
	st	X+, r20
    964e:	4d 93       	st	X+, r20
	st	X+, r21
    9650:	5d 93       	st	X+, r21
	clr	r1
    9652:	11 24       	eor	r1, r1
	ret
    9654:	08 95       	ret

00009656 <__mulsi3>:
    9656:	62 9f       	mul	r22, r18
    9658:	d0 01       	movw	r26, r0
    965a:	73 9f       	mul	r23, r19
    965c:	f0 01       	movw	r30, r0
    965e:	82 9f       	mul	r24, r18
    9660:	e0 0d       	add	r30, r0
    9662:	f1 1d       	adc	r31, r1
    9664:	64 9f       	mul	r22, r20
    9666:	e0 0d       	add	r30, r0
    9668:	f1 1d       	adc	r31, r1
    966a:	92 9f       	mul	r25, r18
    966c:	f0 0d       	add	r31, r0
    966e:	83 9f       	mul	r24, r19
    9670:	f0 0d       	add	r31, r0
    9672:	74 9f       	mul	r23, r20
    9674:	f0 0d       	add	r31, r0
    9676:	65 9f       	mul	r22, r21
    9678:	f0 0d       	add	r31, r0
    967a:	99 27       	eor	r25, r25
    967c:	72 9f       	mul	r23, r18
    967e:	b0 0d       	add	r27, r0
    9680:	e1 1d       	adc	r30, r1
    9682:	f9 1f       	adc	r31, r25
    9684:	63 9f       	mul	r22, r19
    9686:	b0 0d       	add	r27, r0
    9688:	e1 1d       	adc	r30, r1
    968a:	f9 1f       	adc	r31, r25
    968c:	bd 01       	movw	r22, r26
    968e:	cf 01       	movw	r24, r30
    9690:	11 24       	eor	r1, r1
    9692:	08 95       	ret

00009694 <__udivmodqi4>:
    9694:	99 1b       	sub	r25, r25
    9696:	79 e0       	ldi	r23, 0x09	; 9
    9698:	04 c0       	rjmp	.+8      	; 0x96a2 <__udivmodqi4_ep>

0000969a <__udivmodqi4_loop>:
    969a:	99 1f       	adc	r25, r25
    969c:	96 17       	cp	r25, r22
    969e:	08 f0       	brcs	.+2      	; 0x96a2 <__udivmodqi4_ep>
    96a0:	96 1b       	sub	r25, r22

000096a2 <__udivmodqi4_ep>:
    96a2:	88 1f       	adc	r24, r24
    96a4:	7a 95       	dec	r23
    96a6:	c9 f7       	brne	.-14     	; 0x969a <__udivmodqi4_loop>
    96a8:	80 95       	com	r24
    96aa:	08 95       	ret

000096ac <__udivmodhi4>:
    96ac:	aa 1b       	sub	r26, r26
    96ae:	bb 1b       	sub	r27, r27
    96b0:	51 e1       	ldi	r21, 0x11	; 17
    96b2:	07 c0       	rjmp	.+14     	; 0x96c2 <__udivmodhi4_ep>

000096b4 <__udivmodhi4_loop>:
    96b4:	aa 1f       	adc	r26, r26
    96b6:	bb 1f       	adc	r27, r27
    96b8:	a6 17       	cp	r26, r22
    96ba:	b7 07       	cpc	r27, r23
    96bc:	10 f0       	brcs	.+4      	; 0x96c2 <__udivmodhi4_ep>
    96be:	a6 1b       	sub	r26, r22
    96c0:	b7 0b       	sbc	r27, r23

000096c2 <__udivmodhi4_ep>:
    96c2:	88 1f       	adc	r24, r24
    96c4:	99 1f       	adc	r25, r25
    96c6:	5a 95       	dec	r21
    96c8:	a9 f7       	brne	.-22     	; 0x96b4 <__udivmodhi4_loop>
    96ca:	80 95       	com	r24
    96cc:	90 95       	com	r25
    96ce:	bc 01       	movw	r22, r24
    96d0:	cd 01       	movw	r24, r26
    96d2:	08 95       	ret

000096d4 <__divmodhi4>:
    96d4:	97 fb       	bst	r25, 7
    96d6:	09 2e       	mov	r0, r25
    96d8:	07 26       	eor	r0, r23
    96da:	0a d0       	rcall	.+20     	; 0x96f0 <__divmodhi4_neg1>
    96dc:	77 fd       	sbrc	r23, 7
    96de:	04 d0       	rcall	.+8      	; 0x96e8 <__divmodhi4_neg2>
    96e0:	e5 df       	rcall	.-54     	; 0x96ac <__udivmodhi4>
    96e2:	06 d0       	rcall	.+12     	; 0x96f0 <__divmodhi4_neg1>
    96e4:	00 20       	and	r0, r0
    96e6:	1a f4       	brpl	.+6      	; 0x96ee <__divmodhi4_exit>

000096e8 <__divmodhi4_neg2>:
    96e8:	70 95       	com	r23
    96ea:	61 95       	neg	r22
    96ec:	7f 4f       	sbci	r23, 0xFF	; 255

000096ee <__divmodhi4_exit>:
    96ee:	08 95       	ret

000096f0 <__divmodhi4_neg1>:
    96f0:	f6 f7       	brtc	.-4      	; 0x96ee <__divmodhi4_exit>
    96f2:	90 95       	com	r25
    96f4:	81 95       	neg	r24
    96f6:	9f 4f       	sbci	r25, 0xFF	; 255
    96f8:	08 95       	ret

000096fa <__udivmodsi4>:
    96fa:	a1 e2       	ldi	r26, 0x21	; 33
    96fc:	1a 2e       	mov	r1, r26
    96fe:	aa 1b       	sub	r26, r26
    9700:	bb 1b       	sub	r27, r27
    9702:	fd 01       	movw	r30, r26
    9704:	0d c0       	rjmp	.+26     	; 0x9720 <__udivmodsi4_ep>

00009706 <__udivmodsi4_loop>:
    9706:	aa 1f       	adc	r26, r26
    9708:	bb 1f       	adc	r27, r27
    970a:	ee 1f       	adc	r30, r30
    970c:	ff 1f       	adc	r31, r31
    970e:	a2 17       	cp	r26, r18
    9710:	b3 07       	cpc	r27, r19
    9712:	e4 07       	cpc	r30, r20
    9714:	f5 07       	cpc	r31, r21
    9716:	20 f0       	brcs	.+8      	; 0x9720 <__udivmodsi4_ep>
    9718:	a2 1b       	sub	r26, r18
    971a:	b3 0b       	sbc	r27, r19
    971c:	e4 0b       	sbc	r30, r20
    971e:	f5 0b       	sbc	r31, r21

00009720 <__udivmodsi4_ep>:
    9720:	66 1f       	adc	r22, r22
    9722:	77 1f       	adc	r23, r23
    9724:	88 1f       	adc	r24, r24
    9726:	99 1f       	adc	r25, r25
    9728:	1a 94       	dec	r1
    972a:	69 f7       	brne	.-38     	; 0x9706 <__udivmodsi4_loop>
    972c:	60 95       	com	r22
    972e:	70 95       	com	r23
    9730:	80 95       	com	r24
    9732:	90 95       	com	r25
    9734:	9b 01       	movw	r18, r22
    9736:	ac 01       	movw	r20, r24
    9738:	bd 01       	movw	r22, r26
    973a:	cf 01       	movw	r24, r30
    973c:	08 95       	ret

0000973e <__divmodsi4>:
    973e:	97 fb       	bst	r25, 7
    9740:	09 2e       	mov	r0, r25
    9742:	05 26       	eor	r0, r21
    9744:	0e d0       	rcall	.+28     	; 0x9762 <__divmodsi4_neg1>
    9746:	57 fd       	sbrc	r21, 7
    9748:	04 d0       	rcall	.+8      	; 0x9752 <__divmodsi4_neg2>
    974a:	d7 df       	rcall	.-82     	; 0x96fa <__udivmodsi4>
    974c:	0a d0       	rcall	.+20     	; 0x9762 <__divmodsi4_neg1>
    974e:	00 1c       	adc	r0, r0
    9750:	38 f4       	brcc	.+14     	; 0x9760 <__divmodsi4_exit>

00009752 <__divmodsi4_neg2>:
    9752:	50 95       	com	r21
    9754:	40 95       	com	r20
    9756:	30 95       	com	r19
    9758:	21 95       	neg	r18
    975a:	3f 4f       	sbci	r19, 0xFF	; 255
    975c:	4f 4f       	sbci	r20, 0xFF	; 255
    975e:	5f 4f       	sbci	r21, 0xFF	; 255

00009760 <__divmodsi4_exit>:
    9760:	08 95       	ret

00009762 <__divmodsi4_neg1>:
    9762:	f6 f7       	brtc	.-4      	; 0x9760 <__divmodsi4_exit>
    9764:	90 95       	com	r25
    9766:	80 95       	com	r24
    9768:	70 95       	com	r23
    976a:	61 95       	neg	r22
    976c:	7f 4f       	sbci	r23, 0xFF	; 255
    976e:	8f 4f       	sbci	r24, 0xFF	; 255
    9770:	9f 4f       	sbci	r25, 0xFF	; 255
    9772:	08 95       	ret

00009774 <__prologue_saves__>:
    9774:	2f 92       	push	r2
    9776:	3f 92       	push	r3
    9778:	4f 92       	push	r4
    977a:	5f 92       	push	r5
    977c:	6f 92       	push	r6
    977e:	7f 92       	push	r7
    9780:	8f 92       	push	r8
    9782:	9f 92       	push	r9
    9784:	af 92       	push	r10
    9786:	bf 92       	push	r11
    9788:	cf 92       	push	r12
    978a:	df 92       	push	r13
    978c:	ef 92       	push	r14
    978e:	ff 92       	push	r15
    9790:	0f 93       	push	r16
    9792:	1f 93       	push	r17
    9794:	cf 93       	push	r28
    9796:	df 93       	push	r29
    9798:	cd b7       	in	r28, 0x3d	; 61
    979a:	de b7       	in	r29, 0x3e	; 62
    979c:	ca 1b       	sub	r28, r26
    979e:	db 0b       	sbc	r29, r27
    97a0:	cd bf       	out	0x3d, r28	; 61
    97a2:	de bf       	out	0x3e, r29	; 62
    97a4:	19 94       	eijmp

000097a6 <__epilogue_restores__>:
    97a6:	2a 88       	ldd	r2, Y+18	; 0x12
    97a8:	39 88       	ldd	r3, Y+17	; 0x11
    97aa:	48 88       	ldd	r4, Y+16	; 0x10
    97ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    97ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    97b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    97b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    97b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    97b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    97b8:	b9 84       	ldd	r11, Y+9	; 0x09
    97ba:	c8 84       	ldd	r12, Y+8	; 0x08
    97bc:	df 80       	ldd	r13, Y+7	; 0x07
    97be:	ee 80       	ldd	r14, Y+6	; 0x06
    97c0:	fd 80       	ldd	r15, Y+5	; 0x05
    97c2:	0c 81       	ldd	r16, Y+4	; 0x04
    97c4:	1b 81       	ldd	r17, Y+3	; 0x03
    97c6:	aa 81       	ldd	r26, Y+2	; 0x02
    97c8:	b9 81       	ldd	r27, Y+1	; 0x01
    97ca:	ce 0f       	add	r28, r30
    97cc:	d1 1d       	adc	r29, r1
    97ce:	cd bf       	out	0x3d, r28	; 61
    97d0:	de bf       	out	0x3e, r29	; 62
    97d2:	ed 01       	movw	r28, r26
    97d4:	08 95       	ret

000097d6 <__tablejump2__>:
    97d6:	ee 0f       	add	r30, r30
    97d8:	ff 1f       	adc	r31, r31

000097da <__tablejump__>:
    97da:	05 90       	lpm	r0, Z+
    97dc:	f4 91       	lpm	r31, Z+
    97de:	e0 2d       	mov	r30, r0
    97e0:	19 94       	eijmp

000097e2 <malloc>:
    97e2:	cf 93       	push	r28
    97e4:	df 93       	push	r29
    97e6:	82 30       	cpi	r24, 0x02	; 2
    97e8:	91 05       	cpc	r25, r1
    97ea:	10 f4       	brcc	.+4      	; 0x97f0 <malloc+0xe>
    97ec:	82 e0       	ldi	r24, 0x02	; 2
    97ee:	90 e0       	ldi	r25, 0x00	; 0
    97f0:	e0 91 a7 28 	lds	r30, 0x28A7
    97f4:	f0 91 a8 28 	lds	r31, 0x28A8
    97f8:	40 e0       	ldi	r20, 0x00	; 0
    97fa:	50 e0       	ldi	r21, 0x00	; 0
    97fc:	20 e0       	ldi	r18, 0x00	; 0
    97fe:	30 e0       	ldi	r19, 0x00	; 0
    9800:	26 c0       	rjmp	.+76     	; 0x984e <malloc+0x6c>
    9802:	60 81       	ld	r22, Z
    9804:	71 81       	ldd	r23, Z+1	; 0x01
    9806:	68 17       	cp	r22, r24
    9808:	79 07       	cpc	r23, r25
    980a:	e0 f0       	brcs	.+56     	; 0x9844 <malloc+0x62>
    980c:	68 17       	cp	r22, r24
    980e:	79 07       	cpc	r23, r25
    9810:	81 f4       	brne	.+32     	; 0x9832 <malloc+0x50>
    9812:	82 81       	ldd	r24, Z+2	; 0x02
    9814:	93 81       	ldd	r25, Z+3	; 0x03
    9816:	21 15       	cp	r18, r1
    9818:	31 05       	cpc	r19, r1
    981a:	31 f0       	breq	.+12     	; 0x9828 <malloc+0x46>
    981c:	d9 01       	movw	r26, r18
    981e:	12 96       	adiw	r26, 0x02	; 2
    9820:	8d 93       	st	X+, r24
    9822:	9c 93       	st	X, r25
    9824:	13 97       	sbiw	r26, 0x03	; 3
    9826:	2b c0       	rjmp	.+86     	; 0x987e <malloc+0x9c>
    9828:	80 93 a7 28 	sts	0x28A7, r24
    982c:	90 93 a8 28 	sts	0x28A8, r25
    9830:	26 c0       	rjmp	.+76     	; 0x987e <malloc+0x9c>
    9832:	41 15       	cp	r20, r1
    9834:	51 05       	cpc	r21, r1
    9836:	19 f0       	breq	.+6      	; 0x983e <malloc+0x5c>
    9838:	64 17       	cp	r22, r20
    983a:	75 07       	cpc	r23, r21
    983c:	18 f4       	brcc	.+6      	; 0x9844 <malloc+0x62>
    983e:	ab 01       	movw	r20, r22
    9840:	e9 01       	movw	r28, r18
    9842:	df 01       	movw	r26, r30
    9844:	9f 01       	movw	r18, r30
    9846:	72 81       	ldd	r23, Z+2	; 0x02
    9848:	63 81       	ldd	r22, Z+3	; 0x03
    984a:	e7 2f       	mov	r30, r23
    984c:	f6 2f       	mov	r31, r22
    984e:	30 97       	sbiw	r30, 0x00	; 0
    9850:	c1 f6       	brne	.-80     	; 0x9802 <malloc+0x20>
    9852:	41 15       	cp	r20, r1
    9854:	51 05       	cpc	r21, r1
    9856:	01 f1       	breq	.+64     	; 0x9898 <malloc+0xb6>
    9858:	48 1b       	sub	r20, r24
    985a:	59 0b       	sbc	r21, r25
    985c:	44 30       	cpi	r20, 0x04	; 4
    985e:	51 05       	cpc	r21, r1
    9860:	80 f4       	brcc	.+32     	; 0x9882 <malloc+0xa0>
    9862:	12 96       	adiw	r26, 0x02	; 2
    9864:	8d 91       	ld	r24, X+
    9866:	9c 91       	ld	r25, X
    9868:	13 97       	sbiw	r26, 0x03	; 3
    986a:	20 97       	sbiw	r28, 0x00	; 0
    986c:	19 f0       	breq	.+6      	; 0x9874 <malloc+0x92>
    986e:	8a 83       	std	Y+2, r24	; 0x02
    9870:	9b 83       	std	Y+3, r25	; 0x03
    9872:	04 c0       	rjmp	.+8      	; 0x987c <malloc+0x9a>
    9874:	80 93 a7 28 	sts	0x28A7, r24
    9878:	90 93 a8 28 	sts	0x28A8, r25
    987c:	fd 01       	movw	r30, r26
    987e:	32 96       	adiw	r30, 0x02	; 2
    9880:	46 c0       	rjmp	.+140    	; 0x990e <malloc+0x12c>
    9882:	fd 01       	movw	r30, r26
    9884:	e4 0f       	add	r30, r20
    9886:	f5 1f       	adc	r31, r21
    9888:	81 93       	st	Z+, r24
    988a:	91 93       	st	Z+, r25
    988c:	42 50       	subi	r20, 0x02	; 2
    988e:	50 40       	sbci	r21, 0x00	; 0
    9890:	4d 93       	st	X+, r20
    9892:	5c 93       	st	X, r21
    9894:	11 97       	sbiw	r26, 0x01	; 1
    9896:	3b c0       	rjmp	.+118    	; 0x990e <malloc+0x12c>
    9898:	20 91 a5 28 	lds	r18, 0x28A5
    989c:	30 91 a6 28 	lds	r19, 0x28A6
    98a0:	21 15       	cp	r18, r1
    98a2:	31 05       	cpc	r19, r1
    98a4:	41 f4       	brne	.+16     	; 0x98b6 <malloc+0xd4>
    98a6:	20 91 ac 23 	lds	r18, 0x23AC
    98aa:	30 91 ad 23 	lds	r19, 0x23AD
    98ae:	20 93 a5 28 	sts	0x28A5, r18
    98b2:	30 93 a6 28 	sts	0x28A6, r19
    98b6:	20 91 ae 23 	lds	r18, 0x23AE
    98ba:	30 91 af 23 	lds	r19, 0x23AF
    98be:	21 15       	cp	r18, r1
    98c0:	31 05       	cpc	r19, r1
    98c2:	41 f4       	brne	.+16     	; 0x98d4 <malloc+0xf2>
    98c4:	2d b7       	in	r18, 0x3d	; 61
    98c6:	3e b7       	in	r19, 0x3e	; 62
    98c8:	40 91 aa 23 	lds	r20, 0x23AA
    98cc:	50 91 ab 23 	lds	r21, 0x23AB
    98d0:	24 1b       	sub	r18, r20
    98d2:	35 0b       	sbc	r19, r21
    98d4:	e0 91 a5 28 	lds	r30, 0x28A5
    98d8:	f0 91 a6 28 	lds	r31, 0x28A6
    98dc:	e2 17       	cp	r30, r18
    98de:	f3 07       	cpc	r31, r19
    98e0:	a0 f4       	brcc	.+40     	; 0x990a <malloc+0x128>
    98e2:	2e 1b       	sub	r18, r30
    98e4:	3f 0b       	sbc	r19, r31
    98e6:	28 17       	cp	r18, r24
    98e8:	39 07       	cpc	r19, r25
    98ea:	78 f0       	brcs	.+30     	; 0x990a <malloc+0x128>
    98ec:	ac 01       	movw	r20, r24
    98ee:	4e 5f       	subi	r20, 0xFE	; 254
    98f0:	5f 4f       	sbci	r21, 0xFF	; 255
    98f2:	24 17       	cp	r18, r20
    98f4:	35 07       	cpc	r19, r21
    98f6:	48 f0       	brcs	.+18     	; 0x990a <malloc+0x128>
    98f8:	4e 0f       	add	r20, r30
    98fa:	5f 1f       	adc	r21, r31
    98fc:	40 93 a5 28 	sts	0x28A5, r20
    9900:	50 93 a6 28 	sts	0x28A6, r21
    9904:	81 93       	st	Z+, r24
    9906:	91 93       	st	Z+, r25
    9908:	02 c0       	rjmp	.+4      	; 0x990e <malloc+0x12c>
    990a:	e0 e0       	ldi	r30, 0x00	; 0
    990c:	f0 e0       	ldi	r31, 0x00	; 0
    990e:	cf 01       	movw	r24, r30
    9910:	df 91       	pop	r29
    9912:	cf 91       	pop	r28
    9914:	08 95       	ret

00009916 <free>:
    9916:	cf 93       	push	r28
    9918:	df 93       	push	r29
    991a:	00 97       	sbiw	r24, 0x00	; 0
    991c:	09 f4       	brne	.+2      	; 0x9920 <free+0xa>
    991e:	91 c0       	rjmp	.+290    	; 0x9a42 <free+0x12c>
    9920:	fc 01       	movw	r30, r24
    9922:	32 97       	sbiw	r30, 0x02	; 2
    9924:	12 82       	std	Z+2, r1	; 0x02
    9926:	13 82       	std	Z+3, r1	; 0x03
    9928:	60 91 a7 28 	lds	r22, 0x28A7
    992c:	70 91 a8 28 	lds	r23, 0x28A8
    9930:	61 15       	cp	r22, r1
    9932:	71 05       	cpc	r23, r1
    9934:	81 f4       	brne	.+32     	; 0x9956 <free+0x40>
    9936:	20 81       	ld	r18, Z
    9938:	31 81       	ldd	r19, Z+1	; 0x01
    993a:	28 0f       	add	r18, r24
    993c:	39 1f       	adc	r19, r25
    993e:	80 91 a5 28 	lds	r24, 0x28A5
    9942:	90 91 a6 28 	lds	r25, 0x28A6
    9946:	82 17       	cp	r24, r18
    9948:	93 07       	cpc	r25, r19
    994a:	99 f5       	brne	.+102    	; 0x99b2 <free+0x9c>
    994c:	e0 93 a5 28 	sts	0x28A5, r30
    9950:	f0 93 a6 28 	sts	0x28A6, r31
    9954:	76 c0       	rjmp	.+236    	; 0x9a42 <free+0x12c>
    9956:	db 01       	movw	r26, r22
    9958:	80 e0       	ldi	r24, 0x00	; 0
    995a:	90 e0       	ldi	r25, 0x00	; 0
    995c:	02 c0       	rjmp	.+4      	; 0x9962 <free+0x4c>
    995e:	cd 01       	movw	r24, r26
    9960:	d9 01       	movw	r26, r18
    9962:	ae 17       	cp	r26, r30
    9964:	bf 07       	cpc	r27, r31
    9966:	48 f4       	brcc	.+18     	; 0x997a <free+0x64>
    9968:	12 96       	adiw	r26, 0x02	; 2
    996a:	2d 91       	ld	r18, X+
    996c:	3c 91       	ld	r19, X
    996e:	13 97       	sbiw	r26, 0x03	; 3
    9970:	21 15       	cp	r18, r1
    9972:	31 05       	cpc	r19, r1
    9974:	a1 f7       	brne	.-24     	; 0x995e <free+0x48>
    9976:	cd 01       	movw	r24, r26
    9978:	21 c0       	rjmp	.+66     	; 0x99bc <free+0xa6>
    997a:	a2 83       	std	Z+2, r26	; 0x02
    997c:	b3 83       	std	Z+3, r27	; 0x03
    997e:	ef 01       	movw	r28, r30
    9980:	49 91       	ld	r20, Y+
    9982:	59 91       	ld	r21, Y+
    9984:	9e 01       	movw	r18, r28
    9986:	24 0f       	add	r18, r20
    9988:	35 1f       	adc	r19, r21
    998a:	a2 17       	cp	r26, r18
    998c:	b3 07       	cpc	r27, r19
    998e:	79 f4       	brne	.+30     	; 0x99ae <free+0x98>
    9990:	2d 91       	ld	r18, X+
    9992:	3c 91       	ld	r19, X
    9994:	11 97       	sbiw	r26, 0x01	; 1
    9996:	24 0f       	add	r18, r20
    9998:	35 1f       	adc	r19, r21
    999a:	2e 5f       	subi	r18, 0xFE	; 254
    999c:	3f 4f       	sbci	r19, 0xFF	; 255
    999e:	20 83       	st	Z, r18
    99a0:	31 83       	std	Z+1, r19	; 0x01
    99a2:	12 96       	adiw	r26, 0x02	; 2
    99a4:	2d 91       	ld	r18, X+
    99a6:	3c 91       	ld	r19, X
    99a8:	13 97       	sbiw	r26, 0x03	; 3
    99aa:	22 83       	std	Z+2, r18	; 0x02
    99ac:	33 83       	std	Z+3, r19	; 0x03
    99ae:	00 97       	sbiw	r24, 0x00	; 0
    99b0:	29 f4       	brne	.+10     	; 0x99bc <free+0xa6>
    99b2:	e0 93 a7 28 	sts	0x28A7, r30
    99b6:	f0 93 a8 28 	sts	0x28A8, r31
    99ba:	43 c0       	rjmp	.+134    	; 0x9a42 <free+0x12c>
    99bc:	dc 01       	movw	r26, r24
    99be:	12 96       	adiw	r26, 0x02	; 2
    99c0:	ed 93       	st	X+, r30
    99c2:	fc 93       	st	X, r31
    99c4:	13 97       	sbiw	r26, 0x03	; 3
    99c6:	4d 91       	ld	r20, X+
    99c8:	5d 91       	ld	r21, X+
    99ca:	a4 0f       	add	r26, r20
    99cc:	b5 1f       	adc	r27, r21
    99ce:	ea 17       	cp	r30, r26
    99d0:	fb 07       	cpc	r31, r27
    99d2:	69 f4       	brne	.+26     	; 0x99ee <free+0xd8>
    99d4:	20 81       	ld	r18, Z
    99d6:	31 81       	ldd	r19, Z+1	; 0x01
    99d8:	24 0f       	add	r18, r20
    99da:	35 1f       	adc	r19, r21
    99dc:	2e 5f       	subi	r18, 0xFE	; 254
    99de:	3f 4f       	sbci	r19, 0xFF	; 255
    99e0:	ec 01       	movw	r28, r24
    99e2:	28 83       	st	Y, r18
    99e4:	39 83       	std	Y+1, r19	; 0x01
    99e6:	22 81       	ldd	r18, Z+2	; 0x02
    99e8:	33 81       	ldd	r19, Z+3	; 0x03
    99ea:	2a 83       	std	Y+2, r18	; 0x02
    99ec:	3b 83       	std	Y+3, r19	; 0x03
    99ee:	e0 e0       	ldi	r30, 0x00	; 0
    99f0:	f0 e0       	ldi	r31, 0x00	; 0
    99f2:	02 c0       	rjmp	.+4      	; 0x99f8 <free+0xe2>
    99f4:	fb 01       	movw	r30, r22
    99f6:	bc 01       	movw	r22, r24
    99f8:	db 01       	movw	r26, r22
    99fa:	12 96       	adiw	r26, 0x02	; 2
    99fc:	8d 91       	ld	r24, X+
    99fe:	9c 91       	ld	r25, X
    9a00:	13 97       	sbiw	r26, 0x03	; 3
    9a02:	00 97       	sbiw	r24, 0x00	; 0
    9a04:	b9 f7       	brne	.-18     	; 0x99f4 <free+0xde>
    9a06:	9b 01       	movw	r18, r22
    9a08:	2e 5f       	subi	r18, 0xFE	; 254
    9a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    9a0c:	8d 91       	ld	r24, X+
    9a0e:	9c 91       	ld	r25, X
    9a10:	11 97       	sbiw	r26, 0x01	; 1
    9a12:	82 0f       	add	r24, r18
    9a14:	93 1f       	adc	r25, r19
    9a16:	40 91 a5 28 	lds	r20, 0x28A5
    9a1a:	50 91 a6 28 	lds	r21, 0x28A6
    9a1e:	48 17       	cp	r20, r24
    9a20:	59 07       	cpc	r21, r25
    9a22:	79 f4       	brne	.+30     	; 0x9a42 <free+0x12c>
    9a24:	30 97       	sbiw	r30, 0x00	; 0
    9a26:	29 f4       	brne	.+10     	; 0x9a32 <free+0x11c>
    9a28:	10 92 a7 28 	sts	0x28A7, r1
    9a2c:	10 92 a8 28 	sts	0x28A8, r1
    9a30:	02 c0       	rjmp	.+4      	; 0x9a36 <free+0x120>
    9a32:	12 82       	std	Z+2, r1	; 0x02
    9a34:	13 82       	std	Z+3, r1	; 0x03
    9a36:	22 50       	subi	r18, 0x02	; 2
    9a38:	30 40       	sbci	r19, 0x00	; 0
    9a3a:	20 93 a5 28 	sts	0x28A5, r18
    9a3e:	30 93 a6 28 	sts	0x28A6, r19
    9a42:	df 91       	pop	r29
    9a44:	cf 91       	pop	r28
    9a46:	08 95       	ret

00009a48 <strtoul>:
    9a48:	2f 92       	push	r2
    9a4a:	3f 92       	push	r3
    9a4c:	4f 92       	push	r4
    9a4e:	5f 92       	push	r5
    9a50:	6f 92       	push	r6
    9a52:	7f 92       	push	r7
    9a54:	9f 92       	push	r9
    9a56:	af 92       	push	r10
    9a58:	bf 92       	push	r11
    9a5a:	cf 92       	push	r12
    9a5c:	df 92       	push	r13
    9a5e:	ef 92       	push	r14
    9a60:	ff 92       	push	r15
    9a62:	0f 93       	push	r16
    9a64:	1f 93       	push	r17
    9a66:	cf 93       	push	r28
    9a68:	df 93       	push	r29
    9a6a:	3b 01       	movw	r6, r22
    9a6c:	ea 01       	movw	r28, r20
    9a6e:	61 15       	cp	r22, r1
    9a70:	71 05       	cpc	r23, r1
    9a72:	19 f0       	breq	.+6      	; 0x9a7a <strtoul+0x32>
    9a74:	fb 01       	movw	r30, r22
    9a76:	80 83       	st	Z, r24
    9a78:	91 83       	std	Z+1, r25	; 0x01
    9a7a:	20 97       	sbiw	r28, 0x00	; 0
    9a7c:	39 f0       	breq	.+14     	; 0x9a8c <strtoul+0x44>
    9a7e:	9e 01       	movw	r18, r28
    9a80:	22 50       	subi	r18, 0x02	; 2
    9a82:	30 40       	sbci	r19, 0x00	; 0
    9a84:	23 32       	cpi	r18, 0x23	; 35
    9a86:	31 05       	cpc	r19, r1
    9a88:	08 f0       	brcs	.+2      	; 0x9a8c <strtoul+0x44>
    9a8a:	d5 c0       	rjmp	.+426    	; 0x9c36 <strtoul+0x1ee>
    9a8c:	c8 2e       	mov	r12, r24
    9a8e:	d9 2e       	mov	r13, r25
    9a90:	f6 01       	movw	r30, r12
    9a92:	11 91       	ld	r17, Z+
    9a94:	6f 01       	movw	r12, r30
    9a96:	7f 01       	movw	r14, r30
    9a98:	81 2f       	mov	r24, r17
    9a9a:	90 e0       	ldi	r25, 0x00	; 0
    9a9c:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <isspace>
    9aa0:	00 97       	sbiw	r24, 0x00	; 0
    9aa2:	b1 f7       	brne	.-20     	; 0x9a90 <strtoul+0x48>
    9aa4:	1d 32       	cpi	r17, 0x2D	; 45
    9aa6:	31 f4       	brne	.+12     	; 0x9ab4 <strtoul+0x6c>
    9aa8:	f6 01       	movw	r30, r12
    9aaa:	11 91       	ld	r17, Z+
    9aac:	7f 01       	movw	r14, r30
    9aae:	99 24       	eor	r9, r9
    9ab0:	93 94       	inc	r9
    9ab2:	06 c0       	rjmp	.+12     	; 0x9ac0 <strtoul+0x78>
    9ab4:	1b 32       	cpi	r17, 0x2B	; 43
    9ab6:	19 f4       	brne	.+6      	; 0x9abe <strtoul+0x76>
    9ab8:	f6 01       	movw	r30, r12
    9aba:	11 91       	ld	r17, Z+
    9abc:	7f 01       	movw	r14, r30
    9abe:	99 24       	eor	r9, r9
    9ac0:	20 97       	sbiw	r28, 0x00	; 0
    9ac2:	19 f0       	breq	.+6      	; 0x9aca <strtoul+0x82>
    9ac4:	c0 31       	cpi	r28, 0x10	; 16
    9ac6:	d1 05       	cpc	r29, r1
    9ac8:	d1 f4       	brne	.+52     	; 0x9afe <strtoul+0xb6>
    9aca:	10 33       	cpi	r17, 0x30	; 48
    9acc:	89 f4       	brne	.+34     	; 0x9af0 <strtoul+0xa8>
    9ace:	f7 01       	movw	r30, r14
    9ad0:	80 81       	ld	r24, Z
    9ad2:	88 37       	cpi	r24, 0x78	; 120
    9ad4:	11 f0       	breq	.+4      	; 0x9ada <strtoul+0x92>
    9ad6:	88 35       	cpi	r24, 0x58	; 88
    9ad8:	59 f4       	brne	.+22     	; 0x9af0 <strtoul+0xa8>
    9ada:	f7 01       	movw	r30, r14
    9adc:	11 81       	ldd	r17, Z+1	; 0x01
    9ade:	82 e0       	ldi	r24, 0x02	; 2
    9ae0:	90 e0       	ldi	r25, 0x00	; 0
    9ae2:	e8 0e       	add	r14, r24
    9ae4:	f9 1e       	adc	r15, r25
    9ae6:	92 e0       	ldi	r25, 0x02	; 2
    9ae8:	99 2a       	or	r9, r25
    9aea:	c0 e1       	ldi	r28, 0x10	; 16
    9aec:	d0 e0       	ldi	r29, 0x00	; 0
    9aee:	07 c0       	rjmp	.+14     	; 0x9afe <strtoul+0xb6>
    9af0:	20 97       	sbiw	r28, 0x00	; 0
    9af2:	29 f4       	brne	.+10     	; 0x9afe <strtoul+0xb6>
    9af4:	10 33       	cpi	r17, 0x30	; 48
    9af6:	b1 f0       	breq	.+44     	; 0x9b24 <strtoul+0xdc>
    9af8:	ca e0       	ldi	r28, 0x0A	; 10
    9afa:	d0 e0       	ldi	r29, 0x00	; 0
    9afc:	2b c0       	rjmp	.+86     	; 0x9b54 <strtoul+0x10c>
    9afe:	ca 30       	cpi	r28, 0x0A	; 10
    9b00:	d1 05       	cpc	r29, r1
    9b02:	41 f1       	breq	.+80     	; 0x9b54 <strtoul+0x10c>
    9b04:	c0 31       	cpi	r28, 0x10	; 16
    9b06:	d1 05       	cpc	r29, r1
    9b08:	21 f0       	breq	.+8      	; 0x9b12 <strtoul+0xca>
    9b0a:	c8 30       	cpi	r28, 0x08	; 8
    9b0c:	d1 05       	cpc	r29, r1
    9b0e:	a9 f4       	brne	.+42     	; 0x9b3a <strtoul+0xf2>
    9b10:	09 c0       	rjmp	.+18     	; 0x9b24 <strtoul+0xdc>
    9b12:	2f ef       	ldi	r18, 0xFF	; 255
    9b14:	a2 2e       	mov	r10, r18
    9b16:	2f ef       	ldi	r18, 0xFF	; 255
    9b18:	b2 2e       	mov	r11, r18
    9b1a:	2f ef       	ldi	r18, 0xFF	; 255
    9b1c:	c2 2e       	mov	r12, r18
    9b1e:	2f e0       	ldi	r18, 0x0F	; 15
    9b20:	d2 2e       	mov	r13, r18
    9b22:	20 c0       	rjmp	.+64     	; 0x9b64 <strtoul+0x11c>
    9b24:	c8 e0       	ldi	r28, 0x08	; 8
    9b26:	d0 e0       	ldi	r29, 0x00	; 0
    9b28:	9f ef       	ldi	r25, 0xFF	; 255
    9b2a:	a9 2e       	mov	r10, r25
    9b2c:	9f ef       	ldi	r25, 0xFF	; 255
    9b2e:	b9 2e       	mov	r11, r25
    9b30:	9f ef       	ldi	r25, 0xFF	; 255
    9b32:	c9 2e       	mov	r12, r25
    9b34:	9f e1       	ldi	r25, 0x1F	; 31
    9b36:	d9 2e       	mov	r13, r25
    9b38:	15 c0       	rjmp	.+42     	; 0x9b64 <strtoul+0x11c>
    9b3a:	9e 01       	movw	r18, r28
    9b3c:	44 27       	eor	r20, r20
    9b3e:	37 fd       	sbrc	r19, 7
    9b40:	40 95       	com	r20
    9b42:	54 2f       	mov	r21, r20
    9b44:	6f ef       	ldi	r22, 0xFF	; 255
    9b46:	7f ef       	ldi	r23, 0xFF	; 255
    9b48:	cb 01       	movw	r24, r22
    9b4a:	0e 94 7d 4b 	call	0x96fa	; 0x96fa <__udivmodsi4>
    9b4e:	59 01       	movw	r10, r18
    9b50:	6a 01       	movw	r12, r20
    9b52:	08 c0       	rjmp	.+16     	; 0x9b64 <strtoul+0x11c>
    9b54:	89 e9       	ldi	r24, 0x99	; 153
    9b56:	a8 2e       	mov	r10, r24
    9b58:	89 e9       	ldi	r24, 0x99	; 153
    9b5a:	b8 2e       	mov	r11, r24
    9b5c:	89 e9       	ldi	r24, 0x99	; 153
    9b5e:	c8 2e       	mov	r12, r24
    9b60:	89 e1       	ldi	r24, 0x19	; 25
    9b62:	d8 2e       	mov	r13, r24
    9b64:	60 e0       	ldi	r22, 0x00	; 0
    9b66:	20 e0       	ldi	r18, 0x00	; 0
    9b68:	30 e0       	ldi	r19, 0x00	; 0
    9b6a:	a9 01       	movw	r20, r18
    9b6c:	1e 01       	movw	r2, r28
    9b6e:	44 24       	eor	r4, r4
    9b70:	37 fc       	sbrc	r3, 7
    9b72:	40 94       	com	r4
    9b74:	54 2c       	mov	r5, r4
    9b76:	01 2f       	mov	r16, r17
    9b78:	00 53       	subi	r16, 0x30	; 48
    9b7a:	0a 30       	cpi	r16, 0x0A	; 10
    9b7c:	60 f0       	brcs	.+24     	; 0x9b96 <strtoul+0x14e>
    9b7e:	81 2f       	mov	r24, r17
    9b80:	81 54       	subi	r24, 0x41	; 65
    9b82:	8a 31       	cpi	r24, 0x1A	; 26
    9b84:	10 f4       	brcc	.+4      	; 0x9b8a <strtoul+0x142>
    9b86:	07 50       	subi	r16, 0x07	; 7
    9b88:	06 c0       	rjmp	.+12     	; 0x9b96 <strtoul+0x14e>
    9b8a:	81 2f       	mov	r24, r17
    9b8c:	81 56       	subi	r24, 0x61	; 97
    9b8e:	8a 31       	cpi	r24, 0x1A	; 26
    9b90:	50 f5       	brcc	.+84     	; 0x9be6 <strtoul+0x19e>
    9b92:	01 2f       	mov	r16, r17
    9b94:	07 55       	subi	r16, 0x57	; 87
    9b96:	80 2f       	mov	r24, r16
    9b98:	90 e0       	ldi	r25, 0x00	; 0
    9b9a:	8c 17       	cp	r24, r28
    9b9c:	9d 07       	cpc	r25, r29
    9b9e:	1c f5       	brge	.+70     	; 0x9be6 <strtoul+0x19e>
    9ba0:	6f 3f       	cpi	r22, 0xFF	; 255
    9ba2:	e9 f0       	breq	.+58     	; 0x9bde <strtoul+0x196>
    9ba4:	a2 16       	cp	r10, r18
    9ba6:	b3 06       	cpc	r11, r19
    9ba8:	c4 06       	cpc	r12, r20
    9baa:	d5 06       	cpc	r13, r21
    9bac:	a8 f0       	brcs	.+42     	; 0x9bd8 <strtoul+0x190>
    9bae:	ca 01       	movw	r24, r20
    9bb0:	b9 01       	movw	r22, r18
    9bb2:	a2 01       	movw	r20, r4
    9bb4:	91 01       	movw	r18, r2
    9bb6:	0e 94 2b 4b 	call	0x9656	; 0x9656 <__mulsi3>
    9bba:	9b 01       	movw	r18, r22
    9bbc:	ac 01       	movw	r20, r24
    9bbe:	80 2f       	mov	r24, r16
    9bc0:	90 e0       	ldi	r25, 0x00	; 0
    9bc2:	a0 e0       	ldi	r26, 0x00	; 0
    9bc4:	b0 e0       	ldi	r27, 0x00	; 0
    9bc6:	28 0f       	add	r18, r24
    9bc8:	39 1f       	adc	r19, r25
    9bca:	4a 1f       	adc	r20, r26
    9bcc:	5b 1f       	adc	r21, r27
    9bce:	28 17       	cp	r18, r24
    9bd0:	39 07       	cpc	r19, r25
    9bd2:	4a 07       	cpc	r20, r26
    9bd4:	5b 07       	cpc	r21, r27
    9bd6:	10 f4       	brcc	.+4      	; 0x9bdc <strtoul+0x194>
    9bd8:	6f ef       	ldi	r22, 0xFF	; 255
    9bda:	01 c0       	rjmp	.+2      	; 0x9bde <strtoul+0x196>
    9bdc:	61 e0       	ldi	r22, 0x01	; 1
    9bde:	f7 01       	movw	r30, r14
    9be0:	11 91       	ld	r17, Z+
    9be2:	7f 01       	movw	r14, r30
    9be4:	c8 cf       	rjmp	.-112    	; 0x9b76 <strtoul+0x12e>
    9be6:	61 14       	cp	r6, r1
    9be8:	71 04       	cpc	r7, r1
    9bea:	81 f0       	breq	.+32     	; 0x9c0c <strtoul+0x1c4>
    9bec:	66 23       	and	r22, r22
    9bee:	39 f0       	breq	.+14     	; 0x9bfe <strtoul+0x1b6>
    9bf0:	08 94       	sec
    9bf2:	e1 08       	sbc	r14, r1
    9bf4:	f1 08       	sbc	r15, r1
    9bf6:	f3 01       	movw	r30, r6
    9bf8:	e0 82       	st	Z, r14
    9bfa:	f1 82       	std	Z+1, r15	; 0x01
    9bfc:	07 c0       	rjmp	.+14     	; 0x9c0c <strtoul+0x1c4>
    9bfe:	91 fe       	sbrs	r9, 1
    9c00:	05 c0       	rjmp	.+10     	; 0x9c0c <strtoul+0x1c4>
    9c02:	c7 01       	movw	r24, r14
    9c04:	02 97       	sbiw	r24, 0x02	; 2
    9c06:	f3 01       	movw	r30, r6
    9c08:	80 83       	st	Z, r24
    9c0a:	91 83       	std	Z+1, r25	; 0x01
    9c0c:	90 fe       	sbrs	r9, 0
    9c0e:	07 c0       	rjmp	.+14     	; 0x9c1e <strtoul+0x1d6>
    9c10:	50 95       	com	r21
    9c12:	40 95       	com	r20
    9c14:	30 95       	com	r19
    9c16:	21 95       	neg	r18
    9c18:	3f 4f       	sbci	r19, 0xFF	; 255
    9c1a:	4f 4f       	sbci	r20, 0xFF	; 255
    9c1c:	5f 4f       	sbci	r21, 0xFF	; 255
    9c1e:	67 ff       	sbrs	r22, 7
    9c20:	0d c0       	rjmp	.+26     	; 0x9c3c <strtoul+0x1f4>
    9c22:	82 e2       	ldi	r24, 0x22	; 34
    9c24:	90 e0       	ldi	r25, 0x00	; 0
    9c26:	80 93 a9 28 	sts	0x28A9, r24
    9c2a:	90 93 aa 28 	sts	0x28AA, r25
    9c2e:	2f ef       	ldi	r18, 0xFF	; 255
    9c30:	3f ef       	ldi	r19, 0xFF	; 255
    9c32:	a9 01       	movw	r20, r18
    9c34:	03 c0       	rjmp	.+6      	; 0x9c3c <strtoul+0x1f4>
    9c36:	20 e0       	ldi	r18, 0x00	; 0
    9c38:	30 e0       	ldi	r19, 0x00	; 0
    9c3a:	a9 01       	movw	r20, r18
    9c3c:	b9 01       	movw	r22, r18
    9c3e:	ca 01       	movw	r24, r20
    9c40:	df 91       	pop	r29
    9c42:	cf 91       	pop	r28
    9c44:	1f 91       	pop	r17
    9c46:	0f 91       	pop	r16
    9c48:	ff 90       	pop	r15
    9c4a:	ef 90       	pop	r14
    9c4c:	df 90       	pop	r13
    9c4e:	cf 90       	pop	r12
    9c50:	bf 90       	pop	r11
    9c52:	af 90       	pop	r10
    9c54:	9f 90       	pop	r9
    9c56:	7f 90       	pop	r7
    9c58:	6f 90       	pop	r6
    9c5a:	5f 90       	pop	r5
    9c5c:	4f 90       	pop	r4
    9c5e:	3f 90       	pop	r3
    9c60:	2f 90       	pop	r2
    9c62:	08 95       	ret

00009c64 <isspace>:
    9c64:	91 11       	cpse	r25, r1
    9c66:	6d c2       	rjmp	.+1242   	; 0xa142 <__ctype_isfalse>
    9c68:	80 32       	cpi	r24, 0x20	; 32
    9c6a:	19 f0       	breq	.+6      	; 0x9c72 <isspace+0xe>
    9c6c:	89 50       	subi	r24, 0x09	; 9
    9c6e:	85 50       	subi	r24, 0x05	; 5
    9c70:	d0 f7       	brcc	.-12     	; 0x9c66 <isspace+0x2>
    9c72:	08 95       	ret

00009c74 <sprintf>:
    9c74:	0f 93       	push	r16
    9c76:	1f 93       	push	r17
    9c78:	df 93       	push	r29
    9c7a:	cf 93       	push	r28
    9c7c:	cd b7       	in	r28, 0x3d	; 61
    9c7e:	de b7       	in	r29, 0x3e	; 62
    9c80:	2e 97       	sbiw	r28, 0x0e	; 14
    9c82:	cd bf       	out	0x3d, r28	; 61
    9c84:	de bf       	out	0x3e, r29	; 62
    9c86:	0e 89       	ldd	r16, Y+22	; 0x16
    9c88:	1f 89       	ldd	r17, Y+23	; 0x17
    9c8a:	86 e0       	ldi	r24, 0x06	; 6
    9c8c:	8c 83       	std	Y+4, r24	; 0x04
    9c8e:	09 83       	std	Y+1, r16	; 0x01
    9c90:	1a 83       	std	Y+2, r17	; 0x02
    9c92:	8f ef       	ldi	r24, 0xFF	; 255
    9c94:	9f e7       	ldi	r25, 0x7F	; 127
    9c96:	8d 83       	std	Y+5, r24	; 0x05
    9c98:	9e 83       	std	Y+6, r25	; 0x06
    9c9a:	9e 01       	movw	r18, r28
    9c9c:	26 5e       	subi	r18, 0xE6	; 230
    9c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    9ca0:	ce 01       	movw	r24, r28
    9ca2:	01 96       	adiw	r24, 0x01	; 1
    9ca4:	68 8d       	ldd	r22, Y+24	; 0x18
    9ca6:	79 8d       	ldd	r23, Y+25	; 0x19
    9ca8:	a9 01       	movw	r20, r18
    9caa:	0e 94 64 4e 	call	0x9cc8	; 0x9cc8 <vfprintf>
    9cae:	ef 81       	ldd	r30, Y+7	; 0x07
    9cb0:	f8 85       	ldd	r31, Y+8	; 0x08
    9cb2:	e0 0f       	add	r30, r16
    9cb4:	f1 1f       	adc	r31, r17
    9cb6:	10 82       	st	Z, r1
    9cb8:	2e 96       	adiw	r28, 0x0e	; 14
    9cba:	cd bf       	out	0x3d, r28	; 61
    9cbc:	de bf       	out	0x3e, r29	; 62
    9cbe:	cf 91       	pop	r28
    9cc0:	df 91       	pop	r29
    9cc2:	1f 91       	pop	r17
    9cc4:	0f 91       	pop	r16
    9cc6:	08 95       	ret

00009cc8 <vfprintf>:
    9cc8:	2f 92       	push	r2
    9cca:	3f 92       	push	r3
    9ccc:	4f 92       	push	r4
    9cce:	5f 92       	push	r5
    9cd0:	6f 92       	push	r6
    9cd2:	7f 92       	push	r7
    9cd4:	8f 92       	push	r8
    9cd6:	9f 92       	push	r9
    9cd8:	af 92       	push	r10
    9cda:	bf 92       	push	r11
    9cdc:	cf 92       	push	r12
    9cde:	df 92       	push	r13
    9ce0:	ef 92       	push	r14
    9ce2:	ff 92       	push	r15
    9ce4:	0f 93       	push	r16
    9ce6:	1f 93       	push	r17
    9ce8:	df 93       	push	r29
    9cea:	cf 93       	push	r28
    9cec:	cd b7       	in	r28, 0x3d	; 61
    9cee:	de b7       	in	r29, 0x3e	; 62
    9cf0:	2c 97       	sbiw	r28, 0x0c	; 12
    9cf2:	cd bf       	out	0x3d, r28	; 61
    9cf4:	de bf       	out	0x3e, r29	; 62
    9cf6:	6c 01       	movw	r12, r24
    9cf8:	1b 01       	movw	r2, r22
    9cfa:	8a 01       	movw	r16, r20
    9cfc:	fc 01       	movw	r30, r24
    9cfe:	16 82       	std	Z+6, r1	; 0x06
    9d00:	17 82       	std	Z+7, r1	; 0x07
    9d02:	83 81       	ldd	r24, Z+3	; 0x03
    9d04:	81 ff       	sbrs	r24, 1
    9d06:	d1 c1       	rjmp	.+930    	; 0xa0aa <vfprintf+0x3e2>
    9d08:	2e 01       	movw	r4, r28
    9d0a:	08 94       	sec
    9d0c:	41 1c       	adc	r4, r1
    9d0e:	51 1c       	adc	r5, r1
    9d10:	f6 01       	movw	r30, r12
    9d12:	93 81       	ldd	r25, Z+3	; 0x03
    9d14:	f1 01       	movw	r30, r2
    9d16:	93 fd       	sbrc	r25, 3
    9d18:	85 91       	lpm	r24, Z+
    9d1a:	93 ff       	sbrs	r25, 3
    9d1c:	81 91       	ld	r24, Z+
    9d1e:	1f 01       	movw	r2, r30
    9d20:	88 23       	and	r24, r24
    9d22:	09 f4       	brne	.+2      	; 0x9d26 <vfprintf+0x5e>
    9d24:	be c1       	rjmp	.+892    	; 0xa0a2 <vfprintf+0x3da>
    9d26:	85 32       	cpi	r24, 0x25	; 37
    9d28:	39 f4       	brne	.+14     	; 0x9d38 <vfprintf+0x70>
    9d2a:	93 fd       	sbrc	r25, 3
    9d2c:	85 91       	lpm	r24, Z+
    9d2e:	93 ff       	sbrs	r25, 3
    9d30:	81 91       	ld	r24, Z+
    9d32:	1f 01       	movw	r2, r30
    9d34:	85 32       	cpi	r24, 0x25	; 37
    9d36:	29 f4       	brne	.+10     	; 0x9d42 <vfprintf+0x7a>
    9d38:	90 e0       	ldi	r25, 0x00	; 0
    9d3a:	b6 01       	movw	r22, r12
    9d3c:	0e 94 ba 50 	call	0xa174	; 0xa174 <fputc>
    9d40:	e7 cf       	rjmp	.-50     	; 0x9d10 <vfprintf+0x48>
    9d42:	ee 24       	eor	r14, r14
    9d44:	ff 24       	eor	r15, r15
    9d46:	20 e0       	ldi	r18, 0x00	; 0
    9d48:	20 32       	cpi	r18, 0x20	; 32
    9d4a:	b0 f4       	brcc	.+44     	; 0x9d78 <vfprintf+0xb0>
    9d4c:	8b 32       	cpi	r24, 0x2B	; 43
    9d4e:	69 f0       	breq	.+26     	; 0x9d6a <vfprintf+0xa2>
    9d50:	8c 32       	cpi	r24, 0x2C	; 44
    9d52:	28 f4       	brcc	.+10     	; 0x9d5e <vfprintf+0x96>
    9d54:	80 32       	cpi	r24, 0x20	; 32
    9d56:	51 f0       	breq	.+20     	; 0x9d6c <vfprintf+0xa4>
    9d58:	83 32       	cpi	r24, 0x23	; 35
    9d5a:	71 f4       	brne	.+28     	; 0x9d78 <vfprintf+0xb0>
    9d5c:	0b c0       	rjmp	.+22     	; 0x9d74 <vfprintf+0xac>
    9d5e:	8d 32       	cpi	r24, 0x2D	; 45
    9d60:	39 f0       	breq	.+14     	; 0x9d70 <vfprintf+0xa8>
    9d62:	80 33       	cpi	r24, 0x30	; 48
    9d64:	49 f4       	brne	.+18     	; 0x9d78 <vfprintf+0xb0>
    9d66:	21 60       	ori	r18, 0x01	; 1
    9d68:	2c c0       	rjmp	.+88     	; 0x9dc2 <vfprintf+0xfa>
    9d6a:	22 60       	ori	r18, 0x02	; 2
    9d6c:	24 60       	ori	r18, 0x04	; 4
    9d6e:	29 c0       	rjmp	.+82     	; 0x9dc2 <vfprintf+0xfa>
    9d70:	28 60       	ori	r18, 0x08	; 8
    9d72:	27 c0       	rjmp	.+78     	; 0x9dc2 <vfprintf+0xfa>
    9d74:	20 61       	ori	r18, 0x10	; 16
    9d76:	25 c0       	rjmp	.+74     	; 0x9dc2 <vfprintf+0xfa>
    9d78:	27 fd       	sbrc	r18, 7
    9d7a:	2c c0       	rjmp	.+88     	; 0x9dd4 <vfprintf+0x10c>
    9d7c:	38 2f       	mov	r19, r24
    9d7e:	30 53       	subi	r19, 0x30	; 48
    9d80:	3a 30       	cpi	r19, 0x0A	; 10
    9d82:	98 f4       	brcc	.+38     	; 0x9daa <vfprintf+0xe2>
    9d84:	26 ff       	sbrs	r18, 6
    9d86:	08 c0       	rjmp	.+16     	; 0x9d98 <vfprintf+0xd0>
    9d88:	8e 2d       	mov	r24, r14
    9d8a:	88 0f       	add	r24, r24
    9d8c:	e8 2e       	mov	r14, r24
    9d8e:	ee 0c       	add	r14, r14
    9d90:	ee 0c       	add	r14, r14
    9d92:	e8 0e       	add	r14, r24
    9d94:	e3 0e       	add	r14, r19
    9d96:	15 c0       	rjmp	.+42     	; 0x9dc2 <vfprintf+0xfa>
    9d98:	8f 2d       	mov	r24, r15
    9d9a:	88 0f       	add	r24, r24
    9d9c:	f8 2e       	mov	r15, r24
    9d9e:	ff 0c       	add	r15, r15
    9da0:	ff 0c       	add	r15, r15
    9da2:	f8 0e       	add	r15, r24
    9da4:	f3 0e       	add	r15, r19
    9da6:	20 62       	ori	r18, 0x20	; 32
    9da8:	0c c0       	rjmp	.+24     	; 0x9dc2 <vfprintf+0xfa>
    9daa:	8e 32       	cpi	r24, 0x2E	; 46
    9dac:	21 f4       	brne	.+8      	; 0x9db6 <vfprintf+0xee>
    9dae:	26 fd       	sbrc	r18, 6
    9db0:	78 c1       	rjmp	.+752    	; 0xa0a2 <vfprintf+0x3da>
    9db2:	20 64       	ori	r18, 0x40	; 64
    9db4:	06 c0       	rjmp	.+12     	; 0x9dc2 <vfprintf+0xfa>
    9db6:	8c 36       	cpi	r24, 0x6C	; 108
    9db8:	11 f4       	brne	.+4      	; 0x9dbe <vfprintf+0xf6>
    9dba:	20 68       	ori	r18, 0x80	; 128
    9dbc:	02 c0       	rjmp	.+4      	; 0x9dc2 <vfprintf+0xfa>
    9dbe:	88 36       	cpi	r24, 0x68	; 104
    9dc0:	49 f4       	brne	.+18     	; 0x9dd4 <vfprintf+0x10c>
    9dc2:	f1 01       	movw	r30, r2
    9dc4:	93 fd       	sbrc	r25, 3
    9dc6:	85 91       	lpm	r24, Z+
    9dc8:	93 ff       	sbrs	r25, 3
    9dca:	81 91       	ld	r24, Z+
    9dcc:	1f 01       	movw	r2, r30
    9dce:	88 23       	and	r24, r24
    9dd0:	09 f0       	breq	.+2      	; 0x9dd4 <vfprintf+0x10c>
    9dd2:	ba cf       	rjmp	.-140    	; 0x9d48 <vfprintf+0x80>
    9dd4:	98 2f       	mov	r25, r24
    9dd6:	95 54       	subi	r25, 0x45	; 69
    9dd8:	93 30       	cpi	r25, 0x03	; 3
    9dda:	18 f0       	brcs	.+6      	; 0x9de2 <vfprintf+0x11a>
    9ddc:	90 52       	subi	r25, 0x20	; 32
    9dde:	93 30       	cpi	r25, 0x03	; 3
    9de0:	28 f4       	brcc	.+10     	; 0x9dec <vfprintf+0x124>
    9de2:	0c 5f       	subi	r16, 0xFC	; 252
    9de4:	1f 4f       	sbci	r17, 0xFF	; 255
    9de6:	ff e3       	ldi	r31, 0x3F	; 63
    9de8:	f9 83       	std	Y+1, r31	; 0x01
    9dea:	0d c0       	rjmp	.+26     	; 0x9e06 <vfprintf+0x13e>
    9dec:	83 36       	cpi	r24, 0x63	; 99
    9dee:	31 f0       	breq	.+12     	; 0x9dfc <vfprintf+0x134>
    9df0:	83 37       	cpi	r24, 0x73	; 115
    9df2:	71 f0       	breq	.+28     	; 0x9e10 <vfprintf+0x148>
    9df4:	83 35       	cpi	r24, 0x53	; 83
    9df6:	09 f0       	breq	.+2      	; 0x9dfa <vfprintf+0x132>
    9df8:	60 c0       	rjmp	.+192    	; 0x9eba <vfprintf+0x1f2>
    9dfa:	22 c0       	rjmp	.+68     	; 0x9e40 <vfprintf+0x178>
    9dfc:	f8 01       	movw	r30, r16
    9dfe:	80 81       	ld	r24, Z
    9e00:	89 83       	std	Y+1, r24	; 0x01
    9e02:	0e 5f       	subi	r16, 0xFE	; 254
    9e04:	1f 4f       	sbci	r17, 0xFF	; 255
    9e06:	42 01       	movw	r8, r4
    9e08:	71 e0       	ldi	r23, 0x01	; 1
    9e0a:	a7 2e       	mov	r10, r23
    9e0c:	b1 2c       	mov	r11, r1
    9e0e:	16 c0       	rjmp	.+44     	; 0x9e3c <vfprintf+0x174>
    9e10:	62 e0       	ldi	r22, 0x02	; 2
    9e12:	66 2e       	mov	r6, r22
    9e14:	71 2c       	mov	r7, r1
    9e16:	60 0e       	add	r6, r16
    9e18:	71 1e       	adc	r7, r17
    9e1a:	f8 01       	movw	r30, r16
    9e1c:	80 80       	ld	r8, Z
    9e1e:	91 80       	ldd	r9, Z+1	; 0x01
    9e20:	26 ff       	sbrs	r18, 6
    9e22:	03 c0       	rjmp	.+6      	; 0x9e2a <vfprintf+0x162>
    9e24:	6e 2d       	mov	r22, r14
    9e26:	70 e0       	ldi	r23, 0x00	; 0
    9e28:	02 c0       	rjmp	.+4      	; 0x9e2e <vfprintf+0x166>
    9e2a:	6f ef       	ldi	r22, 0xFF	; 255
    9e2c:	7f ef       	ldi	r23, 0xFF	; 255
    9e2e:	c4 01       	movw	r24, r8
    9e30:	2c 87       	std	Y+12, r18	; 0x0c
    9e32:	0e 94 af 50 	call	0xa15e	; 0xa15e <strnlen>
    9e36:	5c 01       	movw	r10, r24
    9e38:	83 01       	movw	r16, r6
    9e3a:	2c 85       	ldd	r18, Y+12	; 0x0c
    9e3c:	2f 77       	andi	r18, 0x7F	; 127
    9e3e:	17 c0       	rjmp	.+46     	; 0x9e6e <vfprintf+0x1a6>
    9e40:	52 e0       	ldi	r21, 0x02	; 2
    9e42:	65 2e       	mov	r6, r21
    9e44:	71 2c       	mov	r7, r1
    9e46:	60 0e       	add	r6, r16
    9e48:	71 1e       	adc	r7, r17
    9e4a:	f8 01       	movw	r30, r16
    9e4c:	80 80       	ld	r8, Z
    9e4e:	91 80       	ldd	r9, Z+1	; 0x01
    9e50:	26 ff       	sbrs	r18, 6
    9e52:	03 c0       	rjmp	.+6      	; 0x9e5a <vfprintf+0x192>
    9e54:	6e 2d       	mov	r22, r14
    9e56:	70 e0       	ldi	r23, 0x00	; 0
    9e58:	02 c0       	rjmp	.+4      	; 0x9e5e <vfprintf+0x196>
    9e5a:	6f ef       	ldi	r22, 0xFF	; 255
    9e5c:	7f ef       	ldi	r23, 0xFF	; 255
    9e5e:	c4 01       	movw	r24, r8
    9e60:	2c 87       	std	Y+12, r18	; 0x0c
    9e62:	0e 94 a4 50 	call	0xa148	; 0xa148 <strnlen_P>
    9e66:	5c 01       	movw	r10, r24
    9e68:	2c 85       	ldd	r18, Y+12	; 0x0c
    9e6a:	20 68       	ori	r18, 0x80	; 128
    9e6c:	83 01       	movw	r16, r6
    9e6e:	23 fd       	sbrc	r18, 3
    9e70:	20 c0       	rjmp	.+64     	; 0x9eb2 <vfprintf+0x1ea>
    9e72:	08 c0       	rjmp	.+16     	; 0x9e84 <vfprintf+0x1bc>
    9e74:	80 e2       	ldi	r24, 0x20	; 32
    9e76:	90 e0       	ldi	r25, 0x00	; 0
    9e78:	b6 01       	movw	r22, r12
    9e7a:	2c 87       	std	Y+12, r18	; 0x0c
    9e7c:	0e 94 ba 50 	call	0xa174	; 0xa174 <fputc>
    9e80:	fa 94       	dec	r15
    9e82:	2c 85       	ldd	r18, Y+12	; 0x0c
    9e84:	8f 2d       	mov	r24, r15
    9e86:	90 e0       	ldi	r25, 0x00	; 0
    9e88:	a8 16       	cp	r10, r24
    9e8a:	b9 06       	cpc	r11, r25
    9e8c:	98 f3       	brcs	.-26     	; 0x9e74 <vfprintf+0x1ac>
    9e8e:	11 c0       	rjmp	.+34     	; 0x9eb2 <vfprintf+0x1ea>
    9e90:	f4 01       	movw	r30, r8
    9e92:	27 fd       	sbrc	r18, 7
    9e94:	85 91       	lpm	r24, Z+
    9e96:	27 ff       	sbrs	r18, 7
    9e98:	81 91       	ld	r24, Z+
    9e9a:	4f 01       	movw	r8, r30
    9e9c:	90 e0       	ldi	r25, 0x00	; 0
    9e9e:	b6 01       	movw	r22, r12
    9ea0:	2c 87       	std	Y+12, r18	; 0x0c
    9ea2:	0e 94 ba 50 	call	0xa174	; 0xa174 <fputc>
    9ea6:	2c 85       	ldd	r18, Y+12	; 0x0c
    9ea8:	f1 10       	cpse	r15, r1
    9eaa:	fa 94       	dec	r15
    9eac:	08 94       	sec
    9eae:	a1 08       	sbc	r10, r1
    9eb0:	b1 08       	sbc	r11, r1
    9eb2:	a1 14       	cp	r10, r1
    9eb4:	b1 04       	cpc	r11, r1
    9eb6:	61 f7       	brne	.-40     	; 0x9e90 <vfprintf+0x1c8>
    9eb8:	f1 c0       	rjmp	.+482    	; 0xa09c <vfprintf+0x3d4>
    9eba:	84 36       	cpi	r24, 0x64	; 100
    9ebc:	11 f0       	breq	.+4      	; 0x9ec2 <vfprintf+0x1fa>
    9ebe:	89 36       	cpi	r24, 0x69	; 105
    9ec0:	49 f5       	brne	.+82     	; 0x9f14 <vfprintf+0x24c>
    9ec2:	27 ff       	sbrs	r18, 7
    9ec4:	08 c0       	rjmp	.+16     	; 0x9ed6 <vfprintf+0x20e>
    9ec6:	f8 01       	movw	r30, r16
    9ec8:	60 81       	ld	r22, Z
    9eca:	71 81       	ldd	r23, Z+1	; 0x01
    9ecc:	82 81       	ldd	r24, Z+2	; 0x02
    9ece:	93 81       	ldd	r25, Z+3	; 0x03
    9ed0:	0c 5f       	subi	r16, 0xFC	; 252
    9ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    9ed4:	09 c0       	rjmp	.+18     	; 0x9ee8 <vfprintf+0x220>
    9ed6:	f8 01       	movw	r30, r16
    9ed8:	60 81       	ld	r22, Z
    9eda:	71 81       	ldd	r23, Z+1	; 0x01
    9edc:	88 27       	eor	r24, r24
    9ede:	77 fd       	sbrc	r23, 7
    9ee0:	80 95       	com	r24
    9ee2:	98 2f       	mov	r25, r24
    9ee4:	0e 5f       	subi	r16, 0xFE	; 254
    9ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    9ee8:	4f e6       	ldi	r20, 0x6F	; 111
    9eea:	b4 2e       	mov	r11, r20
    9eec:	b2 22       	and	r11, r18
    9eee:	97 ff       	sbrs	r25, 7
    9ef0:	09 c0       	rjmp	.+18     	; 0x9f04 <vfprintf+0x23c>
    9ef2:	90 95       	com	r25
    9ef4:	80 95       	com	r24
    9ef6:	70 95       	com	r23
    9ef8:	61 95       	neg	r22
    9efa:	7f 4f       	sbci	r23, 0xFF	; 255
    9efc:	8f 4f       	sbci	r24, 0xFF	; 255
    9efe:	9f 4f       	sbci	r25, 0xFF	; 255
    9f00:	f0 e8       	ldi	r31, 0x80	; 128
    9f02:	bf 2a       	or	r11, r31
    9f04:	a2 01       	movw	r20, r4
    9f06:	2a e0       	ldi	r18, 0x0A	; 10
    9f08:	30 e0       	ldi	r19, 0x00	; 0
    9f0a:	0e 94 e6 50 	call	0xa1cc	; 0xa1cc <__ultoa_invert>
    9f0e:	78 2e       	mov	r7, r24
    9f10:	74 18       	sub	r7, r4
    9f12:	45 c0       	rjmp	.+138    	; 0x9f9e <vfprintf+0x2d6>
    9f14:	85 37       	cpi	r24, 0x75	; 117
    9f16:	31 f4       	brne	.+12     	; 0x9f24 <vfprintf+0x25c>
    9f18:	3f ee       	ldi	r19, 0xEF	; 239
    9f1a:	b3 2e       	mov	r11, r19
    9f1c:	b2 22       	and	r11, r18
    9f1e:	2a e0       	ldi	r18, 0x0A	; 10
    9f20:	30 e0       	ldi	r19, 0x00	; 0
    9f22:	25 c0       	rjmp	.+74     	; 0x9f6e <vfprintf+0x2a6>
    9f24:	99 ef       	ldi	r25, 0xF9	; 249
    9f26:	b9 2e       	mov	r11, r25
    9f28:	b2 22       	and	r11, r18
    9f2a:	8f 36       	cpi	r24, 0x6F	; 111
    9f2c:	c1 f0       	breq	.+48     	; 0x9f5e <vfprintf+0x296>
    9f2e:	80 37       	cpi	r24, 0x70	; 112
    9f30:	20 f4       	brcc	.+8      	; 0x9f3a <vfprintf+0x272>
    9f32:	88 35       	cpi	r24, 0x58	; 88
    9f34:	09 f0       	breq	.+2      	; 0x9f38 <vfprintf+0x270>
    9f36:	b5 c0       	rjmp	.+362    	; 0xa0a2 <vfprintf+0x3da>
    9f38:	0d c0       	rjmp	.+26     	; 0x9f54 <vfprintf+0x28c>
    9f3a:	80 37       	cpi	r24, 0x70	; 112
    9f3c:	21 f0       	breq	.+8      	; 0x9f46 <vfprintf+0x27e>
    9f3e:	88 37       	cpi	r24, 0x78	; 120
    9f40:	09 f0       	breq	.+2      	; 0x9f44 <vfprintf+0x27c>
    9f42:	af c0       	rjmp	.+350    	; 0xa0a2 <vfprintf+0x3da>
    9f44:	02 c0       	rjmp	.+4      	; 0x9f4a <vfprintf+0x282>
    9f46:	20 e1       	ldi	r18, 0x10	; 16
    9f48:	b2 2a       	or	r11, r18
    9f4a:	b4 fe       	sbrs	r11, 4
    9f4c:	0b c0       	rjmp	.+22     	; 0x9f64 <vfprintf+0x29c>
    9f4e:	84 e0       	ldi	r24, 0x04	; 4
    9f50:	b8 2a       	or	r11, r24
    9f52:	08 c0       	rjmp	.+16     	; 0x9f64 <vfprintf+0x29c>
    9f54:	b4 fe       	sbrs	r11, 4
    9f56:	09 c0       	rjmp	.+18     	; 0x9f6a <vfprintf+0x2a2>
    9f58:	e6 e0       	ldi	r30, 0x06	; 6
    9f5a:	be 2a       	or	r11, r30
    9f5c:	06 c0       	rjmp	.+12     	; 0x9f6a <vfprintf+0x2a2>
    9f5e:	28 e0       	ldi	r18, 0x08	; 8
    9f60:	30 e0       	ldi	r19, 0x00	; 0
    9f62:	05 c0       	rjmp	.+10     	; 0x9f6e <vfprintf+0x2a6>
    9f64:	20 e1       	ldi	r18, 0x10	; 16
    9f66:	30 e0       	ldi	r19, 0x00	; 0
    9f68:	02 c0       	rjmp	.+4      	; 0x9f6e <vfprintf+0x2a6>
    9f6a:	20 e1       	ldi	r18, 0x10	; 16
    9f6c:	32 e0       	ldi	r19, 0x02	; 2
    9f6e:	b7 fe       	sbrs	r11, 7
    9f70:	08 c0       	rjmp	.+16     	; 0x9f82 <vfprintf+0x2ba>
    9f72:	f8 01       	movw	r30, r16
    9f74:	60 81       	ld	r22, Z
    9f76:	71 81       	ldd	r23, Z+1	; 0x01
    9f78:	82 81       	ldd	r24, Z+2	; 0x02
    9f7a:	93 81       	ldd	r25, Z+3	; 0x03
    9f7c:	0c 5f       	subi	r16, 0xFC	; 252
    9f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    9f80:	07 c0       	rjmp	.+14     	; 0x9f90 <vfprintf+0x2c8>
    9f82:	f8 01       	movw	r30, r16
    9f84:	60 81       	ld	r22, Z
    9f86:	71 81       	ldd	r23, Z+1	; 0x01
    9f88:	80 e0       	ldi	r24, 0x00	; 0
    9f8a:	90 e0       	ldi	r25, 0x00	; 0
    9f8c:	0e 5f       	subi	r16, 0xFE	; 254
    9f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    9f90:	a2 01       	movw	r20, r4
    9f92:	0e 94 e6 50 	call	0xa1cc	; 0xa1cc <__ultoa_invert>
    9f96:	78 2e       	mov	r7, r24
    9f98:	74 18       	sub	r7, r4
    9f9a:	ff e7       	ldi	r31, 0x7F	; 127
    9f9c:	bf 22       	and	r11, r31
    9f9e:	b6 fe       	sbrs	r11, 6
    9fa0:	0b c0       	rjmp	.+22     	; 0x9fb8 <vfprintf+0x2f0>
    9fa2:	2e ef       	ldi	r18, 0xFE	; 254
    9fa4:	b2 22       	and	r11, r18
    9fa6:	7e 14       	cp	r7, r14
    9fa8:	38 f4       	brcc	.+14     	; 0x9fb8 <vfprintf+0x2f0>
    9faa:	b4 fe       	sbrs	r11, 4
    9fac:	07 c0       	rjmp	.+14     	; 0x9fbc <vfprintf+0x2f4>
    9fae:	b2 fc       	sbrc	r11, 2
    9fb0:	05 c0       	rjmp	.+10     	; 0x9fbc <vfprintf+0x2f4>
    9fb2:	8f ee       	ldi	r24, 0xEF	; 239
    9fb4:	b8 22       	and	r11, r24
    9fb6:	02 c0       	rjmp	.+4      	; 0x9fbc <vfprintf+0x2f4>
    9fb8:	a7 2c       	mov	r10, r7
    9fba:	01 c0       	rjmp	.+2      	; 0x9fbe <vfprintf+0x2f6>
    9fbc:	ae 2c       	mov	r10, r14
    9fbe:	8b 2d       	mov	r24, r11
    9fc0:	90 e0       	ldi	r25, 0x00	; 0
    9fc2:	b4 fe       	sbrs	r11, 4
    9fc4:	0d c0       	rjmp	.+26     	; 0x9fe0 <vfprintf+0x318>
    9fc6:	fe 01       	movw	r30, r28
    9fc8:	e7 0d       	add	r30, r7
    9fca:	f1 1d       	adc	r31, r1
    9fcc:	20 81       	ld	r18, Z
    9fce:	20 33       	cpi	r18, 0x30	; 48
    9fd0:	19 f4       	brne	.+6      	; 0x9fd8 <vfprintf+0x310>
    9fd2:	e9 ee       	ldi	r30, 0xE9	; 233
    9fd4:	be 22       	and	r11, r30
    9fd6:	09 c0       	rjmp	.+18     	; 0x9fea <vfprintf+0x322>
    9fd8:	a3 94       	inc	r10
    9fda:	b2 fe       	sbrs	r11, 2
    9fdc:	06 c0       	rjmp	.+12     	; 0x9fea <vfprintf+0x322>
    9fde:	04 c0       	rjmp	.+8      	; 0x9fe8 <vfprintf+0x320>
    9fe0:	86 78       	andi	r24, 0x86	; 134
    9fe2:	90 70       	andi	r25, 0x00	; 0
    9fe4:	00 97       	sbiw	r24, 0x00	; 0
    9fe6:	09 f0       	breq	.+2      	; 0x9fea <vfprintf+0x322>
    9fe8:	a3 94       	inc	r10
    9fea:	8b 2c       	mov	r8, r11
    9fec:	99 24       	eor	r9, r9
    9fee:	b3 fc       	sbrc	r11, 3
    9ff0:	14 c0       	rjmp	.+40     	; 0xa01a <vfprintf+0x352>
    9ff2:	b0 fe       	sbrs	r11, 0
    9ff4:	0f c0       	rjmp	.+30     	; 0xa014 <vfprintf+0x34c>
    9ff6:	af 14       	cp	r10, r15
    9ff8:	28 f4       	brcc	.+10     	; 0xa004 <vfprintf+0x33c>
    9ffa:	e7 2c       	mov	r14, r7
    9ffc:	ef 0c       	add	r14, r15
    9ffe:	ea 18       	sub	r14, r10
    a000:	af 2c       	mov	r10, r15
    a002:	08 c0       	rjmp	.+16     	; 0xa014 <vfprintf+0x34c>
    a004:	e7 2c       	mov	r14, r7
    a006:	06 c0       	rjmp	.+12     	; 0xa014 <vfprintf+0x34c>
    a008:	80 e2       	ldi	r24, 0x20	; 32
    a00a:	90 e0       	ldi	r25, 0x00	; 0
    a00c:	b6 01       	movw	r22, r12
    a00e:	0e 94 ba 50 	call	0xa174	; 0xa174 <fputc>
    a012:	a3 94       	inc	r10
    a014:	af 14       	cp	r10, r15
    a016:	c0 f3       	brcs	.-16     	; 0xa008 <vfprintf+0x340>
    a018:	04 c0       	rjmp	.+8      	; 0xa022 <vfprintf+0x35a>
    a01a:	af 14       	cp	r10, r15
    a01c:	10 f4       	brcc	.+4      	; 0xa022 <vfprintf+0x35a>
    a01e:	fa 18       	sub	r15, r10
    a020:	01 c0       	rjmp	.+2      	; 0xa024 <vfprintf+0x35c>
    a022:	ff 24       	eor	r15, r15
    a024:	84 fe       	sbrs	r8, 4
    a026:	0f c0       	rjmp	.+30     	; 0xa046 <vfprintf+0x37e>
    a028:	80 e3       	ldi	r24, 0x30	; 48
    a02a:	90 e0       	ldi	r25, 0x00	; 0
    a02c:	b6 01       	movw	r22, r12
    a02e:	0e 94 ba 50 	call	0xa174	; 0xa174 <fputc>
    a032:	82 fe       	sbrs	r8, 2
    a034:	1f c0       	rjmp	.+62     	; 0xa074 <vfprintf+0x3ac>
    a036:	81 fe       	sbrs	r8, 1
    a038:	03 c0       	rjmp	.+6      	; 0xa040 <vfprintf+0x378>
    a03a:	88 e5       	ldi	r24, 0x58	; 88
    a03c:	90 e0       	ldi	r25, 0x00	; 0
    a03e:	10 c0       	rjmp	.+32     	; 0xa060 <vfprintf+0x398>
    a040:	88 e7       	ldi	r24, 0x78	; 120
    a042:	90 e0       	ldi	r25, 0x00	; 0
    a044:	0d c0       	rjmp	.+26     	; 0xa060 <vfprintf+0x398>
    a046:	c4 01       	movw	r24, r8
    a048:	86 78       	andi	r24, 0x86	; 134
    a04a:	90 70       	andi	r25, 0x00	; 0
    a04c:	00 97       	sbiw	r24, 0x00	; 0
    a04e:	91 f0       	breq	.+36     	; 0xa074 <vfprintf+0x3ac>
    a050:	81 fc       	sbrc	r8, 1
    a052:	02 c0       	rjmp	.+4      	; 0xa058 <vfprintf+0x390>
    a054:	80 e2       	ldi	r24, 0x20	; 32
    a056:	01 c0       	rjmp	.+2      	; 0xa05a <vfprintf+0x392>
    a058:	8b e2       	ldi	r24, 0x2B	; 43
    a05a:	b7 fc       	sbrc	r11, 7
    a05c:	8d e2       	ldi	r24, 0x2D	; 45
    a05e:	90 e0       	ldi	r25, 0x00	; 0
    a060:	b6 01       	movw	r22, r12
    a062:	0e 94 ba 50 	call	0xa174	; 0xa174 <fputc>
    a066:	06 c0       	rjmp	.+12     	; 0xa074 <vfprintf+0x3ac>
    a068:	80 e3       	ldi	r24, 0x30	; 48
    a06a:	90 e0       	ldi	r25, 0x00	; 0
    a06c:	b6 01       	movw	r22, r12
    a06e:	0e 94 ba 50 	call	0xa174	; 0xa174 <fputc>
    a072:	ea 94       	dec	r14
    a074:	7e 14       	cp	r7, r14
    a076:	c0 f3       	brcs	.-16     	; 0xa068 <vfprintf+0x3a0>
    a078:	7a 94       	dec	r7
    a07a:	f2 01       	movw	r30, r4
    a07c:	e7 0d       	add	r30, r7
    a07e:	f1 1d       	adc	r31, r1
    a080:	80 81       	ld	r24, Z
    a082:	90 e0       	ldi	r25, 0x00	; 0
    a084:	b6 01       	movw	r22, r12
    a086:	0e 94 ba 50 	call	0xa174	; 0xa174 <fputc>
    a08a:	77 20       	and	r7, r7
    a08c:	a9 f7       	brne	.-22     	; 0xa078 <vfprintf+0x3b0>
    a08e:	06 c0       	rjmp	.+12     	; 0xa09c <vfprintf+0x3d4>
    a090:	80 e2       	ldi	r24, 0x20	; 32
    a092:	90 e0       	ldi	r25, 0x00	; 0
    a094:	b6 01       	movw	r22, r12
    a096:	0e 94 ba 50 	call	0xa174	; 0xa174 <fputc>
    a09a:	fa 94       	dec	r15
    a09c:	ff 20       	and	r15, r15
    a09e:	c1 f7       	brne	.-16     	; 0xa090 <vfprintf+0x3c8>
    a0a0:	37 ce       	rjmp	.-914    	; 0x9d10 <vfprintf+0x48>
    a0a2:	f6 01       	movw	r30, r12
    a0a4:	26 81       	ldd	r18, Z+6	; 0x06
    a0a6:	37 81       	ldd	r19, Z+7	; 0x07
    a0a8:	02 c0       	rjmp	.+4      	; 0xa0ae <vfprintf+0x3e6>
    a0aa:	2f ef       	ldi	r18, 0xFF	; 255
    a0ac:	3f ef       	ldi	r19, 0xFF	; 255
    a0ae:	c9 01       	movw	r24, r18
    a0b0:	2c 96       	adiw	r28, 0x0c	; 12
    a0b2:	cd bf       	out	0x3d, r28	; 61
    a0b4:	de bf       	out	0x3e, r29	; 62
    a0b6:	cf 91       	pop	r28
    a0b8:	df 91       	pop	r29
    a0ba:	1f 91       	pop	r17
    a0bc:	0f 91       	pop	r16
    a0be:	ff 90       	pop	r15
    a0c0:	ef 90       	pop	r14
    a0c2:	df 90       	pop	r13
    a0c4:	cf 90       	pop	r12
    a0c6:	bf 90       	pop	r11
    a0c8:	af 90       	pop	r10
    a0ca:	9f 90       	pop	r9
    a0cc:	8f 90       	pop	r8
    a0ce:	7f 90       	pop	r7
    a0d0:	6f 90       	pop	r6
    a0d2:	5f 90       	pop	r5
    a0d4:	4f 90       	pop	r4
    a0d6:	3f 90       	pop	r3
    a0d8:	2f 90       	pop	r2
    a0da:	08 95       	ret

0000a0dc <__eerd_byte_x128a1>:
    a0dc:	03 d0       	rcall	.+6      	; 0xa0e4 <eeprom_mapen>
    a0de:	80 81       	ld	r24, Z
    a0e0:	99 27       	eor	r25, r25
    a0e2:	08 95       	ret

0000a0e4 <eeprom_mapen>:
    a0e4:	e0 ec       	ldi	r30, 0xC0	; 192
    a0e6:	f1 e0       	ldi	r31, 0x01	; 1
    a0e8:	37 85       	ldd	r19, Z+15	; 0x0f
    a0ea:	37 fd       	sbrc	r19, 7
    a0ec:	fd cf       	rjmp	.-6      	; 0xa0e8 <eeprom_mapen+0x4>
    a0ee:	34 85       	ldd	r19, Z+12	; 0x0c
    a0f0:	38 60       	ori	r19, 0x08	; 8
    a0f2:	34 87       	std	Z+12, r19	; 0x0c
    a0f4:	fc 01       	movw	r30, r24
    a0f6:	e0 50       	subi	r30, 0x00	; 0
    a0f8:	f0 4f       	sbci	r31, 0xF0	; 240
    a0fa:	08 95       	ret

0000a0fc <__eewr_byte_x128a1>:
    a0fc:	26 2f       	mov	r18, r22

0000a0fe <__eewr_r18_x128a1>:
    a0fe:	e0 ec       	ldi	r30, 0xC0	; 192
    a100:	f1 e0       	ldi	r31, 0x01	; 1
    a102:	37 85       	ldd	r19, Z+15	; 0x0f
    a104:	37 fd       	sbrc	r19, 7
    a106:	fd cf       	rjmp	.-6      	; 0xa102 <__eewr_r18_x128a1+0x4>
    a108:	34 85       	ldd	r19, Z+12	; 0x0c
    a10a:	37 7f       	andi	r19, 0xF7	; 247
    a10c:	34 87       	std	Z+12, r19	; 0x0c
    a10e:	37 85       	ldd	r19, Z+15	; 0x0f
    a110:	31 ff       	sbrs	r19, 1
    a112:	09 c0       	rjmp	.+18     	; 0xa126 <__eewr_r18_x128a1+0x28>
    a114:	36 e3       	ldi	r19, 0x36	; 54
    a116:	32 87       	std	Z+10, r19	; 0x0a
    a118:	38 ed       	ldi	r19, 0xD8	; 216
    a11a:	34 bf       	out	0x34, r19	; 52
    a11c:	31 e0       	ldi	r19, 0x01	; 1
    a11e:	33 87       	std	Z+11, r19	; 0x0b
    a120:	37 85       	ldd	r19, Z+15	; 0x0f
    a122:	37 fd       	sbrc	r19, 7
    a124:	fd cf       	rjmp	.-6      	; 0xa120 <__eewr_r18_x128a1+0x22>
    a126:	33 e3       	ldi	r19, 0x33	; 51
    a128:	32 87       	std	Z+10, r19	; 0x0a
    a12a:	80 83       	st	Z, r24
    a12c:	91 83       	std	Z+1, r25	; 0x01
    a12e:	12 82       	std	Z+2, r1	; 0x02
    a130:	24 83       	std	Z+4, r18	; 0x04
    a132:	25 e3       	ldi	r18, 0x35	; 53
    a134:	22 87       	std	Z+10, r18	; 0x0a
    a136:	28 ed       	ldi	r18, 0xD8	; 216
    a138:	31 e0       	ldi	r19, 0x01	; 1
    a13a:	24 bf       	out	0x34, r18	; 52
    a13c:	33 87       	std	Z+11, r19	; 0x0b
    a13e:	01 96       	adiw	r24, 0x01	; 1
    a140:	08 95       	ret

0000a142 <__ctype_isfalse>:
    a142:	99 27       	eor	r25, r25
    a144:	88 27       	eor	r24, r24

0000a146 <__ctype_istrue>:
    a146:	08 95       	ret

0000a148 <strnlen_P>:
    a148:	fc 01       	movw	r30, r24
    a14a:	05 90       	lpm	r0, Z+
    a14c:	61 50       	subi	r22, 0x01	; 1
    a14e:	70 40       	sbci	r23, 0x00	; 0
    a150:	01 10       	cpse	r0, r1
    a152:	d8 f7       	brcc	.-10     	; 0xa14a <strnlen_P+0x2>
    a154:	80 95       	com	r24
    a156:	90 95       	com	r25
    a158:	8e 0f       	add	r24, r30
    a15a:	9f 1f       	adc	r25, r31
    a15c:	08 95       	ret

0000a15e <strnlen>:
    a15e:	fc 01       	movw	r30, r24
    a160:	61 50       	subi	r22, 0x01	; 1
    a162:	70 40       	sbci	r23, 0x00	; 0
    a164:	01 90       	ld	r0, Z+
    a166:	01 10       	cpse	r0, r1
    a168:	d8 f7       	brcc	.-10     	; 0xa160 <strnlen+0x2>
    a16a:	80 95       	com	r24
    a16c:	90 95       	com	r25
    a16e:	8e 0f       	add	r24, r30
    a170:	9f 1f       	adc	r25, r31
    a172:	08 95       	ret

0000a174 <fputc>:
    a174:	0f 93       	push	r16
    a176:	1f 93       	push	r17
    a178:	cf 93       	push	r28
    a17a:	df 93       	push	r29
    a17c:	8c 01       	movw	r16, r24
    a17e:	eb 01       	movw	r28, r22
    a180:	8b 81       	ldd	r24, Y+3	; 0x03
    a182:	81 ff       	sbrs	r24, 1
    a184:	1b c0       	rjmp	.+54     	; 0xa1bc <fputc+0x48>
    a186:	82 ff       	sbrs	r24, 2
    a188:	0d c0       	rjmp	.+26     	; 0xa1a4 <fputc+0x30>
    a18a:	2e 81       	ldd	r18, Y+6	; 0x06
    a18c:	3f 81       	ldd	r19, Y+7	; 0x07
    a18e:	8c 81       	ldd	r24, Y+4	; 0x04
    a190:	9d 81       	ldd	r25, Y+5	; 0x05
    a192:	28 17       	cp	r18, r24
    a194:	39 07       	cpc	r19, r25
    a196:	64 f4       	brge	.+24     	; 0xa1b0 <fputc+0x3c>
    a198:	e8 81       	ld	r30, Y
    a19a:	f9 81       	ldd	r31, Y+1	; 0x01
    a19c:	01 93       	st	Z+, r16
    a19e:	e8 83       	st	Y, r30
    a1a0:	f9 83       	std	Y+1, r31	; 0x01
    a1a2:	06 c0       	rjmp	.+12     	; 0xa1b0 <fputc+0x3c>
    a1a4:	e8 85       	ldd	r30, Y+8	; 0x08
    a1a6:	f9 85       	ldd	r31, Y+9	; 0x09
    a1a8:	80 2f       	mov	r24, r16
    a1aa:	19 95       	eicall
    a1ac:	00 97       	sbiw	r24, 0x00	; 0
    a1ae:	31 f4       	brne	.+12     	; 0xa1bc <fputc+0x48>
    a1b0:	8e 81       	ldd	r24, Y+6	; 0x06
    a1b2:	9f 81       	ldd	r25, Y+7	; 0x07
    a1b4:	01 96       	adiw	r24, 0x01	; 1
    a1b6:	8e 83       	std	Y+6, r24	; 0x06
    a1b8:	9f 83       	std	Y+7, r25	; 0x07
    a1ba:	02 c0       	rjmp	.+4      	; 0xa1c0 <fputc+0x4c>
    a1bc:	0f ef       	ldi	r16, 0xFF	; 255
    a1be:	1f ef       	ldi	r17, 0xFF	; 255
    a1c0:	c8 01       	movw	r24, r16
    a1c2:	df 91       	pop	r29
    a1c4:	cf 91       	pop	r28
    a1c6:	1f 91       	pop	r17
    a1c8:	0f 91       	pop	r16
    a1ca:	08 95       	ret

0000a1cc <__ultoa_invert>:
    a1cc:	fa 01       	movw	r30, r20
    a1ce:	aa 27       	eor	r26, r26
    a1d0:	28 30       	cpi	r18, 0x08	; 8
    a1d2:	51 f1       	breq	.+84     	; 0xa228 <__ultoa_invert+0x5c>
    a1d4:	20 31       	cpi	r18, 0x10	; 16
    a1d6:	81 f1       	breq	.+96     	; 0xa238 <__ultoa_invert+0x6c>
    a1d8:	e8 94       	clt
    a1da:	6f 93       	push	r22
    a1dc:	6e 7f       	andi	r22, 0xFE	; 254
    a1de:	6e 5f       	subi	r22, 0xFE	; 254
    a1e0:	7f 4f       	sbci	r23, 0xFF	; 255
    a1e2:	8f 4f       	sbci	r24, 0xFF	; 255
    a1e4:	9f 4f       	sbci	r25, 0xFF	; 255
    a1e6:	af 4f       	sbci	r26, 0xFF	; 255
    a1e8:	b1 e0       	ldi	r27, 0x01	; 1
    a1ea:	3e d0       	rcall	.+124    	; 0xa268 <__ultoa_invert+0x9c>
    a1ec:	b4 e0       	ldi	r27, 0x04	; 4
    a1ee:	3c d0       	rcall	.+120    	; 0xa268 <__ultoa_invert+0x9c>
    a1f0:	67 0f       	add	r22, r23
    a1f2:	78 1f       	adc	r23, r24
    a1f4:	89 1f       	adc	r24, r25
    a1f6:	9a 1f       	adc	r25, r26
    a1f8:	a1 1d       	adc	r26, r1
    a1fa:	68 0f       	add	r22, r24
    a1fc:	79 1f       	adc	r23, r25
    a1fe:	8a 1f       	adc	r24, r26
    a200:	91 1d       	adc	r25, r1
    a202:	a1 1d       	adc	r26, r1
    a204:	6a 0f       	add	r22, r26
    a206:	71 1d       	adc	r23, r1
    a208:	81 1d       	adc	r24, r1
    a20a:	91 1d       	adc	r25, r1
    a20c:	a1 1d       	adc	r26, r1
    a20e:	20 d0       	rcall	.+64     	; 0xa250 <__ultoa_invert+0x84>
    a210:	09 f4       	brne	.+2      	; 0xa214 <__ultoa_invert+0x48>
    a212:	68 94       	set
    a214:	3f 91       	pop	r19
    a216:	2a e0       	ldi	r18, 0x0A	; 10
    a218:	26 9f       	mul	r18, r22
    a21a:	11 24       	eor	r1, r1
    a21c:	30 19       	sub	r19, r0
    a21e:	30 5d       	subi	r19, 0xD0	; 208
    a220:	31 93       	st	Z+, r19
    a222:	de f6       	brtc	.-74     	; 0xa1da <__ultoa_invert+0xe>
    a224:	cf 01       	movw	r24, r30
    a226:	08 95       	ret
    a228:	46 2f       	mov	r20, r22
    a22a:	47 70       	andi	r20, 0x07	; 7
    a22c:	40 5d       	subi	r20, 0xD0	; 208
    a22e:	41 93       	st	Z+, r20
    a230:	b3 e0       	ldi	r27, 0x03	; 3
    a232:	0f d0       	rcall	.+30     	; 0xa252 <__ultoa_invert+0x86>
    a234:	c9 f7       	brne	.-14     	; 0xa228 <__ultoa_invert+0x5c>
    a236:	f6 cf       	rjmp	.-20     	; 0xa224 <__ultoa_invert+0x58>
    a238:	46 2f       	mov	r20, r22
    a23a:	4f 70       	andi	r20, 0x0F	; 15
    a23c:	40 5d       	subi	r20, 0xD0	; 208
    a23e:	4a 33       	cpi	r20, 0x3A	; 58
    a240:	18 f0       	brcs	.+6      	; 0xa248 <__ultoa_invert+0x7c>
    a242:	49 5d       	subi	r20, 0xD9	; 217
    a244:	31 fd       	sbrc	r19, 1
    a246:	40 52       	subi	r20, 0x20	; 32
    a248:	41 93       	st	Z+, r20
    a24a:	02 d0       	rcall	.+4      	; 0xa250 <__ultoa_invert+0x84>
    a24c:	a9 f7       	brne	.-22     	; 0xa238 <__ultoa_invert+0x6c>
    a24e:	ea cf       	rjmp	.-44     	; 0xa224 <__ultoa_invert+0x58>
    a250:	b4 e0       	ldi	r27, 0x04	; 4
    a252:	a6 95       	lsr	r26
    a254:	97 95       	ror	r25
    a256:	87 95       	ror	r24
    a258:	77 95       	ror	r23
    a25a:	67 95       	ror	r22
    a25c:	ba 95       	dec	r27
    a25e:	c9 f7       	brne	.-14     	; 0xa252 <__ultoa_invert+0x86>
    a260:	00 97       	sbiw	r24, 0x00	; 0
    a262:	61 05       	cpc	r22, r1
    a264:	71 05       	cpc	r23, r1
    a266:	08 95       	ret
    a268:	9b 01       	movw	r18, r22
    a26a:	ac 01       	movw	r20, r24
    a26c:	0a 2e       	mov	r0, r26
    a26e:	06 94       	lsr	r0
    a270:	57 95       	ror	r21
    a272:	47 95       	ror	r20
    a274:	37 95       	ror	r19
    a276:	27 95       	ror	r18
    a278:	ba 95       	dec	r27
    a27a:	c9 f7       	brne	.-14     	; 0xa26e <__ultoa_invert+0xa2>
    a27c:	62 0f       	add	r22, r18
    a27e:	73 1f       	adc	r23, r19
    a280:	84 1f       	adc	r24, r20
    a282:	95 1f       	adc	r25, r21
    a284:	a0 1d       	adc	r26, r0
    a286:	08 95       	ret

0000a288 <_exit>:
    a288:	f8 94       	cli

0000a28a <__stop_program>:
    a28a:	ff cf       	rjmp	.-2      	; 0xa28a <__stop_program>
